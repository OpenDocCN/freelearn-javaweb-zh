["```java\npublic class DeviceFilterFactory {\n\n   private String deviceName;\n\n @Factory\n   public Filter getFilter() {\n      PhraseQuery query = new PhraseQuery();\n      StringTokenizertokenzier = new StringTokenizer(deviceName);\n      while(tokenzier.hasMoreTokens()) {\n         Term term = new Term(\n            \"supportedDevices.name\", tokenzier.nextToken());\n         query.add(term);\n      }\n Filter filter = new QueryWrapperFilter(query);\n      return new CachingWrapperFilter(filter);\n   }\n\n   public void setDeviceName(String deviceName) {\n      this.deviceName = deviceName.toLowerCase();\n   }\n\n}\n```", "```java\n...\n@Key\nPublic FilterKey getKey() {\n   DeviceFilterKey key = new DeviceFilterKey();\n   key.setDeviceName(this.deviceName);\n   return key;\n}\n...\n```", "```java\npublic class DeviceFilterKey extends FilterKey {\n\n   private String deviceName;\n\n @Override\n public boolean equals(Object otherKey) {\n      if(this.deviceName == null\n           || !(otherKey instanceof DeviceFilterKey)) {\n         return false;\n      }\n      DeviceFilterKeyotherDeviceFilterKey =\n           (DeviceFilterKey) otherKey;\n      return otherDeviceFilterKey.deviceName != null\n              && this.deviceName.equals(otherDeviceFilterKey.deviceName);\n   }\n\n @Override\n public int hashCode() {\n      if(this.deviceName == null) {\n         return 0;\n      }\n      return this.deviceName.hashCode();\n   }\n\n   // GETTER AND SETTER FOR deviceName...\n}\n```", "```java\n...\n@FullTextFilterDefs({\n   @FullTextFilterDef(\n      name=\"deviceName\", impl=DeviceFilterFactory.class\n   )\n})\npublic class App {\n...\n```", "```java\n...\nif(selectedDevice != null && !selectedDevice.equals(\"all\")) {\n   hibernateQuery.enableFullTextFilter(\"deviceName\")\n      .setParameter(\"deviceName\", selectedDevice);\n}\n...\n```", "```java\n...\nhibernateQuery.setProjection(\"id\", \"name\", \"description\", \"image\");\n...\n```", "```java\n...\nhibernateQuery.setResultTransformer(\n   newAliasToBeanResultTransformer(App.class) );\n...\n```", "```java\n...\n@Field(store=Store.COMPRESS)\nprivate String description;\n...\n```", "```java\n...\n@Column\n@Field\nprivate String category;\n...\n```", "```java\n...\n// Create a faceting request\nFacetingRequestcategoryFacetingRequest =\n queryBuilder\n .facet()\n   .name(\"categoryFacet\")\n   .onField(\"category\")\n   .discrete()\n   .orderedBy(FacetSortOrder.FIELD_VALUE)\n   .includeZeroCounts(false)\n   .createFacetingRequest();\n\n// Enable it for the FullTextQuery object\nhibernateQuery.getFacetManager().enableFaceting(\n   categoryFacetingRequest);\n...\n```", "```java\n...\nList<App> apps = hibernateQuery.list();\n\nList<Facet> categoryFacets =\n   hibernateQuery.getFacetManager().getFacets(\"categoryFacet\");\n...\n```", "```java\n...\nMap<String, Integer> categories = new TreeMap<String, Integer>();\nfor(Facet categoryFacet : categoryFacets) {\n\n   // Build a collection of categories, and the hit count for each\n   categories.put(\n categoryFacet.getValue(),categoryFacet.getCount());\n\n   // If this one is the *selected* category, then re-run the query\n   // with this facet to narrow the results\n   if(categoryFacet.getValue().equalsIgnoreCase(selectedCategory)) {\n      hibernateQuery.getFacetManager()\n .getFacetGroup(\"categoryFacet\").selectFacets(categoryFacet);\n       apps = hibernateQuery.list();\n   }\n}\n...\n```", "```java\n...\nFacetingRequestpriceRangeFacetingRequest =\n queryBuilder\n .facet()\n      .name(\"priceRangeFacet\")\n      .onField(\"price\")\n      .range()\n      .below(1f).excludeLimit()\n      .from(1f).to(5f)\n      .above(5f).excludeLimit()\n      .createFacetingRequest();\nhibernateQuery.getFacetManager().enableFaceting(\n   priceRangeFacetingRequest);\n...\n```", "```java\n...\nluceneQuery = queryBuilder\n      .phrase()\n      .onField(\"name\").boostedTo(2)\n      .andField(\"description\").boostedTo(2)\n      .andField(\"supportedDevices.name\")\n      .andField(\"customerReviews.comments\")\n      .sentence(unquotedSearchString)\n      .createQuery();\n...\n```", "```java\n...\nhibernateQuery.limitExecutionTimeTo(2, TimeUnit.SECONDS);\n...\n```", "```java\n...\nhibernateQuery.setTimeout(2, TimeUnit.SECONDS);\n...\n```"]