["```java\nexport BOOK_HOME=~/Documents/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud\ngit clone https://github.com/PacktPublishing/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud $BOOK_HOME\ncd $BOOK_HOME/Chapter05\n```", "```java\nimplementation('io.springfox:springfox-swagger2:3.0.0-SNAPSHOT')\nimplementation('io.springfox:springfox-swagger-ui:3.0.0-SNAPSHOT')\nimplementation('io.springfox:springfox-spring-webflux:3.0.0-SNAPSHOT')\n```", "```java\nimplementation('io.springfox:springfox-swagger2:3.0.0-SNAPSHOT')\n```", "```java\nrepositories {\n   mavenCentral()\n   maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }\n}\n```", "```java\n@EnableSwagger2WebFlux\npublic class ProductCompositeServiceApplication {\n\n   @Bean\n   public Docket apiDocumentation() {\n      return new Docket(SWAGGER_2)\n         .select()\n         .apis(basePackage(\"se.magnus.microservices.composite.product\"))\n         .paths(PathSelectors.any())\n         .build()\n            .globalResponseMessage(GET, emptyList())\n            .apiInfo(new ApiInfo(\n                   apiTitle,\n                   apiDescription,\n                   apiVersion,\n                   apiTermsOfServiceUrl,\n                   new Contact(apiContactName, apiContactUrl, \n                    apiContactEmail),\n                   apiLicense,\n                   apiLicenseUrl,\n                   emptyList()\n                                  ));\n    }\n```", "```java\n    @Value(\"${api.common.version}\")           String apiVersion;\n    @Value(\"${api.common.title}\")             String apiTitle;\n    @Value(\"${api.common.description}\")       String apiDescription;\n    @Value(\"${api.common.termsOfServiceUrl}\") String \n                                              apiTermsOfServiceUrl;\n    @Value(\"${api.common.license}\")           String apiLicense;\n    @Value(\"${api.common.licenseUrl}\")        String apiLicenseUrl;\n    @Value(\"${api.common.contact.name}\")      String apiContactName;\n    @Value(\"${api.common.contact.url}\")       String apiContactUrl;\n    @Value(\"${api.common.contact.email}\")     String apiContactEmail;\n```", "```java\n@Api(description = \"REST API for composite product information.\")\npublic interface ProductCompositeService {\n```", "```java\n    @ApiOperation(\n        value = \"${api.product-composite.get-composite-\n         product.description}\",\n        notes = \"${api.product-composite.get-composite-product.notes}\")\n    @ApiResponses(value = {\n        @ApiResponse(code = 400, message = \"Bad Request, invalid format \n        of the request. See response message for more information.\"),\n        @ApiResponse(code = 404, message = \"Not found, the specified id \n         does not exist.\"),\n        @ApiResponse(code = 422, message = \"Unprocessable entity, input \n         parameters caused the processing to fails. See response \n         message for more information.\")\n    })\n    @GetMapping(\n        value    = \"/product-composite/{productId}\",\n        produces = \"application/json\")\n    ProductAggregate getProduct(@PathVariable int productId);\n```", "```java\n@Value(\"${api.common.version}\") String apiVersion;\n```", "```java\napi:\n  common:\n    version: 1.0.0\n```", "```java\n@ApiOperation(value = \"${api.product-composite.get-composite-product.description}\")\n```", "```java\napi:\n  product-composite:\n    get-composite-product:\n      description: Returns a composite view of the specified product id\n```", "```java\napi:\n  common:\n    version: 1.0.0\n    title: Sample API\n    description: Description of the API...\n    termsOfServiceUrl: MINE TERMS OF SERVICE URL\n    license: License\n    licenseUrl: MY LICENSE URL\n    contact:\n      name: Contact\n      url: My\n      email: me@mail.com\n```", "```java\nproduct-composite:\n  get-composite-product:\n    description: Returns a composite view of the specified product id\n    notes: |\n      # Normal response\n      If the requested product id is found the method will return \n      information regarding:\n      1\\. Base product information\n      1\\. Reviews\n      1\\. Recommendations\n      1\\. Service Addresses\\n(technical information regarding the \n      addresses of the microservices that created the response)\n\n      # Expected partial and error responses\n      In the following cases, only a partial response be created (used \n      to simplify testing of error conditions)\n\n      ## Product id 113\n      200 - Ok, but no recommendations will be returned\n\n      ## Product id 213\n      200 - Ok, but no reviews will be returned\n\n      ## Non numerical product id\n      400 - A <b>Bad Request</b> error will be returned\n\n      ## Product id 13\n      404 - A <b>Not Found</b> error will be returned\n\n      ## Negative product ids\n      422 - An <b>Unprocessable Entity</b> error will be returned\n```", "```java\ncd $BOOK_HOME/Chapter05\n./gradlew build && docker-compose build && docker-compose up -d\n```", "```java\nERROR: for product-composite Cannot start service product-composite: driver failed programming external connectivity on endpoint chapter05_product-composite_1 (0138d46f2a3055ed1b90b3b3daca92330919a1e7fec20351728633222db5e737): Bind for 0.0.0.0:8080 failed: port is already allocated\n```", "```java\n docker ps --format {{.Names}}\n```", "```java\nchapter05_review_1\nchapter05_product_1\nchapter05_recommendation_1\nchapter04_review_1\nchapter04_product-composite_1\nchapter04_product_1\nchapter04_recommendation_1\n```", "```java\ncd ../Chapter04\ndocker-compose down\n```", "```java\ncd ../Chapter05\ndocker-compose up -d\n```", "```java\nStarting chapter05_product-composite_1 ... done\n```", "```java\n./test-em-all.bash \n```", "```java\ncurl -X GET \"http://localhost:8080/product-composite/123\" -H \"accept: application/json\"\n```"]