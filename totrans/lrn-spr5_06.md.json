["```java\n<servlet>\n  <servlet-name>books</servlet-name>\n    <servlet-class>\n      org.springframework.web.servlet.DispatcherServlet\n    </servlet-class>\n</servlet>\n<servlet-mapping>\n  <servlet-name>books</servlet-name>\n  <url-pattern>*.htm</url-pattern>\n</servlet-mapping>\n```", "```java\n<servlet>\n  <servlet-name>books</servlet-name>\n    <servlet-class>\n      org.springframework.web.servlet.DispatcherServlet\n    </servlet-class>\n</servlet>\n<servlet-mapping>\n  <servlet-name>books</servlet-name>\n  <url-pattern>*.htm</url-pattern>\n</servlet-mapping>\n```", "```java\n<mvc:annotation-driven />\n```", "```java\n<context:component-scan base-package=\"com.packt.*\">\n</context:component-scan>\n```", "```java\nnew ModelAndView(logical_name_of_view,logical_name_of_model_data,\n  actual_value_of_model_data);\n```", "```java\nModelAndView mv=new ModelAndView();\nmv.setViewName(\"name_of_the_view\");\nmv.setAttribute(object_to_add);\n```", "```java\n      <bean id=\"myHome\"  \n        class=\"org.springframework.web.servlet.view.JstlView\"> \n        <property name=\"url\" value=\"WEB-INF/jsp/home.jsp\"/> \n      <bean> \n\n```", "```java\n      <bean id=\"logout\"  \n        class=\"org.springframework.web.servlet.view.RenderView\"> \n        <property name=\"url\" value=\"myHome\"/> \n      <bean> \n\n```", "```java\n      <bean id=\"viewResolver\" \n  class=\"org.springframework.web.servlet.view.UrlBasedViewResolver\"> \n        <property name=\"viewClass\" value=   \n          \"org.springframework.web.servlet.view.JstlView\"/> \n        <property name=\"prefix\" value=\"WEB-INF/jsp/\"/> \n        <property name=\"suffix\" value=\".jsp\"/> \n      <bean> \n\n```", "```java\n      <bean id=\"viewResolver\" class=  \n  \"org.springframework.web.servlet.view.InternalResourceViewResolver\"> \n        <property name=\"viewClass\" value=                \n          \"org.springframework.web.servlet.view.JstlView\"/> \n        <property name=\"prefix\" value=\"WEB-INF/jsp/\"/> \n        <property name=\"suffix\" value=\".jsp\"/> \n      <bean> \n\n```", "```java\n      <bean id=\"viewResolver\" class= \n  \"org.springframework.web.servlet.view.ResourceViewResolver\"> \n        <property name=\"base\" value=\"web_view\"/> \n      </bean> \n\n```", "```java\n      home.(class)= org.springframework.wev.servlet.view.JstlView \n\n```", "```java\n       homepage.url= /WEB-INF/page/welcome.jsp \n\n```", "```java\n      <center> \n        <img alt=\"bookshelf\" src=\"img/img1.png\" height=\"180\" \n          width=\"350\"> \n        <br> \n      </center> \n      <a href=\"welcomeController.htm\">Show welcome message</a> \n\n```", "```java\n      <servlet> \n        <servlet-name>books</servlet-name> \n        <servlet-class>    \n          org.springframework.web.servlet.DispatcherServlet \n        </servlet-class> \n      </servlet> \n      <servlet-mapping> \n        <servlet-name>books</servlet-name> \n        <url-pattern>*.htm</url-pattern> \n      </servlet-mapping> \n\n```", "```java\n      <context:component-scan base-package=     \n        \"com.packt.*\"></context:component-scan> \n\n```", "```java\n      @Controller \n      public class MyMVCController { \n        @RequestMapping(value=\"welcomeController.htm\") \n        public ModelAndView welcome() \n        { \n          String welcome_message=\"Welcome to the wonderful  \n          world of Books\"; \n          return new ModelAndView(\"welcome\",\"message\",welcome_message); \n        } \n      } \n\n```", "```java\n      new ModelAndView(\"welcome\",\"message\",welcome_message); \n      The ModelAndView instance is specifying, \n      Logical name of the view -  welcome \n      Logical name of the model data -  message  \n      Actual value of the model data - welcome_message \n\n```", "```java\n      ModelAndView mv=new ModelAndView(); \n      mv.setViewName(\"welcome\"); \n      mv.addObject(\"message\", welcome_message); \n      return mv; \n\n```", "```java\n      @RequestMapping(value=\"welcomeController.htm\", \n        method=RequestMethod.GET) \n      public ModelAndView welcome(){ \n        //business logic  \n      } \n      @RequestMapping(value=\"welcomeController.htm\", \n        method=RequestMethod.POST) \n      public ModelAndView welcome_new()  { \n        //business logic \n      } \n\n```", "```java\n      <bean id=\"viewResolver\" class=\n   \"org.springframework.web.servlet.view.InternalResourceViewResolver\"> \n        <property name=\"prefix\" value=\"/WEB-INF/jsps/\"></property> \n        <property name=\"suffix\" value=\".jsp\"></property> \n      </bean> \n\n```", "```java\n      <body> \n        <center> \n          <img alt=\"bookshelf\" src=\"img/img1.png\" height=\"180\" \n            width=\"350\"> \n          <br> \n        </center> \n        <center> \n          <font color=\"green\" size=\"12\"> ${message } </font> \n        </center> \n      </body>\n```", "```java\n      <a href=\"searchByAuthor.jsp\">Search Book By Author</a> \n\n```", "```java\n      <body> \n        <center> \n          <img alt=\"bookshelf\" src=\"img/img1.png\" height=\"180\"  \n            width=\"350\"> \n          <br> \n\n          <h3>Add the Author name to search the book List</h3> \n\n          <form action=\"/searchBooks.htm\"> \n            Author Name:<input type=\"text\" name=\"author\"> \n            <br>  \n            <input  type=\"submit\" value=\"Search Books\"> \n          </form> \n        </center> \n      </body>\n```", "```java\n      public class Book { \n        private String bookName; \n        private long ISBN; \n        private String publication; \n        private int price; \n        private String description; \n        private String author; \n        //getters and setters \n      } \n\n```", "```java\n      @Controller \n      public class SearchBookController { \n        @RequestMapping(value = \"searchBooks.htm\") \n        public ModelAndView searchBookByAuthor( \n          @RequestParam(\"author\") String author_name)  \n        { \n          // the elements to list generated below will be added by      \n          business logic  \n          List<Book> books = new ArrayList<Book>(); \n          books.add(new Book(\"Learning Modular Java Programming\",  \n            9781235, \"packt pub publication\", 800, \n            \"Explore the Power of Modular Programming \",  \n            \"T.M.Jog\")); \n          books.add(new Book(\"Learning Modular Java Programming\",  \n            9781235, \"packt pub publication\", 800, \n            \"Explore the Power of Modular Programming \",   \n            \"T.M.Jog\")); \n          mv.addObject(\"auth_name\",author); \n          return new ModelAndView(\"display\", \"book_list\", books); \n        } \n      } \n\n```", "```java\n      <%@ taglib prefix=\"jstl\"  \n        uri=\"http://java.sun.com/jsp/jstl/core\"%> \n      <html> \n        <head> \n          <meta http-equiv=\"Content-Type\" content=\"text/html; \n            charset=ISO-8859-1\"> \n          <title>Book List</title> \n        </head> \n        <body> \n          <center> \n            <img alt=\"bookshelf\" src=\"img/img1.png\"   \n              height=\"180\" width=\"350\"> \n            <br> \n          </center> \n          <jstl:if test=\"${not empty book_list }\"> \n            <h1 align=\"center\"> \n              <font color=\"green\"> \n                Book List of ${auth_name } \n              </font> \n            </h1> \n            <table align=\"center\" border=\"1\"> \n            <tr> \n              <th>Book Name</th> \n              <th>ISBN</th> \n              <th>Publication</th> \n              <th>Price</th> \n              <th>Description</th> \n            </tr> \n            <jstl:forEach var=\"book_data\"  \n              items=\"${book_list}\" varStatus=\"st\"> \n              <tr> \n                <td> \n                  <jstl:out value=\"${ book_data.bookName }\"> \n                  </jstl:out> \n                </td> \n                <td> \n                  <jstl:out value=\"${ book_data.ISBN }\"> \n                  </jstl:out> \n                </td> \n                <td> \n                  <jstl:out value=\"${ book_data.publication }\"> \n                  </jstl:out> \n                </td> \n                <td> \n                  <jstl:out value=\"${ book_data.price }\"> \n                  </jstl:out></td> \n                <td> \n                  <jstl:out value=\"${ book_data.description }\"> \n                  </jstl:out> \n                </td> \n              </tr> \n            </jstl:forEach> \n          </table> \n        </jstl:if> \n        <jstl:if test=\"${empty book_list }\"> \n          <jstl:out value=\"No Book Found\"></jstl:out> \n        </jstl:if> \n      </body>\n```", "```java\n@RequestMapping(value = \"searchBooks.htm\") \npublic ModelAndView searchBookByAuthor( String author) { \n  List<Book> books = new ArrayList<Book>(); \n  books.add(new Book(\"Learning Modular Java Programming\",  \n    9781235, \"packt pub publication\", 800, \n    \"explore the power of modular Programming \",    \n    author)); \n  books.add(new Book(\"Learning Modular Java Programming\",  \n    9781235, \"packt pub publication\", 800, \n    \"explore the power of modular Programming \",  \n    author)); \n  ModelAndView mv= \n    new ModelAndView(\"display\", \"book_list\", books); \n    mv.addObject(\"auth_name\",author); \n    return mv; \n} \n\n```", "```java\n      <a href=\"showBookForm.htm\">Show Form to add new Book</a> \n\n```", "```java\n      @RequestMapping(\"/showBookForm.htm\") \n      public ModelAndView showBookForm(ModelMap map)  \n      throws Exception { \n        Book book=new Book(); \n        map.addAttribute(book); \n        return new ModelAndView(\"bookForm\"); \n      } \n\n```", "```java\n      map.addAttribute(\"myBook\",book); \n\n```", "```java\n      <%@ taglib prefix=\"form\"  \n        uri=\"http://www.springframework.org/tags/form\"%> \n\n```", "```java\n      <form:input path=\"bookName\" size=\"30\" /> \n\n```", "```java\n      <form:form modelAttribute=\"book\" method=\"POST\"  \n        action=\"addBook.htm\"> \n        <h2> \n          <center>Enter the Book Details</center> \n        </h2> \n\n        <table width=\"100%\" height=\"150\" align=\"center\" border=\"0\"> \n         <tr> \n           <td width=\"50%\" align=\"right\">Name of the Book</td> \n           <td width=\"50%\" align=\"left\"> \n             <form:input path=\"bookName\" size=\"30\" /> \n           </td> \n         </tr> \n         <tr> \n           <td width=\"50%\" align=\"right\">ISBN number</td> \n           <td width=\"50%\" align=\"left\"> \n             <form:input path=\"ISBN\" size=\"30\" /> \n           </td> \n         </tr> \n         <tr> \n           <td width=\"50%\" align=\"right\">Name of the Author</td> \n           <td width=\"50%\" align=\"left\"> \n             <form:input path=\"author\" size=\"30\" /> \n           </td> \n         </tr> \n         <tr> \n           <td width=\"50%\" align=\"right\">Price of the Book</td> \n           <td width=\"50%\" align=\"left\"> \n             <form:select path=\"price\"> \n               <!- \n                 We will add the code to have  \n                 predefined values here  \n               -->             \n             </form:select> \n           </td> \n         </tr> \n         <tr> \n           <td width=\"50%\" align=\"right\">Description of the  \n             Book</td> \n           <td width=\"50%\" align=\"left\"> \n             <form:input path=\"description\"  size=\"30\" /> \n           </td> \n         </tr> \n         <tr> \n           <td width=\"50%\" align=\"right\">Publication of the  \n             Book</td> \n           <td width=\"50%\" align=\"left\"> \n             <form:input path=\"publication\"  size=\"30\" /> \n           </td> \n         </tr> \n         <tr> \n           <td colspan=\"2\" align=\"center\"><input type=\"submit\"  \n             value=\"Add Book\"></td> \n          </tr> \n        </table> \n      </form:form>\n```", "```java\n      @RequestMapping(\"/addBook.htm\") \n      public ModelAndView addBook(@ModelAttribute(\"book\") Book book) \n      throws Exception { \n          ModelAndView modelAndView = new ModelAndView(); \n          modelAndView.setViewName(\"display\"); \n          //later on the list will be fetched from the table \n          List<Book>books=new ArrayList(); \n          books.add(book); \n          modelAndView.addObject(\"book_list\",books); \n          return modelAndView; \n      } \n\n```", "```java\n@ModelAttribute(\"name_of_the_attribute\") \naccess_specifier return_type name_of_method(argument_list) {  // code   } \n\n```", "```java\n@ModelAttribute(\"hobbies\") \npublic List<Hobby> addAttribute() { \n  List<Hobby> hobbies=new ArrayList<Hobby>(); \n  hobbies.add(new Hobby(\"reading\",1)); \n  hobbies.add(new Hobby(\"swimming\",2)); \n  hobbies.add(new Hobby(\"dancing\",3)); \n  hobbies.add(new Hobby(\"paining\",4)); \n  return hobbies; \n} \n\n```", "```java\n<form:name-of_tag path=\"name_of_data_memeber_of_bean\"  \n  items=\"name_of_attribute\" itemLable=\"value_to display\"  \n  itemValue=\"value_it_holds\"> \n\n```", "```java\n<form:checkboxes path=\"hobby\" items=\"${hobbies}\"    \n  itemLabel=\"hobbyName\" itemValue=\"hobbyId\"/>                 \n\n```", "```java\n      @ModelAttribute(\"priceList\") \n      public List<Integer> addPrices() { \n        List<Integer> prices=new ArrayList<Integer>(); \n        prices.add(300); \n        prices.add(350); \n        prices.add(400); \n        prices.add(500); \n        prices.add(550); \n        prices.add(600); \n        return prices; \n      } \n\n```", "```java\n      <form:select path=\"price\"> \n        <form:options items=\"${priceList}\" />   \n      </form:select>\n```", "```java\n      public class BookValidator implements Validator { \n        public boolean supports(Class<?> book_class) { \n          return book_class.equals(Book.class); \n        } \n      } \n\n```", "```java\n      public void validate(Object obj, Errors errors) { \n        // TODO Auto-generated method stub \n        Book book=(Book) obj; \n        if (book.getBookName().length() < 5) { \n          errors.rejectValue(\"bookName\", \"bookName.required\", \n          \"Please Enter the book Name\"); \n        } \n        if (book.getAuthor().length() <=0) { \n          errors.rejectValue(\"author\", \"authorName.required\", \n          \"Please Enter Author's Name\"); \n        } \n        if (book.getDescription().length() <= 0) \n        { \n          errors.rejectValue(\"description\",  \n            \"description.required\", \n            \"Please enter book description\"); \n        } \n        else if (book.getDescription().length() < 10 ||  \n          book.getDescription().length() <  40) { \n            errors.rejectValue(\"description\", \"description.length\", \n            Please enter description within 40 charaters only\"); \n         } \n         if (book.getISBN()<=150l) { \n           errors.rejectValue(\"ISBN\", \"ISBN.required\", \n           \"Please Enter Correct ISBN number\"); \n         }   \n         if (book.getPrice()<=0 ) { \n           errors.rejectValue(\"price\", \"price.incorrect\",  \"Please  \n           enter a Correct correct price\"); \n         } \n        if (book.getPublication().length() <=0) { \n          errors.rejectValue(\"publication\",  \n            \"publication.required\", \n            \"Please enter publication \"); \n        } \n      } \n\n```", "```java\n      void rejectValue(String field_name, String error_code); \n      void rejectValue(String field_name, String error_code, String  \n        default_message); \n      void rejectValue(String field_name, String error_code, \n        Object[] error_Args,String default_message); \n\n```", "```java\n      @Autowired \n      Validator validator; \n\n```", "```java\n      public ModelAndView addBook(@ModelAttribute(\"book\") Book book,   \n        BindingResult bindingResult)   throws Exception { \n        validator.validate(book, bindingResult); \n      if(bindingResult.hasErrors()) \n      { \n        return new ModelAndView(\"bookForm\"); \n      } \n      ModelAndView modelAndView = new ModelAndView(); \n      modelAndView.setViewName(\"display\"); \n      //later on the list will be fetched from the table \n      List<Book>books=new ArrayList(); \n      books.add(book); \n      modelAndView.addObject(\"book_list\",books); \n      modelAndView.addObject(\"auth_name\",book.getAuthor()); \n      return modelAndView; \n    } \n\n```", "```java\n      <bean id=\"validator\"  \n        class=\"com.packt.ch06.validators.BookValidator\" /> \n\n```", "```java\n      <tr> \n        <td width=\"50%\" align=\"right\">Name of the Book</td> \n        <td width=\"50%\" align=\"left\"> \n          <form:input path=\"bookName\" size=\"30\" /> \n          <font color=\"red\"> \n            <form:errors path=\"bookName\" /> \n          </font> \n        </td> \n      </tr> \n\n```", "```java\n      <form:errors path=\"name of the data_member\" /> \n\n```", "```java\n      @InitBinder \n      private void initBinder(WebDataBinder webDataBinder) \n      { \n        webDataBinder.setValidator(validator); \n      } \n\n```", "```java\n      <beans xmlns=\"http://www.springframework.org/schema/beans\" \n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n        xmlns:context=\"http://www.springframework.org/schema/context\" \n        xmlns:mvc=\"http://www.springframework.org/schema/mvc\" \n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n          http://www.springframework.org/schema/beans/spring-beans.xsd  \n          http://www.springframework.org/schema/context  \n          http://www.springframework.org/schema/context/\n      spring-context.xsd \n          http://www.springframework.org/schema/mvc \n          http://www.springframework.org/schema/mvc/spring-mvc.xsd\"> \n\n```", "```java\n      <mvc:annotation-driven/> \n\n```", "```java\n      @RequestMapping(\"/addBook.htm\") \n      public ModelAndView addBook(@Valid @ModelAttribute(\"book\")  \n      Book book,BindingResult bindingResult) \n      throws Exception { \n        //validator.validate(book, bindingResult); \n        if(bindingResult.hasErrors()) \n        { \n          return new ModelAndView(\"bookForm\"); \n        } \n        ModelAndView modelAndView = new ModelAndView(); \n        modelAndView.setViewName(\"display\"); \n        //later on the list will be fetched from the table \n        // rest of the code is same as the earlier implemenation \n      } \n\n```", "```java\n      public void validate(Object obj, Errors errors) { \n        Book book=(Book) obj; \n        if (book.getBookName().length() < 5) { \n          errors.rejectValue(\"bookName\", \"bookName.required\"); \n        } \n\n        if (book.getAuthor().length() <=0) { \n          errors.rejectValue(\"author\", \"authorName.required\");           \n        } \n\n        if (book.getDescription().length() <= 0){ \n          errors.rejectValue(\"description\",\"description.required\");             } \n\n        if (book.getDescription().length() < 10 ||   \n          book.getDescription().length() <  40) { \n          errors.rejectValue(\"description\", \"description.length\");               } \n\n        if (book.getISBN()<=150l) { \n          errors.rejectValue(\"ISBN\", \"ISBN.required\"); \n        } \n\n        if (book.getPrice()<=0 ) { \n          errors.rejectValue(\"price\", \"price.incorrect\"); \n        } \n\n        if (book.getPublication().length() <=0) { \n          errors.rejectValue(\"publication\", \"publication.required\");             } \n      } \n\n```", "```java\n      bookName.required=Please enter book name \n      authorName.required=Please enter name of the author \n      publication.required=Please enter publication \n      description.required=Please enter description \n      description.length=Please enter description of minimum 10 and        maximum 40 characters \n      ISBN.required=Please enter ISBN code \n      price.incorrect= Please enter correct price \n\n```", "```java\n      name_of_Validation_Class . name_of_model_to_validate   \n        .name_of_data_memeber  = message_to_display \n\n```", "```java\n      <bean id=\"validator\"  \n        class=\"com.packt.ch06.validators.BookValidator1\" /> \n\n```", "```java\n      <bean id=\"messageSource\" \n        class=\"org.springframework.context.support. \n        ReloadableResourceBundleMessageSource\"> \n        <property name=\"basename\"  \n          value=\"/WEB-INF/messages_book_validation\" /> \n      </bean> \n\n```", "```java\n      public void validate(Object obj, Errors errors) { \n        Book book = (Book) obj; \n        ValidationUtils.rejectIfEmptyOrWhitespace(errors,  \n          \"bookName\", \"bookName.required\"); \n        ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"author\",  \n          \"authorName.required\"); \n        ValidationUtils.rejectIfEmptyOrWhitespace(errors,  \n          \"description\", \"description.required\"); \n        if (book.getDescription().length() < 10 ||  \n          book.getDescription().length() < 40) { \n          errors.rejectValue(\"description\", \"description.length\", \n            \"Please enter description within 40 charaters only\"); \n        } \n        if (book.getISBN() <= 150l) { \n          errors.rejectValue(\"ISBN\", \"ISBN.required\", \"Please \n          Enter Correct ISBN number\"); \n        } \n        ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"price\",  \n          \"price.incorrect\"); \n        ValidationUtils.rejectIfEmptyOrWhitespace(errors,  \n          \"publication\", \"publication.required\"); \n      } \n\n```", "```java\n      <bean id=\"validator\"  \n        class=\"com.packt.ch06.validators.BookValidator2\" /> \n\n```", "```java\n      public class Book { \n        @NotEmpty \n        @Size(min = 2, max = 30) \n        private String bookName; \n\n        @Min(150) \n        private long ISBN; \n\n        @NotEmpty \n        @Size(min = 2, max = 30) \n        private String publication; \n\n        @NotNull \n        private int price; \n\n        @NotEmpty \n        @Size(min = 10, max = 50) \n        private String description; \n\n        @NotEmpty \n        private String author; \n\n        //default and parameterized constructor \n        //getters and setters \n      } \n\n```", "```java\npublic class Book { \n  @NotEmpty(message=\"The book name should be entered\") \n  private String bookName; \n\n  @Min(value=150,message=\"ISBN should be greater than 150\") \n  private long ISBN; \n\n  @Size(min = 2, max = 30, message=\"Enter Publication between   \n    limit of 2 to 30 only\") \n  private String publication; \n\n  @NotNull(message=\"Enter the price\") \n  private int price; \n  @Size(min = 10, max = 50,message=\"Enter Publication between limit of\n    10 to 50 only\") \n  private String description; \n\n  @NotEmpty(message=\"Enter the price\") \n  private String author; \n  /default and parameterized constructor \n  //getters and setters \n} \n\n```", "```java\n      NotEmpty.book.bookName=Please enter the book name F1\\. \n      NotEmpty.book.author=Please enter book author F1\\. \n      Min.book.ISBN= Entered ISBN must be greater than 150 F1 \n      Size.book.description=Please enter book description having  \n        minimum 2 and maximum 30charatcters only F1\\. \n      NotNull.book.price=Please enter book price F1\\. \n\n```", "```java\n      Name_of_validator_class.name_of_model_attribute_to_validate. \n        name_of_data_member= message_to_display \n\n```", "```java\n      <bean id=\"messageSource\" \n        class=\"org.springframework.context.support. \n        ReloadableResourceBundleMessageSource\"> \n        <property name=\"basename\"  \n          value=\"/WEB-INF/messages_book_validation\" /> \n      </bean> \n\n```"]