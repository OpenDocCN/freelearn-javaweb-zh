["```java\n$ curl http://localhost:8080/metrics\n```", "```java\n# TYPE base:classloader_total_loaded_class_count counter\nbase:classloader_total_loaded_class_count 13752.0 \n# TYPE base:cpu_system_load_average gauge\nbase:cpu_system_load_average 2.796875\n# TYPE base:thread_count counter\nbase:thread_count 76.0\n# TYPE vendor:memory_pool_metaspace_usage_max_bytes gauge\nvendor:memory_pool_metaspace_usage_max_bytes 7.0916056E7\n# TYPE application:hello_time_rate_per_second gauge\napplication:hello_time_rate_per_second{app=\"shop\",type=\"timer\"} \n3.169298061424996E-10\n# TYPE application:hello_time_one_min_rate_per_second gauge\napplication:hello_time_one_min_rate_per_second{app=\"shop\",type=\"timer\"} 0.0\n[...]\n```", "```java\n$ curl -HAccept:application/json http://localhost:8080/metrics\n```", "```java\n{\n \"application\" :\n {\n \"helloTime\" : {\n \"p50\": 1.4884994E7,\n [...]\n \"count\": 1,\n \"meanRate\": 0.06189342578194245\n },\n \"getCounted\" : 1\n },\n \"base\" :\n {\n \"classloader.totalLoadedClass.count\" : 13970,\n \"cpu.systemLoadAverage\" : 2.572265625,\n \"gc.PS Scavenge.time\" : 290\n },\n \"vendor\" :\n {\n \"test\" : 271,\n \"memoryPool.Metaspace.usage.max\" : 72016928,\n }\n```", "```java\n$ curl XOPTIONS -HAccept:application/json http://localhost:8080/metrics\n```", "```java\n{\n\"application\" : {\n \"helloTime\": {\n \"unit\": \"nanoseconds\",\n \"type\": \"timer\",\n \"description\": \"Timing of the Hello call\",\n \"tags\": \"app=shop,type=timer\",\n \"displayName\": \"helloTime\"\n }\n}\n[...]\n}\n```", "```java\n$ curl http://localhost:8080/metrics/base\n```", "```java\n# TYPE base:classloader_total_loaded_class_count counterbase:classloader_total_loaded_class_count 13973.0# TYPE base:cpu_system_load_average gaugebase:cpu_system_load_average 1.92236328125\n```", "```java\n@Inject\n@Metric(absolute = true, description = \"# calls to /health\")\nCounter hCount; // This is the counter\n\n@GET\n@Path(\"/health\")\npublic Response getHealth() throws Exception {\n    hCount.inc(); // It is increased in the application\n    [...]\n}\n```", "```java\n@Counted(absolute=true,\n        description=\"# calls to getCounted\",\n        monotonic=true)\n@GET\n@Path(\"/c\")\npublic String getCounted() {\n    return \"Counted called\";\n}\n```", "```java\n@Gauge\nint provideGaugeValue() {\n  return 42;  // The value of the gauge is always 42\n}\n```", "```java\n@GET@Path(\"/m\")@Metered(absolute = true)public String getMetered() {  return \"Metered called\";}\n```", "```java\n// Register the Histogram\n@Inject\n@Metric(absolute = true)\nprivate Histogram aHistogram;\n\n// Update with a value from 0 to 10\n@GET\n@Path(\"/h\")\npublic String getHistogram() {\n  aHistogram.update((int) (Math.random() * 10.0));\n  return \"Histogram called\";\n}\n```", "```java\n@GET@Path(\"/hello\")@Timed(name=\"helloTime\", absolute = true,        description = \"Timing of the Hello call\",       tags={\"type=timer\",\"app=shop\"})public String getHelloTimed() {  try {    Thread.sleep((long) (Math.random()*200.0));  } catch (InterruptedException e) {     // We don't care if the sleep is interrupted.  }  return \"Hello World\";}\n```", "```java\nexport MP_METRICS_TAGS=app=myShopjava -jar target/metrics-thorntail.jar\n```", "```java\n# TYPE application:my_count counterapplication:my_count{app=\"myShop\"} 0\n```", "```java\n@Counted(tags=[“version=v1”,”commit=abcde”])\nvoid doSomething() {\n  [...]\n}\n```", "```java\n.Prometheus configuration for a Thorntail Server, prom.ymlscrape_configs:# Configuration to poll from Thorntail- job_name: 'thorntail' ...\n```", "```java\n@Inject\n@Metric(tags=\"{code,200}\", name=\"result_code\")\nCounter result_code_200k;\n\n@Inject\n@Metric(tags=\"{code,500}\", name=\"result_code\")\nCounter result_code_500;\n\n@GET\n@Path(\"/\")\npublic String getData(String someParam) {\n\n String result = getSomeData(someParam);\n if (result == null ) {\n   result_code_500.inc();\n } else {\n   result_code_200.inc();\n }\n return result;\n}\n```", "```java\n@Path(\"/\")\npublic class JaxRsService {\n   @Inject\n   private io.opentracing.Tracer tracer;\n\n   @GET\n   @Path(\"/hello\")\n   @Traced(operationName=\"greeting\") (2)\n   public String hello(@HeaderParam(\"user-agent\") String userAgent) {\n       tracer.activeSpan().setTag(\"user-agent\", userAgent); (1)\n   }\n}\n```", "```java\n@Traced (1)@ApplicationScopedpublic class Service {   @Traced(operationName = \"get_all_users\") (2)   public void getUsers() {        // business code   } @Traced(false) (3) ...\n```", "```java\n@Path(\"/\")\npublic class Service {\n    @Inject\n    private Tracer tracer;\n\n    @GET\n    @Path(\"\")\n    @Produces(MediaType.TEXT_PLAIN)\n    public String greeting() {\n       tracer.activeSpan()\n           .setTag(\"greeting\", \"hello\"); (1)\n       return \"hello\";\n   }\n}\n```"]