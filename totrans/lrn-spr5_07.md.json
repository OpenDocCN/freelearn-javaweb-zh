["```java\n      public classTestBookDAO_JdbcTemplate { \n        BookDAO_JdbcTemplatebookDAO_JdbcTemplate; \n\n        @Before \n        publicvoidsetUp() throws Exception { \n          ApplicationContextapplicationContext = new \n          ClassPathXmlApplicationContext(\"connection_new.xml\"); \n          bookDAO_JdbcTemplate = (BookDAO_JdbcTemplate)  \n          applicationContext.getBean(\"bookDAO_jdbcTemplate\"); \n        } \n        @After \n        publicvoidtearDown() throws Exception { \n          bookDAO_JdbcTemplate = null; \n        } \n\n        @Test \n        publicvoidtestAddBook() { \n          Book book = newBook(\"Book_Test\", 909090L, \"Test  \n          Publication\", 1000, \"Test Book description\", \"Test  \n          author\"); \n          introws_insert= bookDAO_JdbcTemplate.addBook(book); \n          assertEquals(1, rows_insert); \n        } \n      } \n\n```", "```java\n      @Test(expected=DuplicateKeyException.class) \n      publicvoidtestAddBook_Negative() { \n        Book book = newBook(\"Book_Test\", 909090L, \"Test  \n        Publication\", 1000, \"Test Book description\", \"Test  \n        author\"); \n        introws_insert= bookDAO_JdbcTemplate.addBook(book); \n        assertEquals(0, rows_insert); \n      } \n\n```", "```java\n      @Test \n      publicvoidtestUpdateBook() { \n        //with ISBN which does exit in the table Book \n        longISBN = 909090L; \n        intupdated_price = 1000; \n        introws_insert = bookDAO_JdbcTemplate.updateBook(ISBN,  \n          updated_price); \n        assertEquals(1, rows_insert); \n      } \n      @Test \n      publicvoidtestUpdateBook_Negative() { \n        // code for deleting the book with ISBN not in the table \n      } \n      @Test \n      publicvoidtestDeleteBook() { \n        // with ISBN which does exit in the table Book \n        longISBN = 909090L; \n        booleandeleted = bookDAO_JdbcTemplate.deleteBook(ISBN); \n        assertTrue(deleted); \n      } \n      @Test \n      publicvoidtestDeleteBook_negative() { \n        // deleting the book with no iSBN present in the table. \n      } \n      @Test \n      publicvoidtestFindAllBooks() { \n        List<Book>books =  \n        bookDAO_JdbcTemplate.findAllBooks(); \n        assertTrue(books.size()>0); \n        assertEquals(4, books.size()); \n        assertEquals(\"Learning Modular Java  \n        Programming\",books.get(3).getBookName()); \n      } \n      @Test \n      publicvoidtestFindAllBooks_Author() { \n        List<Book>books =  \n          bookDAO_JdbcTemplate.findAllBooks(\"T.M.Jog\"); \n        assertEquals(\"Learning Modular Java  \n          Programming\",books.get(1).getBookName()); \n      } \n\n```", "```java\n      @ContextConfiguration(\"classpath:connection_new.xml\") \n      publicclassTestClass{ \n        //code to test \n      } \n\n```", "```java\n      @ContextConfiguration(class=TestConfig.class) \n      publicclassTestClass{ \n        //code to test \n      } \n\n```", "```java\n      @ContextConfiguration(locations=\"connection_new.xml\", \n      loader=TestConfig.class) \n      publicclassTestClass{ \n        //code to test \n      } \n\n```", "```java\n      @ContextConfiguration(initializers = \n        TestContextInitializer.class) \n      publicclassTestClass{ \n        //code to test \n      } \n\n```", "```java\n@WebAppConfiguration(\"classpath: myresource.xml\") \npublicclassTestClass{ \n //code to test \n} \n\n```", "```java\n      @RunWith(SpringJUnit4ClassRunner.class) \n      @ContextConfiguration(\"classpath:connection_new.xml\") \n      publicclassSpringRunner_TestBookDAO_JdbcTemplate { \n        @Autowired \n        @Qualifier(\"bookDAO_jdbcTemplate\") \n        BookDAObookDAO_JdbcTemplate; \n\n        @Test \n        publicvoidtestAddBook() { \n          Book book = newBook(\"Book_Test\", 909090L, \"Test  \n          Publication\", 1000, \"Test Book description\", \"Test  \n          author\"); \n          introws_insert = bookDAO_JdbcTemplate.addBook(book); \n          assertEquals(1, rows_insert); \n        } \n      } \n\n```", "```java\npublicintupdateBook(long ISBN, intupdated_price() \n{ \n   // code which fires the query to database and update the price     \n   of the book whose ISBN has specified \n   // return 1 if book updated otherwise 0 \n} \n\n```", "```java\n@Test \npublic void testUpdatedBook() \n{ \n  long ISBN=2;   // isbn exists in the table \n  intupdated_price=200; \n  introws_updated=bookDAO.updateBook( ISBN, updated_price); \n  assertEquals(1, rows_updated); \n} \n\n```", "```java\n      publicclassSpring_Mokito_TestBookDAO_JdbcTemplate { \n        @Mock \n        BookDAObookDAO_JdbcTemplate; \n\n        @Before \n        publicvoidsetUp()throws Exception \n        { \n          MockitoAnnotations.initMocks(this); \n        } \n      } \n\n```", "```java\n      @Test \n      publicvoidtestAddBook() { \n        Book book = newBook(\"Book_Test\", 909090L, \"Test  \n        Publication\", 1000, \"Test Book description\",  \n        \"Test author\"); \n        //set the behavior for values to return in our case addBook() \n        //method \n        Mockito.when(bookDAO_JdbcTemplate.addBook(book)).thenReturn(1); \n\n        // invoke the function under test \n        introws_insert = bookDAO_JdbcTemplate.addBook(book); \n\n        // assert the actual value return by the method under test to        \n        //the expected behaiour by mock object \n        assertEquals(1, rows_insert); \n      } \n\n```", "```java\n      @Test \n      publicvoidtestDeleteBook() { \n\n        //with ISBN which does exit in the table Book \n        longISBN = 909090L; \n        Mockito.when(bookDAO_JdbcTemplate.deleteBook(ISBN)). \n          thenReturn(true); \n        booleandeleted = bookDAO_JdbcTemplate.deleteBook(ISBN); \n        assertTrue(deleted); \n      } \n\n      @Test \n      publicvoidtestFindAllBooks_Author() { \n        List<Book>books=newArrayList(); \n        books.add(new Book(\"Book_Test\", 909090L, \"Test  \n          Publication\", 1000, \"Test Book description\", \"Test  \n          author\") ); \n\n        Mockito.when(bookDAO_JdbcTemplate.findAllBooks(\"Test  \n          author\")).thenReturn(books); \n        assertTrue(books.size()>0); \n        assertEquals(1, books.size()); \n        assertEquals(\"Book_Test\",books.get(0).getBookName()); \n      } \n\n```", "```java\n      @WebAppConfiguration \n      @ContextConfiguration({ \"file:WebContent/WEB-INF/book- \n        servlet.xml\" }) \n      @RunWith(value = SpringJUnit4ClassRunner.class) \n      publicclassTestSearchBookController { \n         @Autowired \n        SearchBookControllersearchBookController; \n      } \n\n```", "```java\n      @Test \n      publicvoidtestSearchBookByAuthor() { \n\n        String author_name=\"T.M.Jog\"; \n        ModelAndViewmodelAndView =   \n          searchBookController.searchBookByAuthor(author_name); \n        assertEquals(\"display\",modelAndView.getViewName()); \n      } \n\n```", "```java\n      @Test \n      publicvoidtestSerachBookByAuthor_New() \n      { \n        String author_name=\"T.M.Jog\"; \n        List<Book>books = newArrayList<Book>(); \n        books.add(new Book(\"Learning Modular Java Programming\",  \n          9781235, \"packt pub publication\", 800, \n          \"explore the power of modular Programming \", author_name)); \n        books.add(new Book(\"Learning Modular Java Programming\",  \n          9781235, \"packt pub publication\", 800, \n          \"explore the power of modular Programming \", author_name)); \n        ModelAndViewmodelAndView = \n          searchBookController.searchBookByAuthor(author_name); \n        ModelAndViewAssert.assertModelAttributeAvailable( \n          modelAndView, \"book_list\"); \n      } \n\n```", "```java\n      MockMvcmockMVC=   \n      MockMvcBuilders.xmlConfigSetUp(\"classpath:myConfig.xml\").build(); \n\n```", "```java\n      MockMvcmockMVC=  \n         MockMvcBuilders.annotationConfigSetUp(MyConfiog.class). \n                                                         build(); \n\n```", "```java\n      MockMvcmockMVC= MockMvcBuilders.standaloneSetUp( \n        newMyController()).build(); \n\n```", "```java\n      @Autowired \n      WebApplicationContextwebAppContext; \n      MockMvcmockMVC= MockMVCBuilders.webApplicationContextSetup( \n        webAppContext).build(); \n\n```", "```java\n      @WebAppConfiguration \n      @ContextConfiguration( \n        { \"file:WebContent/WEB-INF/books-servlet.xml\"}) \n      @RunWith(value = SpringJUnit4ClassRunner.class) \n      publicclassTestAddBookController { \n        @Autowired \n        WebApplicationContextwac; \n\n        MockMvcmockMVC; \n\n        @Autowired \n        AddBookControlleraddBookController; \n\n        @Before \n        publicvoidsetUp() throws Exception { \n          mockMVC= \n            MockMvcBuilders.standaloneSetup(addBookController).build(); \n        } \n      } \n\n```", "```java\n      @Test \n      publicvoidtestAddBook() { \n        try { \n          mockMVC.perform(MockMvcRequestBuilders.post(\"/addBook.htm\") \n          .contentType(MediaType.APPLICATION_FORM_URLENCODED) \n          .param(\"bookName\", \"Book_test\") \n          .param(\"author\", \"author_test\") \n          .param(\"description\", \"adding book for test\") \n          .param(\"ISBN\", \"1234\") \n          .param(\"price\", \"9191\") \n          .param(\"publication\", \"This is the test publication\") \n          .requestAttr(\"book\", new Book())) \n          .andExpect(MockMvcResultMatchers.view().name(\"display\")) \n          .andExpect(MockMvcResultMatchers.model(). \n            attribute(\"auth_name\",\"author_test\")) \n          .andDo(MockMvcResultHandlers.print()); \n        } catch (Exception e) { \n          // TODO: handle exception \n          fail(e.getMessage()); \n        } \n      } \n\n```", "```java\n      @Test \npublicvoidtestAddBook_Form_validation() { \n        try { \n          mockMVC.perform(MockMvcRequestBuilders.post(\"/addBook.htm\")                        .contentType(MediaType.APPLICATION_FORM_URLENCODED) \n          .param(\"bookName\", \"Book_test\") \n          .param(\"author\", \"author_test\") \n          .param(\"description\", \"adding book for test\") \n          .param(\"ISBN\", \"12345\") \n          .param(\"price\", \"9191\") \n          .param(\"publication\", \"This is the test publication\") \n          .requestAttr(\"book\", new Book())) \n          .andExpect(MockMvcResultMatchers.view().name(\"bookForm\")) \n          .andExpect(MockMvcResultMatchers .model(). \n            attributeHasErrors(\"book\")) \n          .andDo(MockMvcResultHandlers.print()); \n        }  \n        catch (Exception e) { \n          fail(e.getMessage()); \n          e.printStackTrace(); \n        } \n      }  \n\n```", "```java\n      MockHttpServletRequest: \n        HTTP Method = POST \n        Request URI = /addBook.htm \n        Parameters = {bookName=[Book_test],  \n      author=[author_test], \n      description=[adding book for test],  \n      ISBN=[1234],  \n      price=[9191], \n      publication=[This is the test publication]} \n      Headers = { \n        Content-Type=[application/x-www-form-urlencoded]} \n      Handler: \n        Type = com.packt.ch06.controllers.AddBookController \n        Method = public  \n      org.springframework.web.servlet.ModelAndView \n      com.packt.ch06.controllers.AddBookController. \n      addBook(com.packt.ch06.beans.Book,org. \n      springframework.validation.BindingResult)       \n      throwsjava.lang.Exception \n      Async: \n      Async started = false \n      Async result = null \n\n      Resolved Exception: \n        Type = null \n      ModelAndView: \n        View name = bookForm \n        View = null \n        Attribute = priceList \n        value = [300, 350, 400, 500, 550, 600] \n        Attribute = book \n        value = Book_test  adding book for test  9191 \n        errors = [Field error in object 'book' on field  \n          'description':  \n          rejected value [adding book for test];  \n          codes \n          [description.length.book.description, \n          description.length.description,description. \n          length.java.lang.String,description.length]; \n          arguments []; \n          default message [Please enter description  \n          within 40 charaters only]] \n      FlashMap: \n        Attributes = null \n      MockHttpServletResponse: \n        Status = 200 \n      Error message = null \n      Headers = {} \n      Content type = null \n      Body =  \n      Forwarded URL = bookForm \n      Redirected URL = null \n      Cookies = [] \n\n```", "```java\n      if (book.getDescription().length() < 10 ||   \n        book.getDescription().length() < 40)  \n      { \n        errors.rejectValue(\"description\", \"description.length\", \n          \"Please enter description within 40 charaters only\"); \n      } \n\n```", "```java\n      if (book.getDescription().length() < 10 ||\n        book.getDescription().length() > 40)  \n      { \n        errors.rejectValue(\"description\", \"description.length\", \n        \"Please enter description within 40 charaters only\"); \n      } \n\n```", "```java\n      @Test \n      publicvoidtestAddBook_Form_Field_Validation() \n      { \n        try { \n          mockMVC.perform(MockMvcRequestBuilders.post(\"/addBook.htm\") \n          .param(\"bookName\", \"\") \n          .param(\"author\", \"author_test\") \n          .param(\"description\",\" no desc\") \n          .param(\"ISBN\", \"123\") \n          .param(\"price\", \"9191\") \n          .param(\"publication\", \" \") \n          .requestAttr(\"book\", new Book())) \n          .andExpect(MockMvcResultMatchers.view().name(\"bookForm\"))  \n          .andExpect(MockMvcResultMatchers.model() \n          .attributeHasFieldErrors(\"book\", \"description\")).andExpect(\n            MockMvcResultMatchers.model() \n          .attributeHasFieldErrors(\"book\", \"ISBN\")).andExpect( \n            MockMvcResultMatchers.model() \n          .attributeHasFieldErrors(\"book\", \"bookName\")). \n            andDo(MockMvcResultHandlers.print()); \n        }catch(Exception ex) \n        { \n          fail(ex.getMessage()); \n        } \n      } \n\n```", "```java\n      @RunWith(SpringJUnit4ClassRunner.class) \n      @ContextConfiguration(\"classpath:connection_new.xml\") \n      publicclassTestBookService_Integration \n      { \n        @Autowired \n        BookServicebookService; \n      }   \n\n```", "```java\n      @Test \n      publicvoidtestAddBook() { \n        // Choose ISBN which is not there in book table \n        Book book = newBook(\"Book_Test\", 909098L, \"Test  \n        Publication\", 1000, \"Test Book description\", \"Test  \n        author\"); \n        booleanflag=bookService.addBook(book); \n        assertEquals(true, flag); \n      } \n\n```", "```java\n      @Override \n      @Transactional(readOnly=false) \n      publicbooleanaddBook(Book book) { \n        // TODO Auto-generated method stub \n\n        if (searchBook(book.getISBN()).getISBN() == 0) { \n          // \n        } \n      } \n\n```", "```java\n      @RequestMapping(\"/addBook.htm\") \n      publicModelAndViewaddBook(@Valid@ModelAttribute(\"book\") \n      Book book, BindingResultbindingResult) \n      throws Exception { \n        // same code as developed in the controller \n        // later on the list will be fetched from the table \n        List<Book>books = newArrayList(); \n\n        if (bookService.addBook(book)) { \n          books.add(book); \n        } \n        modelAndView.addObject(\"book_list\", books);   \n        modelAndView.addObject(\"auth_name\", book.getAuthor());  \n        returnmodelAndView; \n      } \n\n```"]