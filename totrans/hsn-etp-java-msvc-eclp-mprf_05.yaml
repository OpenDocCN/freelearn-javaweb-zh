- en: MicroProfile Config and Fault Tolerance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will start by introducing MicroProfile Config as it is the
    basis for the configuration of other MicroProfile features, in addition to application-level
    configuration. The MicroProfile Config specification provides a common way to
    retrieve configuration coming from a variety of sources (properties files, system
    properties, environment variables, databases, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics we will cover include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Reading configuration from your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing additional sources of configuration to your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing conversion from plain configuration into application-specific objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Eclipse MicroProfile Config
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every application needs some external configuration to adapt its behavior to
    the runtime platform it's running on. It can range from the HTTP endpoints that
    the application must connect to, or the size of some internal structures.
  prefs: []
  type: TYPE_NORMAL
- en: 'These configuration parameters can also come from different sources:'
  prefs: []
  type: TYPE_NORMAL
- en: From the operating system or the container in a cloud-native environment (through
    the use of environment variables)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From the Java virtual machine (with system properties)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From some external configuration files (such as the Java properties file)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From other places (an LDAP server, database, key-value store, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the one hand, these configuration parameters come from many different sources.
    On the ...
  prefs: []
  type: TYPE_NORMAL
- en: Reading configuration from the MicroProfile Config API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The MicroProfile Config specification defines two objects to read the value
    of configuration parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Config` object to programmatically access the configuration values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `@ConfigProperty` annotation to inject the configuration values using **Contexts
    and Dependency Injection** (**CDI**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's discuss them in detail.
  prefs: []
  type: TYPE_NORMAL
- en: The Config object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `org.eclipse.microprofile.config.Config` interface is the entry point to
    retrieve configuration in a Java application.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to get an instance of `Config`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first (and preferred) way is to use CDI to inject it into the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The second way is to call the static method, `org.eclipse.microprofile.config.ConfigProvider#getConfig()`,
    to obtain an instance of `Config`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Config` interface provides two methods to retrieve properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getValue(String propertyName, Class propertyType)`: This method throws a runtime exception
    if the property is not present in the configuration. This method must be used
    only for **mandatory** configuration ...'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The @ConfigProperty annotation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `@ConfigProperty` annotation can be used to inject configuration values
    in Java fields or method parameters using CDI, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `@ConfigProperty` annotation can have `defaultValue`, which is used to
    configure the field if the configuration property is not found in the underlying
    `Config`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If `defaultValue` is not set and no property is found, the application will
    throw `DeploymentException` as it cannot be properly configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is possible to use `Optional` if a configuration property might not be present,
    as shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: After reading the configuration, we need to provide source configuration sources,
    which will be covered in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Providing sources of configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The source of a configuration is represented by the `ConfigSource` interface.
    You do not need to implement this interface unless you want to provide a source
    of configurations that are not available by the MicroProfile implementation you
    use in your application.
  prefs: []
  type: TYPE_NORMAL
- en: If a property is found in multiple config sources, `Config` will return the
    value from the `ConfigSource` interface with the highest `ordinal` value.
  prefs: []
  type: TYPE_NORMAL
- en: Ordering `ConfigSource` is important as users can provide custom `ConfigSource` interfaces
    in addition to the default ones provided by the MicroProfile Config implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Default ConfigSources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, a MicroProfile Config implementation must provide three sources
    of configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: System properties from the Java virtual machine (with an ordinal of `400`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Environment variables (with an ordinal of `300`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Properties stored in `META-INF/microprofile-config.properties` (with an ordinal
    of `100`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ordinal value of a config source determines the precedence of the config
    source. In particular, if a property is defined both in the system properties
    and the environment variables, the value will be taken from the system properties
    (which has a higher ordinal than the environment variables).
  prefs: []
  type: TYPE_NORMAL
- en: There are no restrictions on the names of properties. However, some operating
    systems can impose some restrictions on the name of the environment variables
    (for example, `"."` is not allowed by most Unix shells). If you have a property
    that could be configured from the environment variables, you have to name your
    property accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the property name `my_url` can be used by an environment variable
    while `my.url` cannot.
  prefs: []
  type: TYPE_NORMAL
- en: '**New in MicroProfile Config 1.3** MicroProfile Config 1.3 introduces a mapping
    rule from the config property name to the environment variable. This rule searches
    three environment variable variants for each property name:'
  prefs: []
  type: TYPE_NORMAL
- en: Exact match
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace any non-alphanumeric character with `_`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace any non-alphanumeric character with `_` and use uppercase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This means that, in the Java application, we can have a property named `app.auth.url` and
    use the `APP_AUTH_URL` environment variable to configure it.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on to the other type of configuration source.
  prefs: []
  type: TYPE_NORMAL
- en: Custom ConfigSources implementations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is possible to provide additional sources of configuration in your application
    that will be automatically added by the MicroProfile Config implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to define an implementation of `org.eclipse.microprofile.config.spi.ConfigSource`
    and add a Java `ServiceLoader` configuration for it, and put that file in your
    application archive as `META-INF/services/``org.eclipse.microprofile.config.spi.ConfigSource`.
    For your reference, here is an example of the definition of an implementation
    of an environment `ConfigSource`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Using converters for high-level configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MicroProfile Config will read Java `String` objects from its `ConfigSource`.
    However, it provides facilities to *convert* these `String` objects into more
    specific types in your application.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the `myUrl` field we described previously is a `URL` object. The
    corresponding property, `my.url`, is read as a `String` object and then converted
    into a `URL` object before it is injected.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the application uses the `Config` object, the MicroProfile Config implementation
    will also convert the `String` object into the type passed as the second argument
    of the `getValue` and `getOptionalValue` methods. This conversion can be done
    using different converter types: built-in, automatic, and custom. We will talk
    about them in detail now.'
  prefs: []
  type: TYPE_NORMAL
- en: Built-in converters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MicroProfile Config implementation provides built-in converters for the
    primitive types (`boolean`, `int`, `long`, `byte`, `float`, and `double`) and
    their corresponding Java types (for example, `Integer`).
  prefs: []
  type: TYPE_NORMAL
- en: 'It also provides support for arrays in the property value using the `","` as
    the item separator. If the `","` must be part of an item, it must be escaped with
    a backslash `"\"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If the value of the `myPets` property is `dog,cat,dog\\,cat`, the elements of
    the array stored in `pets` would be `{"dog", "cat", "dog,cat"}`.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic converters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MicroProfile Config also defines *automatic converters*. If a converter is
    not known for a given Java type, it will attempt to convert a `String` object
    into it using any one of the three different approaches:'
  prefs: []
  type: TYPE_NORMAL
- en: The Java type has a public constructor with a `String` parameter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has a `public static valueOf(String)` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has a `public static parse(String)` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That's how the `my.url` property was converted from `String` into `URL` since
    the `java.net.URL` type has the `public URL(String)` constructor.
  prefs: []
  type: TYPE_NORMAL
- en: Custom converters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If your application defines Java types that do not provide any of these three cases
    covered by the automatic converters, MicroProfile Config can still provide conversion
    using custom converters that extend the `org.eclipse.microprofile.config.spi.Converter`
    interface defined in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You have to write an implementation of `org.eclipse.microprofile.config.spi.Converter`,
    then add its name to the `/META-INF/services/org.eclipse.microprofile.config.spi.Converter
    ...`
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Eclipse MicroProfile Fault Tolerance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fault Tolerance provides a collection of tools that prevent code from failing
    by making it more resilient. Most of these tools are inspired by development good
    practices (such as retry or fallback) or well-known development patterns (such
    as circuit breaker or bulkhead).
  prefs: []
  type: TYPE_NORMAL
- en: Fault Tolerance is based on CDI and, more precisely, on the CDI interceptor
    implementation. It also relies on the MicroProfile Config specification to allow
    external configuration for Fault Tolerance policies.
  prefs: []
  type: TYPE_NORMAL
- en: The main idea of the specification is to decouple business logic from Fault
    Tolerance boilerplate code. To achieve that, the specification defines interceptor-binding
    annotations to apply Fault Tolerance policies on a method execution or on a class
    (in that case, all class methods have the same policy).
  prefs: []
  type: TYPE_NORMAL
- en: 'Policies included in the Fault Tolerance specification are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Timeout**: This is applied with the `@Timeout` annotation. It adds a timeout
    to the current operation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Retry**: This is applied with the `@Retry` annotation. It adds retry behavior
    and allows its configuration on the current operation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fallback**: This is applied with the `@Fallback` annotation. It defines the
    code to execute, should the current operation fail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bulkhead**: This is applied with the `@Bulkhead` annotation. It isolates
    failures in the current operation to preserve the execution of other operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Circuit Breaker**: This is applied with the `@CircuitBreaker` annotation.
    It provides an automatic fast failing execution to prevent overloading the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Asynchronous**: This is applied with the `@Asynchronous` annotation. It makes
    the current operation asynchronous (that is, code will be invoked asynchronously).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying one or more of these policies is as easy as adding the required annotations
    on the method (or the class) for which you'd like to have these policies enabled.
    So, using Fault Tolerance is rather simple. But this simplicity doesn't prevent
    flexibility, thanks to all of the configuration parameters available for each
    policy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right now, the following vendors provide an implementation for the Fault Tolerance
    specification:'
  prefs: []
  type: TYPE_NORMAL
- en: Red Hat in Thorntail and Quarkus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IBM in Open Liberty
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Payara in Payara Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Safeguard for Hammock and TomEE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: KumuluzEE for KumuluzEE framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of these implementations support Fault Tolerance and hence support the same
    set of features that are described in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: MicroProfile Fault Tolerance in action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we just discussed, the Fault Tolerance specification provides a set of annotations
    that you have to apply on a class or method to enforce Fault Tolerance policies.
    That being said, you have to keep in mind that these annotations are interceptors
    binding and hence are only usable on CDI beans. So, be careful to define your
    class as CDI beans before applying Fault Tolerance annotations on them or their
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, you'll find usage examples for each Fault Tolerance
    annotation.
  prefs: []
  type: TYPE_NORMAL
- en: The @Asynchronous policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Making an operation asynchronous is as simple as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The only constraint is to have the `@Asynchronous` method return `Future` or
    `CompletionStage`; otherwise, the implementation should throw an exception.
  prefs: []
  type: TYPE_NORMAL
- en: The @Retry policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Should the operation fail, you can apply the retry policy to have the operation
    invoked again. The `@Retry` annotation can be used on a class or method level
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the previous example, the operation should be retried a maximum of five times
    only on `IOException`. If the total duration of all retries lasts more than 1,000
    ms, the operation will be aborted.
  prefs: []
  type: TYPE_NORMAL
- en: The @Fallback policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `@Fallback` annotation can only be applied on a method; annotating a class
    will give an unexpected result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The fallback method is called after the number of retries is reached. In the
    previous example, the method will be retried twice in case of an error, and then
    the fallback will be used to invoke another piece of code—in this case, the following
    `StringFallbackHandler` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Fallback code can be defined by a class implementing the `FallbackHandler` interface
    (see the previous code) or by a method in the current bean. In the `StringFallbackHandler`
    code, a MicroProfile Config property named `app1.requestFallbackReply` is used
    to externalize the application's fallback string value.
  prefs: []
  type: TYPE_NORMAL
- en: The @Timeout policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `@Timeout` annotation could be applied to a class or method to make sure
    that an operation doesn''t last forever:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, the operation will be stopped should it last more
    than 200 ms.
  prefs: []
  type: TYPE_NORMAL
- en: The @CircuitBreaker policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `@CircuitBreaker` annotation can be applied to a class or method. The circuit
    breaker pattern was introduced by Martin Fowler to protect the execution of an
    operation by making it fail fast in case of a dysfunction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the previous example, the method applies the `CircuitBreaker` policy. The
    circuit will be opened if three (*4 x 0.75*) failures occur among the rolling
    window of four consecutive invocations. The circuit will stay open for 1,000 ms
    and then be back to half-open. After a successful invocation, the circuit will
    be back to closed again.
  prefs: []
  type: TYPE_NORMAL
- en: The @Bulkhead policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `@Bulkhead` annotation can also be applied to a class or method to enforce
    the bulkhead policy. This pattern isolates failures in the current operation to
    preserve the execution of other operations. The implementation does this by limiting
    the number of concurrent invocations on a given method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code, this method only supports four invocations at the same
    time. Should more than four simultaneous requests come into the `bulkheadedOperation`
    method, the system will hold the fifth and later requests until one of the four
    active invocations completes. The bulkhead annotation can also be used with `@Asynchronous`
    to limit the thread number in an asynchronous ...
  prefs: []
  type: TYPE_NORMAL
- en: Tolerance with MicroProfile config
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in the previous sections, Fault Tolerance policies are applied by
    using annotations. For most use cases, this is enough, but for others, this approach
    may not be satisfactory because configuration is done at the source code level.
  prefs: []
  type: TYPE_NORMAL
- en: That's the reason why the parameters of MicroProfile Fault Tolerance annotations
    can be overridden using MicroProfile Config.
  prefs: []
  type: TYPE_NORMAL
- en: 'The annotation parameters can be overwritten via config properties using the
    following naming convention: `<classname>/<methodname>/<annotation>/<parameter>`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To override `maxDuration` for `@Retry` on the `doSomething` method in the `MyService`
    class, set the config property like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: If the parameters for a particular annotation need to be configured with the
    same value for a particular class, use the `<classname>/<annotation>/<parameter>`
    config property for configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, use the following config property to override all `maxRetries`
    for `@Retry` specified on the `MyService` class to 100:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Sometimes, the parameters need to be configured with the same value for the
    whole microservice (that is, all occurrences of the annotation in the deployment).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this circumstance, the `<annotation>/<parameter>` config property overrides
    the corresponding parameter value for the specified annotation. For instance,
    to override all `maxRetries` for all of `@Retry` to be 30, specify the following
    config property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This brings us to the end of discussion on Fault Tolerance in MicroProfile.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to use MicroProfile Config to configure MicroProfile
    applications and MicroProfile Fault Tolerance to make them more resilient.
  prefs: []
  type: TYPE_NORMAL
- en: In MicroProfile Config, the sources of the configuration can be many; some values
    come from properties files and others from system properties or environment variables,
    but they are all accessed consistently from the Java application. The values will
    likely differ according to the deployment environment (for example, testing and
    production) but that is transparent in the application code.
  prefs: []
  type: TYPE_NORMAL
- en: MicroProfile Fault Tolerance helps to prevent failure in applications by applying
    specific policies in the code. It comes with default behavior but can be configured
    thanks to MicroProfile ...
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the default sources of configuration properties supported by MicroProfile
    Config?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What can you do if you need to integrate another source of configuration properties?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are only the string type of properties supported?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Does injecting a configuration property into your code force you to provide
    a value for that property?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Suppose you have complex property types. Is there a way to integrate them into MicroProfile
    Config?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What happens when a Fault Tolerance annotation is applied to a class?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: there are at least 10 different Fault Tolerance policies?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Does a `@Retry` policy require a retry on all failures?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are we stuck with the Fault Tolerance annotation setting that is used in the
    application code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Additional details for the MicroProfile Config feature can be found in the MicroProfile
    Config specification at [https://github.com/eclipse/microprofile-config/releases](https://github.com/eclipse/microprofile-config/releases). Additional
    details for the MicroProfile Fault Tolerance feature can be found in the MicroProfile
    Config specification at [https://github.com/eclipse/microprofile-config/releases](https://github.com/eclipse/microprofile-fault-tolerance/releases).
  prefs: []
  type: TYPE_NORMAL
