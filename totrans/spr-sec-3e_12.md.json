["```java\n    //build.gradle\n    // Required for JSR-250 based security:\n    // JSR-250 Annotations\n\n compile ('javax.annotation:javax.annotation-api:1.3')    // Already provided by Spring Boot\n *// compile('cglib:cglib-nodep')*    // Already provided by Spring Boot\n    // Required for protect-pointcut\n *// compile('org.aspectj:aspectjweaver')*\n```", "```java\n    .antMatchers(\"/events/\").hasRole(\"ADMIN\")\n```", "```java\n    // allow users with ROLE_ADMIN\n\n    hasRole('ADMIN')\n\n    // allow users that do not have the ROLE_ADMIN\n\n     !hasRole('ADMIN')\n\n    // allow users that have ROLE_ADMIN or ROLE_ROOT and\n    // did not use the remember me feature to login\n\n    fullyAuthenticated() and hasAnyRole('ADMIN','ROOT')\n\n    // allow if Authentication.getName() equals admin\n\n    authentication.name == 'admin'\n```", "```java\n    // allows only HTTP GETrequest.method == 'GET'\n    // allow anyone to perform a GET, but\n    // other methods require ROLE_ADMIN\n\n    request.method == 'GET' ? permitAll : hasRole('ADMIN')\n```", "```java\n    hasIpAddress('192.168.1.93')\n```", "```java\n    hasIpAddress('192.168.1.0/24')\n```", "```java\n$ ifconfig wlan0     Link encap:Ethernet HWaddr a0:88:b4:8b:26:64 inet addr:192.168.1.93 Bcast:192.168.1.255 Mask:255.255.255.0\n```", "```java\n    .antMatchers(\"/events/\").hasRole(\"ADMIN\")\n```", "```java\n//src/main/resources/templates/fragments/header.html\n\n<html xmlns:th=\"http://www.thymeleaf.org\" xmlns:sec=\"http://www.thymeleaf.org/thymeleaf-extras-springsecurity4\">\n...\n<li sec:authorize-url=\"/events/\">\n<a id=\"navEventsLink\" th:href=\"@{/events/}\">All Events</a></li>\n```", "```java\n    <li sec:authorize-url=\"GET /events/\">\n    <a id=\"navEventsLink\" th:href=\"@{/events/}\">All Events</a></li>\n```", "```java\n    //src/main/resources/templates/fragments/header.html\n\n    <li sec:authorize=\"isAuthenticated()\"> \n    <a id=\"navMyEventsLink\" th:href=\"@{/events/my}\">My Events</a></li>\n```", "```java\n//src/main/java/com/packtpub/springsecurity/web/controllers/WelcomeController.java\n\n    @ModelAttribute (\"showCreateLink\")\n    public boolean showCreateLink(Authentication authentication) {\n      return authentication != null && \n      authentication.getName().contains(\"user\");\n    }\n```", "```java\n    //src/main/resources/templates/header.html\n\n    <li th:if=\"${showCreateLink}\"><a id=\"navCreateEventLink\"   \n    th:href=\"@{events/form}\">...</li>\n```", "```java\n//src/main/java/com/packtpub/springsecurity/web/controllers/WelcomeController.java\n\n    @ModelAttribute (\"showAdminLink\")\n    public boolean showAdminLink(Authentication authentication) {\n       return webInvocationPrivilegeEvaluator.\n       isAllowed(\"/admin/\", authentication);\n    }\n```", "```java\n    ApplicationContext context = WebApplicationContextUtils\n     .getRequiredWebApplicationContext(servletContext);\n    WebInvocationPrivilegeEvaluator privEvaluator =\n    context.getBean(WebInvocationPrivilegeEvaluator.class)\n```", "```java\n//src/main/resources/templates/header.html\n\n    <li th:if=\"${showAdminLink}\">\n     <a id=\"h2Link\" th:href=\"@{admin/h2/}\" target=\"_blank\">\n     H2 Database Console</a>\n    ...\n    </li>\n```", "```java\n    import org.springframework.security.access.prepost.PreAuthorize;\n    ...\n    public interface CalendarService {\n       ...\n     @PreAuthorize(\"hasRole('ADMIN')\")\n      List<Event> getEvents();\n    }\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n@Configuration\n@EnableWebSecurity\n@EnableGlobalMethodSecurity(prePostEnabled = true)\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n```", "```java\n    DEBUG ExceptionTranslationFilter - Access is denied \n    (user is not anonymous); delegating to AccessDeniedHandler\n    org.s.s.access.AccessDeniedException: Access is denied\n    at org.s.s.access.vote.AffirmativeBased.decide\n    at org.s.s.access.intercept.AbstractSecurityInterceptor.\n    beforeInvocation\n    at org.s.s.access.intercept.aopalliance.\n    MethodSecurityInterceptor.invoke\n    ...\n    at $Proxy16.getEvents\n    at com.packtpub.springsecurity.web.controllers.EventsController.events\n```", "```java\n    DefaultCalendarService originalService = context.getBean\n    (CalendarService.class)\n    CalendarService secureService = new CalendarService() {\n     Â¦ other methods just delegate to originalService ...\n      public List<Event> getEvents() {\n if(!permitted(originalService.getEvents)) {           throw AccessDeniedException()\n          }\n```", "```java\n       return originalCalendarService.getEvents()\n      }\n   };\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/configuration/\n        SecurityConfig.java\n\n        @Configuration\n        @EnableWebSecurity\n @EnableGlobalMethodSecurity(jsr250Enabled = true)        public class SecurityConfig extends WebSecurityConfigurerAdapter {\n```", "```java\n        @RolesAllowed(\"ROLE_ADMIN\")\n        List<Event> getEvents();\n```", "```java\n    @RolesAllowed({\"ROLE_USER\",\"ROLE_ADMIN\"})\n    List<Event> getEvents();\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n    @EnableWebSecurity(debug = true)\n    @EnableGlobalMethodSecurity(securedEnabled=true)\n    public class SecurityConfig extends WebSecurityConfigurerAdapter {\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n    @Configuration\n    @EnableWebSecurity\n    @EnableGlobalMethodSecurity(prePostEnabled = true)\n    public class SecurityConfig extends WebSecurityConfigurerAdapter {\n    Lastly, we can update our CalendarService interface as follows:\n    @PreAuthorize(\"hasRole('ADMIN') or principal.id == #userId\")  \n    List<Event> findForUser(int userId);\n```", "```java\n    @PostAuthorize(\"hasRole('ROLE_ADMIN') or \" + \"principal.username ==   \n    returnObject.owner.email or \" +\n    \"principal.username == returnObject.attendee.email\")\n    Event getEvent(int eventId);\n```", "```java\n    @PostFilter(\"principal.id == filterObject.owner.id or \" + \n    \"principal.id == filterObject.attendee.id\")\n    List<Event> getEvents();\n```", "```java\n    @PreFilter(\"principal.id == filterObject.owner.id\")\n    void save(Set<Event> events);\n```", "```java\n    build.gradle\n    dependencies {\n       // ACL\n       compile('org.springframework.security:spring-security-acl')\n      compile('net.sf.ehcache:ehcache')\n       ...\n    }\n```", "```java\n    src/main/java/com/packtpub/springsecurity/service/CalendarService.java\n    @PostFilter(\"hasPermission(filterObject, 'read')\")\n    List<Event> getEvents();\n```", "```java\nsrc/main/resources/schema.sql\n-- ACL Schema --\ncreate table acl_sid (\nid bigint generated by default as identity(start with 100) not\n   null primary key,\nprincipal boolean not null,\nsid varchar_ignorecase(100) not null,\nconstraint uk_acl_sid unique(sid,principal) );\n\ncreate table acl_class (\nid bigint generated by default as identity(start with 100) not\n   null primary key,\nclass varchar_ignorecase(500) not null,\nconstraint uk_acl_class unique(class) );\n\ncreate table acl_object_identity (\nid bigint generated by default as identity(start with 100) not\n   null primary key,\nobject_id_class bigint not null,\nobject_id_identity bigint not null,\nparent_object bigint,\nowner_sid bigint not null,\nentries_inheriting boolean not null,\nconstraint uk_acl_objid\n   unique(object_id_class,object_id_identity),\nconstraint fk_acl_obj_parent foreign\n   key(parent_object)references acl_object_identity(id),\nconstraint fk_acl_obj_class foreign\n   key(object_id_class)references acl_class(id),\nconstraint fk_acl_obj_owner foreign key(owner_sid)references\n   acl_sid(id) );\n\ncreate table acl_entry (\nid bigint generated by default as identity(start with 100) not\n   null primary key,\nacl_object_identity bigint not null,\nace_order int not null,\nsid bigint not null,\nmask integer not null,\ngranting boolean not null,\naudit_success boolean not null,\naudit_failure boolean not null,\nconstraint uk_acl_entry unique(acl_object_identity,ace_order),\nconstraint fk_acl_entry_obj_id foreign key(acl_object_identity)\nreferences acl_object_identity(id),\nconstraint fk_acl_entry_sid foreign key(sid) references\n   acl_sid(id) );\n```", "```java\n    src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java \n @EnableGlobalMethodSecurity(prePostEnabled = true)    @Import(AclConfig.class)\n    public class SecurityConfig extends WebSecurityConfigurerAdapter {\n```", "```java\n    src/main/java/com/packtpub/springsecurity/configuration/AclConfig.java\n    @Bean\n    public DefaultMethodSecurityExpressionHandler expressionHandler(){\n       DefaultMethodSecurityExpressionHandler dmseh =\n       new DefaultMethodSecurityExpressionHandler();\n      dmseh.setPermissionEvaluator(permissionEvaluator());\n       dmseh.setPermissionCacheOptimizer(permissionCacheOptimizer());\n       return dmseh; \n    }\n```", "```java\n     src/main/java/com/packtpub/springsecurity/configuration/AclConfig.java\n     @Bean\n    public AclPermissionCacheOptimizer permissionCacheOptimizer(){\n       return new AclPermissionCacheOptimizer(aclService());\n    }\n```", "```java\nsrc/main/java/com/packtpub/springsecurity/configuration/AclConfig.java\n@Bean\npublic AclPermissionEvaluator permissionEvaluator(){\n   return new AclPermissionEvaluator(aclService());\n}\n```", "```java\nsrc/main/java/com/packtpub/springsecurity/configuration/AclConfig.java\n@Autowired \nprivate DataSource dataSource;\n@Bean\npublic JdbcMutableAclService aclService(){\n```", "```java\n   return new JdbcMutableAclService(dataSource,\n                                     lookupStrategy(),\n                                     aclCache());\n}\n```", "```java\nsrc/main/java/com/packtpub/springsecurity/configuration/AclConfig.java\n@Bean\npublic LookupStrategy lookupStrategy(){\n   return new BasicLookupStrategy(\n           dataSource,\n           aclCache(),\n           aclAuthorizationStrategy(),\n           consoleAuditLogger());\n}\n```", "```java\nsrc/main/java/com/packtpub/springsecurity/configuration/AclConfig.java\n@Bean\npublic EhCacheBasedAclCache aclCache(){\n   return new EhCacheBasedAclCache(ehcache(),\n           permissionGrantingStrategy(),\n           aclAuthorizationStrategy()\n           );\n}\n\n@Bean\npublic PermissionGrantingStrategy permissionGrantingStrategy(){\n   return new DefaultPermissionGrantingStrategy(consoleAuditLogger());\n}\n\n@Bean\npublic Ehcache ehcache(){\n   EhCacheFactoryBean cacheFactoryBean = new EhCacheFactoryBean();\n   cacheFactoryBean.setCacheManager(cacheManager());\n   cacheFactoryBean.setCacheName(\"aclCache\");\n   cacheFactoryBean.setMaxBytesLocalHeap(\"1M\");\n   cacheFactoryBean.setMaxEntriesLocalHeap(0L);\n   cacheFactoryBean.afterPropertiesSet();\n   return cacheFactoryBean.getObject();\n}\n\n@Bean\npublic CacheManager cacheManager(){\n   EhCacheManagerFactoryBean cacheManager = new EhCacheManagerFactoryBean();\n   cacheManager.setAcceptExisting(true);   cacheManager.setCacheManagerName(CacheManager.getInstance().getName());\n   cacheManager.afterPropertiesSet();\nreturn cacheManager.getObject();\n}\n```", "```java\nsrc/main/java/com/packtpub/springsecurity/configuration/AclConfig.java\n@Bean\npublic ConsoleAuditLogger consoleAuditLogger(){\n   return new ConsoleAuditLogger();\n}\n```", "```java\nsrc/main/java/com/packtpub/springsecurity/configuration/AclConfig.java\n@Bean\npublic AclAuthorizationStrategy aclAuthorizationStrategy() {\n   return new AclAuthorizationStrategyImpl(\n           new SimpleGrantedAuthority(\"ROLE_ADMINISTRATOR\")\n   );\n}\n```", "```java\nsrc/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Import(AclConfig.class) public class SecurityConfig extends WebSecurityConfigurerAdapter {\n```", "```java\n        src/main/resources/data.sql\n        insert into acl_class (id, class) values (10, \n        'com.packtpub.springsecurity.domain.Event');\n```", "```java\n        src/main/resources/data.sql\n        insert into acl_sid (id, principal, sid) values (20, true,  \n        'user2@example.com');\n        insert into acl_sid (id, principal, sid) values (21, false, \n        'ROLE_USER');\n        insert into acl_sid (id, principal, sid) values (22, false, \n        'ROLE_ADMIN');\n```", "```java\n    src/main/resources/data.sql\n    insert into acl_object_identity(id,object_id_identity,object_id_class,\n    parent_object,owner_sid,entries_inheriting)\n    values (30, 100, 10, null, 20, false);\n    insert into acl_object_identity(id,object_id_identity,object_id_class,\n    parent_object,owner_sid,entries_inheriting) \n    values (31, 101, 10, null, 21, false);\n    insert into acl_object_identity(id,object_id_identity,object_id_class,\n    parent_object,owner_sid,entries_inheriting)\n    values (32, 102, 10, null, 21, false);\n```", "```java\n    src/main/resources/data.sql\n    insert into acl_entry\n   (acl_object_identity, ace_order, sid, mask, granting, audit_success, \n   audit_failure) values(30, 1, 20, 1, true, true, true);\n```", "```java\n    src/main/java/com/packtpub/springsecurity/service/CalendarService.java\n    @PostAuthorize(\"hasPermission(filterObject, 'read') \" +\n    \"or hasPermission(filterObject, 'admin_read')\")\n    Event getEvent(int eventId);\n```", "```java\n    src/main/resources/data.sql\n    insert into acl_entry\n   (acl_object_identity, ace_order, sid, mask, granting, \n   audit_success, audit_failure) values(30, 1, 20, 3, true, true, true);\n```", "```java\n        package com.packtpub.springsecurity.acls.domain;\n        public class CustomPermission extends BasePermission {\n           public static final Permission ADMIN_READ = new \n           CustomPermission(1 << 5, 'M'); // 32\n           public CustomPermission(int mask, char code) {\n               super(mask, code);\n           }\n        }\n```", "```java\n        src/main/java/com/packtpub/springsecurity/configuration/\n        AclConfig.java\n        @Bean\n        public DefaultPermissionFactory permissionFactory(){\n         return new DefaultPermissionFactory(CustomPermission.class);\n        }\n```", "```java\nsrc/main/java/com/packtpub/springsecurity/configuration/AclConfig.java\n@Bean\npublic AclPermissionEvaluator permissionEvaluator(){\n   AclPermissionEvaluator pe = new\n                               AclPermissionEvaluator(aclService());\n pe.setPermissionFactory(permissionFactory());   return pe;\n}\n@Bean\npublic LookupStrategy lookupStrategy(){\n   BasicLookupStrategy ls = new BasicLookupStrategy(\n                                       dataSource,\n                                       aclCache(),\n                                      aclAuthorizationStrategy(),\n                                      consoleAuditLogger());\n ls.setPermissionFactory(permissionFactory());   return ls;\n}\n```", "```java\n        src/main/resources/data.sql\n        insert into acl_sid (id, principal, sid) values (23, true,   \n        'admin1@example.com');\n        insert into acl_entry (acl_object_identity, ace_order, sid, \n        mask, granting, audit_success, audit_failure) \n        values(31, 1, 23, 32, true, true, true);\n```", "```java\n        @PostFilter(\"hasPermission(filterObject, 'read') \" + \"or    \n        hasPermission(filterObject, 'admin_read')\")\n        List<Event> getEvents();\n```", "```java\n        src/main/java/com/packtpub/springsecurity/service/\n        CalendarService.java\n        List<Event> getEvents();\n```", "```java\n        src/main/resources/templates/events/list.html\n        <tr th:each=\"event : ${events}\"\n sec:authorize-acl=\"${event} :: '1,32'\">           <td th:text=\"${#calendars.format(event.when, \n           'yyyy-MM-dd HH:mm')}\">today</td>\n           <td th:text=\"${event.owner.name}\"></td>\n           <td th:text=\"${event.attendee.name}\"> </td>\n           <td><a th:href=\"@{'/events/{id}'(id=${event.id})}\"\n           th:text=\"${event.summary}\"></a></td>\n        </tr>\n```", "```java\n        src/main/java/com/packtpub/springsecurity/configuration/\n        AclConfig.java\n        @Bean\n        public DefaultWebSecurityExpressionHandler webExpressionHandler(){\n           return new DefaultWebSecurityExpressionHandler(){{\n              setPermissionEvaluator(permissionEvaluator());\n          }};\n        }\n```", "```java\n        src/main/java/com/packtpub/springsecurity/configuration/\n        SecurityConfig.java\n        @Autowired\n        private DefaultWebSecurityExpressionHandler webExpressionHandler;\n        @Override\n        protected void configure(HttpSecurity http) throws Exception {\n           http.authorizeRequests()\n             .expressionHandler(webExpressionHandler);\n           ...\n        }\n```", "```java\n        src/main/java/com/packtpub/springsecurity/service/\n        DefaultCalendarService.java\n        public class DefaultCalendarService implements CalendarService {\n           ...\n           private final MutableAclService aclService;\n           private final UserContext userContext;\n            @Autowired\n            public DefaultCalendarService(EventDao eventDao,\n            CalendarUserDao userDao, CalendarUserRepository userRepository,\n            PasswordEncoder passwordEncoder, MutableAclService aclService,\n            UserContext userContext) {\n                   ...\n                  this.aclService = aclService;\n                  this.userContext = userContext;\n               }\n```", "```java\n        src/main/java/com/packtpub/springsecurity/service/\n        DefaultCalendarService.java\n        @Transactional\n        public int createEvent(Event event) {\n int result = eventDao.createEvent(event); event.setId(result); // Add new ACL Entry: MutableAcl acl = aclService.createAcl\n           (new ObjectIdentityImpl(event)); PrincipalSid sid = new PrincipalSid(\n userContext.getCurrentUser().getEmail()); acl.setOwner(sid); acl.insertAce(0, BasePermission.READ, sid, true); aclService.updateAcl(acl); return result;        }\n```"]