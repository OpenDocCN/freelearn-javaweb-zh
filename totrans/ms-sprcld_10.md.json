["```java\ndocker run -d --name consul -p 8500:8500 consul\n```", "```java\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-consul-all</artifactId>\n</dependency>\n```", "```java\nspring:\n cloud:\n  consul:\n   host: 192.168.99.100\n   port: 18500\n```", "```java\n@SpringBootApplication\n@EnableDiscoveryClient\n@EnableFeignClients\npublic class CustomerApplication {\n\n    public static void main(String[] args) {\n        new SpringApplicationBuilder(CustomerApplication.class).web(true).run(args);\n    }\n\n}\n```", "```java\nspring:\n cloud:\n  consul:\n   discovery:\n    instanceId: ${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${random.value}}}\n```", "```java\n\"customer-service-zone1-8092\": {\n \"ID\": \"customer-service-zone1-8092\",\n \"Service\": \"customer-service\",\n \"Tags\": [],\n \"Address\": \"minkowp-l.p4.org\",\n \"Port\": 8092,\n \"EnableTagOverride\": false,\n \"CreateIndex\": 0,\n \"ModifyIndex\": 0\n},\n\"order-service-zone1-8090\": {\n \"ID\": \"order-service-zone1-8090\",\n \"Service\": \"order-service\",\n \"Tags\": [],\n \"Address\": \"minkowp-l.p4.org\",\n \"Port\": 8090,\n \"EnableTagOverride\": false,\n \"CreateIndex\": 0,\n \"ModifyIndex\": 0\n}\n```", "```java\nspring:\n cloud:\n  consul:\n   discovery:\n    healthCheckPath: admin/health\n    healthCheckInterval: 20s\n```", "```java\nspring: \n application:\n  name: order-service\n cloud:\n  consul:\n   host: 192.168.99.100\n   port: 8500\n\n---\nspring:\n profiles: zone1\n cloud:\n  consul:\n   discovery:\n    instanceZone: zone1\nserver: \n port: ${PORT:8090}\n\n---\nspring:\n profiles: zone2\n  cloud:\n   consul:\n    discovery:\n     instanceZone: zone2\nserver: \n port: ${PORT:9090}\n```", "```java\n---\nspring:\n profiles: zone1\n cloud:\n consul:\n discovery:\n instanceZone: zone1\n register: false\n registerHealthCheck: false\nserver: \n port: ${PORT:8080}\n\n---\nspring:\n profiles: zone2\n cloud:\n consul:\n discovery:\n instanceZone: zone2\n register: false\n registerHealthCheck: false\nserver: \n port: ${PORT:9080}\n```", "```java\ndocker run -d --name consul-1 -p 8500:8500 -e CONSUL_BIND_INTERFACE=eth0 consul\n```", "```java\ndocker run -d --name consul-2 -p 8501:8500 consul agent -server -client=0.0.0.0 -join=172.17.0.2\ndocker run -d --name consul-3 -p 8502:8500 consul agent -server -client=0.0.0.0 -join=172.17.0.2\n```", "```java\nspring: \n application:\n  name: customer-service\n cloud:\n  consul:\n   host: 192.168.99.100\n   port: 8501\n```", "```java\nspring:\n cloud:\n  consul:\n   config:\n    enabled: true\n    prefix: props\n    defaultContext: app\n    profileSeparator: '::'\n```", "```java\n@Bean\nCustomerRepository repository() {\n    CustomerRepository repository = new CustomerRepository();\n    repository.add(new Customer(\"John Scott\", CustomerType.NEW));\n    repository.add(new Customer(\"Adam Smith\", CustomerType.REGULAR));\n    repository.add(new Customer(\"Jacob Ryan\", CustomerType.VIP));\n    return repository;\n}\n```", "```java\n@RefreshScope\n@Repository\n@ConfigurationProperties(prefix = \"repository\")\npublic class CustomerRepository {\n\n    private List<Customer> customers = new ArrayList<>();\n\n    public List<Customer> getCustomers() {\n        return customers;\n    }\n\n    public void setCustomers(List<Customer> customers) {\n        this.customers = customers;\n    }\n    // ...\n}\n```", "```java\nRefresh keys changed: [repository.customers[1].name]\n```", "```java\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-zookeeper-all</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```", "```java\nspring:\n cloud:\n  zookeeper:\n   connect-string: 192.168.99.100:2181\n```", "```java\ndocker run -d --name zookeeper --restart always -p 2181:2181 zookeeper\n```", "```java\ndocker run -it --rm --link zookeeper:zookeeper zookeeper zkCli.sh -server zookeeper\n```", "```java\nspring: \n application:\n  name: order-service\n cloud:\n  zookeeper:\n   connect-string: 192.168.99.100:2181\n  dependency:\n   resttemplate:\n    enabled: false\n  dependencies:\n   account:\n    path: account-service\n    loadBalancerType: ROUND_ROBIN\n    required: true\n   customer:\n    path: customer-service\n    loadBalancerType: ROUND_ROBIN\n    required: true\n   product:\n    path: product-service\n    loadBalancerType: ROUND_ROBIN\n    required: true\n```", "```java\n@FeignClient(name = \"customer\")\npublic interface CustomerClient {\n\n    @GetMapping(\"/withAccounts/{customerId}\")\n    Customer findByIdWithAccounts(@PathVariable(\"customerId\") Long customerId); \n\n}\n```", "```java\n---\nspring:\n profiles: zone1\nserver: \n port: ${PORT:8090}\n\n---\nspring:\n profiles: zone2\nserver: \n port: ${PORT:9090}\n```"]