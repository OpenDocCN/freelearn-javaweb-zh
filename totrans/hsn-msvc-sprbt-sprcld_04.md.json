["```java\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```", "```java\nbrew --version\n```", "```java\nHomebrew 1.7.7\n```", "```java\nbrew tap pivotal/tap && \\\nbrew cask install java && \\\nbrew install jq && \\\nbrew install springboot\n```", "```java\ngit --version\njava -version\ncurl --version\njq --version\nspring --version \n```", "```java\nexport BOOK_HOME=~/Documents/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud\ngit clone https://github.com/PacktPublishing/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud $BOOK_HOME\ncd $BOOK_HOME/Chapter03\n```", "```java\nspring init \\\n--boot-version=2.1.0.RC1 \\\n--build=gradle \\\n--java-version=1.8 \\\n--packaging=jar \\\n--name=product-service \\\n--package-name=se.magnus.microservices.core.product \\\n--groupId=se.magnus.microservices.core.product \\\n--dependencies=actuator,webflux \\\n--version=1.0.0-SNAPSHOT \\\nproduct-service\n```", "```java\nmkdir some-temp-folder cd some-temp-folder\n$BOOK_HOME/Chapter03/1-spring-init/create-projects.bash\n```", "```java\nmicroservices/\n├── product-composite-service\n├── product-service\n├── recommendation-service\n└── review-service\n```", "```java\nfind microservices/product-service -type f\n```", "```java\npackage se.magnus.microservices.core.product;\n\n@SpringBootApplication\npublic class ProductServiceApplication {\n   public static void main(String[] args) {\n      SpringApplication.run(ProductServiceApplication.class, args);\n   }\n}\n```", "```java\npackage se.magnus.microservices.core.product;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class ProductServiceApplicationTests {\n   @Test\n   public void contextLoads() {\n   }\n}\n```", "```java\nbuildscript {\n  ext {\n    springBootVersion = '2.1.0.RC1'\n  }\n  repositories {\n    mavenCentral()\n    maven { url \"https://repo.spring.io/snapshot\" }\n    maven { url \"https://repo.spring.io/milestone\" }\n  }\n  dependencies {\n    classpath(\"org.springframework.boot:spring-boot-gradle-\n    plugin:${springBootVersion}\")\n  }\n}\n\napply plugin: 'java'\napply plugin: 'eclipse'\napply plugin: 'org.springframework.boot'\napply plugin: 'io.spring.dependency-management'\n```", "```java\ngroup = 'se.magnus.microservices.core.product'\nversion = '1.0.0-SNAPSHOT'\nsourceCompatibility = 1.8\n\nrepositories {\n  mavenCentral()\n  maven { url \"https://repo.spring.io/snapshot\" }\n  maven { url \"https://repo.spring.io/milestone\" }\n}\n\ndependencies {\n  implementation('org.springframework.boot:spring-boot-starter-\n  actuator')\n  implementation('org.springframework.boot:spring-boot-starter-\n  webflux')\n  testImplementation('org.springframework.boot:spring-boot-starter-\n  test')\n  testImplementation('io.projectreactor:reactor-test')\n}\n```", "```java\ncd microservices/product-composite-service; ./gradlew build; cd -; \\\ncd microservices/product-service;           ./gradlew build; cd -; \\\ncd microservices/recommendation-service;    ./gradlew build; cd -; \\ cd microservices/review-service;            ./gradlew build; cd -; \n```", "```java\ncat <<EOF > settings.gradle\ninclude ':microservices:product-service'\ninclude ':microservices:review-service'\ninclude ':microservices:recommendation-service'\ninclude ':microservices:product-composite-service'\nEOF\n```", "```java\ncp -r microservices/product-service/gradle .\ncp microservices/product-service/gradlew .\ncp microservices/product-service/gradlew.bat .\ncp microservices/product-service/.gitignore .\n```", "```java\nfind microservices -depth -name \"gradle\" -exec rm -rfv \"{}\" \\; find microservices -depth -name \"gradlew*\" -exec rm -fv \"{}\" \\; \n```", "```java\n./gradlew build\n```", "```java\ncd $BOOK_HOME/Chapter03/1-spring-init\n\n./gradlew build\n```", "```java\nplugins {\n   id \"io.spring.dependency-management\" version \"1.0.5.RELEASE\"\n}\n\ndependencyManagement {\n  imports { mavenBom(\"org.springframework.boot:spring-boot-\n  dependencies:${springBootVersion}\") }\n}\n```", "```java\n$BOOK_HOME/Chapter03/2-basic-rest-services/api/src/main/java/se/magnus/api/core\n├── product\n│   ├── Product.java\n│   └── ProductService.java\n├── recommendation\n│   ├── Recommendation.java\n│   └── RecommendationService.java\n└── review\n    ├── Review.java\n    └── ReviewService.java\n```", "```java\npackage se.magnus.api.core.product;\n\npublic interface ProductService {\n    @GetMapping(\n        value    = \"/product/{productId}\",\n        produces = \"application/json\")\n     Product getProduct(@PathVariable int productId);\n}\n```", "```java\npublic class Product {\n private final int productId;\n private final String name;\n private final int weight;\n private final String serviceAddress;\n}\n```", "```java\ndependencies {\n   implementation project(':api')\n   implementation project(':util')\n```", "```java\n@SpringBootApplication\n@ComponentScan(\"se.magnus\")\npublic class ProductServiceApplication {\n```", "```java\npackage se.magnus.microservices.core.product.services;\n\n@RestController\npublic class ProductServiceImpl implements ProductService {\n}\n```", "```java\nprivate final ServiceUtil serviceUtil;\n\n@Autowired\npublic ProductServiceImpl(ServiceUtil serviceUtil) {\n    this.serviceUtil = serviceUtil;\n}\n```", "```java\n@Override\npublic Product getProduct(int productId) {\n return new Product(productId, \"name-\" + productId, 123, \n serviceUtil.getServiceAddress());\n}\n```", "```java\nserver.port: 7001\n\nlogging:\n  level:\n    root: INFO\n    se.magnus.microservices: DEBUG\n```", "```java\ncd $BOOK_HOME/Chapter03/2-basic-rest-services\n./gradlew build\njava -jar microservices/product-service/build/libs/*.jar &\n```", "```java\ncurl http://localhost:7001/product/123\n```", "```java\nkill $(jobs -p)\n```", "```java\n$BOOK_HOME/Chapter03/2-basic-rest-services/api\n└── src/main/java/se/magnus/api/composite\n    └── product\n        ├── ProductAggregate.java\n        ├── ProductCompositeService.java\n        ├── RecommendationSummary.java\n        ├── ReviewSummary.java\n        └── ServiceAddresses.java\n```", "```java\npackage se.magnus.api.composite.product;\n\npublic interface ProductCompositeService {\n    @GetMapping(\n        value    = \"/product-composite/{productId}\",\n        produces = \"application/json\")\n    ProductAggregate getProduct(@PathVariable int productId);\n}\n```", "```java\npackage se.magnus.api.composite.product;\n\npublic class ProductAggregate {\n    private final int productId;\n    private final String name;\n    private final int weight;\n    private final List<RecommendationSummary> recommendations;\n    private final List<ReviewSummary> reviews;\n    private final ServiceAddresses serviceAddresses;\n```", "```java\nserver.port: 7000\n\napp:\n  product-service:\n    host: localhost\n    port: 7001\n  recommendation-service:\n    host: localhost\n    port: 7002\n  review-service:\n    host: localhost\n    port: 7003\n```", "```java\npackage se.magnus.microservices.composite.product.services;\n\n@Component\npublic class ProductCompositeIntegration implements ProductService, RecommendationService, ReviewService {\n```", "```java\n@Bean\nRestTemplate restTemplate() {\n   return new RestTemplate();\n}\n```", "```java\nprivate final RestTemplate restTemplate;\nprivate final ObjectMapper mapper;\n\nprivate final String productServiceUrl;\nprivate final String recommendationServiceUrl;\nprivate final String reviewServiceUrl;\n\n@Autowired\npublic ProductCompositeIntegration(\n  RestTemplate restTemplate,\n  ObjectMapper mapper,\n\n  @Value(\"${app.product-service.host}\") String productServiceHost,\n  @Value(\"${app.product-service.port}\") int productServicePort,\n\n  @Value(\"${app.recommendation-service.host}\") String \n  recommendationServiceHost,\n  @Value(\"${app.recommendation-service.port}\") int \n  recommendationServicePort,\n\n  @Value(\"${app.review-service.host}\") String reviewServiceHost,\n  @Value(\"${app.review-service.port}\") int reviewServicePort\n)\n```", "```java\n{\n  this.restTemplate = restTemplate;\n  this.mapper = mapper;\n\n  productServiceUrl = \"http://\" + productServiceHost + \":\" + \n  productServicePort + \"/product/\";\n  recommendationServiceUrl = \"http://\" + recommendationServiceHost\n  + \":\" + recommendationServicePort + \"/recommendation?\n  productId=\"; reviewServiceUrl = \"http://\" + reviewServiceHost + \n  \":\" + reviewServicePort + \"/review?productId=\";\n}\n```", "```java\npublic Product getProduct(int productId) {\n String url = productServiceUrl + productId;\n Product product = restTemplate.getForObject(url, Product.class);\n return product;\n}\n\npublic List<Recommendation> getRecommendations(int productId) {\n    String url = recommendationServiceUrl + productId;\n    List<Recommendation> recommendations = \n    restTemplate.exchange(url, GET, null, new \n    ParameterizedTypeReference<List<Recommendation>>() \n    {}).getBody();\n    return recommendations;\n}\n\npublic List<Review> getReviews(int productId) {\n    String url = reviewServiceUrl + productId;\n    List<Review> reviews = restTemplate.exchange(url, GET, null,\n    new ParameterizedTypeReference<List<Review>>() {}).getBody();\n    return reviews;\n}\n```", "```java\npackage se.magnus.microservices.composite.product.services;\n\n@RestController\npublic class ProductCompositeServiceImpl implements ProductCompositeService {\n```", "```java\nprivate final ServiceUtil serviceUtil;\nprivate  ProductCompositeIntegration integration;\n\n@Autowired\npublic ProductCompositeServiceImpl(ServiceUtil serviceUtil, ProductCompositeIntegration integration) {\n    this.serviceUtil = serviceUtil;\n    this.integration = integration;\n}\n```", "```java\n@Override\npublic ProductAggregate getProduct(int productId) {\n    Product product = integration.getProduct(productId);\n    List<Recommendation> recommendations = \n    integration.getRecommendations(productId);\n    List<Review> reviews = integration.getReviews(productId);\n    return createProductAggregate(product, recommendations,\n    reviews, serviceUtil.getServiceAddress());\n}\n```", "```java\n@ResponseStatus(UNPROCESSABLE_ENTITY)\n@ExceptionHandler(InvalidInputException.class)\npublic @ResponseBody HttpErrorInfo handleInvalidInputException(ServerHttpRequest request, Exception ex) {\n    return createHttpErrorInfo(UNPROCESSABLE_ENTITY, request, ex);\n}\n```", "```java\nif (productId < 1) throw new InvalidInputException(\"Invalid productId: \n    \" + productId);\nif (productId == 13) throw new NotFoundException(\"No product found for \n    productId: \" + productId);\n```", "```java\ncatch (HttpClientErrorException ex) {\n\n    switch (ex.getStatusCode()) {\n\n    case NOT_FOUND:\n        throw new NotFoundException(getErrorMessage(ex));\n\n    case UNPROCESSABLE_ENTITY :\n        throw new InvalidInputException(getErrorMessage(ex));\n\n    default:\n        LOG.warn(\"Got a unexpected HTTP error: {}, will rethrow it\", \n        ex.getStatusCode());\n        LOG.warn(\"Error body: {}\", ex.getResponseBodyAsString());\n        throw ex;\n    }\n}\n```", "```java\ncd $BOOK_HOME/Chapter03/2-basic-rest-services/\n\n./gradlew build\n```", "```java\njava -jar microservices/product-composite-service/build/libs/*.jar &\njava -jar microservices/product-service/build/libs/*.jar &\njava -jar microservices/recommendation-service/build/libs/*.jar &\njava -jar microservices/review-service/build/libs/*.jar &\n```", "```java\ncurl http://localhost:7000/product-composite/1\n```", "```java\ncurl http://localhost:7000/product-composite/1 -s | jq .\n```", "```java\n\n# Verify that a 404 (Not Found) error is returned for a non-existing productId (13)\ncurl http://localhost:7000/product-composite/13 -i \n# Verify that no recommendations are returned for productId 113\ncurl http://localhost:7000/product-composite/113 -s | jq . \n# Verify that no reviews are returned for productId 213\ncurl http://localhost:7000/product-composite/213 -s | jq . \n# Verify that a 422 (Unprocessable Entity) error is returned for a productId that is out of range (-1)\ncurl http://localhost:7000/product-composite/-1 -i \n# Verify that a 400 (Bad Request) error is returned for a productId that is not a number, i.e. invalid format\ncurl http://localhost:7000/product-composite/invalidProductId -i \n```", "```java\nkill $(jobs -p)\n```", "```java\ngit clone https://github.com/thoeni/inetTester.git\njava -jar inetTester/bin/inetTester.jar\n```", "```java\n127.0.0.1 localhost Magnuss-Mac.local\n::1       localhost Magnuss-Mac.local\n```", "```java\n@Autowired\nprivate WebTestClient client;\n\n@Test\npublic void getProductById() {\n  client.get()\n    .uri(\"/product-composite/\" + PRODUCT_ID_OK)\n    .accept(APPLICATION_JSON_UTF8)\n    .exchange()\n    .expectStatus().isOk()\n    .expectHeader().contentType(APPLICATION_JSON_UTF8)\n    .expectBody()\n    .jsonPath(\"$.productId\").isEqualTo(PRODUCT_ID_OK)\n    .jsonPath(\"$.recommendations.length()\").isEqualTo(1)\n    .jsonPath(\"$.reviews.length()\").isEqualTo(1);\n}\n```", "```java\n\n@Test\npublic void getProductNotFound() {\n  client.get()\n    .uri(\"/product-composite/\" + PRODUCT_ID_NOT_FOUND)\n    .accept(APPLICATION_JSON_UTF8)\n    .exchange()\n    .expectStatus().isNotFound()\n    .expectHeader().contentType(APPLICATION_JSON_UTF8)\n    .expectBody()\n    .jsonPath(\"$.path\").isEqualTo(\"/product-composite/\" + \n     PRODUCT_ID_NOT_FOUND)\n    .jsonPath(\"$.message\").isEqualTo(\"NOT FOUND: \" + \n     PRODUCT_ID_NOT_FOUND);\n}\n```", "```java\nprivate static final int PRODUCT_ID_OK = 1;\nprivate static final int PRODUCT_ID_NOT_FOUND = 2;\nprivate static final int PRODUCT_ID_INVALID = 3;\n\n@MockBean\nprivate ProductCompositeIntegration compositeIntegration;\n\n@Before\npublic void setUp() {\n\n  when(compositeIntegration.getProduct(PRODUCT_ID_OK)).\n    thenReturn(new Product(PRODUCT_ID_OK, \"name\", 1, \"mock-address\"));\n  when(compositeIntegration.getRecommendations(PRODUCT_ID_OK)).\n    thenReturn(singletonList(new Recommendation(PRODUCT_ID_OK, 1, \n    \"author\", 1, \"content\", \"mock address\")));\n     when(compositeIntegration.getReviews(PRODUCT_ID_OK)).\n    thenReturn(singletonList(new Review(PRODUCT_ID_OK, 1, \"author\", \n    \"subject\", \"content\", \"mock address\")));\n\n  when(compositeIntegration.getProduct(PRODUCT_ID_NOT_FOUND)).\n    thenThrow(new NotFoundException(\"NOT FOUND: \" + \n    PRODUCT_ID_NOT_FOUND));\n\n  when(compositeIntegration.getProduct(PRODUCT_ID_INVALID)).\n    thenThrow(new InvalidInputException(\"INVALID: \" + \n    PRODUCT_ID_INVALID));\n}\n```", "```java\n./gradlew build\n```", "```java\n./gradlew test\n```", "```java\n# Verify that a normal request works, expect three recommendations and three reviews\nassertCurl 200 \"curl http://$HOST:${PORT}/product-composite/1 -s\"\nassertEqual 1 $(echo $RESPONSE | jq .productId)\nassertEqual 3 $(echo $RESPONSE | jq \".recommendations | length\")\nassertEqual 3 $(echo $RESPONSE | jq \".reviews | length\")\n\n```", "```java\n# Verify that a 404 (Not Found) error is returned for a non-existing productId (13)\nassertCurl 404 \"curl http://$HOST:${PORT}/product-composite/13 -s\" \n```", "```java\ncd $BOOK_HOME/Chapter03/2-basic-rest-services\njava -jar microservices/product-composite-service/build/libs/*.jar\n& java -jar microservices/product-service/build/libs/*.jar &\njava -jar microservices/recommendation-service/build/libs/*.jar &\njava -jar microservices/review-service/build/libs/*.jar &\n```", "```java\n./test-em-all.bash\n```", "```java\nkill $(jobs -p)\n```"]