["```java\nexport BOOK_HOME=~/Documents/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud\ngit clone https://github.com/PacktPublishing/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud $BOOK_HOME\ncd $BOOK_HOME/Chapter04\n```", "```java\ndocker run -it --rm ubuntu\n```", "```java\ncat /etc/os-release | grep 'VERSION='\n```", "```java\ndocker rm -f $(docker ps -aq)\n```", "```java\necho 'Runtime.getRuntime().availableProcessors()' | jshell -q\n```", "```java\njava -XX:+PrintFlagsFinal -version | grep MaxHeapSize \n```", "```java\njava -Xmx200m -XX:+PrintFlagsFinal -version | grep MaxHeapSize\n```", "```java\necho 'Runtime.getRuntime().availableProcessors()' | docker run --rm -i openjdk:12.0.2 jshell -q\n```", "```java\necho 'Runtime.getRuntime().availableProcessors()' | docker run --rm -i --cpus 3 openjdk:12.0.2 jshell -q\n```", "```java\necho 'Runtime.getRuntime().availableProcessors()' | docker run --rm -i --cpu-shares 2048 openjdk:12.0.2 jshell -q\n```", "```java\ndocker run -it --rm openjdk:12.0.2 java -XX:+PrintFlagsFinal -version | grep MaxHeapSize\n```", "```java\ndocker run -it --rm -m=1024M openjdk:12.0.2 java -XX:+PrintFlagsFinal -version | grep MaxHeapSize\n```", "```java\ndocker run -it --rm -m=1024M openjdk:12.0.2 java -Xmx800m -XX:+PrintFlagsFinal -version | grep MaxHeapSize\n```", "```java\necho 'new byte[100_000_000]' | docker run -i --rm -m=1024M openjdk:12.0.2 jshell -q\n```", "```java\necho 'new byte[500_000_000]' | docker run -i --rm -m=1024M openjdk:12.0.2 jshell -q\n```", "```java\necho 'Runtime.getRuntime().availableProcessors()' | docker run --rm -i --cpus 3 openjdk:9-jdk jshell -q\n```", "```java\necho 'Runtime.getRuntime().availableProcessors()' | docker run --rm -i --cpu-shares 2048 openjdk:9-jdk jshell -q\n```", "```java\ndocker run -it --rm -m=1024M openjdk:9-jdk java -XX:+PrintFlagsFinal -version | grep MaxHeapSize\n```", "```java\necho 'new byte[100_000_000]' | docker run -i --rm -m=1024M openjdk:9-jdk jshell -q\n```", "```java\necho 'new byte[500_000_000]' | docker run -i --rm -m=1024M openjdk:9-jdk jshell -q\n```", "```java\n---\nspring.profiles: docker\n\nserver.port: 8080\n```", "```java\nFROM openjdk:12.0.2\n\nEXPOSE 8080\n\nADD ./build/libs/*.jar app.jar\n\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n```", "```java\ncd $BOOK_HOME/Chapter04\n./gradlew :microservices:product-service:build\n```", "```java\ncd microservices/product-service\ndocker build -t product-service .\n```", "```java\ndocker images | grep product-service\n```", "```java\ndocker run --rm -p8080:8080 -e \"SPRING_PROFILES_ACTIVE=docker\" product-service\n```", "```java\ncurl localhost:8080/product/3\n```", "```java\ndocker ps\n```", "```java\ndocker run -d -p8080:8080 -e \"SPRING_PROFILES_ACTIVE=docker\" --name my-prd-srv product-service\n```", "```java\ndocker logs my-prd-srv -f\n```", "```java\ndocker rm -f my-prd-srv\n```", "```java\n---\nspring.profiles: docker\n\nserver.port: 8080\n\napp:\n  product-service:\n    host: product\n    port: 8080\n  recommendation-service:\n    host: recommendation\n    port: 8080\n  review-service:\n    host: review\n    port: 8080\n```", "```java\nversion: '2.1'\n\nservices:\n  product:\n    build: microservices/product-service\n    mem_limit: 350m\n    environment:\n      - SPRING_PROFILES_ACTIVE=docker\n\n  recommendation:\n    build: microservices/recommendation-service\n    mem_limit: 350m\n    environment:\n      - SPRING_PROFILES_ACTIVE=docker\n\n  review:\n    build: microservices/review-service\n    mem_limit: 350m\n    environment:\n      - SPRING_PROFILES_ACTIVE=docker\n\n  product-composite:\n    build: microservices/product-composite-service\n    mem_limit: 350m\n    ports:\n      - \"8080:8080\"\n    environment:\n      - SPRING_PROFILES_ACTIVE=docker\n```", "```java\ncd $BOOK_HOME/Chapter04\n./gradlew build\ndocker-compose build\n```", "```java\ndocker images | grep chapter04\n```", "```java\ndocker-compose up -d\n```", "```java\ndocker-compose logs -f\n```", "```java\ncurl localhost:8080/product-composite/123 -s | jq .\n```", "```java\ndocker-compose down \n```", "```java\nif [[ $@ == *\"start\"* ]]\nthen\n    echo \"Restarting the test environment...\"\n    echo \"$ docker-compose down\"\n    docker-compose down\n    echo \"$ docker-compose up -d\"\n    docker-compose up -d\nfi\n\n```", "```java\nwaitForService http://$HOST:${PORT}/product-composite/1\n```", "```java\nfunction testUrl() {\n    url=$@\n    if curl $url -ks -f -o /dev/null\n    then\n          echo \"Ok\"\n          return 0\n    else\n          echo -n \"not yet\"\n          return 1\n    fi;\n}\n\nfunction waitForService() {\n    url=$@\n    echo -n \"Wait for: $url... \"\n    n=0\n    until testUrl $url\n    do\n        n=$((n + 1))\n        if [[ $n == 100 ]]\n        then\n            echo \" Give up\"\n            exit 1\n        else\n            sleep 6\n            echo -n \", retry #$n \"\n        fi\n    done\n}\n```", "```java\nif [[ $@ == *\"stop\"* ]]\nthen\n    echo \"We are done, stopping the test environment...\"\n    echo \"$ docker-compose down\"\n    docker-compose down\nfi\n```", "```java\n./test-em-all.bash start stop\n```", "```java\ndocker-compose ps\n```", "```java\ndocker-compose logs product\n```", "```java\ndocker system prune -f --volumes\n```", "```java\ndocker-compose up -d --scale product=0\ndocker-compose up -d --scale product=1\n```", "```java\ndocker-compose up -d --scale product=1\n```", "```java\n./test-em-all.bash\n```", "```java\n  review:\n    build: microservices/review-service\n    ports:\n      - \"8080:8080\"\n    environment:\n      - SPRING_PROFILES_ACTIVE=docker\n\n  product-composite:\n    build: microservices/product-composite-service\n    ports:\n      - \"8080:8080\"\n    environment:\n      - SPRING_PROFILES_ACTIVE=docker\n```"]