["```java\nbrew install siege\n```", "```java\nexport BOOK_HOME=~/Documents/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud\ngit clone https://github.com/PacktPublishing/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud $BOOK_HOME\ncd $BOOK_HOME/Chapter16\n```", "```java\nspring.profiles: docker\nserver.port: 80\n```", "```java\nprivate final String productServiceUrl = \"http://product\";\nprivate final String recommendationServiceUrl = \"http://recommendation\";\nprivate final String reviewServiceUrl = \"http://review\";\n```", "```java\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: product\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: product\n  template:\n    metadata:\n      labels:\n        app: product\n    spec:\n      containers:\n      - name: pro\n```", "```java\n        image: hands-on/product-service\n        imagePullPolicy: Never\n        env:\n        - name: SPRING_PROFILES_ACTIVE\n          value: \"docker\"\n        envFrom:\n        - secretRef:\n            name: config-client-credentials\n        ports:\n        - containerPort: 80\n        resources:\n          limits:\n            memory: 350Mi\n```", "```java\n        livenessProbe:\n          httpGet:\n            scheme: HTTP\n            path: /actuator/info\n            port: 80\n          initialDelaySeconds: 10\n          periodSeconds: 10\n          timeoutSeconds: 2\n          failureThreshold: 20\n          successThreshold: 1\n        readinessProbe:\n          httpGet:\n            scheme: HTTP\n            path: /actuator/health\n            port: 80\n          initialDelaySeconds: 10\n          periodSeconds: 10\n          timeoutSeconds: 2\n          failureThreshold: 3\n          successThreshold: 1\n```", "```java\napiVersion: v1\nkind: Service\nmetadata:\n  name: product\nspec:\n  selector:\n    app: product\n  ports:\n  - port: 80\n    targetPort: 80\n```", "```java\napiVersion: v1\nkind: Service\nmetadata:\n name: gateway\nspec:\n type: NodePort\n selector:\n app: gateway\n ports:\n - port: 443\n nodePort: 31443\n targetPort: 8443\n```", "```java\nresources:\n- auth-server.yml\n- config-server.yml\n- gateway.yml\n- product-composite.yml\n- product.yml\n- recommendation.yml\n- review.yml\n- zipkin-server.yml\n```", "```java\nbases:\n- ../../base\nresources:\n- mongodb-dev.yml\n- rabbitmq-dev.yml\n- mysql-dev.yml\n```", "```java\ncd $BOOK_HOME/Chapter16\neval $(minikube docker-env)\n./gradlew build && docker-compose build\n```", "```java\n  product:\n    build: microservices/product-service\n    image: hands-on/product-service\n```", "```java\nkubectl create namespace hands-on\nkubectl config set-context $(kubectl config current-context) --namespace=hands-on\n```", "```java\nkubectl create configmap config-repo --from-file=config-repo/ --save-config\n```", "```java\nkubectl create secret generic config-server-secrets \\\n  --from-literal=ENCRYPT_KEY=my-very-secure-encrypt-key \\\n  --from-literal=SPRING_SECURITY_USER_NAME=dev-usr \\\n  --from-literal=SPRING_SECURITY_USER_PASSWORD=dev-pwd \\\n  --save-config\n```", "```java\nkubectl create secret generic config-client-credentials \\\n--from-literal=CONFIG_SERVER_USR=dev-usr \\\n--from-literal=CONFIG_SERVER_PWD=dev-pwd --save-config\n```", "```java\ndocker pull mysql:5.7\ndocker pull mongo:3.6.9\ndocker pull rabbitmq:3.7.8-management\ndocker pull openzipkin/zipkin:2.12.9\n```", "```java\nkubectl apply -k kubernetes/services/overlays/dev\n```", "```java\nkubectl wait --timeout=600s --for=condition=ready pod --all\n```", "```java\nkubectl get pods -o json | jq .items[].spec.containers[].image\n```", "```java\nEXEC=\"docker run --rm -it --network=my-network alpine\"\n```", "```java\necho \"Restarting alpine-client...\"\nlocal ns=$NAMESPACE\nif kubectl -n $ns get pod alpine-client > /dev/null ; then\n    kubectl -n $ns delete pod alpine-client --grace-period=1\nfi\nkubectl -n $ns run --restart=Never alpine-client --image=alpine --command -- sleep 600\necho \"Waiting for alpine-client to be ready...\"\nkubectl -n $ns wait --for=condition=Ready pod/alpine-client\n\nEXEC=\"kubectl -n $ns exec alpine-client --\"\n```", "```java\nkubectl -n $ns delete pod alpine-client --grace-period=1\n```", "```java\nif [ \"$HOST\" = \"localhost\" ]\nthen\n    EXEC=\"docker run --rm -it --network=my-network alpine\"\nelse\n    echo \"Restarting alpine-client...\"\n    ...\n    EXEC=\"kubectl -n $ns exec alpine-client --\"\nfi\n```", "```java\nassertEqual \"CLOSED\" \"$($EXEC wget product-composite:${MGM_PORT}/actuator/health -qO - | jq -r .details.productCircuitBreaker.details.state)\"\n```", "```java\nHOST=$(minikube ip) PORT=31443 ./test-em-all.bash\n```", "```java\nkubectl delete namespace hands-on\n```", "```java\nspring.profiles: prod\n```", "```java\nspring.rabbitmq.host: 172.17.0.1\nspring.data.mongodb.host: 172.17.0.1\nspring.datasource.url: jdbc:mysql://172.17.0.1:3306/review-db\n```", "```java\nlogging.level.root: WARN\n```", "```java\nmanagement.endpoints.web.exposure.include: health,info,circuitbreakerevents\n```", "```java\nimage: hands-on/product-service:v1\nenv:\n- name: SPRING_PROFILES_ACTIVE\n  value: \"docker,prod\"\n```", "```java\nenv:\n- name: LOGGING_LEVEL_ROOT\n  value: WARN\n- name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE\n  value: \"health,info\"\n- name: RABBIT_ADDRESSES\n  value: 172.17.0.1\n```", "```java\nbases:\n- ../../base\npatchesStrategicMerge:\n- auth-server-prod.yml\n- ...\n```", "```java\neval $(minikube docker-env)\ndocker-compose up -d mongodb mysql rabbitmq\n```", "```java\ndocker tag hands-on/auth-server hands-on/auth-server:v1\ndocker tag hands-on/config-server hands-on/config-server:v1\ndocker tag hands-on/gateway hands-on/gateway:v1 \ndocker tag hands-on/product-composite-service hands-on/product-composite-service:v1 \ndocker tag hands-on/product-service hands-on/product-service:v1\ndocker tag hands-on/recommendation-service hands-on/recommendation-service:v1\ndocker tag hands-on/review-service hands-on/review-service:v1\n```", "```java\nkubectl create namespace hands-on\nkubectl config set-context $(kubectl config current-context) --namespace=hands-on\n```", "```java\nkubectl create configmap config-repo --from-file=config-repo/ --save-config\n```", "```java\nkubectl create secret generic config-server-secrets \\\n  --from-literal=ENCRYPT_KEY=my-very-secure-encrypt-key \\\n  --from-literal=SPRING_SECURITY_USER_NAME=prod-usr \\\n  --from-literal=SPRING_SECURITY_USER_PASSWORD=prod-pwd \\\n  --save-config\n```", "```java\nkubectl create secret generic config-client-credentials \\\n--from-literal=CONFIG_SERVER_USR=prod-usr \\\n--from-literal=CONFIG_SERVER_PWD=prod-pwd --save-config\n```", "```java\nhistory -c; history -w\n```", "```java\nkubectl apply -k kubernetes/services/overlays/prod\n```", "```java\nkubectl wait --timeout=600s --for=condition=ready pod --all\n```", "```java\nkubectl get pods -o json | jq .items[].spec.containers[].image\n```", "```java\nHOST=$(minikube ip) PORT=31443 ./test-em-all.bash\n```", "```java\nkubectl get pod -l app=product -o jsonpath='{.items[*].spec.containers[*].image} '\n```", "```java\ndocker tag hands-on/product-service:v1 hands-on/product-service:v2\n```", "```java\nsiege https://$(minikube ip):31443/actuator/health -c1 -d1\n```", "```java\nkubectl get pod -l app=product -w\n```", "```java\nkubectl apply -k kubernetes/services/overlays/prod\n```", "```java\nkubectl get pod -l app=product -o jsonpath='{.items[*].spec.containers[*].image} '\n```", "```java\nkubectl set image deployment/product pro=hands-on/product-service:v3\n```", "```java\nkubectl rollout history deployment product\n```", "```java\nkubectl rollout history deployment product --revision=2\n```", "```java\nkubectl rollout undo deployment product --to-revision=2\n```", "```java\nkubectl get pod -l app=product -o jsonpath='{.items[*].spec.containers[*].image} '\n```", "```java\nkubectl delete namespace hands-on\n```", "```java\neval $(minikube docker-env)\ndocker-compose down\n```", "```java\napiVersion: v1\nkind: Service\nspec:\n  type: NodePort\n  ports:\n    - port: 80\n      nodePort: 30080\n      targetPort: 8080\n```"]