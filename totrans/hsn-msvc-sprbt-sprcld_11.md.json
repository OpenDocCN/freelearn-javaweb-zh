["```java\ncd $BOOK_HOME/chapter07\n./test-em-all.bash start\n```", "```java\ndocker-compose up -d --scale review=2\n```", "```java\ndocker-compose exec product-composite getent hosts review\n```", "```java\n172.19.0.9 review\n172.19.0.8 review\n```", "```java\ndocker-compose exec --index=1 review cat /etc/hosts\ndocker-compose exec --index=2 review cat /etc/hosts\n```", "```java\ncurl localhost:8080/product-composite/2 -s | jq -r .serviceAddresses.rev\n```", "```java\ncurl $HOST:$PORT/actuator/health -s | jq .details.myServiceCircuitBreaker\n```", "```java\nexport BOOK_HOME=~/Documents/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud\ngit clone https://github.com/PacktPublishing/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud $BOOK_HOME\ncd $BOOK_HOME/Chapter09\n```", "```java\ncd $BOOK_HOME/Chapter09\n./gradlew build && docker-compose build\n```", "```java\n./test-em-all.bash start\n```", "```java\neureka:\n  build: spring-cloud/eureka-server\n  mem_limit: 350m\n  ports:\n    - \"8761:8761\"\n```", "```java\nimplementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')\n```", "```java\n@SpringBootTest(webEnvironment=RANDOM_PORT, properties = {\"eureka.client.enabled=false\"})\n```", "```java\n@Bean\n@LoadBalanced\npublic WebClient.Builder loadBalancedWebClientBuilder() {\n  final WebClient.Builder builder = WebClient.builder();\n  return builder;\n}\n```", "```java\nprivate WebClient getWebClient() {\n    if (webClient == null) {\n        webClient = webClientBuilder.build();\n    }\n    return webClient;\n}\n```", "```java\n@Override\npublic Mono<Product> getProduct(int productId) {\n    String url = productServiceUrl + \"/product/\" + productId;\n    return getWebClient().get().uri(url).retrieve()\n        .bodyToMono(Product.class).log()\n        .onErrorMap(WebClientResponseException.class, ex -> handleException(ex));\n}\n```", "```java\napp:\n  product-service:\n    host: localhost\n    port: 7001\n  recommendation-service:\n    host: localhost\n    port: 7002\n  review-service:\n    host: localhost\n    port: 7003\n```", "```java\nprivate final String productServiceUrl = \"http://product\";\nprivate final String recommendationServiceUrl = \"http://recommendation\";\nprivate final String reviewServiceUrl = \"http://review\";\n```", "```java\nserver:\n  port: 8761\n\neureka:\n  instance:\n    hostname: localhost\n  client:\n    registerWithEureka: false\n    fetchRegistry: false\n    serviceUrl:\n      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/\n\n  server:\n    waitTimeInMsWhenSyncEmpty: 0\n    response-cache-update-interval-ms: 5000\n```", "```java\neureka:\n  client:\n    serviceUrl:\n defaultZone: http://localhost:8761/eureka/\n initialInstanceInfoReplicationIntervalSeconds: 5\n registryFetchIntervalSeconds: 5\n instance:\n leaseRenewalIntervalInSeconds: 5\n leaseExpirationDurationInSeconds: 5\n\n---\nspring.profiles: docker\n\neureka.client.serviceUrl.defaultZone: http://eureka:8761/eureka/\n```", "```java\nribbon.ServerListRefreshInterval: 5000\nribbon.NFLoadBalancerPingInterval: 5\n```", "```java\ndocker-compose up -d --scale review=3\n```", "```java\ncurl -H \"accept:application/json\" localhost:8761/eureka/apps -s | jq -r .applications.application[].instance[].instanceId\n```", "```java\ncurl localhost:8080/product-composite/2 -s | jq -r .serviceAddresses.rev\n```", "```java\ndocker-compose logs -f review\n```", "```java\ndocker-compose up -d --scale review=2\n```", "```java\ncurl localhost:8080/product-composite/2 -m 2\n```", "```java\ncurl: (28) Operation timed out after 2003 milliseconds with 0 bytes received\n```", "```java\ndocker-compose up -d --scale review=2 --scale eureka=0\n```", "```java\ncurl localhost:8080/product-composite/2 -s | jq -r .serviceAddresses.rev\n```", "```java\ndocker-compose up -d --scale review=1 --scale eureka=0\n```", "```java\ndocker-compose up -d --scale review=1 --scale eureka=0 --scale product=2\n```", "```java\ncurl localhost:8080/product-composite/2 -s | jq -r .serviceAddresses.pro\n```", "```java\ndocker-compose up -d --scale review=1 --scale eureka=1 --scale product=2\n```", "```java\ncurl localhost:8080/product-composite/2 -s | jq -r .serviceAddresses\n```", "```java\ndocker-compose down\n```"]