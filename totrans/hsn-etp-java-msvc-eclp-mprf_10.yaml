- en: MicroProfile Implementations, Quarkus, and Interoperability via the Conference
    Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the benefits of Eclipse MicroProfile is that it provides a specification
    that allows many implementations to be interoperable with each other. This benefit
    has encouraged many vendors and community groups to implement the Eclipse MicroProfile specification
    as open source implementations. There are currently eight implementations of Eclipse
    MicroProfile in the market, with a ninth entrant, Quarkus.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: A description of the eight implementations of Eclipse MicroProfile and how to
    find further information on each
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to generate Eclipse MicroProfile sample code for each of these implementations
    ...
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Current MicroProfile implementations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the time of writing, there are eight implementations of Eclipse MicroProfile,
    all of which are open source. Here is a table of these implementations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Open source project basis** | **Project location** | **Supporting vendor**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Thorntail ([http://thorntail.io/](http://thorntail.io/)) | [https://github.com/thorntail/thorntail](https://github.com/thorntail/thorntail)
    | Red Hat |'
  prefs: []
  type: TYPE_TB
- en: '| Open Liberty ([https://openliberty.io/](https://openliberty.io/)) | [https://github.com/openliberty](https://github.com/openliberty)
    | IBM |'
  prefs: []
  type: TYPE_TB
- en: '| Apache TomEE ([http://tomee.apache.org/](http://tomee.apache.org/)) | [https://github.com/apache/tomee](https://github.com/apache/tomee)
    | Tomitribe |'
  prefs: []
  type: TYPE_TB
- en: '| Payara Micro ([https://www.payara.fish/payara_micro](https://www.payara.fish/payara_micro))
    | [https://github.com/payara/Payara](https://github.com/payara/Payara) | Payara
    Services Ltd. |'
  prefs: []
  type: TYPE_TB
- en: '| Hammock ([https://hammock-project.github.io/](https://hammock-project.github.io/))
    | [https://github.com/hammock-project](https://github.com/hammock-project) | Hammock
    |'
  prefs: []
  type: TYPE_TB
- en: '| KumuluzEE ([https://ee.kumuluz.com/](https://ee.kumuluz.com/)) | [https://github.com/kumuluz](https://github.com/kumuluz)
    | KumuluzEE |'
  prefs: []
  type: TYPE_TB
- en: '| Launcher ([https://github.com/fujitsu/launcher](https://github.com/fujitsu/launcher))
    | [https://github.com/fujitsu/launcher](https://github.com/fujitsu/launcher) |
    Fujitsu |'
  prefs: []
  type: TYPE_TB
- en: '| Helidon ([https://helidon.io/#](https://helidon.io/#)) | [https://github.com/oracle/helidon](https://github.com/oracle/helidon)
    | Oracle |'
  prefs: []
  type: TYPE_TB
- en: Some of these implementations are based on *application servers*, such as Payara
    and Open Liberty, while others are based on *application assemblers* that include
    only the functionality that the application needs, instead of requiring an application
    server to be up and running, and commonly generate an executable JAR. However,
    the implementations based on application servers are also capable of producing
    executable JAR as well.
  prefs: []
  type: TYPE_NORMAL
- en: An application assembler can generate an *uberjar*, a self-contained runnable
    JAR file, or an *application jar* with its runtime dependencies located in a subdirectory,
    for example, an accompanying `lib` or `libs` subdirectory.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse MicroProfile implementations that pass the MicroProfile **Test Compatibility
    Kit** (**TCK**) for the entire umbrella release, or a specific version of a MicroProfile
    API are listed at [https://wiki.eclipse.org/MicroProfile/Implementation](https://wiki.eclipse.org/MicroProfile/Implementation).
    At the moment, inclusion in this list uses the honor system because it does not
    require proof of the TCK results; it just requires that the publishers assert
    that their implementation has passed the TCK.
  prefs: []
  type: TYPE_NORMAL
- en: The project also has a site where organizations/groups can self-include in the
    list of production deployments of MicroProfile. This list can be found at [https://wiki.eclipse.org/MicroProfile/Adoptions](https://wiki.eclipse.org/MicroProfile/Adoptions).
  prefs: []
  type: TYPE_NORMAL
- en: In the next sections, we provide brief descriptions of these implementations
    and how to get more information on each of them.
  prefs: []
  type: TYPE_NORMAL
- en: Thorntail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Red Hat are the sponsors of the open source Thorntail project, which implements
    the Eclipse MicroProfile specification. Thorntail is an application assembler
    that packages just the server runtime components required by your application
    and creates a runnable JAR (that is, an uberjar), which you can execute by invoking the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Not only is Thorntail MicroProfile-compatible, but it can also include functionality
    beyond MicroProfile in your application. It has the concept of a fraction, which
    is a specific library that contains functionality you want to include in your
    application. A fraction is included in the Maven POM file of your application
    as a dependency. Beyond the MicroProfile ...
  prefs: []
  type: TYPE_NORMAL
- en: Open Liberty
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'IBM are the sponsors of the open source Open Liberty project, which implements
    the Eclipse MicroProfile specification. Open Liberty is the upstream open source
    project for the IBM WebSphere Liberty application server. Open Liberty is an application
    server capable of generating an uberjar, which contains your application with
    an embedded Open Liberty server inside of it. To run the uberjar, you need to
    enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This command will explode the JAR file into your username's temporary directory,
    and then it will execute the application from there.
  prefs: []
  type: TYPE_NORMAL
- en: Ensure there are no spaces in the path to the JAR file, otherwise the start
    up process will fail.
  prefs: []
  type: TYPE_NORMAL
- en: The generated uberjar can contain only a subset of application server functionality
    as defined by the features included in the `server.xml` file. To build an uberjar
    with this minimal set of features, you need to use the `minify-runnable-package`
    profile when running Maven.
  prefs: []
  type: TYPE_NORMAL
- en: The Open Liberty documentation is very thorough and replete with guides and
    reference documents.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the Open Liberty documentation at [https://openliberty.io/docs/](https://openliberty.io/docs/).
  prefs: []
  type: TYPE_NORMAL
- en: In their documentation, they have a section dedicated to MicroProfile guides,
    which provide well-documented tutorials.
  prefs: []
  type: TYPE_NORMAL
- en: Apache TomEE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tomitribe are the sponsors of the open source TomEE project, which implements
    the Eclipse MicroProfile specification. Apache TomEE is assembled from Apache
    Tomcat with added Java EE features. TomEE is Java EE 6 Web Profile-certified.
    As its GitHub describes it, *Apache TomEE is a lightweight, yet powerful, JavaEE
    Application server with feature-rich tooling*. There are a few different versions
    of TomEE that you can download; for example, TomEE, TomEE+, and TomEE WebApp,
    but the one we are interested in is TomEE MicroProfile. For MicroProfile, TomEE
    generates an uberjar for your microservice, which you can run as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Although the TomEE MicroProfile documentation is scarce, a set of thorough ...
  prefs: []
  type: TYPE_NORMAL
- en: Payara Micro
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Payara are the sponsors of the open source Payara Micro project, which implements
    the Eclipse MicroProfile specification. Payara Server is based on the open source
    application server, GlassFish. Payara Micro is based on Payara Server, albeit
    a slimmed-down version of it. As their website describes, *Payara Micro is the
    microservices-ready version of Payara Server*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The way Payara Micro works is that a Payara Micro instance starts and then
    your MicroProfile microservice is deployed to it as a WAR file. For example, to
    start a Payara Micro instance, you would enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To start a Payara Micro instance and deploy your application to it, you would
    enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Payara Micro supports Java EE application deployments and it is also compatible
    with Eclipse MicroProfile.
  prefs: []
  type: TYPE_NORMAL
- en: For the Payara Micro documentation, please refer to [https://docs.payara.fish/documentation/payara-micro/payara-micro.html](https://docs.payara.fish/documentation/payara-micro/payara-micro.html).
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, Payara Micro supports automatic clustering by using a third-party in-memory
    data grid product.
  prefs: []
  type: TYPE_NORMAL
- en: Hammock
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'John Ament is the sponsor of the open source Hammock project, which implements
    the Eclipse MicroProfile specification. Similar to Thorntail, Hammock is an application
    assembler that generates uberjars. To run the uberjar, you need to enter the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Hammock is an opinionated microservices framework for building applications. It
    is a CDI-based framework, meaning that it is on a CDI container with CDI-based
    beans that run in it. It supports two CDI implementations (JBoss Weld and Apache
    OpenWebBeans), three JAX-RS implementations (Apache CXF, Jersey, and JBoss RestEasy),
    and three different servlet containers (Apache Tomcat, JBoss Undertow, and Eclipse
    Jetty). Besides these, Hammock also ...
  prefs: []
  type: TYPE_NORMAL
- en: KumuluzEE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sunesis are the sponsors of the open source KumuluzEE project, which implements
    the Eclipse MicroProfile specification. KumuluzEE defines itself as a lightweight
    microservices framework using Java and Java EE technologies and as Eclipse MicroProfile-compliant
    implementation. KumuluzEE allows you to bootstrap a Java EE application using
    just the components that you need, and it also supports the packing and running
    microservices as uberjars. Just like other implementations that support uberjars,
    you can run your microservices by entering the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: KumuluzEE also provides a POM generator that can create a `pom.xml` with the
    selected options and features you would like to include for the microservice you
    plan to develop. The POM generator provides a clear and organized list of profiles,
    components, and projects supported by KumuluzEE that you can select to include
    in the `pom.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: KumuluzEE provides a handful of samples for the different MicroProfile APIs.
  prefs: []
  type: TYPE_NORMAL
- en: For documentation related to the KumuluzEE implementation of Eclipse MicroProfile,
    refer to [https://ee.kumuluz.com/microprofile](https://ee.kumuluz.com/microprofile).
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, KumuluzEE provides some interesting tutorials at [https://ee.kumuluz.com/tutorials/](https://ee.kumuluz.com/tutorials/).
  prefs: []
  type: TYPE_NORMAL
- en: Launcher
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Fujitsu are the sponsors of the open source Launcher project, which implements
    the Eclipse MicroProfile specification. Launcher leverages an embedded GlassFish
    Server and Apache Geronimo MicroProfile API implementations. You can run your
    microservice as a WAR file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition, Launcher can create uberjars. To create and run your microservice
    as an uberjar, first generate the uberjar and then invoke it using `java -jar`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The documentation for Launcher is very scarce and limited. You can find usage
    information about Launcher at [https://github.com/fujitsu/launcher/blob/master/doc/Usage.adoc
    ...](https://github.com/fujitsu/launcher/blob/master/doc/Usage.adoc)
  prefs: []
  type: TYPE_NORMAL
- en: Helidon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Oracle Corporation are the sponsors of the open source Helidon project, which
    implements the Eclipse MicroProfile specification. Helidon is a set of Java libraries
    that enable a developer to write microservices. It leverages Netty, a non-blocking
    I/O client server framework. Helidon is an application assembler in that it generates
    application JAR. Once you have built the application JAR, you can execute it with
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Helidon comes in two flavors: SE and MP. Helidon SE is the functional programming
    style provided by all Helidon libraries and it provides a microservices framework
    called MicroFramework. Helidon MP implements the MicroProfile specification for
    microservices, and it''s built on top of Helidon libraries. There is no sample
    project generator tool, but Helidon provides a rich and thorough set of documentation
    manuals.'
  prefs: []
  type: TYPE_NORMAL
- en: The documentation for Helidon can be found at [https://helidon.io/docs/latest/#/about/01_overview](https://helidon.io/docs/latest/#/about/01_overview).
  prefs: []
  type: TYPE_NORMAL
- en: Helidon SE provides a WebServer, which is an asynchronous and reactive API for
    creating web applications. Helidon MP provides a MicroProfile server implementation
    that encapsulates the Helidon WebServer.
  prefs: []
  type: TYPE_NORMAL
- en: Generating sample code for the current implementations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As described in the previous sections, most MicroProfile implementations do
    not provide their own sample project generators. Instead, they just provide documentation.
    This is where the MicroProfile Starter comes to the rescue!
  prefs: []
  type: TYPE_NORMAL
- en: The MicroProfile Starter is sponsored by the MicroProfile community and is a
    tool that generates sample project and source code for the MicroProfile specifications
    for all of the MicroProfile implementations that have passed the MicroProfile
    TCK. In [Chapter 2](0f9d569f-1ffb-4662-8cea-c8b230a4d627.xhtml), *Governance and
    Contributions*, we gave you a tour of the MicroProfile Starter. To avoid being
    repetitive, we just want to point out that you can select the MicroProfile version
    in the drop-down menu as follows:  ...
  prefs: []
  type: TYPE_NORMAL
- en: Other projects that implement MicroProfile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SmallRye is an open source project that develops implementations of Eclipse
    MicroProfile usable by any vendor or project. It's a community effort and everyone
    is welcome to participate and contribute to SmallRye, [https://smallrye.io](https://smallrye.io).
    As an example of this, the community recently contributed the Extensions for MicroProfile
    project into SmallRye, hence enriching its functionality with extensions for Config
    Sources, OpenAPI, Health, JAX-RS, and REST Client.
  prefs: []
  type: TYPE_NORMAL
- en: The Extensions for MicroProfile project website is [https://www.microprofile-ext.org](https://www.microprofile-ext.org),
    and its GitHub is [https://github.com/microprofile-extensions](https://github.com/microprofile-extensions).
  prefs: []
  type: TYPE_NORMAL
- en: SmallRye implementations are tested against, and have passed, the Eclipse MicroProfile
    TCKs.
  prefs: []
  type: TYPE_NORMAL
- en: Open source projects that consume SmallRye are Thorntail ([https://thorntail.io](https://thorntail.io)),
    WildFly ([https://wildfly.org](https://wildfly.org)), and Quarkus ([https://quarkus.io](https://quarkus.io)).
  prefs: []
  type: TYPE_NORMAL
- en: Quarkus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The open source Quarkus project made its debut in 2019\. Quarkus is a Kubernetes-native
    Java stack with that can compile to native machine language or building to HotSpot
    (OpenJDK). When using Quarkus, your application consumes very little memory, has
    great performance that allows it to handle a high throughput of invocations, and
    has a very fast start up time (that is, boot plus first response time), making
    Quarkus a great runtime for containers, as well as cloud-native and serverless
    deployments. Quarkus also provides an extension framework that allows the *quarking* of
    libraries and projects to make them work seamlessly with Quarkus.
  prefs: []
  type: TYPE_NORMAL
- en: Quarkus's mission is to transform your full application and the libraries it
    uses into an optimal ...
  prefs: []
  type: TYPE_NORMAL
- en: How to quark a generated MicroProfile project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we start with the steps on how to *quark* a generated MicroProfile project
    by the MicroProfile Starter, we need to first make sure to have GRAALVM_HOME installed,
    defined, and configured in your environment. To this end, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to `https://github.com/oracle/graal/releases` and download the latest release
    of GraalVM for your operating system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Unzip the downloaded file into a sub-directory of your choosing. By the way,
    the unzipping will create a sub-directory for GraalVM, `/Users/[YOUR HOME DIRECTORY]/graalvm-ce-1.0.0-rc13`,
    for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Open a terminal window and create an environment variable called `GRAALVM_HOME`,
    for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have installed GraalVM, we can move on to the steps on how to *quark* a
    generated MicroProfile project with MicroProfile Starter:'
  prefs: []
  type: TYPE_NORMAL
- en: First, point your browser to [https://start.microprofile.io](https://start.microprofile.io)
    and select Thorntail as the MicroProfile Server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can leverage the following steps to *quark* any existing Java application
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't recall how to do this, go to [Chapter 2](0f9d569f-1ffb-4662-8cea-c8b230a4d627.xhtml),
    *Governance and Contributions*, and follow the instructions in the *Quick tour
    of the MicroProfile Starter* section up to step 5, where the `demo.zip` file is
    downloaded to your local `Downloads` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Expand the `demo.zip` file that the MicroProfile Starter generated under your
    `Downloads` local directory using your favorite unzipping tool. If your `demo.zip`
    file didn''t get automatically expanded, here are the commands to do it (assuming
    Linux; for Windows, please use the equivalent commands):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This will create a `demo` sub-directory with an entire directory tree structure
    under it with all the source files needed to build and run the Thorntail sample
    MicroProfile project using Maven.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of making changes in the `demo` sub-directory, let''s create a second
    directory called `Qproj4MP` alongside the `demo` sub-directory, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This should create a sub-directory called `Qproj4MP` at the same level as your
    existing `demo` sub-directory in your `Downloads` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change your directory to `Qproj4MP` and create an empty Quarkus project by
    entering the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the `Qproj4MP` directory, delete the `src` sub-directory and replace
    it with the `src` sub-directory from the Thorntail sample MicroProfile project
    by entering the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Quarkus and Thorntail differ in their expectations of where some configuration
    and web app-related files need to be. So, in order to make Quarkus happy, let''s
    copy some files around by entering the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: We could have moved these files from their original locations, but we chose
    to just copy them for this example.
  prefs: []
  type: TYPE_NORMAL
- en: The Thorntail sample MicroProfile project that was generated by MicroProfile
    Starter and whose `src` sub-directory contents you copied to `Qproj4MP` uses a
    security library called `bouncycastle`. The reason for this is that the generated
    code includes an example for the MicroProfile JWT Propagation specification, which
    allows you propagate security across microservices. Because of this, we also need
    to add two more dependencies to the Quarkus project POM file, one for `bouncycastle`
    and one for `nimbusds`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `bouncycastle` dependency will be removed from the Thorntail server code
    generation in the next sprint release of MicroProfile Starter.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add these dependencies, edit the `pom.xml` file under your `$HOME/Downloads/Qproj4MP`
    directory and, in the section for `<dependencies>`, enter the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We are now ready to compile the quarked MicroProfile project.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to supporting building a Java project to run on OpenJDK, Quarkus
    supports compiling a Java project all the way down to machine code. Enter the
    following command to compile the quarked sample project to native code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the application, enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: To test the application, please follow the instructions listed in [Chapter 2](0f9d569f-1ffb-4662-8cea-c8b230a4d627.xhtml),
    *Governance and Contributions*, in the *Quick tour of MicroProfile Starter* section, starting
    at step 10.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''d like to run the quarked project in development mode, first stop the
    running process and then enter the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: At this point, you can open up the project with an IDE of your choice, such
    as Visual Studio Code or Eclipse IDE, and start making changes to the source code.
    Quarkus supports hot reloads, meaning that, as soon as you make any changes to
    the source code, Quarkus rebuilds and redeploys your application in the background
    so that you can immediately see and test the effect of the changes. In addition,
    if you make a syntactical mistake in your source code, Quarkus will propagate
    meaningful error messages to the web app to help you fix your errors, making you
    more productive.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''d like to generate an executable application JAR, enter the following
    commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the executable application JAR, enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: A lib directory is created alongside the application JAR with the library files
    it needs to run.
  prefs: []
  type: TYPE_NORMAL
- en: We have shown you the steps to *quark* a MicroProfile project generated by MicroProfile
    Starter. Although these steps apply to a specific generated project, you could
    use the same instructions to *quark* an existing Java application or microservice
    so that you can take advantage of the benefits that Quarkus provides, such as
    low memory consumption, fast start up time, and native compilation of your Java
    code so that you can run it efficiently in containers, the cloud, and Function-as-a-Service
    environments. No matter which implementation of MicroProfile you are using, a
    big benefit that MicroProfile provides to end users is interoperability. This
    means that you can design an application with microservices that use different
    implementations of MicroProfile, which is the topic of the following section.
  prefs: []
  type: TYPE_NORMAL
- en: MicroProfile interoperability – the conference application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Conference Application**, first presented ([https://www.youtube.com/watch?v=iG-XvoIfKtg](https://www.youtube.com/watch?v=iG-XvoIfKtg))
    during Devoxx Belgium in November 2016, is a MicroProfile demo that showcases
    the integration and interoperability of different MicroProfile vendor implementations.
    This is important because it demonstrates the separation between implementation
    and interfaces of the specification, which provides a platform that allows vendors
    to develop and provide their own implementation that could coexist side by side
    with other competing implementations. The common interfaces across all implementations
    also provided end users with the benefit of flexibility and choice to use whichever
    MicroProfile implementation(s) ...
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned about the open source MicroProfile implementations
    that currently exist on the market, what types of implementation they are, how
    to get more information about each of them, and how to generate sample code for
    these implementations using MicroProfile Starter. We have also covered the latest
    MicroProfile implementation entrant, Quarkus, which introduces significant improvements
    to Java in start up time and memory consumption in interpreted and compiled modes,
    improving MicroProfile for cloud-native microservices and serverless environments
    even more. You also learned about The Conference Application, which demonstrates
    the interoperability of MicroProfile across different implementations.
  prefs: []
  type: TYPE_NORMAL
- en: As a consumer of Eclipse MicroProfile and its nature of being interoperable
    across implementations, you have the freedom to select the implementation that
    makes the most sense to your organization or is the best fit for your environment,
    ultimately giving you the option to choose the right tool for the right task.
    Moreover, you don't need to be stuck with a single vendor for a commercially supported
    version of Eclipse MicroProfile, and, as a result of this, you have the advantage
    to negotiate on your terms and select from a rich set of MicroProfile features
    offered by different vendors.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover a full code sample for the entire set of
    MicroProfile APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At present, how many implementations of MicroProfile exist in the market? List
    them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between an application server and an application assembler?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Describe each of the eight implementations of MicroProfile that exist in the
    market.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is Quarkus?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is compile-time boot?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What types of deployment is Quarkus a great runtime for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the Quarkus extension framework?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the key benefit that The Conference Application demonstrates?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
