["```java\nkeytool -genkey -keyalg RSA -alias selfsigned -keystore keystore.jks -ext san=dns:localhost -storepass password -validity 365 -keysize 2048 \n```", "```java\nkeytool -importcert -file path/to/.crt -alias <cert alias> -  keystore <JRE/JAVA_HOME>/jre/lib/security/cacerts -storepass changeit \n```", "```java\nserver: \n    ssl: \n        key-store: classpath:keystore.jks \n        key-store-password: password \n        key-password: password \n    port: 8765 \n```", "```java\n <dependency> \n   <groupId>org.springframework.cloud</groupId> \n   <artifactId>spring-cloud-starter-security</artifactId> \n</dependency> \n<dependency> \n   <groupId>org.springframework.cloud</groupId> \n   <artifactId>spring-cloud-starter-oauth2</artifactId> \n</dependency> \n```", "```java\n@SpringBootApplication \n@RestController \n@EnableResourceServer \npublic class SecurityApp { \n\n    @RequestMapping(\"/user\") \n    public Principal user(Principal user) { \n        return user; \n    } \n\n    public static void main(String[] args) { \n        SpringApplication.run(SecurityApp.class, args); \n    } \n\n    @Configuration \n    @EnableAuthorizationServer \n    protected static class OAuth2Config extends AuthorizationServerConfigurerAdapter { \n\n        @Autowired \n        private AuthenticationManager authenticationManager; \n\n        @Override \n        public void configure(AuthorizationServerEndpointsConfigurer endpointsConfigurer) throws Exception { \n            endpointsConfigurer.authenticationManager(authenticationManager); \n        } \n\n        @Override \n        public void configure(ClientDetailsServiceConfigurer clientDetailsServiceConfigurer) throws Exception { \n  // Using hardcoded inmemory mechanism because it is just an example \n            clientDetailsServiceConfigurer.inMemory() \n             .withClient(\"acme\") \n             .secret(\"acmesecret\") \n             .authorizedGrantTypes(\"authorization_code\", \"refresh_token\", \"implicit\", \"password\", \"client_credentials\") \n             .scopes(\"webshop\"); \n        } \n    } \n}\n```", "```java\napplication.yml \ninfo: \n    component: \n        Security Server \n\nserver: \n    port: 9001 \n    ssl: \n        key-store: classpath:keystore.jks \n        key-store-password: password \n        key-password: password \n    contextPath: /auth \n\nsecurity: \n    user: \n        password: password \n\nlogging: \n    level: \n        org.springframework.security: DEBUG \n```", "```java\n<dependency> \n    <groupId>org.springframework.cloud</groupId> \n    <artifactId>spring-cloud-starter-zuul</artifactId> \n</dependency> \n<dependency> \n    <groupId>org.springframework.cloud</groupId> \n    <artifactId>spring-cloud-starter-eureka</artifactId> \n</dependency> \n<dependency> \n    <groupId>org.springframework.cloud</groupId> \n    <artifactId>spring-cloud-starter-feign</artifactId> \n</dependency> \n<dependency> \n    <groupId>org.springframework.cloud</groupId> \n    <artifactId>spring-cloud-netflix-hystrix-stream</artifactId> \n</dependency> \n<dependency> \n    <groupId>org.springframework.cloud</groupId> \n    <artifactId>spring-cloud-starter-bus-amqp</artifactId> \n</dependency> \n<dependency> \n    <groupId>org.springframework.cloud</groupId> \n    <artifactId>spring-cloud-starter-stream-rabbit</artifactId> \n</dependency> \n<dependency> \n    <groupId>org.springframework.boot</groupId> \n    <artifactId>spring-boot-starter-web</artifactId> \n</dependency> \n<dependency> \n    <groupId>org.springframework.cloud</groupId> \n    <artifactId>spring-cloud-starter-security</artifactId> \n</dependency> \n<dependency> \n    <groupId>org.springframework.cloud</groupId> \n    <artifactId>spring-cloud-starter-oauth2</artifactId>         </dependency>\n```", "```java\n@SpringBootApplication \n@EnableZuulProxy \n@EnableEurekaClient \n@EnableCircuitBreaker \n@Configuration \n@EnableFeignClients \n@EnableResourceServer \npublic class EdgeApp { \n\n    private static final Logger LOG = LoggerFactory.getLogger(EdgeApp.class); \n\n    static { \n        // for localhost testing only \n        LOG.warn(\"Will now disable hostname check in SSL, only to be used during development\"); \n        HttpsURLConnection.setDefaultHostnameVerifier((hostname, sslSession) -> true); \n    } \n\n    @Value(\"${app.rabbitmq.host:localhost}\") \n    String rabbitMqHost; \n\n    @Bean \n    public ConnectionFactory connectionFactory() { \n        LOG.info(\"Create RabbitMqCF for host: {}\", rabbitMqHost); \n        CachingConnectionFactory connectionFactory = new CachingConnectionFactory(rabbitMqHost); \n        return connectionFactory; \n    } \n\n    public static void main(String[] args) { \n        SpringApplication.run(EdgeApp.class, args); \n    } \n} \n```", "```java\ninfo: \n    component: Zuul Server \n\nspring: \n  application: \n     name: zuul-server  # Service registers under this name \n  # Added to fix -  java.lang.IllegalArgumentException: error at ::0 can't find referenced pointcut hystrixCommandAnnotationPointcut \n  aop: \n      auto: false \n\nzuul: \n    ignoredServices: \"*\" \n    routes: \n        restaurantapi: \n            path: /api/** \n            serviceId: api-service \n            stripPrefix: true \n\nserver: \n    ssl: \n        key-store: classpath:keystore.jks \n        key-store-password: password \n        key-password: password \n    port: 8765 \n    compression: \n        enabled: true \n\nsecurity: \n  oauth2: \n    resource: \n     userInfoUri: https://localhost:9001/auth/user \n\nmanagement: \n  security: \n    enabled: false \n## Other properties like Eureka, Logging and so on \n```", "```java\nhttps://localhost:9001/auth/oauth/authorize?response_type=code&client_id=client&redirect_uri=http://localhost:7771/1&scope=apiAccess&state=1234\n```", "```java\n{\n  \"access_token\": \"6a233475-a5db-476d-8e31-d0aeb2d003e9\",\n  \"token_type\": \"bearer\", \n  \"refresh_token\": \"8d91b9be-7f2b-44d5-b14b-dbbdccd848b8\", \n  \"expires_in\": 43199, \n  \"scope\": \"apiAccess\" \n} \n```", "```java\nhttps://localhost:9001/auth/oauth/authorize?response_type=token&redirect_uri=https://localhost:8765&scope=apiAccess&state=553344&client_id=client\n```", "```java\nhttps://localhost:8765/#access_token=6a233475-a5db-476d-8e31-d0aeb2d003e9&token_type=bearer&state=553344&expires_in=19592\n```"]