["```java\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-zuul</artifactId>\n</dependency>\n```", "```java\nserver:\n port: ${PORT:8080}\n\nzuul:\n routes:\n  account:\n   path: /account/**\n   url: http://localhost:8091\n  customer:\n   path: /customer/**\n   url: http://localhost:8092\n  order:\n   path: /order/**\n   url: http://localhost:8090\n  product:\n   path: /product/**\n   url: http://localhost:8093\n```", "```java\nzuul:\n routes:\n  account-service:\n   path: /account/**\n  customer-service:\n   path: /customer/**\n  order-service:\n   path: /order/**\n  product-service:\n   path: /product/**\n```", "```java\nzuul:\n  ignoredServices: 'account-service'\n```", "```java\nzuul:\n ignoredServices: '*'\n  routes:\n   customer-service: /customer/**\n```", "```java\nzuul:\n  routes:\n   accounts:\n    path: /account/**\n    serviceId: account-service\n   customers:\n    path: /customer/**\n    serviceId: customer-service\n   orders:\n    path: /order/**\n    serviceId: order-service\n   products:\n    path: /product/**\n    serviceId: product-service\n```", "```java\nzuul:\n routes:\n  accounts:\n   path: /account/**\n   serviceId: account-service\n\nribbon:\n eureka:\n  enabled: false\n\naccount-service:\n ribbon:\n  listOfServers: http://localhost:8091,http://localhost:9091\n```", "```java\nzuul:\n prefix: /api\n routes:\n   accounts:\n    path: /account/**\n    serviceId: account-service\n   customers:\n    path: /customer/**\n    serviceId: customer-service\n```", "```java\nzuul:\n prefix: /api\n stripPrefix: false\n```", "```java\nzuul:\n routes:\n  accounts:\n   path: /account/**\n   sensitiveHeaders:\n   serviceId: account-service\n```", "```java\n{\n  \"/api/account/**\": \"account-service\",\n  \"/api/customer/**\": \"customer-service\",\n  \"/api/order/**\": \"order-service\",\n  \"/api/product/**\": \"product-service\",\n}\n```", "```java\n\"/api/account/**\": {\n  \"id\": \"account-service\",\n  \"fullPath\": \"/api/account/**\",\n  \"location\": \"account-service\",\n  \"path\": \"/**\",\n  \"prefix\": \"/api/account\",\n  \"retryable\": false,\n  \"customSensitiveHeaders\": false,\n  \"prefixStripped\": true\n}\n```", "```java\n\"route\": [{\n \"class\": \"org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter\",\n \"order\": 10,\n \"disabled\": false,\n \"static\": true\n}, { \n... \n]\n```", "```java\npublic class AccountFallbackProvider implements FallbackProvider {\n\n    @Override\n    public String getRoute() {\n        return \"account-service\";\n    }\n\n    @Override\n    public ClientHttpResponse fallbackResponse(Throwable cause) {\n        return new ClientHttpResponse() {\n\n            @Override\n            public HttpHeaders getHeaders() {\n                HttpHeaders headers = new HttpHeaders();\n                headers.setContentType(MediaType.APPLICATION_JSON);\n                return headers;\n            } \n\n            @Override\n            public InputStream getBody() throws IOException {\n                AccountFallbackResponse response = new AccountFallbackResponse(\"1.2\", cause.getMessage());\n                return new ByteArrayInputStream(new ObjectMapper().writeValueAsBytes(response));\n            }\n\n            @Override\n            public String getStatusText() throws IOException {\n                return \"OK\";\n            } \n\n            @Override\n            public HttpStatus getStatusCode() throws IOException {\n                return HttpStatus.OK;\n            } \n\n            @Override\n            public int getRawStatusCode() throws IOException {\n                return 200;\n            } \n\n            @Override\n            public void close() {\n\n            } \n        };\n    }\n    // ...\n}\n```", "```java\npublic class AddResponseIDHeaderFilter extends ZuulFilter {\n\n    private int id = 1;\n\n    @Override\n    public String filterType() {\n        return \"post\";\n    }\n\n    @Override\n    public int filterOrder() {\n        return 10;\n    }\n\n    @Override\n    public boolean shouldFilter() {\n        return true;\n    }\n\n    @Override\n    public Object run() {\n        RequestContext context = RequestContext.getCurrentContext();\n        HttpServletResponse servletResponse = context.getResponse();\n        servletResponse.addHeader(\"X-Response-ID\",\n         String.valueOf(id++));\n        return null;\n    }\n\n}\n```", "```java\n@Bean \nAddResponseIDHeaderFilter filter() {\n    return new AddResponseIDHeaderFilter();\n}\n```", "```java\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.0.0.M7</version>\n</parent>\n```", "```java\n<properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n    <java.version>1.8</java.version>\n    <spring-cloud.version>Finchley.M5</spring-cloud.version>\n</properties>\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-dependencies</artifactId>\n            <version>${spring-cloud.version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```", "```java\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-gateway</artifactId>\n</dependency>\n```", "```java\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: example_route\n        uri: http://localhost:8080\n        predicates:\n        - Method=GET\n        - Path=/account/{id}\n        filters:\n        - AddRequestHeader=X-Request-ID, 123\n        - PrefixPath=/api\n\n```", "```java\n@Bean\npublic RouteLocator customRouteLocator(RouteLocatorBuilder routeBuilder) {\n    return routeBuilder.routes()\n        .route(r -> r.method(HttpMethod.GET).and().path(\"/account/{id}\")\n            .addRequestHeader(\"X-Request-ID\", \"123\").prefixPath(\"/api\")\n            .uri(\"http://localhost:8080\"))\n        .build();\n}\n```", "```java\nserver:\n port: ${PORT:8080}\n\nspring:\n application:\n  name: gateway-service\n\ncloud:\n gateway:\n   routes:\n   - id: account-service\n     uri: http://localhost:8091\n     predicates:\n     - Path=/account/**\n     filters:\n     - RewritePath=/account/(?<path>.*), /$\\{path}\n   - id: customer-service\n     uri: http://localhost:8092\n     predicates:\n     - Path=/customer/**\n     filters:\n     - RewritePath=/customer/(?<path>.*), /$\\{path}\n   - id: order-service\n     uri: http://localhost:8090\n     predicates:\n     - Path=/order/**\n     filters:\n     - RewritePath=/order/(?<path>.*), /$\\{path}\n   - id: product-service\n     uri: http://localhost:8093\n     predicates:\n     - Path=/product/**\n     filters:\n     - RewritePath=/product/(?<path>.*), /$\\{path}\n```", "```java\n@SpringBootApplication\npublic class GatewayApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(GatewayApplication.class, args);\n    }\n\n}\n```", "```java\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n```", "```java\nspring:\n application:\n  name: gateway-service\n cloud:\n  gateway:\n   discovery:\n    locator:\n     enabled: true\n   routes:\n   - id: account-service\n     uri: lb://account-service\n     predicates:\n     - Path=/account/**\n     filters:\n     - RewritePath=/account/(?<path>.*), /$\\{path}\n   - id: customer-service\n     uri: lb://customer-service\n     predicates:\n     - Path=/customer/**\n     filters:\n     - RewritePath=/customer/(?<path>.*), /$\\{path}\n   - id: order-service\n     uri: lb://order-service\n     predicates:\n     - Path=/order/**\n     filters:\n     - RewritePath=/order/(?<path>.*), /$\\{path}\n   - id: product-service\n     uri: lb://product-service\n     predicates:\n     - Path=/product/**\n     filters:\n     - RewritePath=/product/(?<path>.*), /$\\{path}\n```"]