["```java\n    uid=admin1,ou=users,dc=example,dc=com\n```", "```java\n    //build.gradle\n\n    dependencies {\n    // LDAP:\n    compile('org.springframework.boot:spring-boot-starter-data-ldap')\n    compile(\"org.springframework.ldap:spring-ldap-core\")\n    compile(\"org.springframework.security:spring-security-ldap\")\n compile(\"org.springframework:spring-tx\")    compile(\"com.unboundid:unboundid-ldapsdk\")\n       ...\n    }\n```", "```java\n//build.gradle\n\n    compile 'org.apache.directory.server:apacheds-core:2.0.0-M23'\n    compile 'org.apache.directory.server:apacheds-protocol-ldap:2.0.0-M23'\n    compile 'org.apache.directory.server:apacheds-protocol-shared:2.0.0\n    -M23'\n```", "```java\n      //src/main/resources/application.yml\n\n      spring:\n      ## LDAP\n ldap: embedded: \n```", "```java\n ldif: classpath:/ldif/calendar.ldif base-dn: dc=jbcpcalendar,dc=com port: 33389\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n    @Override\n    public void configure(AuthenticationManagerBuilder auth)\n    throws Exception {\n       auth\n .ldapAuthentication() .userSearchBase(\"\") .userSearchFilter(\"(uid={0})\") .groupSearchBase(\"ou=Groups\") .groupSearchFilter(\"(uniqueMember={0})\") .contextSource(contextSource()) .passwordCompare() .passwordAttribute(\"userPassword\");    }\n    @Bean\n    public DefaultSpringSecurityContextSource contextSource() {\n return new DefaultSpringSecurityContextSource( Arrays.asList(\"ldap://localhost:33389/\"), \"dc=jbcpcalendar,dc=com\");\n    }\n```", "```java\n    foreach group in groups:\n\n    authority = (\"ROLE_\"+group).upperCase()\n\n    grantedAuthority = new GrantedAuthority(authority)\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n    @Override\n    public void configure(AuthenticationManagerBuilder auth)\n       throws Exception {\n       auth\n         .ldapAuthentication()\n         .userSearchBase(\"\")\n         .userSearchFilter(\"(uid={0})\")\n         .groupSearchBase(\"ou=Groups\")\n         .groupSearchFilter(\"(uniqueMember={0})\")\n         .contextSource(contextSource())\n .passwordCompare() .passwordEncoder(new LdapShaPasswordEncoder()) .passwordAttribute(\"userPassword\");    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n    @Override\n    public void configure(AuthenticationManagerBuilder auth)\n    throws Exception {\n       auth\n           .ldapAuthentication()\n           .userSearchBase(\"\")\n           .userSearchFilter(\"(uid={0})\")\n           .groupSearchBase(\"ou=Groups\")\n           .groupSearchFilter(\"(uniqueMember={0})\")\n .userDetailsContextMapper( new InetOrgPersonContextMapper())           .contextSource(contextSource())\n           .passwordCompare()\n              // Supports {SHA} and {SSHA}\n               .passwordEncoder(new LdapShaPasswordEncoder())\n               .passwordAttribute(\"userPassword\");\n    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/web/controllers/AccountController.java\n\n    ...\n    @RequestMapping(\"/accounts/my\")\n    public String view(Model model) {\n    Authentication authentication = SecurityContextHolder.\n    getContext().getAuthentication();\n    // null check on authentication omitted\n    Object principal = authentication.getPrincipal();\n    model.addAttribute(\"user\", principal);\n    model.addAttribute(\"isLdapUserDetails\", principal instanceof\n    LdapUserDetails);\n    model.addAttribute(\"isLdapPerson\", principal instanceof Person);\n    model.addAttribute(\"isLdapInetOrgPerson\", principal instanceof\n    InetOrgPerson);\n    return \"accounts/show\";\n    }\n    ...\n```", "```java\n    //src/main/resources/templates/accounts/show.html\n\n    <dl>\n       <dt>Username</dt>\n       <dd id=\"username\" th:text=\"${user.username}\">ChuckNorris</dd>\n       <dt>DN</dt>\n       <dd id=\"dn\" th:text=\"${user.dn}\"></dd>\n       <span th:if=\"${isLdapPerson}\">\n           <dt>Description</dt>\n           <dd id=\"description\" th:text=\"${user.description}\"></dd>\n           <dt>Telephone</dt>\n           <dd id=\"telephoneNumber\" th:text=\"${user.telephoneNumber}\"></dd>\n           <dt>Full Name(s)</dt>\n           <span th:each=\"cn : ${user.cn}\">\n           <dd th:text=\"${cn}\"></dd>\n           </span>\n       </span>\n       <span th:if=\"${isLdapInetOrgPerson}\">\n           <dt>Email</dt>\n           <dd id=\"email\" th:text=\"${user.mail}\"></dd>\n           <dt>Street</dt>\n           <dd id=\"street\" th:text=\"${user.street}\"></dd>\n       </span>\n    </dl>\n```", "```java\n    //src/main/resources/templates/fragments/header.html\n\n    <li>\n    <p class=\"navbar-text\">Welcome &nbsp;\n <a id=\"navMyAccount\" th:href=\"@{/accounts/my}\">         <div class=\"navbar-text\" th:text=\"${#authentication.name}\">\n         User</div>\n </a>    </p>\n    </li>\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n    @Override\n    public void configure(AuthenticationManagerBuilder auth)\n    throws Exception {\n       auth\n         .ldapAuthentication()\n         .userSearchBase(\"\")\n         .userSearchFilter(\"(uid={0})\")\n        .groupSearchBase(\"ou=Groups\")\n         .groupSearchFilter(\"(uniqueMember={0})\")\n         .userDetailsContextMapper(new InetOrgPersonContextMapper())\n         .contextSource(contextSource())\n         .passwordCompare()\n            .passwordAttribute(\"telephoneNumber\");\n    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n    @Override\n    public void configure(AuthenticationManagerBuilder auth)\n    throws Exception {\n       auth\n         .ldapAuthentication()\n         .userSearchFilter(\"(uid={0})\")\n         .groupSearchBase(\"ou=Groups\")\n         .userDetailsContextMapper(new InetOrgPersonContextMapper())\n         .contextSource(contextSource());\n    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n    @Bean\n    @Override\n    public UserDetailsService userDetailsService() {\n       return super.userDetailsService();\n   }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/web/controllers/AccountController.java\n\n    @Controller\n    public class AccountController {\n    private final UserDetailsService userDetailsService;\n    @Autowired\n    public AccountController(UserDetailsService userDetailsService) {\n       this.userDetailsService = userDetailsService;\n    }\n    @RequestMapping(\"/accounts/my\")\n    public String view(Model model) {\n       Authentication authentication = SecurityContextHolder.\n       getContext().getAuthentication();\n       // null check omitted\n       String principalName = authentication.getName();\n       Object principal = userDetailsService.\n       loadUserByUsername(principalName);\n       ...\n    }\n    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n    @Override\n    public void configure(AuthenticationManagerBuilder auth)\n    throws Exception {\n       auth\n        .ldapAuthentication()\n         .userSearchFilter(\"(uid={0})\")\n         .groupSearchBase(\"ou=Groups\")\n         .userDetailsContextMapper(new InetOrgPersonContextMapper())\n         //.contextSource(contextSource())\n .contextSource() .managerDn(\"uid=admin,ou=system\") .managerPassword(\"secret\") .url(\"ldap://localhost:33389/dc=jbcpcalendar,dc=com\");    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n    @Override\n    public void configure(AuthenticationManagerBuilder auth)\n    throws Exception {\n       auth\n         .ldapAuthentication()\n         .userSearchBase(\"\")\n         .userSearchFilter(\"(uid={0})\")\n         .groupSearchBase(\"ou=Groups\")\n         .groupSearchFilter(\"(uniqueMember={0})\")\n         .userDetailsContextMapper(new InetOrgPersonContextMapper())\n .contextSource() .managerDn(\"uid=admin,ou=system\") .managerPassword(\"secret\") .url(\"ldap://localhost:10389/dc=jbcpcalendar,dc=com\") .root(\"dc=jbcpcalendar,dc=com\") .ldif(\"classpath:/ldif/calendar.ldif\")           .and()\n               .passwordCompare()\n                .passwordEncoder(new LdapShaPasswordEncoder())\n                .passwordAttribute(\"userPassword\")\n       ;\n    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n    @Bean\n    public DefaultSpringSecurityContextSource contextSource() {return new    \n    DefaultSpringSecurityContextSource(\n       Arrays.asList(\"ldap://localhost:10389/\"), \n       \"dc=jbcpcalendar,dc=com\"){{\n          setUserDn(\"uid=admin,ou=system\");\n          setPassword(\"secret\");\n    }};\n    }\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/configuration/\n        SecurityConfig.java\n\n        @Bean\n        public LdapAuthenticationProvider authenticationProvider \n        (BindAuthenticator ba,LdapAuthoritiesPopulator lap,\n         \\UserDetailsContextMapper cm){\n            return new LdapAuthenticationProvider(ba, lap){{\n              setUserDetailsContextMapper(cm);\n           }};\n        }\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/configuration/\n        SecurityConfig.java\n\n        @Bean\n        public BindAuthenticator bindAuthenticator\n        (FilterBasedLdapUserSearch userSearch)\n        {\n            return new BindAuthenticator(contextSource()){{\n               setUserSearch(userSearch);\n           }};\n       }\n        @Bean\n        public FilterBasedLdapUserSearch filterBasedLdapUserSearch(){\n           return new FilterBasedLdapUserSearch(\"\", \n           //user-search-base \"(uid={0})\", //user-search-filter\n           contextSource()); //ldapServer\n        }\n```", "```java\n            //src/main/java/com/packtpub/springsecurity/configuration/\n            SecurityConfig.java\n\n            @Bean\n            public LdapAuthoritiesPopulator authoritiesPopulator(){\n               return new DefaultLdapAuthoritiesPopulator(contextSource(),\n               \"ou=Groups\"){{\n                  setGroupSearchFilter(\"(uniqueMember={0})\");\n           }};\n        }\n        @Bean\n        public userDetailsContextMapper userDetailsContextMapper(){\n           return new InetOrgPersonContextMapper();\n        }\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/configuration/\n        SecurityConfig.java\n\n @Autowired private LdapAuthenticationProvider authenticationProvider;        @Override\n        public void configure(AuthenticationManagerBuilder auth)\n        throws Exception {\n auth.authenticationProvider(authenticationProvider);        }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n    //@Bean\n    //public LdapAuthoritiesPopulator authoritiesPopulator(){\n        //return new DefaultLdapAuthoritiesPopulator(contextSource(),\n       //\"ou=Groups\"){{\n              //setGroupSearchFilter(\"(uniqueMember={0})\");\n        //   }};\n      //}\n    @Bean\n    public LdapAuthoritiesPopulator authoritiesPopulator(\n       UserDetailsService userDetailsService){ \n return new UserDetailsServiceLdapAuthoritiesPopulator\n         (userDetailsService);\n    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n    @Bean\n    @Override\n    public UserDetailsManager userDetailsService() {\n       InMemoryUserDetailsManager manager = new \n        InMemoryUserDetailsManager();\n       manager.createUser(User.withUsername(\"user1@example.com\")\n       .password(\"user1\").roles(\"USER\").build());\n       manager.createUser(\n           User.withUsername(\"admin1@example.com\")\n               .password(\"admin1\").roles(\"USER\", \"ADMIN\").build());\n       return manager;\n    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/ldap/userdetails/ad/\n    ActiveDirectoryLdapAuthoritiesPopulator.java\n\n    public final class ActiveDirectoryLdapAuthoritiesPopulator\n    implements LdapAuthoritiesPopulator {\n       public Collection<? extends GrantedAuthority>\n         getGrantedAuthorities(DirContextOperations userData, String\n          username) {\n           String[] groups = userData.getStringAttributes(\"memberOf\");\n           List<GrantedAuthority> authorities = new \n            ArrayList<GrantedAuthority>();\n         for (String group : groups) {\n           LdapRdn authority = new DistinguishedName(group).removeLast();\n           authorities.add(new SimpleGrantedAuthority\n           (authority.getValue()));\n       }\n       return authorities;\n    }\n    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n    @Bean\n    public DefaultSpringSecurityContextSource contextSource() {\n       return new DefaultSpringSecurityContextSource(Arrays.asList\n       (\"ldap://corp.jbcpcalendar.com/\"), \"dc=corp,dc=jbcpcalendar,\n        dc=com\"){{     \n             setUserDn(\"CN=Administrator,CN=Users,\" +                  \n             \"DC=corp,DC=jbcpcalendar,DC=com\");\n             setPassword(\"admin123!\");\n       }};\n    }\n    @Bean\n    public LdapAuthenticationProvider authenticationProvider(                                    \n    BindAuthenticator ba, LdapAuthoritiesPopulator lap){\n       // removed UserDetailsContextMapper\n       return new LdapAuthenticationProvider(ba, lap);\n    }\n    @Bean\n    public FilterBasedLdapUserSearch filterBasedLdapUserSearch(){\n       return new FilterBasedLdapUserSearch(\"CN=Users\", //user-search-base\n \"(sAMAccountName={0})\", //user-search-filter       contextSource()); //ldapServer\n    }\n    @Bean\n    public LdapAuthoritiesPopulator authoritiesPopulator(){\n return new ActiveDirectoryLdapAuthoritiesPopulator();    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n    @Bean\n    public AuthenticationProvider authenticationProvider(){\n ActiveDirectoryLdapAuthenticationProvider ap = new \n       ActiveDirectoryLdapAuthenticationProvider(\"corp.jbcpcalendar.com\",\n       \"ldap://corp.jbcpcalendar.com/\");\n ap.setConvertSubErrorCodesToExceptions(true);       return ap;\n    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n    @Autowired\n    private AuthenticationProvider authenticationProvider;\n    @Override\n    public void configure(AuthenticationManagerBuilder auth)\n    throws Exception {\n       auth.authenticationProvider(authenticationProvider);\n   }\n```"]