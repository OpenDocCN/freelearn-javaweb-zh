- en: Governance and Contributions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Eclipse MicroProfile is governed by community members. In other words, it is
    not governed by a single vendor. In addition, it receives contributions from developers
    and subject-matter experts across a spectrum of organizations, corporations, and
    individual contributors. The project is characterized by its innovation, speed,
    and agility via light processes and governance. The topics in this chapter will
    help you to understand the governance of the MicroProfile project, and you will
    discover how you can contribute to the MicroProfile project too.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: How the Eclipse MicroProfile project is governed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How the community collaborates and contributes to its constant innovation ...
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Current Eclipse MicroProfile governance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Eclipse MicroProfile is transparent in its operations and decision-making processes,
    which are intended to be very lightweight. Governance focuses on creating, innovating,
    and evolving specifications in a collaborative manner.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse MicroProfile, first and foremost, is an Eclipse project and it, therefore,
    follows Eclipse processes. This includes committer approvals, project releases,
    intellectual property safeguarding, license review processes, and more. However,
    the Eclipse Foundation is flexible enough for projects such as MicroProfile to
    offer some additional lightweight processes for multiple specifications to move
    forward in parallel with ways to communicate across and align specifications.
  prefs: []
  type: TYPE_NORMAL
- en: One of these lightweight processes is the Eclipse MicroProfile bi-weekly Hangout
    meeting/call (whose meeting URL is [https://eclipse.zoom.us/j/949859967](https://eclipse.zoom.us/j/949859967),
    and whose recordings can be found on the Eclipse MicroProfile YouTube channel
    at [https://www.youtube.com/channel/UC_Uqc8MYFDoCItFIGheMD_w](https://www.youtube.com/channel/UC_Uqc8MYFDoCItFIGheMD_w)),
    which is open to anybody in the community and serves as a forum where topics brought
    up by attendees are discussed and decisions are made, from sub-project statuses
    and release contents to release dates and sub-project creation approvals. It should
    be noted that MicroProfile is not a standards organization, although it can seem
    that way. MicroProfile was created by the community for the community, and it
    moves at the speed that the community determines as it innovates in its different
    sub-projects. MicroProfile defines specifications that encourage multiple implementations,
    much like a standards organization. However, MicroProfile truly operates as a
    fast-evolving open source project whose source code is specifications.
  prefs: []
  type: TYPE_NORMAL
- en: The main means of community communication, discussion, and debate is the Eclipse
    MicroProfile Google Group ([https://groups.google.com/forum/#!forum/microprofile](https://groups.google.com/forum/#!forum/microprofile)).
    You can use your favorite web browser to read, post, answer, or start forum messages
    for any MicroProfile-related topic in the Google Group. You can also use the Group's
    email to start new forum messages. Anybody can start new forum threads to discuss
    topics, such as potential new functionality to be added to MicroProfile. After
    the community discusses a new idea at length in the forum and/or the MicroProfile
    Hangout call, and it's been determined that it is worth furthering the debate,
    the community decides to create a working group for this new idea, and a lead
    or a group of leads, who are usually subject-matter experts in the topic at hand,
    are designated to serve as its facilitators.
  prefs: []
  type: TYPE_NORMAL
- en: One important aspect to note is that the lead or leads of a working group (or
    sub-project for that matter) do not single-handedly shape or determine the evolution
    of a specification or what capabilities are included or not. They do not have
    the power of veto or a final say in the decisions made with respect to their specification.
    By their sharing of ideas, expertise, past experiences, analysis of existing technologies,
    and best practices, the working group will come up with their best proposal possible.
    In addition, all unresolved issues need to be discussed by the community and brought
    up in the bi-weekly Hangout meeting/call for further debate, if needed. Through
    discussion, collaboration, and feedback from the community, many points of view
    are analyzed, allowing the best option or options to bubble up to the top. The
    working group will establish a recurring weekly or bi-weekly meeting, which is
    entered in the MicroProfile Google Calendar ([https://calendar.google.com/calendar/embed?src=gbnbc373ga40n0tvbl88nkc3r4%40group.calendar.google.com](https://calendar.google.com/calendar/embed?src=gbnbc373ga40n0tvbl88nkc3r4%40group.calendar.google.com)).
    This contains information of all MicroProfile Hangout calls, MicroProfile sub-project
    calls, and MicroProfile release dates.
  prefs: []
  type: TYPE_NORMAL
- en: While anybody can attend these meetings, there's usually a core number of people
    that serve as the subject-matter experts who participate in these calls. After
    a few meetings, the working group decides whether or not the new functionality
    should be brought up to the MicroProfile Hangout call to discuss its proposal
    to become a MicroProfile sub-project.
  prefs: []
  type: TYPE_NORMAL
- en: At the MicroProfile Hangout call, a sub-project proposal may be rejected or
    accepted. It should be said that by the time the sub-project proposal is brought
    to the MicroProfile Hangout call, most of the discussion of whether or not it
    should move forward will have taken place already, so the decision taken at the
    call should really be of no surprise to the sub-project working group. The rejection
    of a sub-project does not mean that it does not fulfill a specific developmental
    need, but rather an affirmation that its goals are not a good match to advance
    the MicroProfile specification, whose goal is the optimization of Enterprise Java
    for a microservices architecture.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if a sub-project proposal addresses a need that is unrelated to
    microservices, then the chances are that the sub-project proposal will not move
    forward as a MicroProfile sub-project. The acceptance of a sub-project means that
    it effectively addresses a need that enriches the specification toward its goal
    of optimizing Enterprise Java for a microservices architecture. It is at this
    moment that a sub-project becomes an official MicroProfile API. Once the sub-project
    becomes a MicroProfile API, then a determination is made as to whether it should
    be a standalone sub-project outside the umbrella or a sub-project included in
    the umbrella MicroProfile releases. A high-level flowchart of this process is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d7bcf79a-8471-4789-b9ed-0dd423e92624.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At the time of writing this book, these are the Eclipse MicroProfile APIs/sub-projects
    (with the project leads listed):'
  prefs: []
  type: TYPE_NORMAL
- en: '| **MicroProfile API/Sub-project name** | **Sub-project lead(s)** |'
  prefs: []
  type: TYPE_TB
- en: '| MicroProfile Project Leads | John Clingan and Kevin Sutter |'
  prefs: []
  type: TYPE_TB
- en: '| Config | Emily Jiang and Mark Struberg |'
  prefs: []
  type: TYPE_TB
- en: '| Fault Tolerance | Emily Jiang |'
  prefs: []
  type: TYPE_TB
- en: '| Health Check | Antoine Sabot-Durand |'
  prefs: []
  type: TYPE_TB
- en: '| JWT Propagation | Scott Stark |'
  prefs: []
  type: TYPE_TB
- en: '| Metrics | Heiko Rupp |'
  prefs: []
  type: TYPE_TB
- en: '| OpenAPI | Arthur De Magalhaes |'
  prefs: []
  type: TYPE_TB
- en: '| OpenTracing | Pavol Loffay |'
  prefs: []
  type: TYPE_TB
- en: '| Rest Client | John D. Ament and Andy McCright |'
  prefs: []
  type: TYPE_TB
- en: Eclipse MicroProfile follows a time-boxed rapid incremental release schedule,
    which is public and is listed at the Eclipse Foundation MicroProfile Project page
    ([https://projects.eclipse.org/projects/technology.microprofile](https://projects.eclipse.org/projects/technology.microprofile)).
    Major Eclipse MicroProfile releases, for example, from 1.x to 2.x, include major
    updates to MicroProfile APIs that may introduce breaking changes. Minor releases,
    that is point releases, include small API updates or new APIs that make the predetermined
    release date. Currently, the MicroProfile community release windows are in February,
    June, and November of every year for minor and/or major releases.
  prefs: []
  type: TYPE_NORMAL
- en: Sandbox approach to open contribution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The creation of a working group for a potential MicroProfile sub-project may
    also be assigned a sandbox, which is another resource that the MicroProfile community
    offers to try out new ideas. The sandbox repository, which is a GitHub repository
    located at [https://github.com/eclipse/microprofile-sandbox](https://github.com/eclipse/microprofile-sandbox),
    is for incubating ideas and code examples that will eventually turn into a separate
    repository for a new specification. Anybody can open pull requests and use the
    sandbox for experimentation of new ideas and to share code and documentation,
    which can be used as part of the discussion in the community Google Group, the
    MicroProfile Hangout calls, or working group meetings. Keeping your pull requests
    open ...
  prefs: []
  type: TYPE_NORMAL
- en: Umbrella releases versus projects outside the umbrella
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Eclipse MicroProfile is composed of a set of specifications, each with a specific
    focus. For example, the Eclipse MicroProfile Config specification encompasses
    everything related to configuring parameters for microservices. A version of a
    specification can be included as part of an umbrella release of Eclipse MicroProfile
    or be released outside the umbrella. As a concrete example, the latest umbrella
    release of Eclipse MicroProfile 2.2, which came out on February 12, 2019, included
    the following specifications:'
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse MicroProfile Open Tracing 1.3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse MicroProfile Open API 1.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse MicroProfile Rest Client 1.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse MicroProfile Fault Tolerance 2.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse MicroProfile Config 1.3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse MicroProfile Metrics 1.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse MicroProfile JWT Propagation 1.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse MicroProfile Health Check 1.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CDI 2.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSON-P 1.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX-RS 2.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSON-B 1.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse MicroProfile, however, also has other specifications that have been
    released outside the umbrella release. For example, Eclipse MicroProfile Reactive
    Streams Operators 1.0, which we will cover in [Chapter 9](2bf742ea-ed02-4f2b-8e91-f7ae4c200e6f.xhtml),
    *Reactive Programming and Future Developments*, is a specification that was recently
    released outside the umbrella. So, why does MicroProfile allow specifications
    outside the umbrella? Well, the reason is that by releasing outside the umbrella
    first, it gives the community and end users an opportunity to utilize and test
    the new technology and, therefore, proving it in real applications before it can
    be considered for inclusion in the umbrella.
  prefs: []
  type: TYPE_NORMAL
- en: MicroProfile Starter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MicroProfile Starter is a sample source code generator, whose goal is to aid
    developers to quickly get started using and exploiting the capabilities of the
    community-driven open source specification for Enterprise Java microservices,
    Eclipse MicroProfile, by generating working sample code in a Maven project.
  prefs: []
  type: TYPE_NORMAL
- en: The idea of having MicroProfile Starter has been around since the creation of
    the project back in mid-2016 and was publicly discussed at Devoxx BE 2016 (the
    week of November 7, 2016). In its first two weeks of being available, developers
    around the world have created over 1,200 projects through the MicroProfile Starter
    project, which is a good and positive indication of its adoption worldwide.
  prefs: []
  type: TYPE_NORMAL
- en: A quick tour of MicroProfile Starter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a quick tour of MicroProfile Starter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you go to the **MicroProfile Starter "Beta"** page, [https://start.microprofile.io/](https://start.microprofile.io/),
    you will see the following landing page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5bc19663-c627-42b8-a08a-350ce79a877c.png)'
  prefs: []
  type: TYPE_IMG
- en: You can accept the defaults for the Maven-related parameters ([https://maven.apache.org/guides/mini/guide-naming-conventions.html](https://maven.apache.org/guides/mini/guide-naming-conventions.html)), groupId
    and artifactId, or change them to your liking. The groupId parameter uniquely
    identifies your project across all projects, and artifactId is the name of the
    JAR file without the MicroProfile version number. For this tour, accept all of
    the defaults.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, select MicroProfile Version from the drop-down list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1331ec98-e279-496c-ac0a-801886cbfb85.png)'
  prefs: []
  type: TYPE_IMG
- en: For this tour, select MicroProfile version MP 2.1\. Notice that, depending on
    the version of MicroProfile you select, the number of specifications listed in
    the Example for specifications section will vary. This number depends on how many
    APIs were included as part of each MicroProfile umbrella release. To find out
    what APIs were included in each release, please refer to the MicroProfile community
    presentation ([https://docs.google.com/presentation/d/1BYfVqnBIffh-QDIrPyromwc9YSwIbsawGUECSsrSQB0/edit#slide=id.g4ef35057a0_6_205](https://docs.google.com/presentation/d/1BYfVqnBIffh-QDIrPyromwc9YSwIbsawGUECSsrSQB0/edit#slide=id.g4ef35057a0_6_205)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, select MicroProfile Server from the drop-down list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c101fb03-4a50-4586-898c-c49210885448.png)'
  prefs: []
  type: TYPE_IMG
- en: For this tour, select Thorntail V2, which is the open source project that Red
    Hat uses to implement the Eclipse MicroProfile specification.
  prefs: []
  type: TYPE_NORMAL
- en: 'Leave all the Examples for specifications checkboxes selected (that is, do
    not uncheck any of the checkboxes):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c64b1d4b-bb8c-46bd-a45e-9a4cd9dad36e.png)'
  prefs: []
  type: TYPE_IMG
- en: This will generate example working code for all of the APIs included in MicroProfile
    version 2.1.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step in the samples source code generation process using MicroProfile
    Starter is to click on the DOWNLOAD button, which will create a ZIP archive. Ensure
    you save the `demo.zip` file to your local drive. Then, unzip `demo.zip` in your
    local drive. The contents should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/560eb505-0fe8-43ce-994c-84a6db717b1f.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that there's a `readme.md` file in the generated content. This file contains
    instructions on how to compile and run the generated code, which includes a sample
    web application that exercises the different capabilities of Eclipse MicroProfile.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change directory to wherever you unzipped the demo project. In my case, I had
    it in my `Downloads` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Compile the generated sample code by entering the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the microservice:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After a few seconds, you will see the following message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This indicates that the microservice is up and running.
  prefs: []
  type: TYPE_NORMAL
- en: Open your favorite web browser and point it to `http://localhost:8080/index.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will open up the sample web application, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/37b7bd6b-1714-437d-aacf-8dd2123ff8cd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To see the capabilities of MicroProfile Config, click on Injected config values.
    A window tab will open with the following display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7bf94342-0d9e-43ad-8c5e-0cf0bc67be4a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Likewise, if you click on Config values by lookup, another window tab will
    be displayed as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d58d0ff0-17c1-4cf7-8a1c-647dfc6f5e2a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The parameter value''s *injected value* and *lookup value* that we saw previously
    are defined in the `./demo/src/main/resources/META-INF/microprofile-config.properties` file,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Imagine that you need to use a different value for the `value` parameter between
    development and system testing. You could do this by passing a parameter in the
    command line when starting the microservice as follows (ensure to exit the running
    application by pressing *Ctrl* + *C* on the Terminal window first):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when you click on Config values by lookup, another window tab is displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/faf2d928-0fb2-49ef-82bc-9a67409b6aa6.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that the source code executing this logic is located in the generated `./src/main/java/com/example/demo/config/ConfigTestController.java`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see the capabilities of MicroProfile Fault Tolerance, click on Fallback
    after timeout. A window tab will open with the following display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dc1dcb42-0d68-4030-b163-186cae70d6bd.png)'
  prefs: []
  type: TYPE_IMG
- en: For more information on the MicroProfile Config API, please refer to its documentation
    ([https://github.com/eclipse/microprofile-config/releases/download/1.3/microprofile-config-spec-1.3.pdf](https://github.com/eclipse/microprofile-config/releases/download/1.3/microprofile-config-spec-1.3.pdf)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The sample code is exercising the `@Fallback` annotation in combination with `@Timeout`. Here''s
    the sample code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `@Timeout` annotation specifies that if the method takes longer than 500
    milliseconds to execute, a timeout exception should be thrown. This annotation
    can be used together with `@Fallback`, which, in this case, invokes the fallback
    handler called fallback when the timeout exception occurs. In the previously generated
    sample code, the timeout exception will always happen because the method is executing—that
    is, sleeping for 700 milliseconds, which is longer than 500 milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the source code executing this logic is located in the generated `./src/main/java/com/example/demo/resilient/ResilienceController.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the MicroProfile Fault Tolerance API, please refer to
    its documentation ([https://github.com/eclipse/microprofile-opentracing/releases/download/1.2/microprofile-opentracing-spec-1.2.pdf](https://github.com/eclipse/microprofile-opentracing/releases/download/1.2/microprofile-opentracing-spec-1.2.pdf)).
  prefs: []
  type: TYPE_NORMAL
- en: The MicroProfile community welcomes your feedback as well as collaboration or
    contributions toward the continued development of the MicroProfile Starter project.
    To give feedback, you need to click on the Give Feedback button in the top-right
    of the MicroProfile Starter "Beta"([https://start.microprofile.io/](https://start.microprofile.io/))
    landing page and create an issue.
  prefs: []
  type: TYPE_NORMAL
- en: The MicroProfile Starter project groups and prioritizes requested items and
    fixes in milestones with the goal of releasing continuously. The MicroProfile
    Starter working group meets on a regular basis and if you'd like to help the project
    with your development skills, please send an email to `microprofile@googlegroups.com` or
    join the discussion on its Gitter channel ([https://gitter.im/eclipse/microprofile-starter](https://gitter.im/eclipse/microprofile-starter)).
    The project information, including the location of its source code, can be found
    at [https://wiki.eclipse.org/MicroProfile/StarterPage](https://wiki.eclipse.org/MicroProfile/StarterPage).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the lightweight governance processes of the
    Eclipse MicroProfile project, its rapid approach to innovation, and how sandboxes
    are used to foster collaboration and encourage code development and documentation.
    We also learned about its sub-projects, the leaders of these sub-projects, and
    how they can be released either standalone or as part of an Eclipse MicroProfile
    umbrella release.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, you learned about MicroProfile Starter, which is a Maven project
    generation tool that provides code samples so that developers can get their MicroProfile
    applications started quickly. Finally, we got a sneak-peek at how an application's
    properties can be easily modified using Eclipse MicroProfile Config constructs,
    ...
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the main means of communication for the MicroProfile community?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the goal of the bi-weekly MicroProfile Hangout call?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the role of a sub-project (MicroProfile specification) lead/leads?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the process followed by a new MicroProfile specification proposal?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the release schedule that the MicroProfile project follows?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the goal of the MicroProfile sandbox?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between projects released under the umbrella/platform
    MicroProfile release and outside it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is MicroProfile Starter and what benefits does it provide?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
