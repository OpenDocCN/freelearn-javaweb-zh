["```java\n  <dependency>\n    <groupId>org.springframework.integration</groupId>\n    <artifactId>spring-integration-test</artifactId>\n    <version>${spring.integration.version}</version>\n  </dependency>\n  <dependency>\n    <groupId>junit</groupId>\n    <artifactId>junit</artifactId>\n    <version>${junit.version}</version>\n  </dependency>\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-test</artifactId>\n    <version>${spring.version}</version>\n    <scope>test</scope>\n  </dependency>\n```", "```java\nMessage<String> message = MessageBuilder.withPayload(\"Test\").build()\n```", "```java\nimport org.springframework.messaging.Message;\n\nimport com.cpandey.siexample.pojo.SoFeed;\nimport com.sun.syndication.feed.synd.SyndEntry;\n\npublic class SoFeedDbTransformer {\n\n  public SoFeed transformFeed(Message<SyndEntry> message){\n    SyndEntry entry = message.getPayload();\n    SoFeed soFeed=new SoFeed();\n    soFeed.setTitle(entry.getTitle());\n    soFeed.setDescription(entry.getDescription().getValue());\n    soFeed.setCategories(entry.getCategories());\n    soFeed.setLink(entry.getLink());\n    soFeed.setAuthor(entry.getAuthor());\n\n    System.out.println(\"JDBC\"+soFeed.getTitle());\n    return soFeed;\n  }\n}\n```", "```java\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertThat;\nimport static org.springframework.integration.test.matcher.PayloadMatcher.hasPayload;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.integration.channel.QueueChannel;\nimport org.springframework.integration.support.MessageBuilder;\nimport org.springframework.messaging.Message;\nimport org.springframework.messaging.MessageChannel;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport com.cpandey.siexample.pojo.SoFeed;\nimport com.sun.syndication.feed.synd.SyndCategoryImpl;\nimport com.sun.syndication.feed.synd.SyndContent;\nimport com.sun.syndication.feed.synd.SyndContentImpl;\nimport com.sun.syndication.feed.synd.SyndEntry;\nimport com.sun.syndication.feed.synd.SyndEntryImpl;\n\n@ContextConfiguration\n@RunWith(SpringJUnit4ClassRunner.class)\npublic class TestSoDBFeedTransformer {\n  @Autowired\n  MessageChannel filteredFeedChannel;\n\n  @Autowired\n  QueueChannel transformedChannel;\n\n  @Test\n  public void messageIsConvertedToEntity() {\n    //Define a dummy domain Object\n    SyndEntry entry =new SyndEntryImpl();\n    entry.setTitle(\"Test\");\n    SyndContent content=new SyndContentImpl();\n    content.setValue(\"TestValue\");\n    entry.setDescription(content);\n    List<SyndCategoryImpl> catList=new \n      ArrayList<SyndCategoryImpl>();\n    entry.setCategories(catList);\n    entry.setLink(\"TestLink\");\n    entry.setAuthor(\"TestAuthor\");\n\n//Define expected result\n    SoFeed expectedSoFeed=new SoFeed();\n    expectedSoFeed.setTitle(entry.getTitle());\n    expectedSoFeed.setDescription(entry.getDescription\n      ().getValue());\n\n      expectedSoFeed.setCategories(entry.getCategories()\n      );\n    expectedSoFeed.setLink(entry.getLink());\n    expectedSoFeed.setAuthor(entry.getAuthor());\n\n    Message<SyndEntry> message = \n      MessageBuilder.withPayload(entry).build();\n    filteredFeedChannel.send(message);\n    Message<?> outMessage = \n      transformedChannel.receive(0);\n    SoFeedsoFeedReceived\n      =(SoFeed)outMessage.getPayload();\n    assertNotNull(outMessage);\n    assertThat(outMessage, \n      hasPayload(soFeedReceived));\n    outMessage = transformedChannel.receive(0);\n    assertNull(\"Only one message expected\", \n      outMessage);\n  }\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <beans \n\n      xsi:schemaLocation=\"http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd\n    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <int:channel id=\"filteredFeedChannel\"/>\n    <int:channel id=\"transformedChannel\">\n      <int:queue/>\n    </int:channel>\n\n    <bean id=\"feedDbTransformerBean\" \n      class=\"com.cpandey.siexample.transformer.SoFeedDbTransformer\" />\n    <!-- Transformers -->\n    <int:transformer id=\"dbFeedTransformer\" \n      ref=\"feedDbTransformerBean\" \n      input-channel=\"filteredFeedChannel\"\n      method=\"transformFeed\" \n      output-channel=\"transformedChannel\"/>\n  </beans>\n```", "```java\n  <int:header-enricher \n    input-channel=\"filteredFeedChannel\" output-channel=\"transformedChannel\">\n    <int:header name=\"testHeaderKey1\" value=\"testHeaderValue1\"/>\n    <int:header name=\"testHeaderKey2\" value=\"testHeaderValue2\"/>\n  </int:header-enricher>\n```", "```java\nimport static org.junit.Assert.assertThat;\nimport static org.springframework.integration.test.matcher.HeaderMatcher.hasHeader;\nimport static org.springframework.integration.test.matcher.HeaderMatcher.hasHeaderKey;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.integration.channel.QueueChannel;\nimport org.springframework.integration.support.MessageBuilder;\nimport org.springframework.messaging.Message;\nimport org.springframework.messaging.MessageChannel;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n@ContextConfiguration\n// default context name is <ClassName>-context.xml\n@RunWith(SpringJUnit4ClassRunner.class)\npublic class TestSoHeaderAddition {\n  @Autowired\n  MessageChannel filteredFeedChannel;\n\n  @Autowired\n  QueueChannel transformedChannel;\n\n  @Test\n  public void headerIsAddedToEntity() {\n    Message<String> message = MessageBuilder.withPayload(\"testheader\").build();\n    filteredFeedChannel.send(message);\n    Message<?> outMessage = transformedChannel.receive(0);\n    assertThat(outMessage, hasHeaderKey(\"testHeaderKey1\"));\n    assertThat(outMessage, hasHeader(\"testHeaderKey1\", \"testHeaderValue1\"));\n  }\n}\n```", "```java\n  @Test(expected = MessageTransformationException.class)\n  public void errorReportedWhenPayloadIsWrong() {\n    Message<String> message = \n      MessageBuilder.withPayload(\"this should fail\").build();\n    filteredFeedChannel.send(message);\n  }\n```", "```java\nimport java.util.List;\nimport org.springframework.messaging.Message;\nimport com.sun.syndication.feed.synd.SyndCategoryImpl;\nimport com.sun.syndication.feed.synd.SyndEntry;\n\npublic class SoFeedFilter {\n  public boolean filterFeed(Message<SyndEntry> message){\n    SyndEntry entry = message.getPayload();\n    List<SyndCategoryImpl>\n      categories=entry.getCategories();\n    if(categories!=null&&categories.size()>0){\n      for (SyndCategoryImpl category: categories) {\n\n        if(category.getName().equalsIgnoreCase(\"java\")){\n          return true;\n        }\n\n      }\n    }\n    return false;\n  }\n}\n```", "```java\n  @Test\n  public void javaMessagePassedThrough() {\n    SyndEntry entry =new SyndEntryImpl();\n    entry.setTitle(\"Test\");\n    SyndContent content=new SyndContentImpl();\n    content.setValue(\"TestValue\");\n    entry.setDescription(content);\n    List<SyndCategoryImpl> catList=new \n      ArrayList<SyndCategoryImpl>();\n    SyndCategoryImpl category=new SyndCategoryImpl();\n    category.setName(\"java\");\n    catList.add(category);\n    entry.setCategories(catList);\n    entry.setLink(\"TestLink\");\n    entry.setAuthor(\"TestAuthor\");\n\n    Message<SyndEntry> message = \n      MessageBuilder.withPayload(entry).build();\n    fetchedFeedChannel.send(message);\n    Message<?> outMessage = filteredFeedChannel.receive(0);\n    assertNotNull(\"Expected an output message\", outMessage);\n    assertThat(outMessage, hasPayload(entry));\n  }\n```", "```java\nis used to test whether any other message except the category java is dropped:\n```", "```java\n  @Test\n  public void nonJavaMessageDropped() {\n    SyndEntry entry =new SyndEntryImpl();\n    entry.setTitle(\"Test\");\n    SyndContent content=new SyndContentImpl();\n    content.setValue(\"TestValue\");\n    entry.setDescription(content);\n    List<SyndCategoryImpl> catList=new \n      ArrayList<SyndCategoryImpl>();\n    SyndCategoryImpl category=new SyndCategoryImpl();\n    category.setName(\"nonjava\");\n    catList.add(category);\n    entry.setCategories(catList);\n    entry.setLink(\"TestLink\");\n    entry.setAuthor(\"TestAuthor\");\n\n    Message<SyndEntry> message = \n      MessageBuilder.withPayload(entry).build();\n    fetchedFeedChannel.send(message);\n    Message<?> outMessage = filteredFeedChannel.receive(0);\n    assertNull(\"Expected no output message\", outMessage);\n  }\n```", "```java\nimport org.springframework.messaging.Message;\n\nimport com.sun.syndication.feed.synd.SyndCategoryImpl;\nimport com.sun.syndication.feed.synd.SyndEntry;\n\npublic class SoFeedSplitter {\n  public List<SyndCategoryImpl> splitAndPublish(Message<SyndEntry> message) {\n    SyndEntry syndEntry=message.getPayload();\n    List<SyndCategoryImpl> categories= syndEntry.getCategories();\n    return categories;\n  }\n}\n```", "```java\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertThat;\nimport static org.springframework.integration.test.matcher.HeaderMatcher.hasHeader;\nimport static org.springframework.integration.test.matcher.HeaderMatcher.hasHeaderKey;\nimport static org.springframework.integration.test.matcher.PayloadMatcher.hasPayload;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.integration.channel.QueueChannel;\nimport org.springframework.integration.support.MessageBuilder;\nimport org.springframework.messaging.Message;\nimport org.springframework.messaging.MessageChannel;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport com.cpandey.siexample.pojo.SoFeed;\nimport com.sun.syndication.feed.synd.SyndCategoryImpl;\nimport com.sun.syndication.feed.synd.SyndContent;\nimport com.sun.syndication.feed.synd.SyndContentImpl;\nimport com.sun.syndication.feed.synd.SyndEntry;\nimport com.sun.syndication.feed.synd.SyndEntryImpl;\n\n@ContextConfiguration\t// default context name is <ClassName>-context.xml\n@RunWith(SpringJUnit4ClassRunner.class)\npublic class TestSplitter {\n  //Autowire required channels\n  @Autowired\n  MessageChannel filteredFeedChannel;\n\n  @Autowired\n  QueueChannel splitFeedOutputChannel;\n\n  @Test\n  public void javaMessagePassedThrough() {\n    //Create MOCK payload\n    //Create a SyndEntry Object\n    SyndEntry entry =new SyndEntryImpl();\n    entry.setTitle(\"Test\");\n    //Create a SyndContent to be used with entry\n    SyndContent content=new SyndContentImpl();\n    content.setValue(\"TestValue\");\n    entry.setDescription(content);\n    //Create List which is expected on Channel\n    List<SyndCategoryImpl> catList=new ArrayList<SyndCategoryImpl>();\n    //Create Categories\n    SyndCategoryImpl category1=new SyndCategoryImpl();\n    category1.setName(\"java\");\n    category1.setTaxonomyUri(\"\");\n    SyndCategoryImpl category2=new SyndCategoryImpl();\n    category2.setName(\"java\");\n    category2.setTaxonomyUri(\"\");\n    //Add categories\n    catList.add(category1);\n    catList.add(category2);\n    //Complete entry\n    entry.setCategories(catList);\n    entry.setLink(\"TestLink\");\n    entry.setAuthor(\"TestAuthor\");\n\n    //Use Spring Integration util method to build a payload\n    Message<SyndEntry> message = MessageBuilder.withPayload(entry).build();\n    //Send Message on the channel\n    filteredFeedChannel.send(message);\n    Message<?> outMessage1 = splitFeedOutputChannel.receive(0);\n    //Receive Message on channel\n    Message<?> outMessage2 = splitFeedOutputChannel.receive(0);\n    //Assert Results\n    assertNotNull(\"Expected an output message\", outMessage1);\n    assertNotNull(\"Expected an output message\", outMessage2);\n    assertThat(outMessage1, hasPayload(category1));\n    assertThat(outMessage2, hasPayload(category2));\n  }\n}\n```"]