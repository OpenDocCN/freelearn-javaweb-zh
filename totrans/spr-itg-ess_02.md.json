["```java\npublic interface MessageChannel {\n  boolean send(Message<?> message);\n  boolean send(Message<?> message, long timeout);\n}\n```", "```java\n    public interface PollableChannel extends MessageChannel {\n      Message<?> receive();\n      Message<?> receive(long timeout);\n    }\n    ```", "```java\n    public interface SubscribableChannel extends MessageChannel {\n      boolean subscribe(MessageHandler handler);\n      boolean unsubscribe(MessageHandler handler);\n    }\n    ```", "```java\npublic interface MessageHandler {\n  void handleMessage(Message<?> message) throws MessageException;\n}\n```", "```java\n<int:publish-subscribe-channel id=\"pubSubChannel\"/>\n```", "```java\npublic class PubSubExample {\n  private ApplicationContext ctx = null;\n  private MessageChannel pubSubChannel = null;\n  public PubSubChannelTest() {\n    ctx = new ClassPathXmlApplicationContext(\"spring-integration-context.xml\");\n    pubSubChannel = ctx.getBean(\"pubSubChannel\", MessageChannel.class);\n  }\n}\n```", "```java\n<int:channel id=\"queueChannel\">\n  <queue capacity=\"50\"/>\n</int:channel>\n```", "```java\n<int:channel id=\"priorityChannel\">\n  <int:priority-queue capacity=\"50\"/>\n</int:channel>\n```", "```java\n<int:channel id=\"priorityChannel\" datatype=\"com.example.result\">\n  <int:priority-queue comparator=\"resultComparator\" capacity=\"50\"/>\n</int:channel>\n```", "```java\n<int:channel id=\"rendezvousChannel\"/>\n  <int:rendezvous-queue/>\n</int:channel>\n```", "```java\n<int:channel id=\"newQuestions\">\n  <dispatcher failover=\"false\" load-balancer=\"round-robin\"/>\n</int:channel>\n```", "```java\npublic interface LoadBalancingStrategy {\n  public Iterator<MessageHandler> getHandlerIterator(\n  Message<?> message, List<MessageHandler> handlers);\n}\n```", "```java\n<int:channel id=\"lbChannel\">\n  <int:dispatcher load-balancer-ref=\"customLb\"/>\n</int:channel>\n\n<bean id=\"customLb\" class=\"com.chandan.CustomLoadBalancingImpl\"/>\n```", "```java\n<int:channel id=\"results\">\n<int:dispatcher task-executor=\"resultExecutor\"/></int:channel>\n// define the executor\n<bean id=\" resultExecutor \" class=\"com.example.ResultExecutor\"/>\n```", "```java\n<int:channel id=\"results\">\n<int:dispatcher load-balancer=\"none\" failover=\"false\"\n  taskexecutor=\"resultsExecutor\"/>\n</int:channel>\n```", "```java\nthread scope:\n```", "```java\n<int:channel id=\"threadScopeChannel\" scope=\"thread\">\n  <int:queue />\n</int:channel>\n```", "```java\n<bean class=\"org.springframework.beans.factory.config.CustomScopeConfigurer\">\n  <property name=\"scopes\">\n    <map>\n      <entry key=\"thread\" value=\"org.springframework.context.support.SimpleThreadScope\" />\n    </map>\n  </property>\n</bean>\n```", "```java\n<int:channel id=\"examMarksChannel\" datatype=\"java.lang.Number\"/>\n```", "```java\n<int:channel id=\"stringOrNumberChannel\" datatype=\"java.lang.String,java.lang.Number\"/>\n```", "```java\npublic static class StringToIntegerConverter implements Converter<String, Integer> {\n  public Integer convert(String source) {\n    return Integer.parseInt(source);\n  }\n}\n<int:converter ref=\"strToInt\"/>\n\n<bean id=\"strToInt\" class=\"com.chandan.StringToIntegerConverter\"/>\n```", "```java\n    <int:channel id=\"invalidMarksErrorChannel\">\n      <int:queue capacity=\"500\"/>\n    </int:channel>\n    ```", "```java\n    <int:gateway default-request-channel=\"questionChannel\" service-interface=\"com.chandan.processQuestion\" \n      error-channel=\"errorChannel\"/>\n    ```", "```java\n<int:channel id=\"resultPersistenceChannel\">\n  <int:queue message-store=\"messageStore\"/>\n</int:channel>\n\n<int-jdbc:message-store id=\"messageStore\" data-source=\"someDataSource\"/>\n```", "```java\npublic interface ChannelInterceptor {\n  Message<?> preSend(Message<?> message, MessageChannel channel);\n  void postSend(Message<?> message, MessageChannel channel, boolean sent);\n  boolean preReceive(MessageChannel channel);\n  Message<?> postReceive(Message<?> message, MessageChannel channel);\n}\n```"]