["```java\n    <beans \n\n      xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n      http://www.springframework.org/schema/beans/spring-beans.xsd\n      http://www.springframework.org/schema/batch\n      http://www.springframework.org/schema/batch/spring-batch.xsd\n      http://www.springframework.org/schema/context\n      http://www.springframework.org/schema/context/spring-context.xsd\n      http://www.springframework.org/schema/integration\n      http://www.springframework.org/schema/integration/spring-integration.xsd\">\n    ```", "```java\n        <dependency>\n          <groupId>org.springframework.batch</groupId>\n          <artifactId>spring-batch-core</artifactId>\n          <version>3.0.1.RELEASE</version>\n        </dependency>\n\n        <dependency>\n          <groupId>postgresql</groupId>\n          <artifactId>postgresql</artifactId>\n          <version>9.0-801.jdbc4</version>\n        </dependency>\n\n        <dependency>\n          <groupId>commons-dbcp</groupId>\n          <artifactId>commons-dbcp</artifactId>\n          <version>1.4</version>\n        </dependency>\n    ```", "```java\n<batch:job id=\"importEmployeeRecords\" \n  job-repository=\"jobRepository\" \n  parent=\"simpleJob\">\n  <batch:step id=\"loadEmployeeRecords\">\n    <batch:tasklet>\n      <batch:chunk \n        reader=\"itemReader\" \n        writer=\"itemWriter\" \n        commit-interval=\"5\"/>\n    </batch:tasklet>\n  </batch:step>\n  <!-- Listener for status of JOB -->\n  <batch:listeners>\n    <batch:listener \n      ref=\"notificationExecutionsListener\"/>\n  </batch:listeners>\n</batch:job>\n```", "```java\nFlatFileItemReader reader to read data from a flat file:\n```", "```java\n<bean id=\"itemReader\" \n  class=\"org.springframework.batch.item.file.FlatFileItemReader\" \n  scope=\"step\">\n  <property name=\"resource\" \n    value=\"file:///#{jobParameters['input.file.name']}\"/>\n  <property name=\"lineMapper\">\n    <bean class=\n      \"org.springframework.batch.item.file.mapping.DefaultLineMapper\">\n      <property name=\"lineTokenizer\">\n        <bean class=\n          \"org.springframework.batch.item.file.transform.DelimitedLineTokenizer\">\n          <property name=\"names\" \n            value=\"name,designation,dept,address\"/>\n        </bean>\n      </property>\n      <property name=\"fieldSetMapper\">\n        <bean class=\n          \"com.cpandey.siexample.batch.EmployeeFieldSetMapper\"/>\n      </property>\n    </bean>\n  </property>\n</bean>\n```", "```java\n    Chandan, SWEngineer, RnD, India\n    Pandey, Tester, RnD, India\n    ```", "```java\n    import org.springframework.batch.item.file.mapping.FieldSetMapper;\n    import org.springframework.batch.item.file.transform.FieldSet;\n    import org.springframework.validation.BindException;\n\n    public class EmployeeFieldSetMapper implements FieldSetMapper<Employee> {\n\n    @Override\n    public Employee mapFieldSet(FieldSet fieldSet) throws BindException {\n        Employee employee = new Employee();\n        employee.setName(fieldSet.readString(\"name\"));\n        employee.setDesignation(fieldSet.readString(\"designation\"));\n        employee.setDept(fieldSet.readString(\"dept\"));\n        employee.setAddress(fieldSet.readString(\"address\"));\n        return employee;\n      }\n    }\n    ```", "```java\n<bean id=\"itemWriter\" \nclass=\"com.cpandey.siexample.batch.EmployeeRecordWriter\"/>\n```", "```java\nimport java.util.List;\nimport org.springframework.batch.item.ItemWriter;\npublic class EmployeeRecordWriter implements ItemWriter<Employee> {\n  @Override\n  public void write(List<? extends Employee> employees) throws\n  Exception {\n    if(employees!=null){\n      for (Employee employee : employees) { \n        System.out.println(employee.toString());\n      }\n    }\n  }\n}\n```", "```java\n<bean id=\"jobLauncher\" \n  class=\"org.springframework.batch.core.launch.support.SimpleJobLauncher\">\n  <property name=\"jobRepository\" ref=\"jobRepository\"/>\n</bean>\n```", "```java\n<bean id=\"jobRepository\" \n  class=\"org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean\">\n  <property name=\"transactionManager\" ref=\"transactionManager\"/>\n</bean>\n```", "```java\nthe configuration of a data source (this is an Apache DBCP implementation):\n```", "```java\nimport org.apache.commons.dbcp.BasicDataSource;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n@Configuration\npublic class BatchJdbcConfiguration {\n  @Value(\"${db.driverClassName}\")\n  private String driverClassName;\n  @Value(\"${db.url}\")\n  private String url;\n  @Value(\"${db.username}\")\n  private String username;\n  @Value(\"${db.password}\")\n  private String password;\n  @Bean(destroyMethod = \"close\")\n\n  public BasicDataSource dataSource() {\n    BasicDataSource dataSource = new BasicDataSource();\n    dataSource.setDriverClassName(driverClassName);\n    dataSource.setUrl(url);\n    dataSource.setUsername(username);\n    dataSource.setPassword(password);\n    return dataSource;\n  }\n}\n```", "```java\n<context:property-placeholder \n  location=\"/META-INF/spring/integration/batch.properties\"/> \n  db.password=root \n  db.username=postgres \n  db.databaseName=postgres \n  db.driverClassName=org.postgresql.Driver \n  db.serverName=localhost:5432 \n  db.url=jdbc:postgresql://${db.serverName}/${db.databaseName}\n```", "```java\n<bean id=\"transactionManager\" \n  class=\"org.springframework.batch.support.transaction. \n  ResourcelessTransactionManager\" />\n```", "```java\nimport org.springframework.batch.core.Job;\nimport org.springframework.batch.core.JobExecution;\nimport org.springframework.batch.core.JobParametersBuilder;\nimport org.springframework.batch.core.JobParametersInvalidException;\nimport org.springframework.batch.core.launch.JobLauncher;\nimport org.springframework.batch.core.repository.JobExecutionAlreadyRunningException;\nimport org.springframework.batch.core.repository.JobInstanceAlreadyCompleteException;\nimport org.springframework.batch.core.repository.JobRestartException;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class BatchJobLauncher {\n  public static void main(String[] args) throws JobExecutionAlreadyRunningException, JobRestartException, JobInstanceAlreadyCompleteException, JobParametersInvalidException {\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"/META-INF/spring/integration/spring-integration-batch.xml\");\n    Job job = context.getBean(\"importEmployeeRecords\", Job.class);\n    JobLauncher jobLauncher= context.getBean(\"jobLauncher\", JobLauncher.class);\n    JobParametersBuilder jobParametersBuilder = new JobParametersBuilder();\n    jobParametersBuilder.addString(\"input.file.name\", \"C:/workspace_sts/siexample/src/main/resources/META-INF/spring/integration/employee.input\");\n    JobExecution execution =jobLauncher.run(job, jobParametersBuilder.toJobParameters());\n  }\n}\n```", "```java\n<int-file:inbound-channel-adapter id=\"fileAdapter\" \n  directory=\"C:\\Chandan\\Projects\\inputfolderforsi\" \n  channel=\"filesOutputChannel\" \n  prevent-duplicates=\"true\" filename-pattern=\"*.txt\"> \n  <int:poller fixed-rate=\"1000\" />\n</int-file:inbound-channel-adapter>\n```", "```java\n<int:transformer \n  input-channel=\"filesOutputChannel\" \n  output-channel=\"batchRequest\">\n  <bean class=\"com.cpandey.siexample.batch.FileMessageToJobRequest\">\n    <property name=\"job\" ref=\"importEmployeeRecords\"/>\n    <property name=\"fileParameterName\" value=\"input.file.name\"/>\n  </bean>\n</int:transformer>\n```", "```java\nimport java.io.File;\n\nimport org.springframework.batch.core.Job;\nimport org.springframework.batch.core.JobParametersBuilder;\nimport org.springframework.batch.integration.launch.JobLaunchRequest;\nimport org.springframework.integration.annotation.Transformer;\nimport org.springframework.messaging.Message;\n\npublic class FileMessageToJobRequest {\n  private Job job;\n  private String fileParameterName;\n\n  public void setFileParameterName(String fileParameterName) {\n    this.fileParameterName = fileParameterName;\n  }\n\n  public void setJob(Job job) {\n    this.job = job;\n  }\n\n  @Transformer\n  public JobLaunchRequest toRequest(Message<File> message) {\n  JobParametersBuilder jobParametersBuilder = new JobParametersBuilder();\n\n  jobParametersBuilder.addString(fileParameterName,message.getPayload().getAbsolutePath());\n  return new JobLaunchRequest(job,jobParametersBuilder.toJobParameters());\n  }\n}\n```", "```java\n  <batch:listeners>\n    <batch:listener ref=\"simpleListener\"/>\n  </batch:listeners>\n```", "```java\n<int:gateway id=\" simpleListener\"\n  service-interface=\"org.springframework.batch.core.JobExecutionListener\" default-request-channel=\"jobExecutionsStatus\"/>\n```", "```java\n<int:service-activator\n  ref=\"batchStatusServiceActivator\"\n  method=\"printStatus\"\n  input-channel=\"jobExecutionsStatus\"/>\n\nimport org.springframework.batch.core.JobExecution;\nimport org.springframework.integration.annotation.MessageEndpoint;\nimport org.springframework.messaging.Message;\n\n@MessageEndpoint\npublic class BatchStatusServiceActivator {\n  public void printStatus(Message<JobExecution> status ) {\n    if(status!=null){\n      System.out.println(\"Status :: \"+status.getPayload().toString());\n    }\n  }\n}\n```"]