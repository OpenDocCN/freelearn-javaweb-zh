["```java\ndockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375\n```", "```java\n$ docker run -d --name pg -e POSTGRES_PASSWORD=123456 -e POSTGRES_USER=piomin -e POSTGRES_DB=example -p 55432:5432 postgres\n```", "```java\n$ docker volume create pgdata\n$ docker run --rm -it -e -m 500M -v pgdata:/var/lib/postgresql/data -p 55432:5432 postgres\n```", "```java\n$ docker stop pg\n```", "```java\n$ docker start pg\n```", "```java\n$ docker restart  pg\n```", "```java\n$ docker rm -f pg\n```", "```java\n$ docker rmi 875263695ab8\n```", "```java\n$ docker rmi $(docker images -q -f dangling=true)\n```", "```java\n$ docker pull postgres\n```", "```java\n$ docker pull postgres:9.3\n```", "```java\n$ docker tag postgres piomin/postgres:1.0\n```", "```java\n$ docker push piomin/postgres:1.0\n```", "```java\n$ docker build -t piomin/order-service:1.0 .\n```", "```java\n$ docker network create kafka-network\n```", "```java\n$ docker network ls\n```", "```java\n$ docker run -d --name zookeeper --network kafka-net zookeeper:3.4\n$ docker run -d --name kafka --network kafka-net -e ZOOKEEPER_IP=zookeeper ches/kafka\n```", "```java\nFROM openjdk:8u151-jdk-slim-stretch\nMAINTAINER Piotr Minkowski <piotr.minkowski@gmail.com>\nENV SPRING_PROFILES_ACTIVE zone1\nENV EUREKA_DEFAULT_ZONE http://localhost:8761/eureka/\nADD target/account-service-1.0-SNAPSHOT.jar app.jar\nENTRYPOINT [\"java\", \"-Xmx160m\", \"-jar\", \"-Dspring.profiles.active=${SPRING_PROFILES_ACTIVE}\", \"-Deureka.client.serviceUrl.defaultZone=${EUREKA_DEFAULT_ZONE}\", \"/app.jar\"]\nEXPOSE 8091\n```", "```java\njava -Xmx160m -jar â€“Dspring.profiles.active=zone1 -Deureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/ app.jar\n```", "```java\nFROM openjdk:8u151-jdk-slim-stretch\nMAINTAINER Piotr Minkowski <piotr.minkowski@gmail.com>\nADD target/discovery-service-1.0-SNAPSHOT.jar app.jar\nENTRYPOINT [\"java\", \"-Xmx144m\", \"-jar\", \"/app.jar\"]\nEXPOSE 8761\n```", "```java\n$ docker build -t piomin/discovery-service:1.0 .\nSending build context to Docker daemon 39.9MB\nStep 1/5 : FROM openjdk:8u151-jdk-slim-stretch\n8u151-jdk-slim-stretch: Pulling from library/openjdk\n8176e34d5d92: Pull complete\n2208661344b7: Pull complete\n99f28966f0b2: Pull complete\ne991b55a8065: Pull complete\naee568884a84: Pull complete\n18b6b371c215: Pull complete\nDigest: sha256:bd394fdc76e8aa73adba2a7547fcb6cde3281f70d6b3cae6fa62ef1fbde327e3\nStatus: Downloaded newer image for openjdk:8u151-jdk-slim-stretch\n ---> 52de5d98a41d\nStep 2/5 : MAINTAINER Piotr Minkowski <piotr.minkowski@gmail.com>\n ---> Running in 78fc78cc21f0\n ---> 0eba7a369e43\nRemoving intermediate container 78fc78cc21f0\nStep 3/5 : ADD target/discovery-service-1.0-SNAPSHOT.jar app.jar\n ---> 1c6a2e04c4dc\nRemoving intermediate container 98138425b5a0\nStep 4/5 : ENTRYPOINT java -Xmx144m -jar /app.jar\n ---> Running in 7369ba693689\n ---> c246470366e4\nRemoving intermediate container 7369ba693689\nStep 5/5 : EXPOSE 8761\n ---> Running in 74493ae54220\n ---> 06af6a3c2d41\nRemoving intermediate container 74493ae54220\nSuccessfully built 06af6a3c2d41\nSuccessfully tagged piomin/discovery-service:1.0\n```", "```java\n$ docker network create sample-spring-cloud-network\n$ docker run -d --name discovery -p 8761:8761 --network sample-spring-cloud-network piomin/discovery-service:1.0\nde2fac673806e134faedee3c0addaa31f2bbadcffbdff42a53f8e4ee44ca0674\n$ docker logs -f discovery\n```", "```java\n$ docker build -t piomin/account-service:1.0 .\n```", "```java\n$ docker run -d --name account -p 8091:8091 -e EUREKA_DEFAULT_ZONE=http://discovery:8761/eureka -m 256M --network sample-spring-cloud-network piomin/account-service:1.0\n$ docker logs -f account\n```", "```java\ndocker stats --format \"table {{.Name}}\\t{{.Container}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\" \n```", "```java\n<plugin>\n <groupId>com.spotify</groupId>\n <artifactId>docker-maven-plugin</artifactId>\n <version>1.0.0</version>\n <configuration>\n <imageName>piomin/${project.artifactId}</imageName>\n <imageTags>${project.version}</imageTags>\n <baseImage>openjdk:8u151-jdk-slim-stretch</baseImage>\n <entryPoint>[\"java\", \"-Xmx160m\", \"-jar\", \"-Dspring.profiles.active=${SPRING_PROFILES_ACTIVE}\", \"-Deureka.client.serviceUrl.defaultZone=${EUREKA_DEFAULT_ZONE}\", \"/${project.build.finalName}.jar\"] </entryPoint>\n <env>\n  <SPRING_PROFILES_ACTIVE>zone1</SPRING_PROFILES_ACTIVE>\n  <EUREKA_DEFAULT_ZONE>http://localhost:8761/eureka/</EUREKA_DEFAULT_ZONE>\n </env>\n <exposes>8091</exposes>\n <maintainer>piotr.minkowski@gmail.com</maintainer>\n <dockerHost>https://192.168.99.100:2376</dockerHost>\n <dockerCertPath>C:\\Users\\Piotr\\.docker\\machine\\machines\\default</dockerCertPath>\n <resources>\n  <resource>\n   <directory>${project.build.directory}</directory>\n   <include>${project.build.finalName}.jar</include>\n  </resource>\n </resources>\n </configuration>\n</plugin>\n```", "```java\n$ mvn clean install docker:build   \n```", "```java\n<plugin>\n <groupId>com.spotify</groupId>\n <artifactId>docker-maven-plugin</artifactId>\n <version>1.0.0</version>\n <configuration>\n  <imageName>piomin/${project.artifactId}</imageName>\n  <imageTags>${project.version}</imageTags>\n  <pushImage>true</pushImage>\n  <dockerDirectory>src/main/docker</dockerDirectory>\n  <dockerHost>https://192.168.99.100:2376</dockerHost>\n  <dockerCertPath>C:\\Users\\Piotr\\.docker\\machine\\machines\\default</dockerCertPath>\n  <resources>\n   <resource>\n    <directory>${project.build.directory}</directory>\n    <include>${project.build.finalName}.jar</include>\n   </resource>\n  </resources>\n </configuration>\n</plugin>\n```", "```java\nFROM docker:18-dind\nMAINTAINER Piotr Minkowski <piotr.minkowski@gmail.com>\nENV JENKINS_MASTER http://localhost:8080\nENV JENKINS_SLAVE_NAME dind-node\nENV JENKINS_SLAVE_SECRET \"\"\nENV JENKINS_HOME /home/jenkins\nENV JENKINS_REMOTING_VERSION 3.17\nENV DOCKER_HOST tcp://0.0.0.0:2375\n\nRUN apk --update add curl tar git bash openjdk8 sudo\n\nARG MAVEN_VERSION=3.5.2\nARG USER_HOME_DIR=\"/root\"\nARG SHA=707b1f6e390a65bde4af4cdaf2a24d45fc19a6ded00fff02e91626e3e42ceaff\nARG BASE_URL=https://apache.osuosl.org/maven/maven-3/${MAVEN_VERSION}/binaries\nRUN mkdir -p /usr/share/maven /usr/share/maven/ref \\\n && curl -fsSL -o /tmp/apache-maven.tar.gz ${BASE_URL}/apache-maven-${MAVEN_VERSION}-bin.tar.gz \\\n && echo \"${SHA} /tmp/apache-maven.tar.gz\" | sha256sum -c - \\\n && tar -xzf /tmp/apache-maven.tar.gz -C /usr/share/maven --strip-components=1 \\\n && rm -f /tmp/apache-maven.tar.gz \\\n && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn\nENV MAVEN_HOME /usr/share/maven\nENV MAVEN_CONFIG \"$USER_HOME_DIR/.m2\"\n\nRUN adduser -D -h $JENKINS_HOME -s /bin/sh jenkins jenkins && chmod a+rwx $JENKINS_HOME\nRUN echo \"jenkins ALL=(ALL) NOPASSWD: /usr/local/bin/dockerd\" > /etc/sudoers.d/00jenkins && chmod 440 /etc/sudoers.d/00jenkins\nRUN echo \"jenkins ALL=(ALL) NOPASSWD: /usr/local/bin/docker\" > /etc/sudoers.d/01jenkins && chmod 440 /etc/sudoers.d/01jenkins\nRUN curl --create-dirs -sSLo /usr/share/jenkins/slave.jar http://repo.jenkins-ci.org/public/org/jenkins-ci/main/remoting/$JENKINS_REMOTING_VERSION/remoting-$JENKINS_REMOTING_VERSION.jar && chmod 755 /usr/share/jenkins && chmod 644 /usr/share/jenkins/slave.jar\n\nCOPY entrypoint.sh /usr/local/bin/entrypoint\nVOLUME $JENKINS_HOME\nWORKDIR $JENKINS_HOME\nUSER jenkins\nENTRYPOINT [\"/usr/local/bin/entrypoint\"]\n```", "```java\ndocker pull piomin/jenkins-slave-dind-jnlp\n```", "```java\n#!/bin/sh\nset -e\necho \"starting dockerd...\"\nsudo dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --storage-driver=vfs &\necho \"starting jnlp slave...\"\nexec java -jar /usr/share/jenkins/slave.jar \\\n -jnlpUrl $JENKINS_URL/computer/$JENKINS_SLAVE_NAME/slave-agent.jnlp \\\n -secret $JENKINS_SLAVE_SECRET\n```", "```java\n$ docker network create jenkins\n$ docker run -d --name jenkins -p 38080:8080 -p 50000:50000 --network jenkins jenkins/jenkins:lts\n```", "```java\n$ docker run --privileged -d --name slave --network jenkins -e JENKINS_SLAVE_SECRET=5664fe146104b89a1d2c78920fd9c5eebac3bd7344432e0668e366e2d3432d3e -e JENKINS_SLAVE_NAME=dind-node-1 -e JENKINS_URL=http://jenkins:38080 piomin/jenkins-slave-dind-jnlp\n```", "```java\nnode('dind-node-1') {\n withMaven(maven:'M3') {\n  stage('Checkout') {\n   git url: 'https://github.com/piomin/sample-spring-cloud-comm.git', credentialsId: 'github-piomin',   branch: 'master'\n  }\n\n  stage('Build') {\n   dir('account-service') {\n    sh 'mvn clean install'\n   }\n   def pom = readMavenPom file:'pom.xml'\n   print pom.version\n   env.version = pom.version\n   currentBuild.description = \"Release: ${env.version}\"\n  }\n\n  stage('Image') {\n   dir ('account-service') {\n    def app = docker.build \"piomin/account-service:${env.version}\"\n    app.push()\n   }\n  }\n\n  stage ('Run') {\n   docker.image(\"piomin/account-service:${env.version}\").run('-p 8091:8091 -d --name account --network sample-spring-cloud-network')\n  }\n\n }\n}\n```", "```java\n$ minikube start\n```", "```java\n$ minikube stop\n$ minikube delete\n```", "```java\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: order-service\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: order-service\n  template:\n    metadata:\n      labels:\n        app: order-service\n    spec:\n      containers:\n      - name: order-service\n        image: piomin/order-service:1.0\n        env:\n        - name: EUREKA_DEFAULT_ZONE\n          value: http://discovery-service:8761/eureka\n        ports:\n        - containerPort: 8090\n          protocol: TCP\n```", "```java\n$ kubectl create -f order-deployment.yaml\n```", "```java\n$ kubectl apply -f order-deployment.yaml\n```", "```java\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n name: discovery-service\n labels:\n  run: discovery-service\nspec:\n replicas: 1\n selector:\n  matchLabels:\n   app: discovery-service\n template:\n  metadata:\n   labels:\n    app: discovery-service\n  spec:\n   containers:\n   - name: discovery-service\n     image: piomin/discovery-service:1.0\n   ports:\n   - containerPort: 8761\n     protocol: TCP\n```", "```java\napiVersion: v1\nkind: Service\nmetadata:\n name: discovery-service\n  labels:\n   app: discovery-service\nspec:\n type: NodePort\n ports:\n   - protocol: TCP\n     port: 8761\n     targetPort: 8761\n selector:\n   app: discovery-service\n```", "```java\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n name: gateway-ingress\nspec:\n backend:\n  serviceName: default-http-backend\n  servicePort: 80\n rules:\n - host: microservices.example.pl\n   http:\n   paths:\n   - path: /account\n     backend:\n       serviceName: account-service\n       servicePort: 8091\n   - path: /customer\n     backend:\n       serviceName: customer-service\n       servicePort: 8092 \n   - path: /order\n     backend:\n       serviceName: order-service\n       servicePort: 8090 \n   - path: /product\n     backend:\n       serviceName: product-service\n       servicePort: 8093 \n```"]