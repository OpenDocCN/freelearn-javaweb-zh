["```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-test</artifactId>\n    <scope>test</scope>\n</dependency>\n```", "```java\n<dependency>\n <groupId>org.springframework.boot</groupId>\n <artifactId>spring-boot-starter-data-mongodb</artifactId>\n</dependency>\n```", "```java\ndocker run --name mongo -p 27017:27017 -d mongo\n```", "```java\nspring: \n application:\n  name: account-service\n data:\n  mongodb:\n   host: 192.168.99.100\n   port: 27017\n   database: micro\n   username: micro \n   password: micro123\n```", "```java\n@Document\npublic class Account {\n\n    @Id\n    private String id;\n    private String number;\n    private int balance;\n    private String customerId;\n    // ...\n\n}\n```", "```java\n@RunWith(SpringRunner.class)\n@WebMvcTest(AccountController.class)\npublic class AccountControllerUnitTest {\n\n    ObjectMapper mapper = new ObjectMapper();\n\n    @Autowired\n    MockMvc mvc;\n    @MockBean\n    AccountRepository repository;\n\n    @Test\n    public void testAdd() throws Exception {\n        Account account = new Account(\"1234567890\", 5000, \"1\");\n        when(repository.save(Mockito.any(Account.class))).thenReturn(new Account(\"1\",\"1234567890\", 5000, \"1\"));\n        mvc.perform(post(\"/\").contentType(MediaType.APPLICATION_JSON).content(mapper.writeValueAsString(account)))\n .andExpect(status().isOk());\n }\n\n    @Test\n    public void testWithdraw() throws Exception {\n        Account account = new Account(\"1\", \"1234567890\", 5000, \"1\");\n        when(repository.findOne(\"1\")).thenReturn(account);\n        when(repository.save(Mockito.any(Account.class))).thenAnswer(new Answer<Account>() {\n            @Override\n            public Account answer(InvocationOnMock invocation) throws Throwable {\n                Account a = invocation.getArgumentAt(0, Account.class);\n                return a;\n             }\n        });\n        mvc.perform(put(\"/withdraw/1/1000\"))\n            .andExpect(status().isOk())\n            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8))\n            .andExpect(jsonPath(\"$.balance\", is(4000)));\n    }\n\n}\n```", "```java\n@RunWith(SpringRunner.class)\n@WebMvcTest(OrderController.class)\npublic class OrderControllerTest {\n\n    @Autowired\n    MockMvc mvc;\n    @MockBean\n    OrderRepository repository;\n    @MockBean\n    AccountClient accountClient;\n\n    @Test\n    public void testAccept() throws Exception {\n        Order order = new Order(\"1\", OrderStatus.ACCEPTED, 2000, \"1\", \"1\", null);\n        when(repository.findOne(\"1\")).thenReturn(order);\n        when(accountClient.withdraw(order.getAccountId(), order.getPrice())).thenReturn(new Account(\"1\", \"123\", 0));\n        when(repository.save(Mockito.any(Order.class))).thenAnswer(new Answer<Order>() {\n            @Override\n            public Order answer(InvocationOnMock invocation) throws Throwable {\n                Order o = invocation.getArgumentAt(0, Order.class);\n                return o;\n            }\n        });\n\n        mvc.perform(put(\"/1\"))\n            .andExpect(status().isOk())\n            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8))\n            .andExpect(jsonPath(\"$.status\", is(\"DONE\")));\n    }\n\n}\n```", "```java\n<dependency>\n    <groupId>de.flapdoodle.embed</groupId>\n    <artifactId>de.flapdoodle.embed.mongo</artifactId>\n    <scope>test</scope>\n</dependency>\n```", "```java\n---\nspring:\n profiles: dev\n data:\n  mongodb:\n   host: 192.168.99.100\n   port: 27017\n   database: micro\n   username: micro \n   password: micro123\n\n---\nspring:\n profiles: test\n data:\n  mongodb:\n   host: localhost\n   port: 27017\n```", "```java\n---\nspring:\n profiles: no-discovery\neureka:\n client:\n  enabled: false\naccount-service:\n ribbon:\n  eureka:\n   enable: false\n  listOfServers: account-service:8080\ncustomer-service:\n ribbon:\n  eureka:\n   enable: false\n  listOfServers: customer-service:8080\nproduct-service:\n ribbon:\n  eureka:\n   enable: false\n  listOfServers: product-service:8080\n```", "```java\n@ClassRule\npublic static HoverflyRule hoverflyRule = HoverflyRule\n .inSimulationMode(dsl(\n service(\"account-service:8080\")\n .put(startsWith(\"/withdraw/\"))\n .willReturn(success(\"{\\\"id\\\":\\\"1\\\",\\\"number\\\":\\\"1234567890\\\",\\\"balance\\\":5000}\", \"application/json\")),\n service(\"customer-service:8080\")\n .get(\"/withAccounts/1\")\n .willReturn(success(\"{\\\"id\\\":\\\"{{ Request.Path.[1] }}\\\",\\\"name\\\":\\\"Test1\\\",\\\"type\\\":\\\"REGULAR\\\",\\\"accounts\\\":[{\\\"id\\\":\\\"1\\\",\\\"number\\\":\\\"1234567890\\\",\\\"balance\\\":5000}]}\", \"application/json\")),\n service(\"product-service:8080\")\n .post(\"/ids\").anyBody()\n .willReturn(success(\"[{\\\"id\\\":\\\"1\\\",\\\"name\\\":\\\"Test1\\\",\\\"price\\\":1000}]\", \"application/json\"))))\n .printSimulationData();\n```", "```java\n@RunWith(SpringRunner.class)\n@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n@FixMethodOrder(MethodSorters.NAME_ASCENDING)\n@ActiveProfiles({\"test\", \"no-discovery\"})\npublic class OrderComponentTest {\n\n    @Autowired\n    TestRestTemplate restTemplate;\n    @Autowired\n    OrderRepository orderRepository;\n\n    // ...\n\n    @Test\n    public void testAccept() {\n        Order order = new Order(null, OrderStatus.ACCEPTED, 1000, \"1\", \"1\", Collections.singletonList(\"1\"));\n        order = orderRepository.save(order);\n        restTemplate.put(\"/{id}\", null, order.getId());\n        order = orderRepository.findOne(order.getId());\n        Assert.assertEquals(OrderStatus.DONE, order.getStatus());\n    }\n\n    @Test\n    public void testPrepare() {\n        Order order = new Order(null, OrderStatus.NEW, 1000, \"1\", \"1\", Collections.singletonList(\"1\"));\n        order = restTemplate.postForObject(\"/\", order, Order.class);\n        Assert.assertNotNull(order);\n        Assert.assertEquals(OrderStatus.ACCEPTED, order.getStatus());\n        Assert.assertEquals(940, order.getPrice());\n    }\n\n}\n```", "```java\npublic interface IntegrationTest  { }\n```", "```java\n@Category(IntegrationTest.class)\npublic class OrderIntegrationTest { ... }\n```", "```java\n<plugin>\n  <artifactId>maven-failsafe-plugin</artifactId>\n  <dependencies>\n    <dependency>\n      <groupId>org.apache.maven.surefire</groupId>\n      <artifactId>surefire-junit47</artifactId>\n    </dependency>\n  </dependencies>\n  <configuration>\n    <groups>pl.piomin.services.order.IntegrationTest</groups>\n  </configuration>\n  <executions>\n    <execution>\n      <goals>\n        <goal>integration-test</goal>\n      </goals>\n      <configuration>\n        <includes>\n          <include>**/*.class</include>\n        </includes>\n      </configuration>\n    </execution>\n  </executions>\n</plugin>\n```", "```java\n@RunWith(SpringRunner.class)\n@SpringBootTest\n@ActiveProfiles(\"dev\")\n@Category(IntegrationTest.class)\npublic class OrderIntegrationTest {\n\n    @Autowired\n    AccountClient accountClient;\n    @Autowired\n    CustomerClient customerClient;\n    @Autowired\n    ProductClient productClient;\n    @Autowired\n    OrderRepository orderRepository;\n\n    @ClassRule\n    public static HoverflyRule hoverflyRule = HoverflyRule.inCaptureOrSimulationMode(\"account.json\").printSimulationData();\n\n    @Test\n    public void testAccount() {\n        Account account = accountClient.add(new Account(null, \"123\", 5000));\n        account = accountClient.withdraw(account.getId(), 1000);\n        Assert.notNull(account);\n        Assert.equals(account.getBalance(), 4000);\n    }\n\n}\n```", "```java\n@FeignClient(name = \"account-service\")\npublic interface AccountClient {\n\n    @GetMapping(\"/customer/{customerId}\")\n    List<Account> findByCustomer(@PathVariable(\"customerId\") String customerId);\n\n}\n```", "```java\n<dependency>\n    <groupId>au.com.dius</groupId>\n    <artifactId>pact-jvm-consumer-junit_2.12</artifactId>\n    <version>3.5.12</version>\n    <scope>test</scope>\n</dependency>\n```", "```java\n@RunWith(SpringRunner.class)\n@SpringBootTest(properties = { \n \"account-service.ribbon.listOfServers: localhost:8092\",\n \"account-service.ribbon.eureka.enabled: false\",\n \"eureka.client.enabled: false\",\n})\npublic class CustomerConsumerContractTest {\n\n    @Rule\n    public PactProviderRuleMk2 stubProvider = new PactProviderRuleMk2(\"customerServiceProvider\", \"localhost\", 8092, this);\n    @Autowired\n    private AccountClient accountClient;\n\n    @Pact(state = \"list-of-3-accounts\", provider = \"customerServiceProvider\", consumer = \"accountClient\")\n    public RequestResponsePact callAccountClient(PactDslWithProvider builder) {\n        return builder.given(\"list-of-3-accounts\").uponReceiving(\"test-account-service\")\n            .path(\"/customer/1\").method(\"GET\").willRespondWith().status(200)\n            .body(\"[{\\\"id\\\":\\\"1\\\",\\\"number\\\":\\\"123\\\",\\\"balance\\\":5000},{\\\"id\\\":\\\"2\\\",\\\"number\\\":\\\"124\\\",\\\"balance\\\":5000},{\\\"id\\\":\\\"3\\\",\\\"number\\\":\\\"125\\\",\\\"balance\\\":5000}]\", \"application/json\").toPact();\n    }\n\n    @Test\n    @PactVerification(fragment = \"callAccountClient\")\n    public void verifyAddressCollectionPact() {\n        List<Account> accounts = accountClient.findByCustomer(\"1\");\n        Assert.assertEquals(3, accounts.size());\n    }\n\n}\n```", "```java\ndocker run -d --name postgres -p 5432:5432 -e POSTGRES_USER=oauth -e POSTGRES_PASSWORD=oauth123 -e POSTGRES_DB=oauth postgres\ndocker run -d --name pact-broker --link postgres:postgres -e PACT_BROKER_DATABASE_USERNAME=oauth -e PACT_BROKER_DATABASE_PASSWORD=oauth123 -e PACT_BROKER_DATABASE_HOST=postgres -e PACT_BROKER_DATABASE_NAME=oauth -p 9080:80 dius/pact_broker\n```", "```java\n<plugin>\n    <groupId>au.com.dius</groupId>\n    <artifactId>pact-jvm-provider-maven_2.12</artifactId>\n    <version>3.5.12</version>\n    <configuration>\n        <pactBrokerUrl>http://192.168.99.100:9080</pactBrokerUrl>\n    </configuration>\n</plugin>\n```", "```java\n<dependency>\n    <groupId>au.com.dius</groupId>\n    <artifactId>pact-jvm-provider-junit_2.12</artifactId>\n    <version>3.5.12</version>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>au.com.dius</groupId>\n    <artifactId>pact-jvm-provider-spring_2.12</artifactId>\n    <version>3.5.12</version>\n    <scope>test</scope>\n</dependency>\n```", "```java\n@RunWith(SpringRestPactRunner.class)\n@Provider(\"customerServiceProvider\")\n@PactBroker(host = \"192.168.99.100\", port = \"9080\")\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, properties = { \"eureka.client.enabled: false\" })\npublic class AccountProviderContractTest {\n\n    @MockBean\n    private AccountRepository repository;\n    @TestTarget\n    public final Target target = new HttpTarget(8091);\n\n    @State(\"list-of-3-accounts\")\n    public void toDefaultState() {\n        List<Account> accounts = new ArrayList<>();\n        accounts.add(new Account(\"1\", \"123\", 5000, \"1\"));\n        accounts.add(new Account(\"2\", \"124\", 5000, \"1\"));\n        accounts.add(new Account(\"3\", \"125\", 5000, \"1\"));\n        when(repository.findByCustomerId(\"1\")).thenReturn(accounts);\n    }\n\n}\n```", "```java\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-contract-verifier</artifactId>\n    <scope>test</scope>\n</dependency>\n```", "```java\n<plugin>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-contract-maven-plugin</artifactId>\n    <version>1.2.0.RELEASE</version>\n    <extensions>true</extensions>\n    <configuration>\n        <packageWithBaseClasses>pl.piomin.services.account</packageWithBaseClasses>\n    </configuration>\n</plugin>\n```", "```java\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes = {AccountApplication.class})\npublic abstract class AccountProviderTestBase {\n\n    @Autowired\n    private WebApplicationContext context;\n    @MockBean\n    private AccountRepository repository;\n\n    @Before\n    public void setup() {\n        RestAssuredMockMvc.webAppContextSetup(context);\n        List<Account> accounts = new ArrayList<>();\n        accounts.add(new Account(\"1\", \"123\", 5000, \"1\"));\n        accounts.add(new Account(\"2\", \"124\", 5000, \"1\"));\n        accounts.add(new Account(\"3\", \"125\", 5000, \"1\"));\n        when(repository.findByCustomerId(\"1\")).thenReturn(accounts);\n    }\n\n}\n```", "```java\norg.springframework.cloud.contract.spec.Contract.make {\n request {\n  method 'GET'\n  url value(consumer(regex('/customer/[0-9]{3}')), producer('/customer/1'))\n }\n response {\n  status 200\n  body([\n   [\n    id: $(regex('[0-9]{5}')),\n    number: '123',\n    balance: 5000,\n    customerId: fromRequest().path(1)\n   ], [\n    id: $(regex('[0-9]{5}')),\n    number: '124',\n    balance: 5000,\n    customerId: fromRequest().path(1)\n   ], [\n    id: $(regex('[0-9]{5}')),\n    number: '125',\n    balance: 5000,\n    customerId: fromRequest().path(1)\n   ]\n  ])\n  headers {\n   contentType(applicationJson())\n  }\n }\n}\n```", "```java\npublic class AccountServiceTest extends AccountServiceBase {\n\n    @Test\n    public void validate_customerContract() throws Exception {\n\n        // given:\n        MockMvcRequestSpecification request = given();\n\n        // when:\n        ResponseOptions response = given().spec(request)\n .get(\"/customer/1\");\n\n        // then:\n        assertThat(response.statusCode()).isEqualTo(200);\n        assertThat(response.header(\"Content-Type\")).matches(\"application/json.*\");\n\n        // and:\n        DocumentContext parsedJson = JsonPath.parse(response.getBody().asString());\n        assertThatJson(parsedJson).array().contains(\"['number']\").isEqualTo(\"123\");\n        assertThatJson(parsedJson).array().contains(\"['balance']\").isEqualTo(5000);\n        assertThatJson(parsedJson).array().contains(\"['number']\").isEqualTo(\"124\");\n        assertThatJson(parsedJson).array().contains(\"['customerId']\").isEqualTo(\"1\");\n        assertThatJson(parsedJson).array().contains(\"['id']\").matches(\"[0-9]{5}\");\n     }\n\n }\n```", "```java\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-contract-stub-runner</artifactId>\n    <scope>test</scope>\n</dependency>\n```", "```java\n@RunWith(SpringRunner.class)\n@SpringBootTest(properties = {\n \"eureka.client.enabled: false\"\n})\n@AutoConfigureStubRunner(ids = {\"pl.piomin.services:account-service:+:stubs:8091\"}, workOffline = true)\npublic class AccountContractTest {\n\n    @Autowired\n    private AccountClient accountClient;\n\n    @Test\n    public void verifyAccounts() {\n        List<Account> accounts = accountClient.findByCustomer(\"1\");\n        Assert.assertEquals(3, accounts.size());\n    }\n\n}\n```", "```java\nsrc\\main\\resources\\contracts\n orderService\\\n  1_createOrder.groovy\n  2_acceptOrder.groovy\n```", "```java\n@FixMethodOrder(MethodSorters.NAME_ASCENDING)\npublic class OrderScenarioTest extends OrderScenarioBase {\n\n    @Test\n    public void validate_1_createOrder() throws Exception {\n        // ...\n    }\n\n    @Test\n    public void validate_2_acceptOrder() throws Exception {\n        // ...\n    }\n\n}\n```", "```java\n@RunWith(SpringRunner.class)\n@SpringBootTest(properties = {\n    \"eureka.client.enabled: false\"\n})\n@AutoConfigureStubRunner(ids = {\n        \"pl.piomin.services:account-service:+:stubs:8091\",\n        \"pl.piomin.services:customer-service:+:stubs:8092\",\n        \"pl.piomin.services:product-service:+:stubs:8093\"\n}, workOffline = true)\npublic class OrderScenarioBase {\n\n    @Autowired\n    private WebApplicationContext context;\n    @MockBean\n    private OrderRepository repository;\n\n    @Before\n    public void setup() {\n        RestAssuredMockMvc.webAppContextSetup(context);\n        when(repository.countByCustomerId(Matchers.anyString())).thenReturn(0);\n        when(repository.save(Mockito.any(Order.class))).thenAnswer(new Answer<Order>() {\n            @Override\n            public Order answer(InvocationOnMock invocation) throws Throwable {\n                Order o = invocation.getArgumentAt(0, Order.class);\n                o.setId(\"12345\");\n                return o;\n            }\n        });\n    }\n\n}\n```", "```java\nclass OrderApiGatlingSimulationTest extends Simulation {\n\n    val rCustomer = Iterator.continually(Map(\"customer\" -> List(\"5aa8f5deb44f3f188896f56f\", \"5aa8f5ecb44f3f188896f570\", \"5aa8f5fbb44f3f188896f571\", \"5aa8f620b44f3f188896f572\").lift(Random.nextInt(4)).get))\n    val rProduct = Iterator.continually(Map(\"product\" -> List(\"5aa8fad2b44f3f18f8856ac9\",\"5aa8fad8b44f3f18f8856aca\",\"5aa8fadeb44f3f18f8856acb\",\"5aa8fae3b44f3f18f8856acc\",\"5aa8fae7b44f3f18f8856acd\",\"5aa8faedb44f3f18f8856ace\",\"5aa8faf2b44f3f18f8856acf\").lift(Random.nextInt(7)).get))\n\n    val scn = scenario(\"AddAndConfirmOrder\").feed(rCustomer).feed(rProduct).repeat(500, \"n\") {\n        exec(\n            http(\"AddOrder-API\")\n                .post(\"http://localhost:8090/order\")\n                .header(\"Content-Type\", \"application/json\")\n                .body(StringBody(\"\"\"{\"productIds\":[\"${product}\"],\"customerId\":\"${customer}\",\"status\":\"NEW\"}\"\"\"))\n                .check(status.is(200), jsonPath(\"$.id\").saveAs(\"orderId\"))\n        )\n        .\n        exec(\n            http(\"ConfirmOrder-API\")\n                .put(\"http://localhost:8090/order/${orderId}\")\n                .header(\"Content-Type\", \"application/json\")\n                .check(status.is(200))\n        )\n    }\n\n    setUp(scn.inject(atOnceUsers(20))).maxDuration(FiniteDuration.apply(10, \"minutes\"))\n\n}\n```", "```java\ntask loadTest(type: JavaExec) {\n    dependsOn testClasses\n    description = \"Load Test With Gatling\"\n    group = \"Load Test\"\n    classpath = sourceSets.test.runtimeClasspath\n    jvmArgs = [\n        \"-Dgatling.core.directory.binaries=${sourceSets.test.output.classesDir.toString()}\"\n    ]\n    main = \"io.gatling.app.Gatling\"\n    args = [\n        \"--simulation\", \"pl.piomin.services.gatling.OrderApiGatlingSimulationTest\",\n        \"--results-folder\", \"${buildDir}/gatling-results\",\n        \"--binaries-folder\", sourceSets.test.output.classesDir.toString(),\n        \"--bodies-folder\", sourceSets.test.resources.srcDirs.toList().first().toString() + \"/gatling/bodies\",\n    ]\n}\n```"]