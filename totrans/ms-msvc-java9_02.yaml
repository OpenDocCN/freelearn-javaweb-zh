- en: Setting Up the Development Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter focuses on the development environment setup and configurations.
    If you are familiar with the tools and libraries, you could skip this chapter
    and continue with [Chapter 3](8d3fd180-4f27-4bf7-bb86-c180ac200687.xhtml), *Domain-Driven
    Design*, where you could explore the **domain-driven design** (**DDD**).
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: NetBeans IDE installation and setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Boot configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sample REST program with Java 9 modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REST API testing using the Postman extension of Chrome
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This book will use only the open source tools and frameworks for examples and
    code. This book will also use Java 9 as its programming language, and the application
    framework will be based on the Spring Framework. This book makes use of Spring
    Boot to develop microservices.
  prefs: []
  type: TYPE_NORMAL
- en: NetBeans' **Integrated Development Environment** (**IDE**) provides state of
    the art support for both Java and JavaScript, and is sufficient for our needs.
    It has evolved a lot over the years and has built-in support for most of the technologies
    used by this book, such as Maven, Spring Boot, and so on. Therefore, I would recommend
    that you use NetBeans IDE. You are, however, free to use any IDE.
  prefs: []
  type: TYPE_NORMAL
- en: We will use Spring Boot to develop the REST services and microservices. Opting
    for the most popular of Spring Frameworks, Spring Boot, or its subset Spring Cloud,
    in this book was a conscious decision. Because of this, we don't need to write
    applications from scratch and it provides the default configuration for most of
    the technologies used in cloud applications. A Spring Boot overview is provided
    in Spring Boot's configuration section. If you are new to Spring Boot, this would
    definitely help you.
  prefs: []
  type: TYPE_NORMAL
- en: We will use Maven as our build tool. As with the IDE, you can use whichever
    build tool you want, for example, Gradle or Ant with Ivy. We will use the embedded
    Jetty as our web server, but another alternative is to use an embedded Tomcat
    web server. We will also use the Postman extension of Chrome for testing our REST
    services.
  prefs: []
  type: TYPE_NORMAL
- en: We will start with Spring Boot configurations. If you are new to NetBeans or
    are facing issues in setting up the environment, you can refer to the following
    section.
  prefs: []
  type: TYPE_NORMAL
- en: NetBeans IDE installation and setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NetBeans IDE is free and open source and has a big community of users. You can
    download the NetBeans IDE from its official website, [https://netbeans.org/downloads/](https://netbeans.org/downloads/).
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing this book, NetBeans for Java 9 was available only as
    a nightly build (downloadable from [http://bits.netbeans.org/download/trunk/nightly/latest/](http://bits.netbeans.org/download/trunk/nightly/latest/)).
    As shown in the following screenshot, download all the supported NetBeans bundles
    as we''ll use Javascript too:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f22fd95b-9e2c-40fe-bfc1-09650afa7955.png)'
  prefs: []
  type: TYPE_IMG
- en: NetBeans bundles
  prefs: []
  type: TYPE_NORMAL
- en: 'GlassFish Server and Apache Tomcat are optional. The required packs and runtimes
    are denoted as Already Installed (as NetBeans was already installed on my system):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7baa8c9e-4e28-4f48-b942-85ab51dcb1fe.png)'
  prefs: []
  type: TYPE_IMG
- en: NetBeans packs and runtimes
  prefs: []
  type: TYPE_NORMAL
- en: 'After downloading the installation, execute the installer file. Accept the
    license agreement as shown in the following screenshot, and follow the rest of
    the steps to install the NetBeans IDE:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b6b7797-612a-4704-821c-3f12c06a1280.png)'
  prefs: []
  type: TYPE_IMG
- en: The NetBeans license dialog
  prefs: []
  type: TYPE_NORMAL
- en: JDK 8 or a later version is required for installing and running the All NetBeans
    bundles. This book uses Java 9, therefore, we would use JDK 9\. You can download
    standalone JDK 9 from [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html).
    I had to use the JDK 9 early access build because JDK 9 was not released at time
    of writing the book. It was available at [http://jdk.java.net/9/](http://jdk.java.net/9/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the NetBeans IDE is installed, start the NetBeans IDE. The NetBeans IDE
    should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cedfbcb0-1c97-459b-83b6-3cee57e1519b.png)'
  prefs: []
  type: TYPE_IMG
- en: The NetBeans start page
  prefs: []
  type: TYPE_NORMAL
- en: Maven and Gradle are both Java build tools. They add dependent libraries to
    your project, compile your code, set properties, build archives, and do many more
    related activities. Spring Boot or the Spring Cloud support both Maven and Gradle
    build tools. However, in this book, we'll use the Maven build tool. Feel free
    to use Gradle if you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: Maven is already available in the NetBeans IDE. Now, we can start a new Maven
    project to build our first REST application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps for creating a new empty Maven project:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on New Project (*Ctrl* + *Shift* + *N*) under the File menu. It will open
    the New Project wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `Maven` from the Categories list. Then, select POM Project from the Projects
    list, as shown in following screenshot. Then, click on the Next button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/28699870-56b9-4ebb-aa54-49b48a1e3e37.png)'
  prefs: []
  type: TYPE_IMG
- en: New Project Wizard
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, enter the project name as `6392_chapter2`. Also, enter the other properties
    as shown in the following screenshot. Click on Finish once all the mandatory fields
    are filled in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/44c2a4f2-67e2-4f79-84c0-7eb2d164ddcd.png)'
  prefs: []
  type: TYPE_IMG
- en: NetBeans Maven project properties
  prefs: []
  type: TYPE_NORMAL
- en: Aggelos Karalias has developed a helpful plugin for the NetBeans IDE offering
    autocomplete support for Spring Boot configuration properties available at [https://github.com/keevosh/nb-springboot-configuration-support](https://github.com/keevosh/nb-springboot-configuration-support).
    You can download it from his project page at [http://keevosh.github.io/nb-springboot-configuration-support/](http://keevosh.github.io/nb-springboot-configuration-support/).You
    could also use the Spring Tool Suite IDE ([https://spring.io/tools](https://spring.io/tools))
    from Pivotal instead of the NetBeans IDE. It's a customized all-in-one Eclipse-based
    distribution that makes application development easy.
  prefs: []
  type: TYPE_NORMAL
- en: After finishing all the preceding steps, NetBeans will display a newly created
    Maven project. You will use this project for creating the sample rest application
    using Spring Boot.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use Java 9 as a source, set Source/Binary Format to 9, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/105972df-2bba-447d-b40d-618e59a90ca2.png)'
  prefs: []
  type: TYPE_IMG
- en: NetBeans Maven project properties - Sources
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to Build | Compile and make sure that Java Platform is set as JDK 9 (Default)
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/763145c2-dd85-452b-92bb-f3d248ad279d.png)'
  prefs: []
  type: TYPE_IMG
- en: NetBeans Maven project properties - Complile
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, you can add two new modules named `lib` and `rest` in the `Modules`
    folder by opening the right-click menu and then selecting the Create New Module
    option. This time you should select `Maven` from the Categories list and Java
    Application from Projects list in New Project dialog box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Spring Boot configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Spring Boot is an obvious choice to develop state-of-the-art production-ready
    applications specific to Spring. Its website ([https://projects.spring.io/spring-boot/](https://projects.spring.io/spring-boot/))
    also states its real advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: Takes an opinionated view of building production-ready Spring applications.
    Spring Boot favors convention over configuration and is designed to get you up
    and running as quickly as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Boot overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Boot is an amazing Spring tool created by **Pivotal** and it was released
    in April 2014 (GA). It was developed based on the request of SPR-9888 ([https://jira.spring.io/browse/SPR-9888](https://jira.spring.io/browse/SPR-9888))
    with the title *Improved support for 'containerless' web application architectures*.
  prefs: []
  type: TYPE_NORMAL
- en: You must be wondering, why containerless? Because, today's cloud environment
    or PaaS provides most of the features offered by container-based web architectures,
    such as reliability, management, or scaling. Therefore, Spring Boot focuses on
    making itself an ultralight container.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Boot is preconfigured to make production-ready web applications very
    easily. **Spring Initializr** ([http://start.spring.io</span>](http://start.spring.io))
    is a page where you can select build tools such as Maven or Gradle, and project
    metadata such as group, artifact, and dependencies. Once you feed the required
    fields you can just click on the Generate Project button, which will give you
    the Spring Boot project that you can use for your production application.
  prefs: []
  type: TYPE_NORMAL
- en: 'On this page, the default Packaging option is Jar. We''ll also use JAR packaging
    for our microservices development. The reason is very simple: it makes microservices
    development easier. Just think how difficult it would be to manage and create
    an infrastructure where each microservice runs on its own server instance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Josh Long shared in his talk in one of the Spring IOs:'
  prefs: []
  type: TYPE_NORMAL
- en: '"It is better to make Jar, not War."'
  prefs: []
  type: TYPE_NORMAL
- en: Later, we will use Spring Cloud, which is a wrapper on top of Spring Boot.
  prefs: []
  type: TYPE_NORMAL
- en: We would develop a sample REST application that would use the Java 9 module
    feature. We will create two modules—`lib` and `rest`. The `lib` module will provide
    the models or any supported classes to the `rest` module. The `rest` module will
    include all the classes that are required to develop the REST application and
    it will also consume the model classes defined in the `lib` module.
  prefs: []
  type: TYPE_NORMAL
- en: Both the `lib` and `rest` modules are `maven` modules and their `parent` module
    is our main project `6392_chapter2`.
  prefs: []
  type: TYPE_NORMAL
- en: The `module-info.java` file is an important class that governs the access of
    its classes. We'll make use of `requires`, `opens`, and `exports` to use the `spring`
    modules and establish the provider-consumer relationship between the `lib` and
    `rest` modules of our REST application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Spring Boot to our main project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use the Java 9 to develop microservices. Therefore, we'll use the latest
    Spring Framework and Spring Boot project. At the time of writing, Spring Boot
    2.0.0 build snapshot release version was available.
  prefs: []
  type: TYPE_NORMAL
- en: You can use the latest released version. Spring Boot 2.0.0 build snapshot uses
    Spring 5 (5.0.0 build snapshot release).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following steps and learn about adding Spring Boot
    to our main project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `pom.xml` file (available under `6392_chapter2` | Project Files) to
    add Spring Boot to your sample project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can observe that we have defined our two modules `lib` and `rest` in parent
    project `pom.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are adding these dependencies for the first time, you need to download
    the dependencies by right-clicking on the `Dependencies` folder under the `6392_chapter2`
    project in the Projects pane, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5c0f9e4e-f148-45a9-9e1c-5bd5c273cfc0.png)'
  prefs: []
  type: TYPE_IMG
- en: Download Maven Dependencies in NetBeans
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, to resolve the project problems, right-click on the NetBeans project
    `6392_chapter2` and opt for the Resolve Project Problems.... It will open the
    dialog shown as follows. Click on the Resolve... button to resolve the issues:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/edec6f4e-9097-47d1-83e5-74ed409cd371.png)'
  prefs: []
  type: TYPE_IMG
- en: Resolve project problems dialog
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Maven behind the proxy, then update the `proxies` in `settings.xml`
    in Maven home directory. If you are using the Maven bundled with NetBeans then
    use `<NetBeans Installation Directory>\java\maven\conf\settings.xml`. You may
    need to restart the NetBeans IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding steps will download all the required dependencies from a remote
    Maven repository if the declared dependencies and transitive dependencies are
    not available in a local Maven repository. If you are downloading the dependencies
    for the first time, then it may take a bit of time, depending on your internet
    speed.
  prefs: []
  type: TYPE_NORMAL
- en: Sample REST program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use a simple approach to building a standalone application. It packages
    everything into a single executable JAR file, driven by a `main()` method. Along
    the way, you use Spring's support for embedding the Jetty servlet container as
    the HTTP runtime, instead of deploying it to an external instance. Therefore,
    we would create the executable JAR file in place of the war that needs to be deployed
    on external web servers, which is a part of the `rest` module. We'll define the
    domain models in the `lib` module and API related classes in the `rest` module.
  prefs: []
  type: TYPE_NORMAL
- en: The following are `pom.xml` of the `lib` and `rest` modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `pom.xml` file of the `lib` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `pom.xml` of the `rest` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `spring-boot-starter-web` dependency is used for developing the standalone
    executable REST service.
  prefs: []
  type: TYPE_NORMAL
- en: We'll add the following `module-info.java` classes in the `lib` and `rest` modules
    in their default package, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `module-info.java` file in the `lib` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are exporting the `com.packtpub.mmj.lib.model` package to `com.packtpub.mmj.rest`,
    which allows access of the `lib` model classes to the `rest` module classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `module-info.java` file in the `lib` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here, we're adding all the required `spring` and `lib` packages using the `requires`
    statement, which enables the `rest` module classes to use classes defined in the
    `spring` and `lib` modules. Also, we're exporting the `com.packt.mmj.rest` and
    `com.packt.mmj.rest.resources` packages.
  prefs: []
  type: TYPE_NORMAL
- en: Now, as you are ready with Spring Boot in NetBeans IDE, you could create your
    sample web service. You will create a Math API that performs simple calculations
    and generates the result as JSON.
  prefs: []
  type: TYPE_NORMAL
- en: Let's discuss how we can call and get responses from REST services.
  prefs: []
  type: TYPE_NORMAL
- en: 'The service will handle the `GET` requests for `/calculation/sqrt` or `/calculation/power`
    and so on. The `GET` request should return a `200 OK` response with JSON in the
    body that represents the square root of a given number. It should look something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `input` field is the input parameter for the square root function, and the
    content is the textual representation of the result.
  prefs: []
  type: TYPE_NORMAL
- en: 'You could create a resource representation class to model the representation
    by using **Plain Old Java Object** (**POJO**) with fields, constructors, setters,
    and getters for the input, output, and function data. Since it is a model, we''ll
    create it in the `lib` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Writing the REST controller class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Roy Fielding defined and introduced the term **Representational State Transfer**
    (**REST**) in his doctoral dissertation. REST is a style of software architecture
    for a distributed hypermedia system such as WWW. RESTful refers to those systems
    that conform to REST architecture properties, principles, and constraints.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you'll create a REST controller to handle the `Calculation` resource. The
    controller handles the HTTP requests in the Spring RESTful web service implementation.
  prefs: []
  type: TYPE_NORMAL
- en: The @RestController annotation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`@RestController` is a class-level annotation used for the `resource` class
    introduced in Spring 4\. It is a combination of `@Controller` and `@ResponseBody`,
    and because of it, a class returns a domain object instead of a view.'
  prefs: []
  type: TYPE_NORMAL
- en: In the following code, you can see that the `CalculationController` class handles
    `GET` requests for `/calculation` by returning a new instance of the `calculation`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: We will implement two URIs for a `Calculation` resource—the square root (`Math.sqrt()`
    function) as the `/calculations/sqrt` URI, and power (`Math.pow()` function) as
    the `/calculation/power` URI.
  prefs: []
  type: TYPE_NORMAL
- en: The @RequestMapping annotation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `@RequestMapping` annotation is used at class level to map the `/calculation`
    URI to the `CalculationController` class, that is, it ensures that the HTTP request
    to `/calculation` is mapped to the `CalculationController` class. Based on the
    path defined using the annotation `@RequestMapping` of the URI (postfix of `/calculation`,
    for example, `/calculation/sqrt/144`), it would be mapped to respective methods.
    Here, the request mapping `/calculation/sqrt` is mapped to the `sqrt()` method
    and `/calculation/power` is mapped to the `pow()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'You might have also observed that we have not defined what request method (`GET`/`POST`/`PUT`,
    and so on) these methods would use. The `@RequestMapping` annotation maps all
    the HTTP request methods by default. You could use specific methods by using the
    method property of `RequestMapping`. For example, you could write a `@RequestMethod`
    annotation in the following way to use the `POST` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: For passing the parameters along the way, the sample demonstrates both request
    parameters and path parameters using annotations `@RequestParam` and `@PathVariable`,
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: The @RequestParam annotation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`@RequestParam` is responsible for binding the query parameter to the parameter
    of the controller''s method. For example, the `QueryParam` base and exponent are
    bound to parameters `b` and `e` of method `pow()` of `CalculationController` respectively.
    Both of the query parameters of the `pow()` method are required since we are not
    using any default value for them. Default values for query parameters could be
    set using the `defaultValue` property of `@RequestParam`, for example, `@RequestParam(value="base",
    defaultValue="2")`. Here, if the user does not pass the query parameter base,
    then the default value `2` would be used for the base.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If no `defaultValue` is defined, and the user doesn''t provide the request
    parameter, then `RestController` returns the HTTP `status` code `400` with the
    message `Required String parameter ''base'' is not present`. It always uses the
    reference of the first required parameter if more than one of the request parameters
    is missing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The @PathVariable annotation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`@PathVariable` helps you to create the dynamic URIs. `@PathVariable` annotation
    allows you to map Java parameters to a path parameter. It works with `@RequestMapping`
    where the placeholder is created in URI then the same placeholder name is used
    either as a `PathVariable` or a method parameter, as you can see in the `CalculationController`
    class'' method `sqrt()`. Here, the value placeholder is created inside the `@RequestMapping`
    and the same value is assigned to the value of the `@PathVariable`.'
  prefs: []
  type: TYPE_NORMAL
- en: The `sqrt()` method takes the parameter in the URI in place of the request parameter,
    for example `http://localhost:8080/calculation/sqrt/144`. Here, the `144` value
    is passed as the path parameter and this URL should return the square root of
    `144`, that is `12`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the basic check in place, we use the regular expression `"^-?+\\d+\\.?+\\d*$"`
    to allow only valid numbers in parameters. If non-numeric values are passed, the
    respective method adds an error message to the output key of the JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CalculationController` also uses the regular expression `.+` in the `path`
    variable (`path` parameter) to allow the decimal point(`.`) in numeric values:
    `/path/{variable:.+}`. Spring ignores anything after the last dot. Spring default
    behavior takes it as a file extension.'
  prefs: []
  type: TYPE_NORMAL
- en: There are other alternatives, such as adding a slash at the end (`/path/{variable}/`),
    or overriding the `configurePathMatch()`method of `WebMvcConfigurerAdapter` by
    setting the `useRegisteredSuffixPatternMatch` to `true`, using `PathMatchConfigurer`
    (available in Spring 4.0.1+).
  prefs: []
  type: TYPE_NORMAL
- en: 'Code of `CalculationController` resource, where we have implemented to REST
    endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are exposing only the `power` and `sqrt` functions for the `Calculation`
    resource using URI `/calculation/power` and `/calculation/sqrt`.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we are using `sqrt` and `power` as a part of the URI, which we have used
    for demonstration purposes only. Ideally, these should have been passed as the
    value of a request parameter `function`, or something similar based on endpoint
    design formation.
  prefs: []
  type: TYPE_NORMAL
- en: One interesting thing here is that due to Spring's HTTP message converter support,
    the `Calculation` object gets converted to JSON automatically. You don't need
    to do this conversion manually. If Jackson 2 is on the classpath, Spring's `MappingJackson2HttpMessageConverter`
    converts the `Calculation` object to JSON.
  prefs: []
  type: TYPE_NORMAL
- en: Making a sample REST application executable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a `RestSampleApp` class with the annotation `SpringBootApplication`.
    The `main()` method uses Spring Boot's `SpringApplication.run()` method to launch
    an application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will annotate the `RestSampleApp` class with the `@SpringBootApplication`
    annotation that adds all of the following tags implicitly:'
  prefs: []
  type: TYPE_NORMAL
- en: The `@Configuration` annotation tags the class as a source of bean definitions
    for the application context.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `@EnableAutoConfiguration` annotation indicates that Spring Boot is to start
    adding beans based on classpath settings, other beans, and various property settings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `@EnableWebMvc` annotation is added if Spring Boot finds `spring-webmvc`
    on the classpath. It treats the application as a web application and activates
    key behaviors such as setting up `DispatcherServlet`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `@ComponentScan` annotation tells Spring to look for other components,
    configurations, and services in the given package:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This web application is 100 percent pure Java and you don't have to deal with
    configuring any plumbing or infrastructure using XML; instead, it uses the Java
    annotation that is made even simpler by Spring Boot. Therefore, there wasn't a
    single line of XML except `pom.xml` for Maven. There wasn't even a `web.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Jetty-embedded server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Boot by default provides Apache Tomcat as an embedded application container.
    This book will use the Jetty-embedded application container in the place of Apache
    Tomcat. Therefore, we need to add a Jetty application container dependency to
    support the Jetty web server.
  prefs: []
  type: TYPE_NORMAL
- en: Jetty also allows you to read keys or trust stores using classpaths, that is,
    you don't need to keep these stores outside the JAR files. If you use Tomcat with
    SSL then you will need to access the key store or trust store directly from the
    filesystem, but you can't do that using the classpath. The result is that you
    can't read a key store or a trust store within a JAR file because Tomcat requires
    that the key store (and trust store if you're using one) is directly accessible
    on the filesystem. This may change post writing of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'This limitation doesn''t apply to Jetty, which allows the reading of keys or
    trust stores within a JAR file. A relative section on `pom.xml` of module `rest`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Setting up the application build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Whatever the `pom.xml` files, whatever we have used until now is enough to
    execute our sample REST service. This service would package the code into a JAR
    file. To make this JAR executable we need to opt for the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: Running the Maven tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing with the Java command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following sections will cover them in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Running the Maven tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This method may not work because Java 9, Spring Boot 2, and Spring Framework
    5 are all in either in early or snapshot release. In case it does not work, please
    use a project using Java commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we use the Maven tool to execute the generated JAR file, the steps for
    this are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `pom.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Run Maven | Goals... from the pop-up menu. It will open the dialog. Type
    `spring-boot:run` in the Goals field. We have used the released version of Spring
    Boot in the code. However, if you are using the snapshot release, you can check
    the Update Snapshots checkbox. To use it in the future, type `spring-boot-run`
    in the Remember as field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next time, you could directly click Run Maven | Goals | `spring-boot-run` to
    execute the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a87ddfcb-0346-4f49-aa19-6fb7943ba13a.png)'
  prefs: []
  type: TYPE_IMG
- en: Run Maven dialog
  prefs: []
  type: TYPE_NORMAL
- en: Click OK to execute the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Executing with the Java command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please make sure that Java and `JAVA_HOME` is set to Java 9 before executing
    the following commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To build the JAR file, perform the `mvn clean package` command from the Command
    Prompt from the parent project root directory (`6392_chapter2`). Here, `clean`
    and `package` are Maven goals:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'It creates the JAR files in a respective target directory. We''ll execute the
    JAR files generated in the `6392_chapter2\rest\target` directory. A JAR file can
    be executed using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Please make sure you execute the JAR file having a postfix `exec` as shown in
    the preceding command.
  prefs: []
  type: TYPE_NORMAL
- en: REST API testing using the Postman Chrome extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This book uses the Postman - REST Client extension for Chrome to test our REST
    service. I use the 5.0.1 version of Postman. You can use the Postman Chrome application
    or any other REST Client to test your sample REST application, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6736f3bc-973d-4c2d-aecf-9805679d74e8.png)'
  prefs: []
  type: TYPE_IMG
- en: Postman - Rest Client Chrome extension
  prefs: []
  type: TYPE_NORMAL
- en: Let's test our first REST resource once you have the Postman - REST Client installed.
    We start the Postman - REST Client from either the Start menu or from a shortcut.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the embedded web server starts on port `8080`. Therefore, we need
    to use the `http://localhost:8080/<resource>` URL for accessing the sample REST
    application. For example: `http://localhost:8080/calculation/sqrt/144`.'
  prefs: []
  type: TYPE_NORMAL
- en: Once it's started, you can type the `Calculation` REST URL for `sqrt` and value
    `144` as the path parameter. You can see it in the following screenshot. This
    URL is entered in the URL (enter request URL here) input field of the Postman
    extension. By default, the request method is `GET`. We use the default value for
    the request method, as we have also written our RESTful service to serve the request
    `GET` method.
  prefs: []
  type: TYPE_NORMAL
- en: Once you are ready with your input data as mentioned earlier, you can submit
  prefs: []
  type: TYPE_NORMAL
- en: the request by clicking the Send button. You can see in the following screenshot
    that
  prefs: []
  type: TYPE_NORMAL
- en: the response code `200` is returned by your sample REST service. You can find
    the Status label in the following screenshot to see the 200 OK code. A successful
    request
  prefs: []
  type: TYPE_NORMAL
- en: also returns the JSON data of the `Calculation` resource, shown in the Pretty
    tab
  prefs: []
  type: TYPE_NORMAL
- en: in the screenshot. The returned JSON shows the `sqrt` method value of the function
    key.
  prefs: []
  type: TYPE_NORMAL
- en: 'It also displays `144` and `12.0` as the input and output lists, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7cfef8d6-9407-450b-a50f-2373f48905af.png)'
  prefs: []
  type: TYPE_IMG
- en: Calculation (`sqrt`) resource test with Postman
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we also test our sample REST service for calculating the `power`
    function. We input the following data in the Postman extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '**URL**: [http://localhost:8080/calculation/power?base=2&exponent=4](http://localhost:8080/calculation/power?base=2&exponent=4)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Request method**: `GET`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here, we are passing the request parameters `base` and `exponent` with values
    of `2` and `4`, respectively. It returns the following JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'It returns the preceding JSON with a response status of 200, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/26a95ed3-d396-4b16-861e-5de873e8ee7c.png)'
  prefs: []
  type: TYPE_IMG
- en: Calculation (`power`) resource test with Postman
  prefs: []
  type: TYPE_NORMAL
- en: Some more positive test scenarios
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following table, all the URLs start with `http://localhost:8080`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| URL | Output JSON |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `/calculation/sqrt/12344.234` |'
  prefs: []
  type: TYPE_TB
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| The `/calculation/sqrt/-9344.34` of the `Math.sqrt` function''s special scenario:If
    the argument is `NaN` or less than zero, then the result is `NaN` |'
  prefs: []
  type: TYPE_TB
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `/calculation/power?base=2.09&exponent=4.5` |'
  prefs: []
  type: TYPE_TB
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `/calculation/power?base=-92.9&exponent=-4` |'
  prefs: []
  type: TYPE_TB
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Negative test scenarios
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similarly, you could also perform some negative scenarios as shown in the following
    table. In this table, all the URLs start with `http://localhost:8080`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| URL | Output JSON |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `/calculation/power?base=2a&exponent=4` |'
  prefs: []
  type: TYPE_TB
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `/calculation/power?base=2&exponent=4b` |'
  prefs: []
  type: TYPE_TB
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `/calculation/power?base=2.0a&exponent=a4` |'
  prefs: []
  type: TYPE_TB
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `/calculation/sqrt/144a` |'
  prefs: []
  type: TYPE_TB
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `/calculation/sqrt/144.33$` |'
  prefs: []
  type: TYPE_TB
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have explored various aspects of setting up a development
    environment, Maven configuration, Spring Boot configuration, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: You have also learned how to make use of Spring Boot to develop a sample REST
    service application. We learned how powerful Spring Boot is—it eases development
    so much that you only have to worry about the actual code, and not about the boilerplate
    code or configurations that you write. We have also packaged our code into a JAR
    file with an embedded application container Jetty. It allows it to run and access
    the web application without worrying about the deployment.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn the **domain-driven design** (**DDD**) using
    a sample project that can be used across the rest of the chapters. We'll use the
    sample project **online table reservation system** (**OTRS**) to go through various
    phases of microservices development and understand the DDD. After completing [Chapter
    3](8d3fd180-4f27-4bf7-bb86-c180ac200687.xhtml), *Domain-Driven Design,* you will
    learn the fundamentals of DDD.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will understand how to practically use the DDD by design sample services.
    You will also learn to design the domain models and REST services on top of it.
    The following are a few links that you can take a look at to learn more about
    the tools we used here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Spring** **Boot**: [http://projects.spring.io/spring-boot/](http://projects.spring.io/spring-boot/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Download** **NetBeans**: [https://netbeans.org/downloads](https://netbeans.org/downloads)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Representational State Transfer** (**REST**): Chapter 5 ([https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm](https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm))
    of Roy Thomas Fielding''s Ph.D. dissertation *Architectural Styles and the Design
    of Network-based Software Architectures*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**REST**: [https://en.wikipedia.org/wiki/Representational_state_transfer](https://en.wikipedia.org/wiki/Representational_state_transfer)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maven**: [https://maven.apache.org/](https://maven.apache.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gradle**: [http://gradle.org/](http://gradle.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
