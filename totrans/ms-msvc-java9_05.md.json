["```java\n<dependency> \n      <groupId>org.springframework.cloud</groupId> \n      <artifactId>spring-cloud-starter-zuul</artifactId> \n</dependency> \n```", "```java\napplication.yml \ninfo: \n    component: Zuul Server \n# Spring properties \nspring: \n  application: \n     name: zuul-server  # Service registers under this name \n\nendpoints: \n    restart: \n        enabled: true \n    shutdown: \n        enabled: true \n    health: \n        sensitive: false \n\nzuul: \n    ignoredServices: \"*\" \n    routes: \n        restaurantapi: \n            path: /restaurantapi/** \n            serviceId: restaurant-service \n            stripPrefix: true \n\nserver: \n    port: 8765 \n\n# Discovery Server Access \neureka: \n  instance: \n    leaseRenewalIntervalInSeconds: 3 \n    metadataMap: \n      instanceId: ${vcap.application.instance_id:${spring.application.name}:${spring.application.instance_id:${random.value}}} \n    serviceUrl: \n      defaultZone: http://localhost:8761/eureka/ \n    fetchRegistry: false \n```", "```java\n@Component \nclass DiscoveryClientSample implements CommandLineRunner { \n\n    @Autowired \n    private DiscoveryClient; \n\n    @Override \n    public void run(String... strings) throws Exception { \n        // print the Discovery Client Description \n        System.out.println(discoveryClient.description()); \n        // Get restaurant-service instances and prints its info \n        discoveryClient.getInstances(\"restaurant-service\").forEach((ServiceInstance serviceInstance) -> { \n            System.out.println(new StringBuilder(\"Instance --> \").append(serviceInstance.getServiceId()) \n                    .append(\"\\nServer: \").append(serviceInstance.getHost()).append(\":\").append(serviceInstance.getPort()) \n                    .append(\"\\nURI: \").append(serviceInstance.getUri()).append(\"\\n\\n\\n\")); \n        }); \n    } \n} \n```", "```java\nSpring Cloud Eureka Discovery Client \nInstance: RESTAURANT-SERVICE \nServer: SOUSHARM-IN:3402 \nURI: http://SOUSHARM-IN:3402 \nInstance --> RESTAURANT-SERVICE \nServer: SOUSHARM-IN:3368 \nURI: http://SOUSHARM-IN:3368 \n```", "```java\n@Component\nclass RestTemplateExample implements CommandLineRunner {\n  @Autowired\n  private RestTemplate restTemplate;\n  @Override\n  public void run(String... strings) throws Exception {\n    System.out.println(\"\\n\\n\\n start RestTemplate client...\");\n    ResponseEntity<Collection<Restaurant>> exchange\n    = this.restTemplate.exchange(\n    \"http://restaurant-service/v1/restaurants?name=o\",\n    HttpMethod.GET,\n    null,\n    new ParameterizedTypeReference<Collection<Restaurant>>() {\n    },\n    (Object) \"restaurants\");\n    exchange.getBody().forEach((Restaurant restaurant) -> {\n      System.out.println(\"\\n\\n\\n[ \" + restaurant.getId() + \" \" +  restaurant.getName() + \"]\");\n      });\n   }\n}\n```", "```java\n@FeignClient(\"restaurant-service\")\ninterface RestaurantClient {\n  @RequestMapping(method = RequestMethod.GET, value =  \"/v1/restaurants\")\n  Collection<Restaurant> getRestaurants(@RequestParam(\"name\") String name);\n  }\n@Component\nclass FeignSample implements CommandLineRunner {\n  @Autowired\n  private RestaurantClient restaurantClient;\n  @Override\n  public void run(String... strings) throws Exception {\n    this.restaurantClient.getRestaurants(\"o\").forEach((Restaurant     restaurant) -> {\n      System.out.println(\"\\n\\n\\n[ \" + restaurant.getId() + \" \" +  restaurant.getName() + \"]\");\n      });\n    }\n} \n```", "```java\n[ 1 Big-O Restaurant] \n[ 2 O Restaurant] \n```", "```java\n@SpringBootApplication \n@EnableCircuitBreaker \n@ComponentScan({\"com.packtpub.mmj.user.service\", \"com.packtpub.mmj.common\"}) \npublic class ApiApp { \n```", "```java\n@HystrixCommand(fallbackMethod = \"defaultRestaurant\") \n    @RequestMapping(\"/restaurants/{restaurant-id}\") \n    @HystrixCommand(fallbackMethod = \"defaultRestaurant\") \n    public ResponseEntity<Restaurant> getRestaurant( \n            @PathVariable(\"restaurant-id\") int restaurantId) { \n        MDC.put(\"restaurantId\", restaurantId); \n        String url = \"http://restaurant-service/v1/restaurants/\" + restaurantId; \n        LOG.debug(\"GetRestaurant from URL: {}\", url); \n\n        ResponseEntity<Restaurant> result = restTemplate.getForEntity(url, Restaurant.class); \n        LOG.info(\"GetRestaurant http-status: {}\", result.getStatusCode()); \n        LOG.debug(\"GetRestaurant body: {}\", result.getBody()); \n\n        return serviceHelper.createOkResponse(result.getBody()); \n    }  \n```", "```java\npublic ResponseEntity<Restaurant> defaultRestaurant(\n@PathVariable int restaurantId) { \n  return serviceHelper.createResponse(null, HttpStatus.BAD_GATEWAY); \n  } \n```", "```java\n<dependency> \n    <groupId>org.springframework.cloud</groupId> \n    <artifactId>spring-cloud-starter-hystrix</artifactId> \n</dependency> \n```", "```java\n       hystrix: \n  threadpool: \n    default: \n      # Maximum number of concurrent requests when using thread pools (Default: 10) \n      coreSize: 100 \n      # Maximum LinkedBlockingQueue size - -1 for using SynchronousQueue (Default: -1) \n      maxQueueSize: -1 \n      # Queue size rejection threshold (Default: 5) \n      queueSizeRejectionThreshold: 5 \n  command: \n    default: \n      circuitBreaker: \n        sleepWindowInMilliseconds: 30000 \n        requestVolumeThreshold: 2 \n      execution: \n        isolation: \n#          strategy: SEMAPHORE, no thread pool but timeout handling stops to work \n          strategy: THREAD \n          thread: \n            timeoutInMilliseconds: 6000\n```", "```java\n<dependency> \n    <groupId>org.springframework.cloud</groupId> \n    <artifactId>spring-cloud-starter-hystrix-dashboard</artifactId> \n</dependency> \n```", "```java\n@SpringBootApplication \n@Controller \n@EnableHystrixDashboard \npublic class DashboardApp extends SpringBootServletInitializer { \n\n    @RequestMapping(\"/\") \n    public String home() { \n        return \"forward:/hystrix\"; \n    } \n\n    @Override \n    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) { \n        return application.sources(DashboardApp.class).web(true); \n    } \n\n    public static void main(String[] args) { \n        SpringApplication.run(DashboardApp.class, args); \n    } \n} \n```", "```java\n# Hystrix Dashboard properties \nspring: \n    application: \n        name: dashboard-server \n\nendpoints: \n    restart: \n        enabled: true \n    shutdown: \n        enabled: true \n\nserver: \n    port: 7979 \n\neureka: \n    instance: \n        leaseRenewalIntervalInSeconds: 3 \n        metadataMap: \n            instanceId: ${vcap.application.instance_id:${spring.application.name}:${spring.application.instance_id:${random.value}}} \n\n    client: \n        # Default values comes from org.springframework.cloud.netflix.eurek.EurekaClientConfigBean \n        registryFetchIntervalSeconds: 5 \n        instanceInfoReplicationIntervalSeconds: 5 \n        initialInstanceInfoReplicationIntervalSeconds: 5 \n        serviceUrl: \n            defaultZone: http://localhost:8761/eureka/ \n        fetchRegistry: false \n\nlogging: \n    level: \n        ROOT: WARN \n        org.springframework.web: WARN \n```", "```java\n<dependency> \n    <groupId> org.springframework.cloud</groupId> \n    <artifactId>spring-cloud-starter-turbine-stream</artifactId> \n</dependency> \n<dependency> \n     <groupId>org.springframework.cloud</groupId> \n     <artifactId>spring-cloud-starter-stream-rabbit</artifactId> \n</dependency> \n<dependency> \n     <groupId>org.springframework.boot</groupId> \n     <artifactId>spring-boot-starter-actuator</artifactId> \n</dependency> \n\n```", "```java\n@SpringBootApplication \n@EnableTurbineStream \n@EnableEurekaClient \npublic class TurbineApp { \n\n    private static final Logger LOG = LoggerFactory.getLogger(TurbineApp.class); \n\n    @Value(\"${app.rabbitmq.host:localhost}\") \n    String rabbitMQHost; \n\n    @Bean \n    public ConnectionFactory connectionFactory() { \n        LOG.info(\"Creating RabbitMQHost ConnectionFactory for host: {}\", rabbitMQHost); \n        CachingConnectionFactory cachingConnectionFactory = new CachingConnectionFactory(rabbitMQHost); \n        return cachingConnectionFactory; \n    } \n\n    public static void main(String[] args) { \n        SpringApplication.run(TurbineApp.class, args); \n    } \n} \n```", "```java\napplication.yml \nspring: \n    application: \n        name: turbine-server \n\nserver: \n    port: 8989 \n\nmanagement: \n    port: 8990 \n\nturbine: \n    aggregator: \n        clusterConfig: USER-SERVICE,RESTAURANT-SERVICE \n    appConfig: user-service,restaurant-service  \n\neureka: \n    instance: \n        leaseRenewalIntervalInSeconds: 10 \n        metadataMap: \n            instanceId: ${vcap.application.instance_id:${spring.application.name}:${spring.application.instance_id:${random.value}}} \n    client: \n        serviceUrl: \n            defaultZone: ${vcap.services.${PREFIX:}eureka.credentials.uri:http://user:password@localhost:8761}/eureka/ \n        fetchRegistry: true \n\nlogging: \n    level: \n        root: INFO \n        com.netflix.discovery: 'OFF' \n        org.springframework.integration: DEBUG \n```", "```java\n6392_chapter5 ..................................... SUCCESS [3.037s] \nonline-table-reservation:common ................... SUCCESS [5.899s] \nonline-table-reservation:zuul-server .............. SUCCESS [4.517s] \nonline-table-reservation:restaurant-service ....... SUCCESS [49.250s] \nonline-table-reservation:eureka-server ............ SUCCESS [2.850s] online-table-reservation:dashboard-server ......... SUCCESS [2.893s] \nonline-table-reservation:turbine-server ........... SUCCESS [3.670s] \nonline-table-reservation:user-service ............. SUCCESS [47.983s] \nonline-table-reservation:api-service .............. SUCCESS [3.065s] \nonline-table-reservation:booking-service .......... SUCCESS [26.496s] \n```", "```java\njava -jar eureka-server/target/eureka-server.jar \njava -jar turbine-server/target/turbine-server.jar \njava -jar dashboard-server/target/dashboard-server.jar \njava -jar restaurant-service/target/restaurant-service.jar \njava -jar user-service/target/user-service.jar \njava -jar booking-service/target/booking-service.jar \njava -jar api-service/target/api-service.jar \n```", "```java\njava -jar zuul-server/target/zuul-server.jar \n```", "```java\n docker-machine rm default\n docker-machine create -d virtualbox --virtualbox-memory 4096 default\n\n```", "```java\n--- \n# For deployment in Docker containers \nspring: \n  profiles: docker \n\nserver: \n  port: 8080 \n\neureka: \n  instance: \n    preferIpAddress: true \n  client: \n    serviceUrl: \n      defaultZone: http://eureka:8761/eureka/ \n```", "```java\n<properties> \n<!-- For Docker hub leave empty; use \"localhost:5000/\" for a local Docker Registry --> \n  <docker.registry.name>localhost:5000/</docker.registry.name> \n  <docker.repository.name>${docker.registry.name}sourabhh /${project.artifactId}</docker.repository.name> \n</properties> \n... \n<plugin> \n  <groupId>org.jolokia</groupId> \n  <artifactId>docker-maven-plugin</artifactId> \n  <version>0.13.7</version> \n  <configuration> \n    <images> \n      <image> \n<name>${docker.repository.name}:${project.version}</name> \n        <alias>${project.artifactId}</alias> \n\n        <build> \n          <from>java:8-jre</from> \n          <maintainer>sourabhh</maintainer> \n          <assembly> \n            <descriptor>docker-assembly.xml</descriptor> \n          </assembly> \n          <ports> \n            <port>8080</port> \n          </ports> \n          <cmd> \n            <shell>java -jar \\ \n              /maven/${project.build.finalName}.jar server \\ \n              /maven/docker-config.yml</shell> \n          </cmd> \n        </build> \n        <run> \n        <!-- To Do --> \n        </run> \n      </image> \n    </images> \n  </configuration> \n</plugin> \n```", "```java\n<assembly   \n  xsi:schemaLocation=\"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd\"> \n  <id>${project.artifactId}</id> \n  <files> \n    <file> \n      <source>{basedir}/target/${project.build.finalName}.jar</source> \n      <outputDirectory>/</outputDirectory> \n    </file> \n    <file> \n      <source>src/main/resources/docker-config.yml</source> \n      <outputDirectory>/</outputDirectory> \n    </file> \n  </files> \n</assembly> \n```", "```java\nFROM java:8-jre \nMAINTAINER sourabhh \nEXPOSE 8080 \nCOPY maven /maven/ \nCMD java -jar \\ \n  /maven/restaurant-service.jar server \\ \n  /maven/docker-config.yml \n```", "```java\nmvn docker:build\n\n```", "```java\ndocker run -it -p 8080:8080 sourabhh/restaurant-service:PACKT-SNAPSHOT\n\n```", "```java\n<properties> \n  <docker.host.address>localhost</docker.host.address> \n  <docker.port>8080</docker.port> \n</properties> \n... \n<run> \n  <namingStrategy>alias</namingStrategy> \n  <ports> \n    <port>${docker.port}:8080</port> \n  </ports> \n  <wait> \n    <url>http://${docker.host.address}:${docker.port}/v1/restaurants/1</url> \n    <time>100000</time> \n  </wait> \n  <log> \n    <prefix>${project.artifactId}</prefix> \n    <color>cyan</color> \n  </log> \n</run> \n```", "```java\nmvn docker:start\n```", "```java\n<execution> \n  <id>start</id> \n  <phase>pre-integration-test</phase> \n  <goals> \n    <goal>build</goal> \n    <goal>start</goal> \n  </goals> \n</execution> \n<execution> \n  <id>stop</id> \n  <phase>post-integration-test</phase> \n  <goals> \n    <goal>stop</goal> \n  </goals> \n</execution> \n```", "```java\npackage com.packtpub.mmj.restaurant.resources.docker; \n\npublic interface DockerIT { \n    // Marker for Docker integration Tests \n} \n```", "```java\n<plugin> \n                <groupId>org.apache.maven.plugins</groupId> \n                <artifactId>maven-failsafe-plugin</artifactId> \n                <configuration> \n                    <phase>integration-test</phase> \n                    <groups>com.packtpub.mmj.restaurant.resources.docker.DockerIT</groups> \n                    <systemPropertyVariables> \n                        <service.url>http://${docker.host.address}:${docker.port}/</service.url> \n                    </systemPropertyVariables> \n                </configuration> \n                <executions> \n                    <execution> \n                        <goals> \n                            <goal>integration-test</goal> \n                            <goal>verify</goal> \n                        </goals> \n                    </execution> \n                </executions> \n       </plugin> \n       <plugin> \n                <groupId>org.apache.maven.plugins</groupId> \n                <artifactId>maven-surefire-plugin</artifactId> \n                <configuration>             <excludedGroups>com.packtpub.mmj.restaurant.resources.docker.DockerIT</excludedGroups> \n                </configuration> \n</plugin> \n\n```", "```java\n@Category(DockerIT.class) \npublic class RestaurantAppDockerIT { \n\n    @Test \n    public void testConnection() throws IOException { \n        String baseUrl = System.getProperty(\"service.url\"); \n        URL serviceUrl = new URL(baseUrl + \"v1/restaurants/1\"); \n        HttpURLConnection connection = (HttpURLConnection) serviceUrl.openConnection(); \n        int responseCode = connection.getResponseCode(); \n        assertEquals(200, responseCode); \n    } \n} \n```", "```java\nmvn integration-test\n\n```", "```java\n<execution> \n  <id>push-to-docker-registry</id> \n  <phase>deploy</phase> \n  <goals> \n    <goal>push</goal> \n  </goals> \n</execution> \n```", "```java\n<plugin> \n  <groupId>org.apache.maven.plugins</groupId> \n  <artifactId>maven-deploy-plugin</artifactId> \n  <version>2.7</version> \n  <configuration> \n    <skip>true</skip> \n  </configuration> \n</plugin> \n```", "```java\nmvn -Ddocker.username=<username> -Ddocker.password=<password> deploy\n```", "```java\n<docker.registry.name>xyz.domain.com:4994</docker.registry.name> \n```", "```java\neureka: \n  image: localhost:5000/sourabhh/eureka-server \n  ports: \n    - \"8761:8761\" \n```", "```java\nrestaurant-service: \n  image: localhost:5000/sourabhh/restaurant-service \n  ports: \n    - \"8080:8080\" \n  links: \n    - eureka \n```", "```java\n192.168.0.22  security \n192.168.0.31  eureka \n```", "```java\ndocker-compose up -d\n```", "```java\ndocker-compose ps\nName                                          Command\n                State           Ports\n-------------------------------------------------------------\nonlinetablereservation5_eureka_1         /bin/sh -c java -jar         ...               Up      0.0.0.0:8761->8761/tcp\n\nonlinetablereservation5_restaurant-service_1  /bin/sh -c java -jar       ...   Up      0.0.0.0:8080->8080/tcp\n\n```", "```java\ndocker-compose logs\n[36mrestaurant-service_1 | ←[0m2015-12-23 08:20:46.819  INFO 7 --- [pool-3-thread-1] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_RESTAURANT-SERVICE/172.17\n0.4:restaurant-service:93d93a7bd1768dcb3d86c858e520d3ce - Re-registering apps/RESTAURANT-SERVICE\n[36mrestaurant-service_1 | ←[0m2015-12-23 08:20:46.820  INFO 7 --- [pool-3-thread-1] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_RESTAURANT-SERVICE/172.17\n0.4:restaurant-service:93d93a7bd1768dcb3d86c858e520d3ce: registering service... [36mrestaurant-service_1 | ←[0m2015-12-23 08:20:46.917  INFO 7 --- [pool-3-thread-1] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_RESTAURANT-SERVICE/172.17\n\n```"]