["```java\nserver:\n port: 8090\n\naccount-service:\n ribbon:\n   eureka:\n     enabled: false\n   listOfServers: localhost:8091\ncustomer-service:\n ribbon:\n   eureka:\n     enabled: false\n   listOfServers: localhost:8092\nproduct-service:\n ribbon:\n   eureka:\n     enabled: false\n   listOfServers: localhost:8093\n```", "```java\n<dependency>\n <groupId>org.springframework.cloud</groupId>\n <artifactId>spring-cloud-starter-ribbon</artifactId>\n</dependency>\n<dependency>\n <groupId>org.springframework.boot</groupId>\n <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```", "```java\n@SpringBootApplication\n@RibbonClients({\n @RibbonClient(name = \"account-service\"),\n @RibbonClient(name = \"customer-service\"),\n @RibbonClient(name = \"product-service\")\n})\npublic class OrderApplication {\n\n @LoadBalanced\n @Bean\n RestTemplate restTemplate() {\n     return new RestTemplate();\n } \n\n public static void main(String[] args) {\n     new SpringApplicationBuilder(OrderApplication.class).web(true).run(args);\n }\n // ...\n}\n```", "```java\n@RestController\npublic class OrderController {\n\n @Autowired\n OrderRepository repository; \n @Autowired\n RestTemplate template;\n\n @PostMapping\n public Order prepare(@RequestBody Order order) {\n     int price = 0;\n     Product[] products = template.postForObject(\"http://product-service/ids\", order.getProductIds(), Product[].class);\n     Customer customer = template.getForObject(\"http://customer-service/withAccounts/{id}\", Customer.class, order.getCustomerId());\n     for (Product product : products) \n         price += product.getPrice();\n     final int priceDiscounted = priceDiscount(price, customer);\n     Optional<Account> account = customer.getAccounts().stream().filter(a -> (a.getBalance() > priceDiscounted)).findFirst();\n     if (account.isPresent()) {\n         order.setAccountId(account.get().getId());\n         order.setStatus(OrderStatus.ACCEPTED);\n         order.setPrice(priceDiscounted);\n     } else {\n         order.setStatus(OrderStatus.REJECTED);\n     }\n     return repository.add(order);\n }\n\n @PutMapping(\"/{id}\")\n public Order accept(@PathVariable Long id) {\n     final Order order = repository.findById(id);\n     template.put(\"http://account-service/withdraw/{id}/{amount}\", null, order.getAccountId(), order.getPrice());\n     order.setStatus(OrderStatus.DONE);\n     repository.update(order);\n     return order;\n }\n // ...\n}\n```", "```java\n@GetMapping(\"/withAccounts/{id}\")\npublic Customer findByIdWithAccounts(@PathVariable(\"id\") Long id) {\n Account[] accounts = template.getForObject(\"http://account-service/customer/{customerId}\", Account[].class, id);\n Customer c = repository.findById(id);\n c.setAccounts(Arrays.stream(accounts).collect(Collectors.toList()));\n return c;\n}\n```", "```java\n$ curl -d '{\"productIds\": [1,5],\"customerId\": 1,\"status\": \"NEW\"}' -H \"Content-Type: application/json\" -X POST http://localhost:8090\n```", "```java\nDynamicServerListLoadBalancer for client customer-service initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=customer-service,current list of Servers=[localhost:8092],Load balancer stats=Zone stats: {unknown=[Zone:unknown; Instance count:1; Active connections count: 0; Circuit breaker tripped count: 0; Active connections per server: 0.0;]\n},Server stats: [[Server:localhost:8092; Zone:UNKNOWN; Total Requests:0; Successive connection failure:0; Total blackout seconds:0; Last connection made:Thu Jan 01 01:00:00 CET 1970; First connection made: Thu Jan 01 01:00:00 CET 1970; Active Connections:0; total failure count in last (1000) msecs:0; average resp time:0.0; 90 percentile resp time:0.0; 95 percentile resp time:0.0; min resp time:0.0; max resp time:0.0; stddev resp time:0.0]\n]}ServerList:com.netflix.loadbalancer.ConfigurationBasedServerList@7f1e23f6\n```", "```java\n@SpringBootApplication\n@EnableDiscoveryClient\npublic class OrderApplication {\n\n @LoadBalanced\n @Bean\n RestTemplate restTemplate() {\n return new RestTemplate();\n }\n\n public static void main(String[] args) {\n     new SpringApplicationBuilder(OrderApplication.class).web(true).run(args);\n }\n // ...\n}\n```", "```java\nspring: \n application:\n   name: order-service\n\nserver:\n port: ${PORT:8090}\n\neureka:\n client:\n   serviceUrl:\n     defaultZone: ${EUREKA_URL:http://localhost:8761/eureka/}\n```", "```java\nDynamicServerListLoadBalancer for client account-service initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=account-service,current list of Servers=[minkowp-l.p4.org:8091, minkowp-l.p4.org:9091],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone; Instance count:2; Active connections count: 0; Circuit breaker tripped count: 0; Active connections per server: 0.0;]\n },Server stats: [[Server:minkowp-l.p4.org:8091; Zone:defaultZone; Total Requests:0; Successive connection failure:0; Total blackout seconds:0; Last connection made:Thu Jan 01 01:00:00 CET 1970; First connection made: Thu Jan 01 01:00:00 CET 1970; Active Connections:0; total failure count in last (1000) msecs:0; average resp time:0.0; 90 percentile resp time:0.0; 95 percentile resp time:0.0; min resp time:0.0; max resp time:0.0; stddev resp time:0.0]\n , [Server:minkowp-l.p4.org:9091; Zone:defaultZone; Total Requests:0; Successive connection failure:0; Total blackout seconds:0; Last connection made:Thu Jan 01 01:00:00 CET 1970; First connection made: Thu Jan 01 01:00:00 CET 1970; Active Connections:0; total failure count in last (1000) msecs:0; average resp time:0.0; 90 percentile resp time:0.0; 95 percentile resp time:0.0; min resp time:0.0; max resp time:0.0; stddev resp time:0.0]\n ]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@3e878e67\n```", "```java\n<dependency>\n <groupId>org.springframework.cloud</groupId>\n <artifactId>spring-cloud-starter-feign</artifactId>\n</dependency>\n```", "```java\n@SpringBootApplication\n@EnableDiscoveryClient\n@EnableFeignClients\npublic class OrderApplication {\n\n    public static void main(String[] args) {\n        new SpringApplicationBuilder(OrderApplication.class).web(true).run(args);\n    }\n\n    @Bean\n    OrderRepository repository() {\n        return new OrderRepository();\n    }\n\n}\n```", "```java\n@FeignClient(name = \"account-service\")\npublic interface AccountClient {\n    @PutMapping(\"/withdraw/{accountId}/{amount}\")\n    Account withdraw(@PathVariable(\"accountId\") Long id, @PathVariable(\"amount\") int amount);\n}\n\n@FeignClient(name = \"customer-service\")\npublic interface CustomerClient {\n    @GetMapping(\"/withAccounts/{customerId}\")\n    Customer findByIdWithAccounts(@PathVariable(\"customerId\") Long customerId);\n}\n\n@FeignClient(name = \"product-service\")\npublic interface ProductClient {\n    @PostMapping(\"/ids\")\n    List<Product> findByIds(List<Long> ids);\n}\n```", "```java\n@Autowired\nOrderRepository repository;\n@Autowired\nAccountClient accountClient;\n@Autowired\nCustomerClient customerClient;\n@Autowired\nProductClient productClient;\n\n@PostMapping\npublic Order prepare(@RequestBody Order order) {\n    int price = 0;\n    List<Product> products = productClient.findByIds(order.getProductIds());\n    Customer customer = customerClient.findByIdWithAccounts(order.getCustomerId());\n    for (Product product : products)\n        price += product.getPrice();\n    final int priceDiscounted = priceDiscount(price, customer);\n    Optional<Account> account = customer.getAccounts().stream().filter(a -> (a.getBalance() > priceDiscounted)).findFirst();\n    if (account.isPresent()) {\n        order.setAccountId(account.get().getId());\n        order.setStatus(OrderStatus.ACCEPTED);\n        order.setPrice(priceDiscounted);\n    } else {\n        order.setStatus(OrderStatus.REJECTED);\n    }\n    return repository.add(order);\n}\n```", "```java\nspring: \n application:\n     name: account-service\n\n---\nspring:\n profiles: zone1\neureka:\n instance:\n     metadataMap:\n         zone: zone1\n client:\n     serviceUrl:\n        defaultZone: http://localhost:8761/eureka/\n        preferSameZoneEureka: true\nserver: \n port: ${PORT:8091}\n\n---\nspring:\n profiles: zone2\neureka:\n instance:\n     metadataMap:\n        zone: zone2\n client:\n     serviceUrl:\n        defaultZone: http://localhost:8761/eureka/\n        preferSameZoneEureka: true\nserver: \n port: ${PORT:9091}\n```", "```java\nDynamicServerListLoadBalancer for client product-service initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=product-service,current list of Servers=[minkowp-l.p4.org:8093],Load balancer stats=Zone stats: {zone1=[Zone:zone1; Instance count:1; Active connections count: 0; Circuit breaker tripped count: 0; Active connections per server: 0.0;]...\n```", "```java\npublic interface AccountService {\n\n    @PostMapping\n    Account add(@RequestBody Account account);\n\n    @PutMapping\n    Account update(@RequestBody Account account);\n\n    @PutMapping(\"/withdraw/{id}/{amount}\")\n    Account withdraw(@PathVariable(\"id\") Long id, @PathVariable(\"amount\") int amount); \n\n    @GetMapping(\"/{id}\")\n    Account findById(@PathVariable(\"id\") Long id); \n\n    @GetMapping(\"/customer/{customerId}\")\n    List<Account> findByCustomerId(@PathVariable(\"customerId\") Long customerId); \n\n    @PostMapping(\"/ids\")\n    List<Account> find(@RequestBody List<Long> ids); \n\n    @DeleteMapping(\"/{id}\")\n    void delete(@PathVariable(\"id\") Long id);\n\n}\n```", "```java\n@RestController\npublic class AccountController implements AccountService {\n\n    @Autowired\n    AccountRepository repository;\n\n    public Account add(@RequestBody Account account) {\n        return repository.add(account);\n    }\n    // ...\n}\n```", "```java\n@FeignClient(name = \"account-service\")\npublic interface AccountClient extends AccountService {\n}\n```", "```java\nAccountClient accountClient = Feign.builder().client(new OkHttpClient())\n    .encoder(new JAXBEncoder())\n    .decoder(new JAXBDecoder())\n    .contract(new JAXRSContract())\n    .requestInterceptor(new BasicAuthRequestInterceptor(\"user\", \"password\"))\n    .target(AccountClient.class, \"http://account-service\");\n```", "```java\n@FeignClient(name = \"account-service\", configuration = AccountConfiguration.class)\n```", "```java\n@Configuration\npublic class AccountConfiguration {\n @Bean\n public Contract feignContract() {\n     return new JAXRSContract();\n }\n\n @Bean\n public Encoder feignEncoder() {\n     return new JAXBEncoder();\n }\n\n @Bean\n public Decoder feignDecoder() {\n     return new JAXBDecoder();\n }\n\n @Bean\n public BasicAuthRequestInterceptor basicAuthRequestInterceptor() {\n     return new BasicAuthRequestInterceptor(\"user\", \"password\");\n }\n}\n```", "```java\nfeign:\n client:\n   config:\n     account-service:\n       connectTimeout: 5000\n       readTimeout: 5000\n       loggerLevel: basic\n```"]