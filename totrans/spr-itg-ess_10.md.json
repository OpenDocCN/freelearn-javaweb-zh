["```java\n    #URL of RSS feed, as example http://stackoverflow.com/feeds -Make #sure there are not copyright or legal issues in consumption of\n    #feed\n    feeds.url=some valid feed URL \n    #Username for e-mail account\n    mail.username=yourusername\n    #Password for e-mail account\n    mail.password=yourpassword\n    #FTP server host\n    ftp.host=localhost\n    #FTP port\n    ftp.port=21\n    #Remote directory on FTP which the listener would be observing\n    ftp.remotefolder=/\n    #Local directory where downloaded file should be dumped\n    ftp.localfolder=C:\\\\Chandan\\\\Projects\\\\siexample\\\\ftp\\\\ftplocalfolder\n    #Username for connecting to FTP server\n    ftp.username=ftpusername\n    #Password for connection to FTP server\n    ftp.password=ftppassword\n    #JMS broker URL\n    jms.brolerurl=vm://localhost\n    ```", "```java\nadapter; this fetches feed from the configured url and puts it on the channel:\n```", "```java\n<int-feed:inbound-channel-adapter \n  id=\"soJavaFeedAdapterForAggregator\" \n  channel=\"fetchedFeedChannel\" \n  auto-startup=\"true\" \n  url=\"${feeds.url}\"> \n  <int:poller \n    fixed-rate=\"500\" max-messages-per-poll=\"1\" />\n</int-feed:inbound-channel-adapter>\n```", "```java\n<!-- FTP Create Session-->\n  <bean id=\"ftpClientSessionFactory\" class=\"org.springframework.integration.ftp.session.DefaultFtpSessionFactory\">\n    <property name=\"host\" value=\"${ftp.host}\"/>\n    <property name=\"port\" value=\"${ftp.port}\"/>\n    <property name=\"username\" value=\"${ftp.username}\"/>\n    <property name=\"password\" value=\"${ftp.password}\"/>\n  </bean>\n```", "```java\n<!-- FTP Download files from server and put it in local directory-->\n  <int-ftp:inbound-channel-adapter \n    channel=\"fetchedFeedChannel\"\n    session-factory=\"ftpClientSessionFactory\"\n    remote-directory=\"${ftp.remotefolder}\"\n    local-directory=\"${ftp.localfolder}\"\n    auto-create-local-directory=\"true\"\n    delete-remote-files=\"true\"\n    filename-pattern=\"*.txt\"\n    local-filename-generator-expression=\"#this.toLowerCase() + '.trns'\">\n    <int:poller fixed-rate=\"1000\"/>\n  </int-ftp:inbound-channel-adapter>\n```", "```java\n  <bean id=\"filterSoFeedBean\" class=\"com.cpandey.siexample.filter.SoFeedFilter\"/>\n  <!--Filter the feed which are not for Java category -->\n<int:filter input-channel=\"fetchedFeedChannel\" output-channel=\"fetchedFeedChannelForAggregatior\" ref=\"filterSoFeedBean\" method=\"filterFeed\"/>\n```", "```java\nimport java.util.List;\nimport org.apache.log4j.Logger;\nimport org.springframework.messaging.Message;\nimport com.sun.syndication.feed.synd.SyndCategoryImpl;\nimport com.sun.syndication.feed.synd.SyndEntry;\n\npublic class SoFeedFilter {\n  private static final Logger LOGGER = Logger.getLogger(SoFeedFilter.class);\n  public boolean filterFeed(Message<SyndEntry> message){\n    SyndEntry entry = message.getPayload();\n    List<SyndCategoryImpl> categories=entry.getCategories();\n    if(categories!=null&&categories.size()>0){\n      for (SyndCategoryImpl category: categories) {\n        if(category.getName().equalsIgnoreCase(\"java\")){\n          LOGGER.info(\"JAVA category feed\");\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n```", "```java\n  <bean id=\"soFeedCorrelationStrategyBean\" class=\"com.cpandey.siexample.aggregator.CorrelationStrategy\"/>\n\n  <bean id=\"sofeedCompletionStrategyBean\" class=\"com.cpandey.siexample.aggregator.CompletionStrategy\"/>\n\n  <bean id=\"aggregatorSoFeedBean\" class=\"com.cpandey.siexample.aggregator.SoFeedAggregator\"/>\n```", "```java\n  <int:aggregator input-channel=\"fetchedFeedChannelForAggregatior\"\n    output-channel=\"aggregatedFeedChannel\" ref=\"aggregatorSoFeedBean\"\n    method=\"aggregateAndPublish\" release-strategy=\"sofeedCompletionStrategyBean\"\n    release-strategy-method=\"checkCompleteness\" correlation-strategy=\"soFeedCorrelationStrategyBean\"\n    correlation-strategy-method=\"groupFeedsBasedOnCategory\"\n    message-store=\"messageStore\" expire-groups-upon-completion=\"true\">\n    <int:poller fixed-rate=\"1000\"></int:poller>\n  </int:aggregator>\n```", "```java\nimport java.util.List;\nimport org.apache.log4j.Logger;\nimport org.springframework.messaging.Message;\nimport com.sun.syndication.feed.synd.SyndCategoryImpl;\nimport com.sun.syndication.feed.synd.SyndEntry;\n\npublic class CorrelationStrategy {\n  private static final Logger LOGGER = Logger.getLogger(CorrelationStrategy.class);\n\n  //aggregator's method should expect a Message<?> and return an //Object.\n  public Object groupFeedsBasedOnCategory(Message<?> message) {\n    //Which messages will be grouped in a bucket \n    //-say based on category, based on some ID etc.\n    if(message!=null){\n      SyndEntry entry = (SyndEntry)message.getPayload();\n      List<SyndCategoryImpl> categories=entry.getCategories();\n      if(categories!=null&&categories.size()>0){\n        for (SyndCategoryImpl category: categories) {\n          //for simplicity, lets consider the first category\n          LOGGER.info(\"category \"+category.getName());\n          return category.getName();\n        }\n      }\n    }\n    return null;\n  }\n}\n```", "```java\nimport java.util.List;\nimport org.apache.log4j.Logger;\nimport com.sun.syndication.feed.synd.SyndEntry;\n\npublic class CompletionStrategy {\n  private static final Logger LOGGER = Logger.getLogger(CompletionStrategy.class);\n  //Completion strategy is used by aggregator to decide whether all //components has\n  //been aggregated or not method should expect a java.util.List \n  //Object returning a Boolean value\n  public boolean checkCompleteness(List<SyndEntry> messages) {\n    if(messages!=null){\n      if(messages.size()>4){\n        LOGGER.info(\"All components assembled, releasing aggregated message\");\n        return true;\n      }\n    }\n    return false;\n  }\n\n}\n```", "```java\nimport java.util.List;\nimport org.apache.log4j.Logger;\nimport com.sun.syndication.feed.synd.SyndEntry;\n\npublic class SoFeedAggregator {\n  private static final Logger LOGGER = Logger.getLogger(SoFeedAggregator.class);\n  public List<SyndEntry> aggregateAndPublish( List<SyndEntry> messages) {\n    LOGGER.info(\"SoFeedAggregator -Aggregation complete\");\n    return messages;\n  }\n}\n```", "```java\n<int:splitter ref=\"splitterSoFeedBean\" method=\"splitAndPublish\" input-channel=\"aggregatedFeedChannel\" output-channel=\"splittedFeedChannel\" />\n```", "```java\nimport java.util.List;\nimport com.sun.syndication.feed.synd.SyndEntry;\npublic class SoFeedSplitter {\n  public List<SyndEntry> splitAndPublish(List<SyndEntry> message) {\n    //Return one message from list at a time -this will be picked up //by the processor\n    return message;\n  }\n}\n```", "```java\n<int:publish-subscribe-channel id=\"splittedFeedChannel\"/>\n```", "```java\n  <bean id=\"feedDbTransformerBean\" class=\"com.cpandey.siexample.transformer.SoFeedDbTransformer\" />\n\n  <bean id=\"feedJMSTransformerBean\" class=\"com.cpandey.siexample.transformer.SoFeedJMSTransformer\" />\n\n  <bean id=\"feedMailTransformerBean\" class=\"com.cpandey.siexample.transformer.SoFeedMailTransformer\" />\n```", "```java\n<int:transformer id=\"dbFeedTransformer\" ref=\"feedDbTransformerBean\" input-channel=\"splittedFeedChannel\" method=\"transformFeed\" output-channel=\"transformedChannel\"/>\n\nimport org.apache.log4j.Logger;\nimport org.springframework.messaging.Message;\nimport com.cpandey.siexample.pojo.SoFeed;\nimport com.sun.syndication.feed.synd.SyndEntry;\n\npublic class SoFeedDbTransformer {\n  private static final Logger LOGGER = Logger.getLogger(SoFeedDbTransformer.class);\n\n  public SoFeed transformFeed(Message<SyndEntry> message){\n    SyndEntry entry = message.getPayload();\n    SoFeed soFeed=new SoFeed();\n    soFeed.setTitle(entry.getTitle());\n    soFeed.setDescription(entry.getDescription().getValue());\n    soFeed.setCategories(entry.getCategories());\n    soFeed.setLink(entry.getLink());\n    soFeed.setAuthor(entry.getAuthor());\n    LOGGER.info(\"JDBC :: \"+soFeed.getTitle());\n    return soFeed;\n  }\n}\n```", "```java\n<int:transformer id=\"jmsFeedTransformer\" ref=\"feedJMSTransformerBean\" \n  input-channel=\"splittedFeedChannel\" \n  method=\"transformFeed\" \n  output-channel=\"transformedChannel\"/>\n\nimport org.apache.log4j.Logger;\nimport org.springframework.messaging.Message;\nimport com.cpandey.siexample.pojo.SoFeed;\nimport com.sun.syndication.feed.synd.SyndEntry;\npublic class SoFeedJMSTransformer {\n  private static final Logger LOGGER = Logger.getLogger(SoFeedJMSTransformer.class);\n\n  public String transformFeed(Message<SyndEntry> message){\n    SyndEntry entry = message.getPayload();\n    SoFeed soFeed=new SoFeed();\n    soFeed.setTitle(entry.getTitle());\n    soFeed.setDescription(entry.getDescription().getValue());\n    soFeed.setCategories(entry.getCategories());\n    soFeed.setLink(entry.getLink());\n    soFeed.setAuthor(entry.getAuthor());\n    //For JSM , return String \n    LOGGER.info(\"JMS\"+soFeed.getTitle());\n    return soFeed.toString();\n  }\n}\n```", "```java\n<int:transformer id=\"mailFeedTransformer\" ref=\"feedMailTransformerBean\" \n  input-channel=\"splittedFeedChannel\"\n  method=\"transformFeed\" \n  output-channel=\"transformedChannel\"/>\n\nimport java.util.Date;\nimport org.apache.log4j.Logger;\nimport org.springframework.mail.MailMessage;\nimport org.springframework.mail.SimpleMailMessage;\nimport org.springframework.messaging.Message;\nimport com.cpandey.siexample.pojo.SoFeed;\nimport com.sun.syndication.feed.synd.SyndEntry;\n\npublic class SoFeedMailTransformer {\n  private static final Logger LOGGER = Logger.getLogger(SoFeedMailTransformer.class);\n\n  public MailMessage transformFeed(Message<SyndEntry> message){\n    SyndEntry entry = message.getPayload();\n    SoFeed soFeed=new SoFeed();\n    soFeed.setTitle(entry.getTitle());\n    soFeed.setDescription(entry.getDescription().getValue());\n    soFeed.setCategories(entry.getCategories());\n    soFeed.setLink(entry.getLink());\n    soFeed.setAuthor(entry.getAuthor());\n\n    //For Mail return MailMessage\n    MailMessage msg = new SimpleMailMessage();\n    msg.setTo(\"emailaddress\");\n    msg.setFrom(\"emailaddress\");\n    msg.setSubject(\"Subject\");\n    msg.setSentDate(new Date());\n    msg.setText(\"Mail Text\");\n    LOGGER.info(\"Mail Message\"+soFeed.getTitle());\n\n     return msg;\n  }\n}\n```", "```java\n    <int:payload-type-router input-channel=\"transformedChannel\" \n      default-output-channel=\"logChannel\">\n    <int:mapping type=\"com.cpandey.siexample.pojo.SoFeed\"\n      channel=\"jdbcChannel\" />\n    <int:mapping type=\"java.lang.String\" \n      channel=\"jmsChannel\" />\n    <int:mapping type=\"org.springframework.mail.MailMessage\" \n      channel=\"mailChannel\" />\n    </int:payload-type-router>\n```", "```java\n      <jdbc:embedded-database id=\"dataSource\" type=\"H2\"/>\n    ```", "```java\n      <bean id=\"transactionManager\" class=\"org.springframework.orm.jpa.JpaTransactionManager\">\n        <constructor-arg ref=\"entityManagerFactory\" />\n      </bean>\n    ```", "```java\n    <bean id=\"entityManagerFactory\"\n      class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\">\n      <property name=\"dataSource\"  ref=\"dataSource\" />\n      <property name=\"jpaVendorAdapter\" ref=\"vendorAdaptor\" />\n      <property name=\"packagesToScan\" value=\"com.cpandey.siexample.pojo\"/>\n      </bean>\n    ```", "```java\n    <bean id=\"entityManager\" class=\"org.springframework.orm.jpa.support.SharedEntityManagerBean\">\n        <property name=\"entityManagerFactory\" ref=\"entityManagerFactory\"/>\n      </bean>\n    ```", "```java\n    <bean id=\"abstractVendorAdapter\" abstract=\"true\">\n      <property name=\"generateDdl\" value=\"true\" />\n      <property name=\"database\"    value=\"H2\" />\n      <property name=\"showSql\"     value=\"false\"/>\n    </bean>\n    ```", "```java\n      <bean id=\"vendorAdaptor\" class=\"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter\"\n        parent=\"abstractVendorAdaptor\">\n      </bean>\n    ```", "```java\n<int:gateway id=\"feedService\"\n  service-interface=\"com.cpandey.siexample.service.FeedService\"\n  default-request-timeout=\"5000\"\n  default-reply-timeout=\"5000\">\n  <int:method name=\"createFeed\"\n    request-channel=\"createFeedRequestChannel\"/>\n  <int:method name=\"readAllFeed\"\n    reply-channel=\"readFeedRequestChannel\"/>\n</int:gateway>\n```", "```java\nimport java.util.List;\nimport com.cpandey.siexample.pojo.FeedEntity;\npublic interface FeedService {\n  FeedEntity createFeed(FeedEntity feed);\n  List<FeedEntity> readAllFeed();\n}\n```", "```java\nimport org.apache.log4j.Logger;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.integration.annotation.MessageEndpoint;\nimport org.springframework.integration.annotation.ServiceActivator;\nimport com.cpandey.siexample.pojo.FeedEntity;\nimport com.cpandey.siexample.pojo.SoFeed;\n\n@MessageEndpoint\npublic class PersistFeed {\n\n  private static final Logger LOGGER = Logger.getLogger(PersistFeed.class);\n\n  @Autowired FeedService feedService;\n  @ServiceActivator\n  public void persistFeedToDb(SoFeed feed) {\n    //This will write to output channel of gateway\n    //From there this will be picked by updating adapter\n    feedService.createFeed(new FeedEntity(feed.getTitle()));\n  }\n\n  @ServiceActivator\n  public void printFeed(FeedEntity feed) {\n    //Print the feed fetched by retrieving adapter\n    LOGGER.info(\"Feed Id\"+feed.getId()+\" Feed Title \"+feed.getTitle());\n  }\n}\n```", "```java\n  <int-jpa:updating-outbound-gateway \n    entity-manager-factory=\"entityManagerFactory\"\n    request-channel=\"createFeedRequestChannel\" \n    entity-class=\"com.cpandey.siexample.pojo.FeedEntity\" \n    reply-channel=\"printAllFeedChannel\">\n    <int-jpa:transactional transaction-manager=\"transactionManager\" />\n  </int-jpa:updating-outbound-gateway>\n\n  <int-jpa:retrieving-outbound-gateway \n    entity-manager-factory=\"entityManagerFactory\"\n    request-channel=\"readFeedRequestChannel\"\n    jpa-query=\"select f from FeedEntity f order by f.title asc\" \n    reply-channel=\"printAllFeedChannel\">\n  </int-jpa:retrieving-outbound-gateway>\n```", "```java\n      <int-mail:outbound-channel-adapter channel=\"mailChannel\" mail-sender=\"mailSender\"/>\n    ```", "```java\n      <bean id=\"mailSender\" class=\"org.springframework.mail.javamail.JavaMailSenderImpl\">\n        <property name=\"javaMailProperties\">\n          <props>\n            <prop key=\"mail.smtp.auth\">true</prop>\n            <prop key=\"mail.smtp.starttls.enable\">true</prop>\n            <prop key=\"mail.smtp.host\">smtp.gmail.com</prop>\n            <prop key=\"mail.smtp.port\">587</prop>\n          </props>\n        </property>\n        <property name=\"username\" value=\"${mail.username}\" />\n        <property name=\"password\" value=\"${mail.password}\" />\n      </bean>\n    ```", "```java\n  <int-jms:outbound-channel-adapter connection-factory=\"connectionFactory\" channel=\"jmsChannel\" destination=\"feedInputQueue\" />\n```", "```java\n<int:service-activator ref=\"commonServiceActivator\" method=\"echoJmsMessageInput\" input-channel=\"jmsProcessedChannel\"/>\n```", "```java\n  <bean id=\"feedInputQueue\" class=\"org.apache.activemq.command.ActiveMQQueue\">\n    <constructor-arg value=\"queue.input\"/>\n  </bean>\n\n  <bean id=\"connectionFactory\" \n    class=\"org.springframework.jms.connection.CachingConnectionFactory\">\n    <property name=\"targetConnectionFactory\">\n      <bean class=\"org.apache.activemq.ActiveMQConnectionFactory\">\n        <property name=\"brokerURL\" value=\"${jms.brokerurl}\"/>\n      </bean>\n    </property>\n    <property name=\"sessionCacheSize\" value=\"10\"/>\n    <property name=\"cacheProducers\" value=\"false\"/>\n  </bean>\n```", "```java\n  <int-jmx:mbean-export \n    default-domain=\"com.cpandey.siexample\"\n    server=\"mbeanServer\"/>\n```"]