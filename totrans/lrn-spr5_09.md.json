["```java\npublic class MyWebSocketHandler extends TextWebSocketHandler{ \n@Override \n   public void handleTextMessage(WebSocketSession session,     \n     TextMessage message) \n   { \n       // code goes here \n   } \n} \n\n```", "```java\n@Configuration \n@EnableWebSocket \npublic class WebSocketConfig implements WebSocketConfigurer { \n  @Override \n  public void registerWebSocketHandlers(WebSocketHandlerRegistry   \n     registry)  \n  { \n     registry.addHandler(createHandler(), \"/webSocketHandler\"); \n  } \n  @Bean \n  public WebSocketHandler createMyHandler() { \n    return new MyWebSocketHandler(); \n  } \n} \n\n```", "```java\n@Configuration \n@EnableWebSocket \npublic class MyWebSocketConfig implements WebSocketConfigurer { \n  @Override \n  public void registerWebSocketHandlers(WebSocketHandlerRegistry   \n    registry)  \n  { \n    registry.addHandler(createHandler(),     \n       \"/webSocketHandler\").addInterceptors \n       (new HttpSessionHandshakeInterceptor()); \n  } \n  @Bean \n  public WebSocketHandler createMyHandler() { \n    return new MyWebSocketHandler(); \n  } \n} \n\n```", "```java\n<beans xmlns=\"http://www.springframework.org/schema/beans\" \n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n  xmlns:websocket= \nhttp://www.springframework.org/schema/websocket \n   xsi:schemaLocation= \n    \"http://www.springframework.org/schema/beans \n  http://www.springframework.org/schema/beans/spring-beans.xsd \n    http://www.springframework.org/schema/websocket \nhttp://www.springframework.org/schema/websocket/spring- \n    websocket.xsd\"> \n  <websocket:handlers> \n    <websocket:mapping path=\"/myWebSocketHandler\"  \n     handler=\"myWebSocketHandler\"/> \n     </websocket:handlers> \n   <bean id=\"myWebSocketHandler\"   \n    class=\"com.packt.ch10.WebsocketHandlers. MyWebSocketHandler\"       \n    /> \n</beans> \n\n```", "```java\n<websocket:handlers> \n    <websocket:mapping path=\"/myWebSocketHandler\"  \n       handler=\"myWebSocketHandler\"/> \n    <websocket:handshake-interceptors> \n      <bean class= \n         \"org.springframework.web.socket.server.support. \n         HttpSessionHandshakeInterceptor\"/> \n    </websocket:handshake-interceptors> \n     </websocket:handlers> \n  <!-bean for MyWebSocketHandler -à \n</beans>  \n\n```", "```java\n@Bean \npublic ServletServerContainerFactoryBean  \n  createWebSocketContainer()  \n{ \n  ServletServerContainerFactoryBean webSocketcontainer =  \n    new ServletServerContainerFactoryBean(); \n    webSocketcontainer .setMaxTextMessageBufferSize(9000); \n    webSocketcontainer .setMaxBinaryMessageBufferSize(9000); \n  return webSocketcontainer ; \n  } \n} \n\n```", "```java\n<bean class= \"org.springframework.web.socket.server.standard. \n  ServletServerContainerFactoryBean\"> \n  <property name=\"maxTextMessageBufferSize\" value=\"9000\"/> \n  <property name=\"maxBinaryMessageBufferSize\" value=\"9000\"/> \n</bean> \n\n```", "```java\n      WebSocket socket=  new WebSocket( URL, protocols); \n\n```", "```java\npublic class MyMessageHandler extends TextWebSocketHandler { \n\n        List<WebSocketSession> sessions = new CopyOnWriteArrayList<>(); \n\n          @Override \n          public void handleTextMessage(WebSocketSession session,  \n            TextMessage message) throws IOException { \n            String country = message.getPayload(); \n            String reply=\"No data available\"; \n            if(country.equals(\"India\"))  { \n              reply=\"DELHI\"; \n            } \n            else if(country.equals(\"USA\"))  { \n                  reply=\"Washington,D.C\";     \n             } \n            System.out.println(\"hanlding message\"); \n\n            for(WebSocketSession webSsession:sessions){ \n              session.sendMessage(new TextMessage(reply));   \n            } \n          } \n          @Override \n          public void afterConnectionEstablished(WebSocketSession  \n             session) throws IOException { \n            // Handle new connection here \n            System.out.println(\"connection establieshed:hello\"); \n            sessions.add(session); \n            session.sendMessage(new TextMessage(\"connection  \n              establieshed:hello\")); \n            } \n          @Override \n          public void afterConnectionClosed(WebSocketSession session,   \n            CloseStatus status) throws IOException { \n            // Handle closing connection here \n            System.out.println(\"connection closed : BYE\"); \n          } \n          @Override \n          public void handleTransportError(WebSocketSession session,  \n            Throwable exception) throws IOException { \n              session.sendMessage(new TextMessage(\"Error!!!!!!\")); \n            } \n        } \n\n```", "```java\n        @Configuration \n        @EnableWebSocket \n        public class MyWebSocketConfigurer extends  \n        WebMvcConfigurerAdapter implements WebSocketConfigurer\n        { \n          @Override \n          public void\n          registerWebSocketHandlers(WebSocketHandlerRegistry  \n            registry) { \n            registry.addHandler(myHandler(),  \n            \"/myHandler\").setAllowedOrigins(\"*\"); \n          } \n          @Bean \n          public WebSocketHandler myHandler() { \n            return new MyMessageHandler(); \n          } \n          // Allow the HTML files through the default Servlet \n          @Override \n           public void configureDefaultServletHandling \n             (DefaultServletHandlerConfigurer configurer) { \n            configurer.enable(); \n          } \n        } \n\n```", "```java\n        <mvc:annotation-driven /> \n\n```", "```java\n        <div> \n          <select id=\"country\"> \n                <option value=\"India\">INDIA</option> \n                <option value=\"USA\">U.S.A</option> \n          </select><br> \n          <br> <br> \n           <button id=\"show\" onclick=\"connect();\">Connect</button> \n              <br /> <br /> \n            </div> \n          <div id=\"messageDiv\"> \n              <p>CAPITAL WILL BE DISPLAYED HERE</p> \n              <p id=\"msgResponse\"></p> \n          </div> \n        </div> \n\n```", "```java\n        <script type=\"text/javascript\"  \n          src=\"img/sockjs-0.3.4.js\"></script>\n```", "```java\n        <script type=\"text/javascript\"> \n          var stompClient = null; \n          function setConnected(connected) { \n            document.getElementById('show').disabled = connected; \n          } \n          function connect() { \n            if (window.WebSocket) { \n              message = \"supported\"; \n              console.log(\"BROWSER SUPPORTED\"); \n            } else { \n              console.log(\"BROWSER NOT SUPPORTED\"); \n            } \n            var country = document.getElementById('country').value; \n            var socket = new WebSocket( \n              \"ws://localhost:8081/Ch10_Spring_Message_Handler \n              /webS/myHandler\"); \n                socket.onmessage=function(data){ \n                  showResult(\"Message Arrived\"+data.data)        \n                }; \n                setConnected(true); \n                socket.onopen = function(e) { \n                    console.log(\"Connection established!\"); \n                    socket.send(country); \n                    console.log(\"sending data\"); \n                };     \n          } \n          function disconnect() { \n              if (socket != null) { \n                socket.close(); \n              } \n              setConnected(false); \n              console.log(\"Disconnected\"); \n          } \n          function showResult(message) { \n            var response = document.getElementById('messageDiv'); \n            var p = document.createElement('p'); \n            p.style.wordWrap = 'break-word'; \n            p.appendChild(document.createTextNode(message)); \n            response.appendChild(p); \n          } \n        </script>\n```", "```java\n@Override \npublic void registerWebSocketHandlers(WebSocketHandlerRegistry  \n  registry)  \n{ \n  registry.addHandler(myHandler(),  \n    \"/myHandler_sockjs\").setAllowedOrigins(\"*\").withSockJS(); \n} \n\n```", "```java\n<websocket:handlers> \n   <websocket:mapping path=\"/myHandler\"  \n     handler=\"myHandler_sockjs\"/> \n   <websocket:sockjs/> \n</websocket:handlers> \n\n```", "```java\n        var socket = new SockJS( \n              \"http://localhost:8080/Ch10_Spring_Message_Handler \n        /webS/myHandler_sockjs\"); \n\n```", "```java\n        @Configuration \n        @EnableWebSocketMessageBroker \n        public class WebSocketConfig_custom extends \n          AbstractWebSocketMessageBrokerConfigurer { \n          @Override \n          public void configureMessageBroker(\n            MessageBrokerRegistry config) { \n            config.enableSimpleBroker(\"/topic\"); \n            config.setApplicationDestinationPrefixes(\"/bookApp\"); \n          } \n          @Override \n          public void registerStompEndpoints(\n            StompEndpointRegistry registry) { \n            registry.addEndpoint(\"/book\").withSockJS(); \n          } \n        } \n\n```", "```java\n        public void getOffer(String bookName) { \n          if (bookName.equals(\"Spring 5.0\")) { \n            result = bookName + \" is having offer of having 20% off\"; \n            } else if (bookName.equals(\"Core JAVA\")) { \n              result = bookName + \" Buy two books and get 10% off\"; \n            } else if (bookName.equals(\"Spring 4.0\")) { \n              result = bookName + \" is having for 1000 till month  \n            end\"; \n            } \n            else \n              result = bookName + \" is not available on the list\"; \n          } \n\n```", "```java\n        <body> \n               <a href=\"webS/bookPage\">CLICK to get BOOK Page</a> \n        </body>\n```", "```java\n        @Controller(\"/webS\") \n        public class WebSocketController { \n          @RequestMapping(\"/bookPage\") \n          public String bookPage() { \n            System.out.println(\"hello\"); \n            return \"book\"; \n        } \n\n```", "```java\n        <body> \n        <div> \n           <div> \n              <button id=\"connect\" \n                onclick=\"connect();\">Connect</button> \n              <button id=\"disconnect\" disabled=\"disabled\"   \n                 onclick=\"disconnect();\">Disconnect</button><br/><br/> \n            </div> \n            <div id=\"bookDiv\"> \n                <label>SELECT BOOK NAME</label> \n                 <select id=\"bookName\" name=\"bookName\"> \n                     <option> Core JAVA </option>     \n                     <option> Spring 5.0 </option> \n                     <option> Spring 4.0 </option> \n                 </select> \n                <button id=\"sendBook\" onclick=\"sendBook();\">Send to                 Add</button> \n                <p id=\"bookResponse\"></p> \n            </div> \n          </div> \n        </body>\n```", "```java\n        <script type=\"text/javascript\"                 \n         src=\"img/sockjs-0.3.4.js\"></script>            <script type=\"text/javascript\"  \n         src=\"https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/ \n        stomp.js\"/> \n\n```", "```java\n        <script type=\"text/javascript\"> \n           var stompClient = null;  \n           function connect() { \n             alert(\"connection\"); \n           if (window.WebSocket){ \n             message=\"supported\"; \n             console.log(\"BROWSER SUPPORTED\"); \n           } else { \n             console.log(\"BROWSER NOT SUPPORTED\"); \n           }                  \n           alert(message); \n           var socket = new SockJS('book'); \n           stompClient = Stomp.over(socket); \n           stompClient.connect({}, function(frame) { \n           alert(\"in client\"); \n           setConnected(true); \n           console.log('Connected: ' + frame); \n           stompClient.subscribe('/topic/showOffer',   \n             function(bookResult){ \n             alert(\"subscribing\"); \n            showResult(JSON.parse(bookResult.body).result);}); \n          }); \n        } \n\n```", "```java\n        function disconnect() { \n            stompClient.disconnect(); \n            setConnected(false); \n            console.log(\"Disconnected\"); \n        } \n\n```", "```java\n        function sendBook()  \n        { \n          var bookName =  \n          document.getElementById('bookName').value; \n          stompClient.send(\"/bookApp/book\", {},   \n            JSON.stringify({ 'bookName': bookName })); \n        } \n\n```", "```java\n        function showResult(message) { \n           //similar to country.jsp \n        } \n\n```", "```java\n        @MessageMapping(\"/book\") \n          @SendTo(\"/topic/showOffer\") \n          public Result showOffer(MyBook myBook) throws Exception { \n            Result result = new Result(); \n            result.getOffer(myBook.getBookName()); \n            return result; \n        } \n\n```"]