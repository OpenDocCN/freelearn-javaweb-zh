["```java\nvar otrsApp = AngularJS.module('otrsApp', [ ]) \n// [] contains the reference to other modules \n```", "```java\n<script type=\"text/javascript\" src=\"img/angular.min.js\"></script> \n<script type=\"text/javascript\" src=\"img/app.js\"></script>\n```", "```java\n.controller('otrsAppCtrl', function ($injector) { \nvar log = $injector.get('$log'); \n```", "```java\nRestModule.controller('RestaurantsCtrl', function ($scope, restaurantService) { \n```", "```java\n.filter('datetime1', function ($filter) { \n    return function (argDateTime) { \n        if (argDateTime) { \n            return $filter('date')(new Date(argDateTime), 'dd MMM yyyy HH:mm a'); \n        } \n        return \"\"; \n    }; \n});\n```", "```java\n<div ng-app=\"\"> \n    <p>Search: <input type=\"text\" ng-model=\"searchValue\"></p> \n    <p ng-bind=\"searchedTerm\"></p> \n</div>\n```", "```java\n<!--[if lt IE 7]>      <html lang=\"en\" ng-app=\"otrsApp\" class=\"no-js lt-ie9 lt-ie8 lt-ie7\"> <![endif]--> \n<!--[if IE 7]>         <html lang=\"en\" ng-app=\"otrsApp\" class=\"no-js lt-ie9 lt-ie8\"> <![endif]--> \n<!--[if IE 8]>         <html lang=\"en\" ng-app=\"otrsApp\" class=\"no-js lt-ie9\"> <![endif]--> \n<!--[if gt IE 8]><!--> <html lang=\"en\" ng-app=\"otrsApp\" class=\"no-js\"> <!--<![endif]--> \n```", "```java\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n```", "```java\n<link rel=\"stylesheet\" href=\"bower_components/html5-boilerplate/dist/css/normalize.css\"> \n<link rel=\"stylesheet\" href=\"bower_components/html5-boilerplate/dist/css/main.css\"> \n<link rel=\"stylesheet\" href=\"public/css/app.css\"> \n<link data-require=\"bootstrap-css@*\" data-server=\"3.0.0\" rel=\"stylesheet\" href=\"//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css\" /> \n```", "```java\n<script src=\"img/modernizr-2.8.3.min.js\"></script> \n<script src=\"img/angular.min.js\"></script> \n<script src=\"img/angular-route.min.js\"></script> \n<script src=\"img/app.js\"></script> \n<script data-require=\"ui-bootstrap@0.5.0\" data-semver=\"0.5.0\" src=\"img/ui-bootstrap-tpls-0.6.0.js\"></script> \n```", "```java\n<style> \n    div.navbar-collapse.collapse { \n      display: block; \n      overflow: hidden; \n      max-height: 0px; \n      -webkit-transition: max-height .3s ease; \n      -moz-transition: max-height .3s ease; \n      -o-transition: max-height .3s ease; \n      transition: max-height .3s ease; \n      } \n    div.navbar-collapse.collapse.in { \n      max-height: 2000px; \n      } \n</style> \n```", "```java\n<body ng-controller=\"otrsAppCtrl\"> \n```", "```java\n<!-- BEGIN HEADER --> \n        <nav class=\"navbar navbar-default\" role=\"navigation\"> \n\n            <div class=\"navbar-header\"> \n                <a class=\"navbar-brand\" href=\"#\"> \n                    Online Table Reservation System \n                </a> \n            </div> \n            <div class=\"collapse navbar-collapse\" ng-class=\"!navCollapsed && 'in'\" ng-click=\"navCollapsed = true\"> \n                <form class=\"navbar-form navbar-left\" role=\"search\" ng-submit=\"search()\"> \n                    <div class=\"form-group\"> \n                        <input type=\"text\" id=\"searchedValue\" ng-model=\"searchedValue\" class=\"form-control\" placeholder=\"Search Restaurants\"> \n                    </div> \n                    <button type=\"submit\" class=\"btn btn-default\" ng-click=\"\">Go</button> \n                </form> \n        <!-- END HEADER --> \n```", "```java\n<div class=\"clearfix\"></div> \n    <!-- BEGIN CONTAINER --> \n    <div class=\"page-container container\"> \n        <!-- BEGIN CONTENT --> \n        <div class=\"page-content-wrapper\"> \n            <div class=\"page-content\"> \n                <!-- BEGIN ACTUAL CONTENT --> \n                <div ui-view class=\"fade-in-up\"></div> \n                <!-- END ACTUAL CONTENT --> \n            </div> \n        </div> \n        <!-- END CONTENT --> \n    </div> \n    <!-- loading spinner --> \n    <div id=\"loadingSpinnerId\" ng-show=\"isSpinnerShown()\" style=\"top:0; left:45%; position:absolute; z-index:999\"> \n        <script type=\"text/ng-template\" id=\"alert.html\"> \n            <div class=\"alert alert-warning\" role=\"alert\"> \n            <div ng-transclude></div> \n            </div> \n        </script> \n        <uib-alert type=\"warning\" template-url=\"alert.html\"><b>Loading...</b></uib-alert> \n    </div> \n        <!-- END CONTAINER --> \n```", "```java\n        <!-- BEGIN FOOTER --> \n        <div class=\"page-footer\"> \n            <hr/><div style=\"padding: 0 39%\">&copy; 2016 Online Table Reservation System</div> \n        </div> \n        <!-- END FOOTER --> \n    </body> \n</html> \n```", "```java\n'use strict'; \n/* \nThis call initializes our application and registers all the modules, which are passed as an array in the second argument. \n*/ \nvar otrsApp = angular.module('otrsApp', [ \n    'ui.router', \n    'templates', \n    'ui.bootstrap', \n    'ngStorage', \n    'otrsApp.httperror', \n    'otrsApp.login', \n    'otrsApp.restaurants' \n]) \n/* \n  Then we have defined the default route /restaurants \n*/ \n        .config([ \n            '$stateProvider', '$urlRouterProvider', \n            function ($stateProvider, $urlRouterProvider) { \n                $urlRouterProvider.otherwise('/restaurants'); \n            }]) \n/* \n   This functions controls the flow of the application and handles the events. \n*/ \n        .controller('otrsAppCtrl', function ($scope, $injector, restaurantService) { \n            var controller = this; \n\n            var AjaxHandler = $injector.get('AjaxHandler'); \n            var $rootScope = $injector.get('$rootScope'); \n            var log = $injector.get('$log'); \n            var sessionStorage = $injector.get('$sessionStorage'); \n            $scope.showSpinner = false; \n/* \n   This function gets called when the user searches any restaurant. It uses the Angular restaurant service that we'll define in the next section to search the given search string. \n*/ \n            $scope.search = function () { \n                $scope.restaurantService = restaurantService; \n                restaurantService.async().then(function () { \n                    $scope.restaurants = restaurantService.search($scope.searchedValue); \n                }); \n            } \n/* \n   When the state is changed, the new controller controls the flows based on the view and configuration and the existing controller is destroyed. This function gets a call on the destroy event. \n*/ \n            $scope.$on('$destroy', function destroyed() { \n                log.debug('otrsAppCtrl destroyed'); \n                controller = null; \n                $scope = null; \n            }); \n\n            $rootScope.fromState; \n            $rootScope.fromStateParams; \n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromStateParams) { \n                $rootScope.fromState = fromState; \n                $rootScope.fromStateParams = fromStateParams; \n            }); \n\n            // utility method \n            $scope.isLoggedIn = function () { \n                if (sessionStorage.session) { \n                    return true; \n                } else { \n                    return false; \n                } \n            }; \n\n            /* spinner status */ \n            $scope.isSpinnerShown = function () { \n                return AjaxHandler.getSpinnerStatus(); \n            }; \n\n        }) \n/* \n   This function gets executed when this object loads. Here we are setting the user object which is defined for the root scope. \n*/ \n        .run(['$rootScope', '$injector', '$state', function ($rootScope, $injector, $state) { \n                $rootScope.restaurants = null; \n                // self reference \n                var controller = this; \n                // inject external references \n                var log = $injector.get('$log'); \n                var $sessionStorage = $injector.get('$sessionStorage'); \n                var AjaxHandler = $injector.get('AjaxHandler'); \n\n                if (sessionStorage.currentUser) { \n                    $rootScope.currentUser = $sessionStorage.currentUser; \n                } else { \n                    $rootScope.currentUser = \"Guest\"; \n                    $sessionStorage.currentUser = \"\" \n                } \n            }]) \n```", "```java\nangular.module('otrsApp.restaurants', [ \n    'ui.router', \n    'ui.bootstrap', \n    'ngStorage', \n    'ngResource' \n]) \n```", "```java\n        .config([ \n            '$stateProvider', '$urlRouterProvider', \n            function ($stateProvider, $urlRouterProvider) { \n                $stateProvider.state('restaurants', { \n                    url: '/restaurants', \n                    templateUrl: 'restaurants/restaurants.html', \n                    controller: 'RestaurantsCtrl' \n                }) \n                        // Restaurant show page \n                        .state('restaurants.profile', { \n                            url: '/:id', \n                            views: { \n                                '@': { \n                                    templateUrl: 'restaurants/restaurant.html', \n                                    controller: 'RestaurantCtrl' \n                                } \n                            } \n                        }); \n            }]) \n```", "```java\n        .factory('restaurantService', function ($injector, $q) { \n            var log = $injector.get('$log'); \n            var ajaxHandler = $injector.get('AjaxHandler'); \n            var deffered = $q.defer(); \n            var restaurantService = {}; \n            restaurantService.restaurants = []; \n            restaurantService.orignalRestaurants = []; \n            restaurantService.async = function () { \n                ajaxHandler.startSpinner(); \n                if (restaurantService.restaurants.length === 0) { \n                    ajaxHandler.get('/api/restaurant') \n                            .success(function (data, status, headers, config) { \n                                log.debug('Getting restaurants'); \n                                sessionStorage.apiActive = true; \n                                log.debug(\"if Restaurants --> \" + restaurantService.restaurants.length); \n                                restaurantService.restaurants = data; \n                                ajaxHandler.stopSpinner(); \n                                deffered.resolve(); \n                            }) \n                            .error(function (error, status, headers, config) { \n                                restaurantService.restaurants = mockdata; \n                                ajaxHandler.stopSpinner(); \n                                deffered.resolve(); \n                            }); \n                    return deffered.promise; \n                } else { \n                    deffered.resolve(); \n                    ajaxHandler.stopSpinner(); \n                    return deffered.promise; \n                } \n            }; \n            restaurantService.list = function () { \n                return restaurantService.restaurants; \n            }; \n            restaurantService.add = function () { \n                console.log(\"called add\"); \n                restaurantService.restaurants.push( \n                        { \n                            id: 103, \n                            name: 'Chi Cha\\'s Noodles', \n                            address: '13 W. St., Eastern Park, New County, Paris', \n                        }); \n            }; \n            restaurantService.search = function (searchedValue) { \n                ajaxHandler.startSpinner(); \n                if (!searchedValue) { \n                    if (restaurantService.orignalRestaurants.length > 0) { \n                        restaurantService.restaurants = restaurantService.orignalRestaurants; \n                    } \n                    deffered.resolve(); \n                    ajaxHandler.stopSpinner(); \n                    return deffered.promise; \n                } else { \n                    ajaxHandler.get('/api/restaurant?name=' + searchedValue) \n                            .success(function (data, status, headers, config) { \n                                log.debug('Getting restaurants'); \n                                sessionStorage.apiActive = true; \n                                log.debug(\"if Restaurants --> \" + restaurantService.restaurants.length); \n                                if (restaurantService.orignalRestaurants.length < 1) { \n                                    restaurantService.orignalRestaurants = restaurantService.restaurants; \n                                } \n                                restaurantService.restaurants = data; \n                                ajaxHandler.stopSpinner(); \n                                deffered.resolve(); \n                            }) \n                            .error(function (error, status, headers, config) { \n                                if (restaurantService.orignalRestaurants.length < 1) { \n                                    restaurantService.orignalRestaurants = restaurantService.restaurants; \n                                } \n                                restaurantService.restaurants = []; \n                                restaurantService.restaurants.push( \n                                        { \n                                            id: 104, \n                                            name: 'Gibsons - Chicago Rush St.', \n                                            address: '1028 N. Rush St., Rush & Division, Cook County, Paris' \n                                        }); \n                                restaurantService.restaurants.push( \n                                        { \n                                            id: 105, \n                                            name: 'Harry Caray\\'s Italian Steakhouse', \n                                            address: '33 W. Kinzie St., River North, Cook County, Paris', \n                                        }); \n                                ajaxHandler.stopSpinner(); \n                                deffered.resolve(); \n                            }); \n                    return deffered.promise; \n                } \n            }; \n            return restaurantService; \n        }) \n```", "```java\n        .controller('RestaurantsCtrl', function ($scope, restaurantService) { \n            $scope.restaurantService = restaurantService; \n            restaurantService.async().then(function () { \n                $scope.restaurants = restaurantService.list(); \n            }); \n        }) \n```", "```java\n        .controller('RestaurantCtrl', function ($scope, $state, $stateParams, $injector, restaurantService) { \n            var $sessionStorage = $injector.get('$sessionStorage'); \n            $scope.format = 'dd MMMM yyyy'; \n            $scope.today = $scope.dt = new Date(); \n            $scope.dateOptions = { \n                formatYear: 'yy', \n                maxDate: new Date().setDate($scope.today.getDate() + 180), \n                minDate: $scope.today.getDate(), \n                startingDay: 1 \n            }; \n\n            $scope.popup1 = { \n                opened: false \n            }; \n            $scope.altInputFormats = ['M!/d!/yyyy']; \n            $scope.open1 = function () { \n                $scope.popup1.opened = true; \n            }; \n            $scope.hstep = 1; \n            $scope.mstep = 30; \n\n            if ($sessionStorage.reservationData) { \n                $scope.restaurant = $sessionStorage.reservationData.restaurant; \n                $scope.dt = new Date($sessionStorage.reservationData.tm); \n                $scope.tm = $scope.dt; \n            } else { \n                $scope.dt.setDate($scope.today.getDate() + 1); \n                $scope.tm = $scope.dt; \n                $scope.tm.setHours(19); \n                $scope.tm.setMinutes(30); \n                restaurantService.async().then(function () { \n                    angular.forEach(restaurantService.list(), function (value, key) { \n                        if (value.id === parseInt($stateParams.id)) { \n                            $scope.restaurant = value; \n                        } \n                    }); \n                }); \n            } \n            $scope.book = function () { \n                var tempHour = $scope.tm.getHours(); \n                var tempMinute = $scope.tm.getMinutes(); \n                $scope.tm = $scope.dt; \n                $scope.tm.setHours(tempHour); \n                $scope.tm.setMinutes(tempMinute); \n                if ($sessionStorage.currentUser) { \n                    console.log(\"$scope.tm --> \" + $scope.tm); \n                    alert(\"Booking Confirmed!!!\"); \n                    $sessionStorage.reservationData = null; \n                    $state.go(\"restaurants\"); \n                } else { \n                    $sessionStorage.reservationData = {}; \n                    $sessionStorage.reservationData.restaurant = $scope.restaurant; \n                    $sessionStorage.reservationData.tm = $scope.tm; \n                    $state.go(\"login\"); \n                } \n            } \n        }) \n```", "```java\n        .filter('date1', function ($filter) { \n            return function (argDate) { \n                if (argDate) { \n                    var d = $filter('date')(new Date(argDate), 'dd MMM yyyy'); \n                    return d.toString(); \n                } \n                return \"\"; \n            }; \n        }) \n        .filter('time1', function ($filter) { \n            return function (argTime) { \n                if (argTime) { \n                    return $filter('date')(new Date(argTime), 'HH:mm:ss'); \n                } \n                return \"\"; \n            }; \n        }) \n        .filter('datetime1', function ($filter) { \n            return function (argDateTime) { \n                if (argDateTime) { \n                    return $filter('date')(new Date(argDateTime), 'dd MMM yyyy HH:mm a'); \n                } \n                return \"\"; \n            }; \n        }); \n```", "```java\n<h3>Famous Gourmet Restaurants in Paris</h3> \n<div class=\"row\"> \n    <div class=\"col-md-12\"> \n        <table class=\"table table-bordered table-striped\"> \n            <thead> \n                <tr> \n                    <th>#Id</th> \n                    <th>Name</th> \n                    <th>Address</th> \n                </tr> \n            </thead> \n            <tbody> \n                <tr ng-repeat=\"rest in restaurantService.restaurants\"> \n                    <td>{{rest.id}}</td> \n                    <td><a ui-sref=\"restaurants.profile({id: rest.id})\">{{rest.name}}</a></td> \n                    <td>{{rest.address}}</td> \n                </tr> \n            </tbody> \n        </table> \n    </div> \n</div> \n```", "```java\n<div class=\"row\"> \n<div class=\"row\"> \n    <div class=\"col-md-12\"> \n        <ol class=\"breadcrumb\"> \n            <li><a ui-sref=\"restaurants\">Restaurants</a></li> \n            <li class=\"active\">{{restaurant.name}}</li> \n        </ol> \n        <div class=\"bs-docs-section\"> \n            <h1 class=\"page-header\">{{restaurant.name}}</h1> \n            <div> \n                <strong>Address:</strong> {{restaurant.address}} \n            </div> \n            </br></br> \n            <form ng-submit=\"book()\"> \n                <div class=\"input-append date form_datetime\"> \n                    <div class=\"row\"> \n                        <div class=\"col-md-7\"> \n                            <p class=\"input-group\"> \n                                <span style=\"display: table-cell; vertical-align: middle; font-weight: bolder; font-size: 1.2em\">Select Date & Time for Booking:</span> \n                                <span style=\"display: table-cell; vertical-align: middle\"> \n                                    <input type=\"text\" size=20 class=\"form-control\" uib-datepicker-popup=\"{{format}}\" ng-model=\"dt\" is-open=\"popup1.opened\" datepicker-options=\"dateOptions\" ng-required=\"true\" close-text=\"Close\" alt-input-formats=\"altInputFormats\" /> \n                                </span> \n                                <span class=\"input-group-btn\"> \n                                    <button type=\"button\" class=\"btn btn-default\" ng-click=\"open1()\"><i class=\"glyphicon glyphicon-calendar\"></i></button> \n                                </span> \n                            <uib-timepicker ng-model=\"tm\" ng-change=\"changed()\" hour-step=\"hstep\" minute-step=\"mstep\"></uib-timepicker> \n                            </p> \n                        </div> \n                    </div></div> \n                <div class=\"form-group\"> \n                    <button class=\"btn btn-primary\" type=\"submit\">Reserve</button> \n                </div> \n            </form></br></br> \n        </div> \n    </div> \n</div> \n```", "```java\n<div ng-controller=\"LoginCtrl as loginC\" style=\"max-width: 300px\"> \n    <h3>Login</h3> \n    <div class=\"form-container\"> \n        <form ng-submit=\"loginC.submit(_email, _password)\"> \n            <div class=\"form-group\"> \n                <label for=\"username\" class=\"sr-only\">Username</label> \n                <input type=\"text\" id=\"username\" class=\"form-control\" placeholder=\"username\" ng-model=\"_email\" required autofocus /> \n            </div> \n            <div class=\"form-group\"> \n                <label for=\"password\" class=\"sr-only\">Password</label> \n                <input type=\"password\" id=\"password\" class=\"form-control\" placeholder=\"password\" ng-model=\"_password\" /> \n            </div> \n            <div class=\"form-group\"> \n                <button class=\"btn btn-primary\" type=\"submit\">Login</button> \n                <button class=\"btn btn-link\" ng-click=\"loginC.cancel()\">Cancel</button> \n            </div> \n        </form> \n    </div> \n</div> \n```", "```java\nangular.module('otrsApp.login', [ \n    'ui.router', \n    'ngStorage' \n]) \n        .config(function config($stateProvider) { \n            $stateProvider.state('login', { \n                url: '/login', \n                controller: 'LoginCtrl', \n                templateUrl: 'login/login.html' \n            }); \n        }) \n        .controller('LoginCtrl', function ($state, $scope, $rootScope, $injector) { \n            var $sessionStorage = $injector.get('$sessionStorage'); \n            if ($sessionStorage.currentUser) { \n                $state.go($rootScope.fromState.name, $rootScope.fromStateParams); \n            } \n            var controller = this; \n            var log = $injector.get('$log'); \n            var http = $injector.get('$http'); \n\n            $scope.$on('$destroy', function destroyed() { \n                log.debug('LoginCtrl destroyed'); \n                controller = null; \n                $scope = null; \n            }); \n            this.cancel = function () { \n                $scope.$dismiss; \n                $state.go('restaurants'); \n            } \n            console.log(\"Current --> \" + $state.current); \n            this.submit = function (username, password) { \n                $rootScope.currentUser = username; \n                $sessionStorage.currentUser = username; \n                if ($rootScope.fromState.name) { \n                    $state.go($rootScope.fromState.name, $rootScope.fromStateParams); \n                } else { \n                    $state.go(\"restaurants\"); \n                } \n            }; \n        });\n```", "```java\n{ \n  \"name\": \"otrs-ui\", \n  \"private\": true, \n  \"version\": \"1.0.0\", \n  \"description\": \"Online Table Reservation System\", \n  \"main\": \"index.js\", \n  \"license\": \"MIT\", \n  \"dependencies\": { \n    \"coffee-script\": \"^1.10.0\", \n    \"del\": \"^1.1.1\", \n    \"gulp-angular-templatecache\": \"^1.9.1\", \n    \"gulp-clean\": \"^0.3.2\", \n    \"gulp-connect\": \"^3.2.3\", \n    \"gulp-file-include\": \"^0.13.7\", \n    \"gulp-sass\": \"^2.3.2\", \n    \"gulp-util\": \"^3.0.8\", \n    \"run-sequence\": \"^1.2.2\" \n  }, \n  \"devDependencies\": { \n    \"coffee-script\": \"*\", \n    \"gulp-sass\": \"*\", \n    \"bower\": \"^1.3.1\", \n    \"http-server\": \"^0.6.1\", \n    \"jasmine-core\": \"^2.3.4\", \n    \"karma\": \"~0.12\", \n    \"karma-chrome-launcher\": \"^0.1.12\", \n    \"karma-firefox-launcher\": \"^0.1.6\", \n    \"karma-jasmine\": \"^0.3.5\", \n    \"karma-junit-reporter\": \"^0.2.2\", \n    \"protractor\": \"^2.1.0\", \n    \"shelljs\": \"^0.2.6\" \n  }, \n  \"scripts\": { \n    \"postinstall\": \"bower install\", \n    \"prestart\": \"npm install\", \n    \"start\": \"http-server -a localhost -p 8000 -c-1\", \n    \"pretest\": \"npm install\", \n    \"test\": \"karma start karma.conf.js\", \n    \"test-single-run\": \"karma start karma.conf.js  --single-run\", \n    \"preupdate-webdriver\": \"npm install\", \n    \"update-webdriver\": \"webdriver-manager update\", \n    \"preprotractor\": \"npm run update-webdriver\", \n    \"protractor\": \"protractor e2e-tests/protractor.conf.js\", \n    \"update-index-async\": \"node -e \\\"require('shelljs/global'); sed('-i', /\\\\/\\\\/@@NG_LOADER_START@@[\\\\s\\\\S]*\\\\/\\\\/@@NG_LOADER_END@@/, '//@@NG_LOADER_START@@\\\\n' + sed(/sourceMappingURL=angular-loader.min.js.map/,'sourceMappingURL=bower_components/angular-loader/angular-loader.min.js.map','app/bower_components/angular-loader/angular-loader.min.js') + '\\\\n//@@NG_LOADER_END@@', 'app/index-async.html');\\\"\" \n  } \n\n}\n```", "```java\n{ \n    \"name\": \"OTRS-UI\", \n    \"description\": \"OTRS-UI\", \n    \"version\": \"0.0.1\", \n    \"license\": \"MIT\", \n    \"private\": true, \n    \"dependencies\": { \n        \"AngularJS\": \"~1.5.0\", \n        \"AngularJS-ui-router\": \"~0.2.18\", \n        \"AngularJS-mocks\": \"~1.5.0\", \n        \"AngularJS-bootstrap\": \"~1.2.1\", \n        \"AngularJS-touch\": \"~1.5.0\", \n        \"bootstrap-sass-official\": \"~3.3.6\", \n        \"AngularJS-route\": \"~1.5.0\", \n        \"AngularJS-loader\": \"~1.5.0\", \n        \"ngstorage\": \"^0.3.10\", \n        \"AngularJS-resource\": \"^1.5.0\", \n        \"html5-boilerplate\": \"~5.2.0\" \n    } \n} \n```", "```java\n{ \n  \"directory\": \"app/bower_components\" \n} \n```", "```java\nrequire('coffee-script/register'); \nrequire('./gulpfile.coffee'); \n```", "```java\ndefault_sequence = ['connect', 'build', 'watch']\n```", "```java\ngulp          = require('gulp') \ngutil         = require('gulp-util') \ndel           = require('del'); \nclean         = require('gulp-clean') \nconnect       = require('gulp-connect') \nfileinclude   = require('gulp-file-include') \nrunSequence   = require('run-sequence') \ntemplateCache = require('gulp-AngularJS-templatecache') \nsass          = require('gulp-sass') \n\npaths = \n  scripts: \n    src: ['app/src/scripts/**/*.js'] \n    dest: 'public/scripts' \n  scripts2: \n    src: ['app/src/views/**/*.js'] \n    dest: 'public/scripts' \n  styles: \n    src: ['app/src/styles/**/*.scss'] \n    dest: 'public/styles' \n  fonts: \n    src: ['app/src/fonts/**/*'] \n    dest: 'public/fonts' \n  images: \n    src: ['app/src/images/**/*'] \n    dest: 'public/images' \n  templates: \n    src: ['app/src/views/**/*.html'] \n    dest: 'public/scripts' \n  html: \n    src: ['app/src/*.html'] \n    dest: 'public' \n  bower: \n    src: ['app/bower_components/**/*'] \n    dest: 'public/bower_components' \n\n#copy bower modules to public directory \ngulp.task 'bower', -> \n  gulp.src(paths.bower.src) \n  .pipe gulp.dest(paths.bower.dest) \n  .pipe connect.reload() \n\n#copy scripts to public directory \ngulp.task 'scripts', -> \n  gulp.src(paths.scripts.src) \n  .pipe gulp.dest(paths.scripts.dest) \n  .pipe connect.reload() \n\n#copy scripts2 to public directory \ngulp.task 'scripts2', -> \n  gulp.src(paths.scripts2.src) \n  .pipe gulp.dest(paths.scripts2.dest) \n  .pipe connect.reload() \n\n#copy styles to public directory \ngulp.task 'styles', -> \n  gulp.src(paths.styles.src) \n  .pipe sass() \n  .pipe gulp.dest(paths.styles.dest) \n  .pipe connect.reload() \n\n#copy images to public directory \ngulp.task 'images', -> \n  gulp.src(paths.images.src) \n  .pipe gulp.dest(paths.images.dest) \n  .pipe connect.reload() \n\n#copy fonts to public directory \ngulp.task 'fonts', -> \n  gulp.src(paths.fonts.src) \n  .pipe gulp.dest(paths.fonts.dest) \n  .pipe connect.reload() \n\n#copy html to public directory \ngulp.task 'html', -> \n  gulp.src(paths.html.src) \n  .pipe gulp.dest(paths.html.dest) \n  .pipe connect.reload() \n\n#compile AngularJS template in a single js file \ngulp.task 'templates', -> \n  gulp.src(paths.templates.src) \n  .pipe(templateCache({standalone: true})) \n  .pipe(gulp.dest(paths.templates.dest)) \n\n#delete contents from public directory \ngulp.task 'clean', (callback) -> \n  del ['./public/**/*'], callback; \n\n#Gulp Connect task, deploys the public directory \ngulp.task 'connect', -> \n  connect.server \n    root: ['./public'] \n    port: 1337 \n    livereload: true \n\ngulp.task 'watch', -> \n  gulp.watch paths.scripts.src, ['scripts'] \n  gulp.watch paths.scripts2.src, ['scripts2'] \n  gulp.watch paths.styles.src, ['styles'] \n  gulp.watch paths.fonts.src, ['fonts'] \n  gulp.watch paths.html.src, ['html'] \n  gulp.watch paths.images.src, ['images'] \n  gulp.watch paths.templates.src, ['templates'] \n\ngulp.task 'build', ['bower', 'scripts', 'scripts2', 'styles', 'fonts', 'images', 'templates', 'html'] \n\ndefault_sequence = ['connect', 'build', 'watch'] \n\ngulp.task 'default', default_sequence \n\ngutil.log 'Server started and waiting for changes' \n```", "```java\nnpm install --no-optional gulp\n```", "```java\nnpm install --global --production windows-build-tools \n```", "```java\nnpm install --save --no-optional gulp-util gulp-clean gulp-connect gulp-file-include run-sequence gulp-angular-templatecache gulp-sass del coffee-script\n```", "```java\nbower install --s\n```", "```java\nnpm install -g bower\n```", "```java\n+---app \n|   +---bower_components \n|   |   +---AngularJS \n|   |   +---AngularJS-bootstrap \n|   |   +---AngularJS-loader \n|   |   +---AngularJS-mocks \n|   |   +---AngularJS-resource \n|   |   +---AngularJS-route \n|   |   +---AngularJS-touch \n|   |   +---AngularJS-ui-router \n|   |   +---bootstrap-sass-official \n|   |   +---html5-boilerplate \n|   |   +---jquery \n|   |   \\---ngstorage \n|   +---components \n|   |   \\---version \n|   +---node_modules \n|   +---public \n|   |   \\---css \n|   \\---src \n|       +---scripts \n|       +---styles \n|       +---views \n+---e2e-tests \n+---nbproject \n|   \\---private \n+---node_modules \n+---public \n|   +---bower_components \n|   +---scripts \n|   +---styles \n\\---test\n```"]