["```java\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.5.7.RELEASE</version>\n</parent>\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n```", "```java\nplugins {\n    id 'org.springframework.boot' version '1.5.7.RELEASE'\n}\ndependencies {\n    compile(\"org.springframework.boot:spring-boot-starter-web:1.5.7.RELEASE\")\n}\n```", "```java\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-dependencies</artifactId>\n            <version>1.5.7.RELEASE</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```", "```java\n@SpringBootApplication\npublic class Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n\n}\n```", "```java\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n        </plugin>\n    </plugins>\n</build>\n```", "```java\n<properties>\n    <java.version>1.8</java.version>\n</properties>\n```", "```java\n <dependency>\n     <groupId>org.springframework.boot</groupId>\n     <artifactId>spring-boot-starter-jetty</artifactId>\n </dependency>  \n```", "```java\njava -jar sample-spring-boot-web.jar --spring.config.name=example\njava -jar sample-spring-boot-web.jar --spring.config.location=classpath:/example.properties\n```", "```java\nserver: \n    port: ${port:2222}\n\nspring: \n    application:\n        name: first-service\n\nlogging:\n    pattern:\n        console: \"%d{HH:mm:ss.SSS} %-5level %logger{36} - %msg%n\"\n        file: \"%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\"\n    level:\n        org.springframework.web: DEBUG\n    file: app.log\n```", "```java\nname: first-service\nmy:\n  servers:\n    - dev.bar.com\n    - foo.bar.com  \n```", "```java\n@Component\npublic class CustomBean {\n\n    @Value(\"${name}\")\n    private String name;\n\n    // ...\n}\n```", "```java\n@ConfigurationProperties(prefix=\"my\")\npublic class Config {\n\n    private List<String> servers = new ArrayList<String>();\n\n    public List<String> getServers() {\n        return this.servers;\n    }\n}\n```", "```java\npublic class Person {\n\n    private Long id;\n    private String firstName;\n    private String lastName;\n    private int age;\n    private Gender gender;\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    //...\n}\n```", "```java\n@RestController\n@RequestMapping(\"/person\")\npublic class PersonController {\n\n    private List<Person> persons = new ArrayList<>(); \n\n    @GetMapping\n    public List<Person> findAll() {\n         return persons;\n     }\n\n    @GetMapping(\"/{id}\")\n    public Person findById(@RequestParam(\"id\") Long id) {\n        return persons.stream().filter(it -> it.getId().equals(id)).findFirst().get();\n    }\n\n    @PostMapping\n    public Person add(@RequestBody Person p) {\n        p.setId((long) (persons.size()+1));\n        persons.add(p);\n        return p;\n    }\n\n    // ...\n}\n```", "```java\n@DeleteMapping(\"/{id}\")\npublic void delete(@RequestParam(\"id\") Long id) {\n    List<Person> p = persons.stream().filter(it -> it.getId().equals(id)).collect(Collectors.toList());\n    persons.removeAll(p);\n}\n\n@PutMapping\npublic void update(@RequestBody Person p) {\n    Person person = persons.stream().filter(it -> it.getId().equals(p.getId())).findFirst().get();\n    persons.set(persons.indexOf(person), p);\n}\n```", "```java\n<dependency>\n    <groupId>io.springfox</groupId>\n    <artifactId>springfox-swagger2</artifactId>\n    <version>2.7.0</version>\n</dependency>\n<dependency>\n    <groupId>io.springfox</groupId>\n    <artifactId>springfox-swagger-ui</artifactId>\n    <version>2.7.0</version>\n</dependency>\n```", "```java\n  @Bean\n  public Docket api() throws IOException, XmlPullParserException {\n    MavenXpp3Reader reader = new MavenXpp3Reader();\n    Model model = reader.read(new FileReader(\"pom.xml\"));\n    ApiInfoBuilder builder = new ApiInfoBuilder()\n        .title(\"Person Service Api Documentation\")\n        .description(\"Documentation automatically generated\")\n        .version(model.getVersion())\n        .contact(new Contact(\"Piotr Mi≈Ñkowski\", \"piotrminkowski.wordpress.com\", \"piotr.minkowski@gmail.com\"));\n    return new Docket(DocumentationType.SWAGGER_2).select()\n        .apis(RequestHandlerSelectors.basePackage(\"pl.piomin.services.boot.controller\"))\n        .paths(PathSelectors.any()).build()\n        .apiInfo(builder.build());\n  }\n```", "```java\nmanagement:\n  security:\n    enabled: false\n```", "```java\n<plugin>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-maven-plugin</artifactId>\n    <executions>\n        <execution>\n            <goals>\n                <goal>build-info</goal>\n                <goal>repackage</goal>\n            </goals>\n            <configuration>\n                <additionalProperties>\n                    <java.target>${maven.compiler.target}</java.target>\n                    <time>${maven.build.timestamp}</time>\n                </additionalProperties>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>\n<plugin>\n    <groupId>pl.project13.maven</groupId>\n    <artifactId>git-commit-id-plugin</artifactId>\n    <configuration>\n    <failOnNoGitDirectory>false</failOnNoGitDirectory>\n    </configuration>\n</plugin>\n```", "```java\n{ \n    \"build\": {\n        \"version\":\"1.0-SNAPSHOT\",\n        \"java\": {\n            \"target\":\"1.8\"\n        },\n        \"artifact\":\"sample-spring-boot-web\",\n        \"name\":\"sample-spring-boot-web\",\n        \"group\":\"pl.piomin.services\",\n        \"time\":\"2017-10-04T10:23:22Z\"\n    }\n}\n```", "```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-mongodb</artifactId>\n</dependency>\n<dependency>\n    <groupId>de.flapdoodle.embed</groupId>\n    <artifactId>de.flapdoodle.embed.mongo</artifactId>\n</dependency>\n```", "```java\n{\n \"status\":\"UP\",\n \"diskSpace\":{\n \"status\":\"UP\",\n \"total\":499808989184,\n \"free\":193956904960,\n \"threshold\":10485760\n },\n \"mongo\":{\n \"status\":\"UP\",\n \"version\":\"3.2.2\"\n }\n} \n```", "```java\n{\n \"mem\":325484,\n \"mem.free\":121745,\n \"processors\":4,\n \"instance.uptime\":765785,\n \"uptime\":775049,\n \"heap.committed\":260608,\n \"heap.init\":131072,\n \"heap.used\":138862,\n \"heap\":1846272,\n \"nonheap.committed\":75264,\n \"nonheap.init\":2496,\n \"nonheap.used\":64876,\n \"threads.peak\":28,\n \"threads.totalStarted\":33,\n \"threads\":28,\n \"classes\":9535,\n \"classes.loaded\":9535,\n \"gauge.response.person\":7.0,\n \"counter.status.200.person\":4,\n // ...\n} \n```", "```java\n@Service\npublic class PersonCounterService {\n    private final CounterService counterService;\n\n    @Autowired\n    public PersonCounterService(CounterService counterService) {\n        this.counterService = counterService;\n    }\n\n    public void countNewPersons() {\n        this.counterService.increment(\"services.person.add\");\n    }\n\n    public void countDeletedPersons() {\n        this.counterService.increment(\"services.person.deleted\");\n    } \n}\n```", "```java\npublic class PersonController {\n\n    @Autowired\n    PersonCounterService counterService;\n\n    // ...\n\n    @PostMapping\n    public Person add(@RequestBody Person p) {\n        p.setId((long) (persons.size()+1));\n        persons.add(p);\n        counterService.countNewPersons();\n        return p;\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public void delete(@RequestParam(\"id\") Long id) {\n        List<Person> p = persons.stream().filter(it -> it.getId().equals(id)).collect(Collectors.toList());\n        persons.removeAll(p);\n        counterService.countDeletedPersons();\n    } \n}\n```", "```java\n{\n    // ...\n    \"counter.services.person.add\":4,\n    \"counter.services.person.deleted\":3\n}\n```", "```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-devtools</artifactId>\n    <optional>true</optional>\n</dependency>\n```", "```java\nspring:\n devtools:\n   restart:\n     exclude: static/**\n```", "```java\n@Document(collection = \"person\")\npublic class Person {\n\n    @Id\n    private String id;\n    private String firstName;\n    private String lastName;\n    private int age;\n    private Gender gender;\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n    // ...\n}\n```", "```java\npublic interface PersonRepository extends MongoRepository<Person, String> {\n\n    public List<Person> findByLastName(String lastName);\n    public List<Person> findByAgeGreaterThan(int age);\n\n}\n```", "```java\n@Autowired\nprivate PersonRepository repository;\n@Autowired\nprivate PersonCounterService counterService; \n\n@GetMapping\npublic List<Person> findAll() {\n    return repository.findAll();\n} \n\n@GetMapping(\"/{id}\")\npublic Person findById(@RequestParam(\"id\") String id) {\n    return repository.findOne(id);\n}\n\n@PostMapping\npublic Person add(@RequestBody Person p) {\n    p = repository.save(p);\n    counterService.countNewPersons();\n    return p;\n}\n\n@DeleteMapping(\"/{id}\")\npublic void delete(@RequestParam(\"id\") String id) {\n    repository.delete(id);\n    counterService.countDeletedPersons();\n}\n```", "```java\n@GetMapping(\"/lastname/{lastName}\")\npublic List<Person> findByLastName(@RequestParam(\"lastName\") String lastName) {\n    return repository.findByLastName(lastName);\n}\n\n@GetMapping(\"/age/{age}\")\npublic List<Person> findByAgeGreaterThan(@RequestParam(\"age\") int age) {\n    return repository.findByAgeGreaterThan(age);\n} \n```", "```java\ndocker run -d --name mongo -p 27017:27017 mongo\n```", "```java\nserver: \n  port: ${port:2222}\nspring: \n  application:\n  name: first-service\n\n// ...\n\n---\n\nspring:\n  profiles: production\n  application:\n    name: first-service\n  data:\n    mongodb:\n      host: 192.168.99.100\n      port: 27017\n      database: microservices\n      username: micro \n      password: micro\n```", "```java\njava -jar -Dspring.profiles.active=production sample-spring-boot-web-1.0-SNAPSHOT.jar\n```", "```java\nspring:\n  profiles: production\n  // ...\n  autoconfigure:\n    exclude: org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration\n```", "```java\n@Configuration\n@Profile(\"production\")\n@EnableAutoConfiguration(exclude = EmbeddedMongoAutoConfiguration.class)\npublic class ApplicationConfig {\n    // ...\n}\n```", "```java\npl\n  +- piomin\n    +- services\n      +- boot\n        +- Application.java\n        |\n        +- controller\n        |  +- PersonController.java\n        |\n        +- data\n        |  +- PersonRepository.java\n        |\n        +- model\n        |  +- Person.java\n        |  +- Gender.java\n        |\n        +- service\n        |  +- PersonCounterService.java\n```"]