["```java\n{\"namespace\": \"com.packtpub.mmj.booking.domain.valueobject.avro\", \n \"type\": \"record\", \n \"name\": \"BookingOrder\", \n \"fields\": [ \n     {\"name\": \"id\", \"type\": \"string\"}, \n     {\"name\": \"name\", \"type\": \"string\", \"default\": \"\"}, \n     {\"name\": \"userId\", \"type\": \"string\", \"default\": \"\"}, \n     {\"name\": \"restaurantId\", \"type\": \"string\", \"default\": \"\"}, \n     {\"name\": \"tableId\", \"type\": \"string\", \"default\": \"\"}, \n     {\"name\": \"date\", \"type\": [\"null\", \"string\"], \"default\": null}, \n     {\"name\": \"time\", \"type\": [\"null\", \"string\"], \"default\": null} \n ] \n}  \n```", "```java\n<plugin> \n    <groupId>org.apache.avro</groupId> \n    <artifactId>avro-maven-plugin</artifactId> \n    <version>1.8.2</version> \n    <executions> \n        <execution> \n            <phase>generate-sources</phase> \n            <goals> \n                <goal>schema</goal> \n            </goals> \n            <configuration> \n               <sourceDirectory>${project.basedir}/src/main/resources/avro/</sourceDirectory> \n               <outputDirectory>${project.basedir}/src/main/java/</outputDirectory> \n            </configuration> \n        </execution> \n    </executions> \n</plugin> \n```", "```java\n... \n<dependency> \n    <groupId>org.apache.avro</groupId> \n    <artifactId>avro</artifactId> \n    <version>1.8.2</version> \n</dependency> \n<dependency> \n    <groupId>org.springframework.cloud</groupId> \n    <artifactId>spring-cloud-stream</artifactId> \n    <version>2.0.0.M1</version> \n</dependency> \n<dependency> \n    <groupId>org.springframework.cloud</groupId> \n    <artifactId>spring-cloud-starter-stream-kafka</artifactId> \n</dependency> \n<dependency> \n    <groupId>org.apache.kafka</groupId> \n    <artifactId>kafka-clients</artifactId> \n    <version>0.11.0.1</version> \n</dependency> \n<dependency> \n    <groupId>org.springframework.cloud</groupId> \n    <artifactId>spring-cloud-stream-schema</artifactId> \n</dependency> \n... \n```", "```java\npackage com.packtpub.mmj.booking.domain.message; \n\nimport org.springframework.cloud.stream.annotation.Output; \nimport org.springframework.messaging.MessageChannel; \n\npublic interface BookingMessageChannels { \n\n    public final static String BOOKING_ORDER_OUTPUT = \"bookingOrderOutput\"; \n\n    @Output(BOOKING_ORDER_OUTPUT) \n    MessageChannel bookingOrderOutput(); \n} \n```", "```java\nspring: \n  cloud: \n    stream: \n        bindings: \n            bookingOrderOutput: \n                destination: amp.bookingOrdered \n```", "```java\n... \n@Bean \npublic MessageConverter bookingOrderMessageConverter() throws IOException { \n    LOG.info(\"avro message converter bean initialized.\"); \n    AvroSchemaMessageConverter avroSchemaMessageConverter = new AvroSchemaMessageConverter(MimeType.valueOf(\"application/bookingOrder.v1+avro\")); \n    avroSchemaMessageConverter.setSchemaLocation(new ClassPathResource(\"avro/bookingOrder.avsc\")); \n    return avroSchemaMessageConverter; \n} \n... \n```", "```java\nspring: \n  cloud: \n    stream: \n        kafka: \n            binder: \n                zkNodes: localhost \n            binder: \n                brokers: localhost \n```", "```java\n... \n@EnableBinding(BookingMessageChannels.class) \npublic class BookingServiceImpl extends BaseService<Booking, String> \n        implements BookingService { \n... \n... \nprivate BookingMessageChannels bookingMessageChannels; \n\n@Autowired \npublic void setBookingMessageChannels(BookingMessageChannels bookingMessageChannels) { \n    this.bookingMessageChannels = bookingMessageChannels; \n} \n\n@Override \npublic void add(Booking booking) throws Exception { \n    ... \n    ... \n    super.add(booking); \n    produceBookingOrderEvent(booking); \n} \n... \n...     \n@Override \npublic void produceBookingOrderEvent(Booking booking) throws Exception { \n    final BookingOrder.Builder boBuilder = BookingOrder.newBuilder(); \n    boBuilder.setId(booking.getId()); \n    boBuilder.setName(booking.getName()); \n    boBuilder.setRestaurantId(booking.getRestaurantId()); \n    boBuilder.setTableId(booking.getTableId()); \n    boBuilder.setUserId(booking.getUserId()); \n    boBuilder.setDate(booking.getDate().toString()); \n    boBuilder.setTime(booking.getTime().toString()); \n    BookingOrder bo = boBuilder.build(); \n    final Message<BookingOrder> message = MessageBuilder.withPayload(bo).build(); \n    bookingMessageChannels.bookingOrderOutput().send(message); \n    LOG.info(\"sending bookingOrder: {}\", booking); \n} \n... \n```", "```java\njava -jar booking-service/target/booking-service.jar\n```", "```java\n{ \n                \"id\": \"999999999999\",  \n                \"name\": \"Test Booking 888\",  \n                \"userId\": \"3\",  \n                \"restaurantId\": \"1\",  \n                \"tableId\": \"1\",  \n                \"date\": \"2017-10-02\",  \n                \"time\": \"20:20:20.963543300\" \n} \n\n```", "```java\n2017-10-02 20:22:17.538  INFO 4940 --- [nio-7052-exec-1] c.p.m.b.d.service.BookingServiceImpl     : sending bookingOrder: {id: 999999999999, name: Test Booking 888, userId: 3, restaurantId: 1, tableId: 1, date: 2017-10-02, time: 20:20:20.963543300} \n```", "```java\n[2017-10-02 20:22:17,646] INFO Updated PartitionLeaderEpoch. New: {epoch:0, offset:0}, Current: {epoch:-1, offset-1} for Partition: amp.bookingOrdered-0\\. Cache now contains 0 entries. (kafka.server.epoch.LeaderEpochFileCache) \n\n```", "```java\n... \n... \n<dependency> \n    <groupId>org.apache.avro</groupId> \n    <artifactId>avro</artifactId> \n    <version>1.8.2</version> \n</dependency> \n<dependency> \n    <groupId>org.springframework.cloud</groupId> \n    <artifactId>spring-cloud-stream</artifactId> \n    <version>2.0.0.M1</version> \n</dependency> \n<dependency> \n    <groupId>org.springframework.cloud</groupId> \n    <artifactId>spring-cloud-starter-stream-kafka</artifactId> \n</dependency> \n<dependency> \n    <groupId>org.apache.kafka</groupId> \n    <artifactId>kafka-clients</artifactId> \n    <version>0.11.0.1</version> \n</dependency> \n<dependency> \n    <groupId>org.springframework.cloud</groupId> \n    <artifactId>spring-cloud-stream-schema</artifactId> \n</dependency> \n... \n... \n```", "```java\npackage com.packtpub.mmj.billing.domain.message; \n\nimport org.springframework.cloud.stream.annotation.Input; \nimport org.springframework.messaging.MessageChannel; \n\npublic interface BillingMessageChannels { \n\n    public final static String BOOKING_ORDER_INPUT = \"bookingOrderInput\"; \n\n    @Input(BOOKING_ORDER_INPUT) \n    MessageChannel bookingOrderInput(); \n} \n```", "```java\n spring: \n  ... \n  ... \n  cloud: \n    stream: \n        bindings: \n            bookingOrderInput: \n                destination: amp.bookingOrdered \n                consumer: \n                    resetOffsets: true \n                group: \n                    ${bookingConsumerGroup} \nbookingConsumerGroup: \"booking-service\" \n```", "```java\n        kafka: \n            binder:                \n                zkNodes: localhost \n            binder: \n                brokers: localhost \n```", "```java\npackage com.packtpub.mmj.billing.domain.message; \n\nimport com.packtpub.mmj.billing.domain.service.TweetMapper; \nimport com.packtpub.mmj.billing.domain.service.TweetReceiver; \nimport com.packtpub.mmj.billing.domain.service.WebSocketTweetReceiver; \nimport com.packtpub.mmj.billing.domain.valueobject.TweetInput; \nimport com.packtpub.mmj.booking.domain.valueobject.avro.BookingOrder; \nimport com.packtpub.mmj.booking.domain.valueobject.avro.TweetDto; \nimport org.slf4j.Logger; \nimport org.slf4j.LoggerFactory; \nimport org.springframework.beans.factory.annotation.Autowired; \nimport org.springframework.cloud.stream.annotation.StreamListener; \n\npublic class EventListener { \n\n    private static final Logger LOG = LoggerFactory.getLogger(WebSocketTweetReceiver.class); \n\n    @StreamListener(BillingMessageChannels.BOOKING_ORDER_INPUT) \n    public void consumeBookingOrder(BookingOrder bookingOrder) { \n        LOG.info(\"Received BookingOrder: {}\", bookingOrder); \n    } \n} \n```", "```java\n@SpringBootApplication(scanBasePackages = {\"com.packtpub.mmj.billing\", \"com.packtpub.mmj.booking\"}) \n@EnableBinding({BillingMessageChannels.class}) \npublic class BillingApp { \n\n    public static void main(String[] args) { \n        SpringApplication.run(BillingApp.class, args); \n    } \n\n    @Bean \n    public EventListener eventListener() { \n        return new EventListener(); \n    } \n} \n```", "```java\n2017-10-02 20:22:17.728  INFO 6748 --- [           -C-1] c.p.m.b.d.s.WebSocketTweetReceiver       : Received BookingOrder: {\"id\": \"999999999999\", \"name\": \"Test Booking 888\", \"userId\": \"3\", \"restaurantId\": \"1\", \"tableId\": \"1\", \"date\": \"2017-10-02\", \"time\": \"20:20:20.963543300\"} \n\n```"]