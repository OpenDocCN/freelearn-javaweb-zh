["```java\n17:11:53.712   INFO   Order received: {\"id\":1,\"customerId\":5,\"productId\":10}\n```", "```java\n17:11:53.712   INFO   Order received with id 1, customerId 5 and productId 10.\n```", "```java\n17:11:53.712   INFO   Processing order\n```", "```java\nlogging:\n file: logs/order.log\n level:\n  com.netflix: DEBUG\n  org.springframework.web.filter.CommonsRequestLoggingFilter: DEBUG\n pattern:\n  console: \"%d{HH:mm:ss.SSS} %-5level %msg%n\"\n  file: \"%d{HH:mm:ss.SSS} %-5level %msg%n\"\n```", "```java\n<configuration>\n <appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n  <file>logs/order.log</file>\n  <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n   <fileNamePattern>order.%d{yyyy-MM-dd}.log</fileNamePattern>\n   <maxHistory>10</maxHistory>\n   <totalSizeCap>1GB</totalSizeCap>\n  </rollingPolicy>\n  <encoder>\n   <pattern>%d{HH:mm:ss.SSS} %-5level %msg%n</pattern>\n  </encoder>\n </appender>\n <root level=\"DEBUG\">\n  <appender-ref ref=\"FILE\" />\n </root>\n</configuration>\n```", "```java\n<springProperty scope=\"context\" name=\"springAppName\" source=\"spring.application.name\" />\n<property name=\"LOG_FILE\" value=\"${BUILD_FOLDER:-build}/${springAppName}\"/>â€‹\n\n<springProfile name=\"development\">\n...\n</springProfile>\n\n<springProfile name=\"production\">\n <appender name=\"flatfile\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n  <file>${LOG_FILE}</file>\n  <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n   <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.gz</fileNamePattern>\n   <maxHistory>7</maxHistory>\n  </rollingPolicy>\n  <encoder>\n   <pattern>${CONSOLE_LOG_PATTERN}</pattern>\n   <charset>utf8</charset>\n  </encoder>\n </appender>\n ...\n</springProfile>\n```", "```java\ndocker run -d --name es -p 9200:9200 -p 9300:9300 -e \"discovery.type=single-node\" docker.elastic.co/elasticsearch/elasticsearch:6.1.1\n```", "```java\ndocker-machine ssh\nsudo sysctl -w vm.max_map_count=262144\n```", "```java\ninput {\n  tcp {\n    port => 5000\n    codec => json\n  }\n}\n\noutput {\n  elasticsearch {\n    hosts => [\"http://192.168.99.100:9200\"]\n    index => \"micro-%{appName}\"\n  }\n}\n```", "```java\ndocker run -d --name logstash -p 5000:5000 -v ~/logstash.conf:/config-dir/logstash.conf docker.elastic.co/logstash/logstash-oss:6.1.1 -f /config-dir/logstash.conf\n```", "```java\ndocker run -d --name kibana -e \"ELASTICSEARCH_URL=http://192.168.99.100:9200\" -p 5601:5601 docker.elastic.co/kibana/kibana:6.1.1\n```", "```java\n<dependency>\n <groupId>net.logstash.logback</groupId>\n <artifactId>logstash-logback-encoder</artifactId>\n <version>4.11</version>\n</dependency>\n```", "```java\n<appender name=\"STASH\" class=\"net.logstash.logback.appender.LogstashTcpSocketAppender\">\n <destination>192.168.99.100:5000</destination>\n <encoder class=\"net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder\">\n  <providers>\n   <mdc />\n   <context />\n   <logLevel />\n   <loggerName />\n   <pattern>\n    <pattern>\n    {\n    \"appName\": \"order-service\"\n    }\n    </pattern>\n   </pattern>\n   <threadName />\n   <message />\n   <logstashMarkers />\n   <stackTrace />\n  </providers>\n </encoder>\n</appender>\n```", "```java\n@PostMapping\npublic Order prepare(@RequestBody Order order) throws JsonProcessingException {\n    int price = 0;\n    List<Product> products = productClient.findByIds(order.getProductIds());\n    LOGGER.info(\"Products found: {}\", mapper.writeValueAsString(products));\n    Customer customer = customerClient.findByIdWithAccounts(order.getCustomerId());\n    LOGGER.info(\"Customer found: {}\", mapper.writeValueAsString(customer));\n\n    for (Product product : products) \n        price += product.getPrice();\n    final int priceDiscounted = priceDiscount(price, customer);\n    LOGGER.info(\"Discounted price: {}\", mapper.writeValueAsString(Collections.singletonMap(\"price\", priceDiscounted)));\n\n    Optional<Account> account = customer.getAccounts().stream().filter(a -> (a.getBalance() > priceDiscounted)).findFirst();\n    if (account.isPresent()) {\n        order.setAccountId(account.get().getId());\n        order.setStatus(OrderStatus.ACCEPTED);\n        order.setPrice(priceDiscounted);\n        LOGGER.info(\"Account found: {}\", mapper.writeValueAsString(account.get()));\n    } else {\n        order.setStatus(OrderStatus.REJECTED);\n        LOGGER.info(\"Account not found: {}\", mapper.writeValueAsString(customer.getAccounts()));\n    }\n\n    return repository.add(order);\n}\n```", "```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-amqp</artifactId>\n</dependency>\n```", "```java\n<appender name=\"AMQP\"\n class=\"org.springframework.amqp.rabbit.logback.AmqpAppender\">\n <layout>\n  <pattern>\n  {\n  \"time\": \"%date{ISO8601}\",\n  \"thread\": \"%thread\",\n  \"level\": \"%level\",\n  \"class\": \"%logger{36}\",\n  \"message\": \"%message\"\n  }\n  </pattern>\n </layout>\n <host>192.168.99.100</host>\n <port>5672</port>\n <username>guest</username>\n <password>guest</password> \n <applicationId>order-service</applicationId>\n <routingKeyPattern>order-service</routingKeyPattern>\n <declareExchange>true</declareExchange>\n <exchangeType>direct</exchangeType>\n <exchangeName>ex_logstash</exchangeName>\n <generateId>true</generateId>\n <charset>UTF-8</charset>\n <durable>true</durable>\n <deliveryMode>PERSISTENT</deliveryMode>\n</appender>\n```", "```java\ninput {\n  rabbitmq {\n    host => \"192.168.99.100\"\n    port => 5672\n    durable => true\n    exchange => \"ex_logstash\"\n  }\n}\n\noutput { \n  elasticsearch { \n    hosts => [\"http://192.168.99.100:9200\"]\n  } \n}\n```", "```java\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-sleuth</artifactId>\n</dependency>\n```", "```java\n2017-12-30 00:21:31.639 INFO [order-service,9a3fef0169864e80,9a3fef0169864e80,false] 49212 --- [nio-8090-exec-6] p.p.s.order.controller.OrderController : Products found: [{\"id\":2,\"name\":\"Test2\",\"price\":1500},{\"id\":9,\"name\":\"Test9\",\"price\":2450}]\n2017-12-30 00:21:31.683 INFO [order-service,9a3fef0169864e80,9a3fef0169864e80,false] 49212 --- [nio-8090-exec-6] p.p.s.order.controller.OrderController : Customer found: {\"id\":2,\"name\":\"Adam Smith\",\"type\":\"REGULAR\",\"accounts\":[{\"id\":4,\"number\":\"1234567893\",\"balance\":5000},{\"id\":5,\"number\":\"1234567894\",\"balance\":0},{\"id\":6,\"number\":\"1234567895\",\"balance\":5000}]}\n2017-12-30 00:21:31.684 INFO [order-service,9a3fef0169864e80,9a3fef0169864e80,false] 49212 --- [nio-8090-exec-6] p.p.s.order.controller.OrderController : Discounted price: {\"price\":3752}\n2017-12-30 00:21:31.684 INFO [order-service,9a3fef0169864e80,9a3fef0169864e80,false] 49212 --- [nio-8090-exec-6] p.p.s.order.controller.OrderController : Account found: {\"id\":4,\"number\":\"1234567893\",\"balance\":5000}\n2017-12-30 00:21:31.711 INFO [order-service,58b06c4c412c76cc,58b06c4c412c76cc,false] 49212 --- [nio-8090-exec-7] p.p.s.order.controller.OrderController : Order found: {\"id\":4,\"status\":\"ACCEPTED\",\"price\":3752,\"customerId\":2,\"accountId\":4,\"productIds\":[9,2]}\n2017-12-30 00:21:31.722 INFO [order-service,58b06c4c412c76cc,58b06c4c412c76cc,false] 49212 --- [nio-8090-exec-7] p.p.s.order.controller.OrderController : Account modified: {\"accountId\":4,\"price\":3752}\n2017-12-30 00:21:31.723 INFO [order-service,58b06c4c412c76cc,58b06c4c412c76cc,false] 49212 --- [nio-8090-exec-7] p.p.s.order.controller.OrderController : Order status changed: {\"status\":\"DONE\"}\n```", "```java\ndocker run -d --name zipkin -p 9411:9411 openzipkin/zipkin\n```", "```java\n<dependency>\n    <groupId>io.zipkin.java</groupId>\n    <artifactId>zipkin-server</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.zipkin.java</groupId>\n    <artifactId>zipkin-autoconfigure-ui</artifactId>\n</dependency>\n```", "```java\n@SpringBootApplication\n@EnableZipkinServer\npublic class ZipkinApplication {\n\n    public static void main(String[] args) {\n        new SpringApplicationBuilder(ZipkinApplication.class).web(true).run(args);\n    }\n\n}\n```", "```java\nspring: \n application:\n  name: zipkin-service\n\nserver: \n port: ${PORT:9411}\n```", "```java\nspring:\n zipkin:\n  baseUrl: http://192.168.99.100:9411/\n```", "```java\nspring:\n zipkin:\n  baseUrl: http://zipkin-service/\n```", "```java\n@Bean\npublic Sampler defaultSampler() {\n    return new AlwaysSampler();\n}\n```", "```java\n<dependency>\n <groupId>org.springframework.cloud</groupId>\n <artifactId>spring-cloud-starter-zipkin</artifactId>\n</dependency>\n<dependency>\n <groupId>org.springframework.amqp</groupId>\n <artifactId>spring-rabbit</artifactId>\n</dependency>\n```", "```java\n<dependency>\n <groupId>org.springframework.cloud</groupId>\n <artifactId>spring-cloud-sleuth-zipkin-stream</artifactId>\n</dependency>\n<dependency>\n <groupId>org.springframework.cloud</groupId>\n <artifactId>spring-cloud-starter-stream-rabbit</artifactId>\n</dependency>\n```", "```java\n@SpringBootApplication\n@EnableZipkinStreamServer\npublic class ZipkinApplication {\n\n    public static void main(String[] args) {\n        new SpringApplicationBuilder(ZipkinApplication.class).web(true).run(args);\n    }\n\n}\n```"]