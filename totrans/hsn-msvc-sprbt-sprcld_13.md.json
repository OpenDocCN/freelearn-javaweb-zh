["```java\nexport BOOK_HOME=~/Documents/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud\ngit clone https://github.com/PacktPublishing/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud $BOOK_HOME\ncd $BOOK_HOME/Chapter11\n```", "```java\nkeytool -genkeypair -alias localhost -keyalg RSA -keysize 2048 -storetype PKCS12 -keystore edge.p12 -validity 3650\n```", "```java\nserver.port: 8443\n\nserver.ssl:\n key-store-type: PKCS12\n key-store: classpath:keystore/edge.p12\n key-store-password: password\n key-alias: localhost\n```", "```java\ncd $BOOK_HOME/Chapter11\nmkdir keystore \nkeytool -genkeypair -alias localhost -keyalg RSA -keysize 2048 -storetype PKCS12 -keystore keystore/edge-test.p12 -validity 3650\n```", "```java\ngateway:\n  environment:\n    - SPRING_PROFILES_ACTIVE=docker\n    - SERVER_SSL_KEY_STORE=file:/keystore/edge-test.p12\n    - SERVER_SSL_KEY_STORE_PASSWORD=testtest\n  volumes:\n    - $PWD/keystore:/keystore\n  build: spring-cloud/gateway\n  mem_limit: 350m\n  ports:\n    - \"8443:8443\"\n```", "```java\ndocker-compose up -d --scale gateway=0\ndocker-compose up -d --scale gateway=1\n```", "```java\nimplementation 'org.springframework.boot:spring-boot-starter-security'\n```", "```java\npublic void configure(AuthenticationManagerBuilder auth) throws Exception {\n  auth.inMemoryAuthentication()\n   .passwordEncoder(NoOpPasswordEncoder.getInstance())\n   .withUser(username).password(password)\n   .authorities(\"USER\");\n}\n```", "```java\n@Autowired\npublic SecurityConfig(\n  @Value(\"${app.eureka-username}\") String username,\n  @Value(\"${app.eureka-password}\") String password\n) {\n  this.username = username;\n  this.password = password;\n}\n```", "```java\nprotected void configure(HttpSecurity http) throws Exception {\n  http\n    .authorizeRequests()\n      .anyRequest().authenticated()\n      .and()\n      .httpBasic();\n}\n```", "```java\napp:\n eureka-username: u\n eureka-password: p\n```", "```java\n@Value(\"${app.eureka-username}\")\nprivate String username;\n\n@Value(\"${app.eureka-password}\")\nprivate String password;\n\n@Autowired\npublic void setTestRestTemplate(TestRestTemplate testRestTemplate) {\n   this.testRestTemplate = testRestTemplate.withBasicAuth(username, password);\n}\n```", "```java\napp:\n  eureka-username: u\n  eureka-password: p\n\neureka:\n  client:\n     serviceUrl:\n       defaultZone: \"http://${app.eureka-username}:${app.eureka-\n                     password}@${app.eureka-server}:8761/eureka/\"\n\n```", "```java\ncurl -H \"accept:application/json\" https://u:p@localhost:8443/eureka/api/apps -ks | jq -r .applications.application[].instance[].instanceId\n```", "```java\nimplementation('org.springframework.boot:spring-boot-starter-security')\nimplementation('org.springframework.security:spring-security-oauth2-resource-server')\nimplementation('org.springframework.security:spring-security-oauth2-jose')\n```", "```java\n@EnableWebFluxSecurity\npublic class SecurityConfig {\n\n  @Bean\n  SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {\n    http\n      .authorizeExchange()\n        .pathMatchers(\"/actuator/**\").permitAll()\n        .anyExchange().authenticated()\n        .and()\n      .oauth2ResourceServer()\n        .jwt();\n    return http.build();\n  }\n}\n```", "```java\nspring.security.oauth2.resourceserver.jwt.jwk-set-uri: http://${app.auth-server}:9999/.well-known/jwks.json\n```", "```java\n.pathMatchers(POST, \"/product-composite/**\").hasAuthority(\"SCOPE_product:write\")\n.pathMatchers(DELETE, \"/product-composite/**\").hasAuthority(\"SCOPE_product:write\")\n.pathMatchers(GET, \"/product-composite/**\").hasAuthority(\"SCOPE_product:read\")\n```", "```java\nhttp.csrf().disable().authorizeExchange().anyExchange().permitAll();\n```", "```java\n@SpringBootTest( classes = \n{ProductCompositeServiceApplication.class, TestSecurityConfig.class },\n properties = {\"spring.main.allow-bean-definition-overriding=true\"})\n```", "```java\nACCESS_TOKEN=$(curl -k https://writer:secret@$HOST:$PORT/oauth/token -d grant_type=password -d username=magnus -d password=password -s | jq .access_token -r)\n\n```", "```java\n# Verify that a request without access token fails on 401, Unauthorized\nassertCurl 401 \"curl -k https://$HOST:$PORT/product-composite/$PROD_ID_REVS_RECS -s\"\n\n# Verify that the reader - client with only read scope can call the read API but not delete API.\nREADER_ACCESS_TOKEN=$(curl -k https://reader:secret@$HOST:$PORT/oauth/token -d grant_type=password -d username=magnus -d password=password -s | jq .access_token -r)\n READER_AUTH=\"-H \\\"Authorization: Bearer $READER_ACCESS_TOKEN\\\"\"\n\nassertCurl 200 \"curl -k https://$HOST:$PORT/product-composite/$PROD_ID_REVS_RECS $READER_AUTH -s\"\nassertCurl 403 \"curl -k https://$HOST:$PORT/product-composite/$PROD_ID_REVS_RECS $READER_AUTH -X DELETE -s\"\n\n```", "```java\ncd $BOOK_HOME/Chapter11\n./gradlew build && docker-compose build\n```", "```java\n./test-em-all.bash start\n```", "```java\ncurl -k https://writer:secret@localhost:8443/oauth/token -d grant_type=password -d username=magnus -d password=password -s | jq .\n```", "```java\nACCESS_TOKEN=eyJ...SyIlQ\n```", "```java\ncurl -k https://reader:secret@localhost:8443/oauth/token -d grant_type=password -d username=magnus -d password=password -s | jq .\n```", "```java\nACCESS_TOKEN=eyJh...C8pw\n```", "```java\nCODE=T2pxvW\n```", "```java\ncurl -k https://reader:secret@localhost:8443/oauth/token \\\n -d grant_type=authorization_code \\\n -d client_id=reader \\\n -d redirect_uri=http://my.redirect.uri \\\n -d code=$CODE -s | jq .\n```", "```java\nACCESS_TOKEN=eyJh...KUBA\n```", "```java\nACCESS_TOKEN=an-invalid-token\ncurl https://localhost:8443/product-composite/2 -k -H \"Authorization: Bearer $ACCESS_TOKEN\" -i  \n```", "```java\nACCESS_TOKEN={a-reader-access-token}\ncurl https://localhost:8443/product-composite/2 -k -H \"Authorization: Bearer $ACCESS_TOKEN\" -i \n```", "```java\nACCESS_TOKEN={a-reader-access-token}\ncurl https://localhost:8443/product-composite/999 -k -H \"Authorization: Bearer $ACCESS_TOKEN\" -X DELETE -i \n```", "```java\nspring.security.oauth2.resourceserver.jwt.jwk-set-uri: http://${app.auth-server}:9999/.well-known/jwks.json\n```", "```java\nspring.security.oauth2.resourceserver.jwt.issuer-uri: https://${TENANT_DOMAIN_NAME}/\n\n```", "```java\ncd $BOOK_HOME/Chapter11\n./gradlew build && docker-compose up -d --build product-composite gateway\n```", "```java\nACCESS_TOKEN=$(curl http://writer:secret@$HOST:$PORT/oauth/token -d grant_type=password -d username=magnus -d password=password -s | jq .access_token -r)\n```", "```java\nACCESS_TOKEN=$(curl --request POST \\\n --url 'https://${TENANT_DOMAIN_NAME}/oauth/token' \\\n --header 'content-type: application/json' \\\n --data '{\"grant_type\":\"password\", \"username\":\"${USER_EMAIL}\", \"password\":\"${USER_PASSWORD}\", \"audience\":\"https://localhost:8443/product-composite\", \"scope\":\"openid email product:read product:write\", \"client_id\": \"${CLIENT_ID}\", \"client_secret\": \"${CLIENT_SECRET}\"}' -s | jq -r .access_token)\n```", "```java\nREADER_ACCESS_TOKEN=$(curl -k https://reader:secret@$HOST:$PORT/oauth/token -d grant_type=password -d username=magnus -d password=password -s | jq .access_token -r)\n```", "```java\nREADER_ACCESS_TOKEN=$(curl --request POST \\\n --url 'https://${TENANT_DOMAIN_NAME}/oauth/token' \\\n --header 'content-type: application/json' \\\n --data '{\"grant_type\":\"password\", \"username\":\"${USER_EMAIL}\", \"password\":\"${USER_PASSWORD}\", \"audience\":\"https://localhost:8443/product-composite\", \"scope\":\"openid email product:read\", \"client_id\": \"${CLIENT_ID}\", \"client_secret\": \"${CLIENT_SECRET}\"}' -s | jq -r .access_token)\n```", "```java\n./test-em-all.bash\n```", "```java\ncurl --request POST \\\n --url 'https://${TENANT_DOMAIN_NAME}/oauth/token' \\\n --header 'content-type: application/json' \\\n --data '{\"grant_type\":\"password\", \"username\":\"${USER_EMAIL}\", \"password\":\"${USER_PASSWORD}\", \"audience\":\"https://localhost:8443/product-composite\", \"scope\":\"openid email product:read\", \"client_id\": \"${CLIENT_ID}\", \"client_secret\": \"${CLIENT_SECRET}\"}' -s | jq\n```", "```java\nhttps://${TENANT_DOMAIN_NAME}/authorize?response_type=token&scope=openid email product:read product:write&client_id=${CLIENT_ID}&state=98421&&nonce=jxdlsjfi0fa&redirect_uri=http://my.redirect.uri&audience=https://localhost:8443/product-composite\n```", "```java\nhttps://${TENANT_DOMAIN_NAME}/authorize?audience=https://localhost:8443/product-composite&scope=openid email product:read product:write&response_type=code&client_id=${CLIENT_ID}&redirect_uri=http://my.redirect.uri&state=845361\n```", "```java\nhttp://my.redirect.uri/?code=6mQ7HK--WyX9fMnv&state=845361\n```", "```java\ncurl --request POST \\\n --url 'https://${TENANT_DOMAIN_NAME}/oauth/token' \\\n --header 'content-type: application/json' \\\n --data '{\"grant_type\":\"authorization_code\",\"client_id\": \"${CLIENT_ID}\",\"client_secret\": \"${CLIENT_SECRET}\",\"code\": \"${CODE}\",\"redirect_uri\": \"http://my.redirect.uri\"}' -s | jq .\n```", "```java\nACCESS_TOKEN=...\ncurl https://localhost:8443/product-composite/2 -k -H \"Authorization: Bearer $ACCESS_TOKEN\" -i  \n```", "```java\nACCESS_TOKEN=...\ncurl https://localhost:8443/product-composite/999 -k -H \"Authorization: Bearer $ACCESS_TOKEN\" -X DELETE -i \n```", "```java\ncurl -H \"Authorization: Bearer $ACCESS_TOKEN\" https://${TENANT_DOMAIN_NAME}/userinfo -s | jq\n```", "```java\ndocker-compose down \n```"]