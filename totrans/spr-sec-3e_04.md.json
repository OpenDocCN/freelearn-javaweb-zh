["```java\n    //build.gradle\n\n    dependencies {\n    ...\n    // Database:\n compile('org.springframework.boot:spring-boot-starter-jdbc') compile('com.h2database:h2')    // Security:\n compile('org.springframework.boot:spring-boot-starter-security') testCompile('org.springframework.security:spring-security-test')       ....\n    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/DataSourceConfig.java\n\n    @Bean\n    public DataSource dataSource() {\n    return new EmbeddedDatabaseBuilder()\n       .setName(\"dataSource\")\n .setType(EmbeddedDatabaseType.H2)       .addScript(\"/database/h2/calendar-schema.sql\")\n       .addScript(\"/database/h2/calendar-data.sql\")\n .addScript(\"/database/h2/security-schema.sql\") .addScript(\"/database/h2/security-users.sql\") .addScript(\"/database/h2/security-user-authorities.sql\")       .build();\n    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n    ¦\n    @Bean\n    @Override\n    public UserDetailsManager userDetailsService() {\n JdbcUserDetailsManager manager = new JdbcUserDetailsManager(); manager.setDataSource(dataSource); return manager;    }\n    ¦\n```", "```java\n    //src/main/resources/database/h2/security-schema.sql\n\n    create table users(\n       username varchar(256) not null primary key,\n       password varchar(256) not null,\n       enabled boolean not null\n    );\n    create table authorities (\n       username varchar(256) not null,\n       authority varchar(256) not null,\n       constraint fk_authorities_users\n           foreign key(username) references users(username)\n    );\n    create unique index ix_auth_username on authorities (username,authority);\n```", "```java\n    //src/main/resources/database/h2/security-users.sql\n\n    insert into users (username,password,enabled)\n       values ('user1@example.com','user1',1);\n    insert into users (username,password,enabled)\n       values ('admin1@example.com','admin1',1);\n    insert into users (username,password,enabled)\n       values ('user2@example.com','admin1',1);\n    insert into users (username,password,enabled)\n       values ('disabled1@example.com','disabled1',0);\n```", "```java\n    //src/main/resources/database/h2/security-user-authorities.sql\n\n    insert into authorities(username,authority)\n       values ('user1@example.com','ROLE_USER');\n    insert into authorities(username,authority)\n      values ('admin1@example.com','ROLE_ADMIN');\n    insert into authorities(username,authority)\n       values ('admin1@example.com','ROLE_USER');\n    insert into authorities(username,authority)\n       values ('user2@example.com','ROLE_USER');\n    insert into authorities(username,authority)\n       values ('disabled1@example.com','ROLE_USER');\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n    private static String GROUP_AUTHORITIES_BY_USERNAME_QUERY = \" \"+\n \"select g.id, g.group_name, ga.authority \" + \"from groups g, group_members gm, \" + \"group_authorities ga where gm.username = ? \" + \"and g.id = ga.group_id and g.id = gm.group_id\";    @Override\n    public void configure(AuthenticationManagerBuilder auth) throws Exception {\n auth .jdbcAuthentication() .dataSource(dataSource) .groupAuthoritiesByUsername( GROUP_AUTHORITIES_BY_USERNAME_QUERY );    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/DataSourceConfig.java\n\n    @Bean\n    public DataSource dataSource() {\n       return new EmbeddedDatabaseBuilder()\n         .setName(\"dataSource\")\n         .setType(EmbeddedDatabaseType.H2)\n         .addScript(\"/database/h2/calendar-schema.sql\")\n         .addScript(\"/database/h2/calendar-data.sql\")\n         .addScript(\"/database/h2/security-schema.sql\")\n         .addScript(\"/database/h2/security-users.sql\")\n .addScript(\"/database/h2/security-groups-schema.sql\") .addScript(\"/database/h2/security-groups-mappings.sql\")         .build();\n    }\n```", "```java\n    //src/main/resources/database/h2/security-groups-schema.sql\n\n    create table groups (\n    id bigint generated by default as identity(start with 0) primary key,\n    group_name varchar(256) not null\n    );\n    create table group_authorities (\n      group_id bigint not null,\n      authority varchar(256) not null,\n      constraint fk_group_authorities_group\n      foreign key(group_id) references groups(id)\n    );\n    create table group_members (\n      id bigint generated by default as identity(start with 0) primary key,\n      username varchar(256) not null,\n      group_id bigint not null,\\\n```", "```java\n      constraint fk_group_members_group\n      foreign key(group_id) references groups(id)\\\n    );\n```", "```java\n    //src/main/resources/database/h2/security-groups-mappings.sql\n\n    -- Create the Groups\n\n    insert into groups(group_name) values ('Users');\n    insert into groups(group_name) values ('Administrators');\n\n    -- Map the Groups to Roles\n\n    insert into group_authorities(group_id, authority)\n    select id,'ROLE_USER' from groups where group_name='Users';\n    insert into group_authorities(group_id, authority)\n    select id,'ROLE_USER' from groups where\n    group_name='Administrators';\n    insert into group_authorities(group_id, authority)\n    select id,'ROLE_ADMIN' from groups where\n    group_name='Administrators';\n\n    -- Map the users to Groups\n\n    insert into group_members(group_id, username)\n    select id,'user1@example.com' from groups where\n    group_name='Users';\n    insert into group_members(group_id, username)\n    select id,'admin1@example.com' from groups where\n    group_name='Administrators';\n    ...\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/DataSourceConfig.java\n\n    @Bean\n    public DataSource dataSource() {\n    return new EmbeddedDatabaseBuilder()\n       .setName(\"dataSource\")\n     .setType(EmbeddedDatabaseType.H2)\n       .addScript(\"/database/h2/calendar-schema.sql\")\n       .addScript(\"/database/h2/calendar-data.sql\")\n .addScript(\"/database/h2/calendar-authorities.sql\")       .build();\n    }\n```", "```java\n    //src/main/resources/database/h2/calendar-authorities.sql\n\n    create table calendar_user_authorities (\n       id bigint identity,\n       calendar_user bigint not null,\n       authority varchar(256) not null,\n    );\n    -- user1@example.com\n    insert into calendar_user_authorities(calendar_user, authority)\n       select id,'ROLE_USER' from calendar_users where\n       email='user1@example.com';\n    -- admin1@example.com\n    insert into calendar_user_authorities(calendar_user, authority)\n       select id,'ROLE_ADMIN' from calendar_users where     \n       email='admin1@example.com';\n    insert into calendar_user_authorities(calendar_user, authority)\n       select id,'ROLE_USER' from calendar_users where\n       email='admin1@example.com';\n    -- user2@example.com\n    insert into calendar_user_authorities(calendar_user, authority)\n       select id,'ROLE_USER' from calendar_users where\n     email='user2@example.com';\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/service/DefaultCalendarService.java\n\n    import org.springframework.jdbc.core.JdbcOperations;\n    ...\n    public class DefaultCalendarService implements CalendarService {\n       ...\n       private final JdbcOperations jdbcOperations;\n       @Autowired\n          public DefaultCalendarService(EventDao eventDao, \n          CalendarUserDao userDao, JdbcOperations jdbcOperations) {\n           ...\n           this.jdbcOperations = jdbcOperations;\n       }\n       ...\n       public int createUser(CalendarUser user) {\n           int userId = userDao.createUser(user);\n           jdbcOperations.update(\n             \"insert into calendar_user_authorities(calendar_user,authority) \n             values(?,?)\", userId, \"ROLE_USER\");\n           return userId;\n       }\n    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n private static String CUSTOM_USERS_BY_USERNAME_QUERY = \"\"+ \"select email, password, true \" + \"from calendar_users where email = ?\"; private static String CUSTOM_AUTHORITIES_BY_USERNAME_QUERY = \"\"+ \"select cua.id, cua.authority \" + \"from calendar_users cu, calendar_user_authorities \"+ \"cua where cu.email = ? \"+ \"and cu.id = cua.calendar_user\";    @Override\n    public void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth\n       .jdbcAuthentication()\n       .dataSource(dataSource)\n .usersByUsernameQuery(USERS_BY_USERNAME_QUERY) .authoritiesByUsernameQuery( AUTHORITIES_BY_USERNAME_QUERY );    }\n```", "```java\n    auth\n       .jdbcAuthentication()\n       .dataSource(dataSource)\n       .usersByUsernameQuery(CUSTOM_USERS_BY_USERNAME_QUERY)\n       .authoritiesByUsernameQuery(CUSTOM_AUTHORITIES_BY_USERNAME_QUERY)\n .passwordEncoder(passwordEncoder());\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n    @Bean\n    public ShaPasswordEncoder passwordEncoder(){\n       return new ShaPasswordEncoder(256);\n    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n    @Override\n    public void configure(AuthenticationManagerBuilder auth) \n    throws Exception {\n    auth\n       .jdbcAuthentication()\n       .dataSource(dataSource)\n       .usersByUsernameQuery(CUSTOM_USERS_BY_USERNAME_QUERY)\n       .authoritiesByUsernameQuery(\n           CUSTOM_AUTHORITIES_BY_USERNAME_QUERY)\n .passwordEncoder(passwordEncoder())     ;\n    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/DataSourceConfig.java\n\n    @Bean\n    public DataSource dataSource() {\n    return new EmbeddedDatabaseBuilder()\n       .setName(\"dataSource\")\n       .setType(EmbeddedDatabaseType.H2)\n       .addScript(\"/database/h2/calendar-schema.sql\")\n       .addScript(\"/database/h2/calendar-data.sql\")\n       .addScript(\"/database/h2/calendar-authorities.sql\")\n .addScript(\"/database/h2/calendar-sha256.sql\")       .build();\n    }\n```", "```java\n   update calendar_users set password =      \n   '0a041b9462caa4a31bac3567e0b6e6fd9100787db2ab433d96f6d178cabfce90' \n   where email = 'user1@example.com';\n```", "```java\n    ShaPasswordEncoder encoder = new ShaPasswordEncoder(256); \n    String encodedPassword = encoder.encodePassword(password, null);\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/service/DefaultCalendarService.java\n\n    import org.springframework.security.authentication.encoding.PasswordEncoder;\n    // other imports omitted\n    public class DefaultCalendarService implements CalendarService {\n       ...\n       private final PasswordEncoder passwordEncoder;\n       @Autowired\n       public DefaultCalendarService(EventDao eventDao, \n       CalendarUserDao userDao, JdbcOperations jdbcOperations, \n       PasswordEncoder passwordEncoder) {\n       ...\n       this.passwordEncoder = passwordEncoder;\n       }\n       ...\n       public int createUser(CalendarUser user) {\n           String encodedPassword = passwordEncoder.\n           encodePassword(user.getPassword(), null);\n           user.setPassword(encodedPassword);\n```", "```java\n           ...\n          return userId;\n       }\n    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n    @Bean\n    public PasswordEncoder passwordEncoder(){\n       return new StandardPasswordEncoder();\n    }\n```", "```java\n        StandardPasswordEncoder encoder = new StandardPasswordEncoder();\n        String encodedPassword = encoder.encode(\"password\");\n```", "```java\n      //src/main/java/com/packtpub/springsecurity/configuration/\n      DataSourceConfig.java\n\n      @Bean\n      public DataSource dataSource() {\n      return new EmbeddedDatabaseBuilder()\n         .setName(\"dataSource\")\n         .setType(EmbeddedDatabaseType.H2)\n         .addScript(\"/database/h2/calendar-schema.sql\")\n         .addScript(\"/database/h2/calendar-data.sql\"\n         .addScript(\"/database/h2/calendar-authorities.sql\")\n .addScript(\"/database/h2/calendar-saltedsha256.sql\")         .build();\n      }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/service/DefaultCalendarService.java\n\n    import org.springframework.security.authentication.encoding.PasswordEncoder;\n    import org.springframework.security.crypto.password.PasswordEncoder;\n\n    // other imports omitted\n\n    public class DefaultCalendarService implements CalendarService {\n    ...      \n    public int createUser(CalendarUser user) {\n       String encodedPassword = passwordEncoder.encode(user.getPassword());\n       user.setPassword(encodedPassword);\n       ...\n       return userId;\n    }\n    }\n```", "```java\n    salt = randomsalt()\n    hash = hash(salt+originalPassword)\n    storedPassword = salt + hash\n```", "```java\n    storedPassword = datasource.lookupPassword(username)\n    salt, expectedHash = extractSaltAndHash(storedPassword)\n    actualHash = hash(salt+inputedPassword)\n    authenticated = (expectedHash == actualHash)\n```"]