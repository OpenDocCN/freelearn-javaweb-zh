- en: Chapter 1. Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will set up our development environment and discuss how
    we can leverage **SpringSource Tool Suite** (**STS**) to its maximum. Although
    any popular Java development IDE such as *Eclipse*, *intelliJ*, *NetBeans*, and
    others can be used for developing Spring Integration solutions, pivotal, the company
    spearheading Spring Integration, recommends that you use **STS** which is an Eclipse-based
    IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up STS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'STS comes with many off-the-shelf plugins, visual editors, and other features,
    which ease the development of Spring-powered enterprise applications. The look
    and feel of the IDE is very similar to Eclipse. Install STS by following these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: JDK 1.6 and above is a prerequisite, download and install it from [http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase6-419409.html](http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase6-419409.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `JAVA_HOME` properties as explained in the documentation at [https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/index.html](https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/index.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download STS from [http://spring.io/tools/sts](http://spring.io/tools/sts).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The downloaded file is in ZIP format. Extract it to the preferred folder and
    it's all set.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to `<installation-directory>\sts-bundle\sts-3.6.1.RELEASE`. The `STS.exe`
    file is the executable for launching the IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This step is optional but can help in efficient functioning of the OS editor—change
    the memory allocation parameter. Locate `STS.ini` (in the same folder as `STS.exe`)
    and change the value of `Xmx`. For 2 GB, I've put it as `Xmx2048m`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating your first project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps will help you in creating your first project:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a Spring Integration project by navigating to **File** | **Spring Project**,
    as shown in the following screenshot:![Creating your first project](img/00002.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the templates section, select **Spring Integration Project - Simple**.
    Provide a project name, for example, `sisimple`, as shown in the following screenshot:![Creating
    your first project](img/00003.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the information required to create a Maven-based project, as shown in
    this screenshot:![Creating your first project](img/00004.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Finish**; this will create a project with the name that was provided
    by us (`sisimple`), as shown in this screenshot:![Creating your first project](img/00005.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This project is as simple as it can be. Let''s take a quick look at the generated
    Java classes in the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Main.java`: This file is located at the path: `/sisimple/src/main/java/com/chandan/example/si/`.
    It has the main method and will be used to run this sample. Right-click on this
    file from the package explorer and click on **Run As** | **Java Application**—this
    will start the program. This class has the code to bootstrap Spring Integration
    configuration files and load components defined in it. Additionally, it converts
    user input to upper case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`StringConversionService.java`: This file is located at the path: `/sisimple/src/main/java/com/chandan/example/si/service/`.
    This is the service interface that is used to convert user input to upper case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-integration-context.xml`: This file is located at the path: `/sisimple/src/main/resources/META-INF/spring/integration/`.
    It is the Spring Integration configuration file. It contains the XML-based declaration
    of Spring Integration components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j.xml`: This file is located at the path: `/sisimple/src/main/resources/`.
    It is the `Log4j` configuration file. It can be edited to control the log level,
    appenders, and other logging-related aspects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`StringConversionServiceTest.java`: This file is located at the path: `/sisimple/src/test/java/com/chandan/example/si/`.
    This is the test file for `StringConversionService`. This will be used to run
    tests against the service classes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pom.xml`: This is the file used for rmaven dependency management, located
    in `/sisimple/`. It has entries for all the dependencies used by the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will be a bit heavy and premature to explain each of the components in these
    classes and configuration files without having built up some theoretical concepts—we
    will discuss each of the elements in detail, as we move ahead in the chapters.
  prefs: []
  type: TYPE_NORMAL
- en: STS visual editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'STS provides visual ways to add different namespaces. Locate `spring-integration-context.xml`
    under `/sisimple/src/main/resources/META-INF/spring/integration/` and open it.
    This is the default Spring configuration file. Click on the **Namespaces** tab
    to manage different namespaces of Spring Integration. The following screenshot
    shows imported namespaces for this sample project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![STS visual editor](img/00006.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the same editor, clicking on the **Integration-graph** tab will open a visual
    editor, which can be used to add/modify or delete endpoints, channels, and other
    components of Spring Integration. The following screenshot contains the integration
    graph for our sample project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![STS visual editor](img/00007.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s have a quick look at the generated Maven POM—overall, there are three
    dependencies; only one for Spring Integration, and the other ones for *Junit*
    and *log4j*, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![STS visual editor](img/00008.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Spring Integration Scala DSL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is still in the very early stages and is an incubation project. Scala DSL
    should not be confused with other EIP implementations being offered in Scala—rather,
    it is built on top of Spring Integration and provides DSL-based configuration
    and flow management.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check out the official Spring Integration Scala DSL blog at [http://spring.io/blog/2012/03/05/introducing-spring-integration-scala-dsl/](http://spring.io/blog/2012/03/05/introducing-spring-integration-scala-dsl/)
    and the GitHub page at [https://github.com/spring-projects/spring-integration-dsl-groovy](https://github.com/spring-projects/spring-integration-dsl-groovy).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to set up your IDE and created a basic project.
    We also tried our hands at the visual editor of STS and covered a quick introduction
    of the upcoming Scala DSL for Spring Integration. We will leverage this knowledge
    to build a compelling Spring Integration application using STS throughout the
    rest of the chapters.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover how to ingest messages in the application
    and then how to process them.
  prefs: []
  type: TYPE_NORMAL
