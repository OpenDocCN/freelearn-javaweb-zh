["```java\n    //src/main/java/com/packtpub/springsecurity/domain/CalendarUser.java\n\n    public class CalendarUser implements Serializable {\n       private Integer id;\n       private String firstName;\n       private String lastName;\n       private String email;\n       private String password;\n       ... accessor methods omitted ..\n    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/domain/Event.java\n\n    public class Event {\n       private Integer id;\n       private String summary;\n       private String description;\n       private Calendar when;\n       private CalendarUser owner;\n       private CalendarUser attendee;\n       ... accessor methods omitted ..\n    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/service/CalendarService.java\n\n    public interface CalendarService {\n       CalendarUser getUser(int id);\n       CalendarUser findUserByEmail(String email);\n       List<CalendarUser> findUsersByEmail(String partialEmail);\n       int createUser(CalendarUser user);\n       Event getEvent(int eventId);\n       int createEvent(Event event);\n       List<Event> findForUser(int userId);\n       List<Event> getEvents();\n    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/service/UserContext.java\n\n    public interface UserContext {\n       CalendarUser getCurrentUser();\n       void setCurrentUser(CalendarUser user);\n    }\n```", "```java\n    String username = SecurityContextHolder.getContext()\n       .getAuthentication()\n       .getName();\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/service/UserContextStub.java\n\n        ...\n        //@Component\n        public class UserContextStub implements UserContext {\n        ...\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/service/\n        SpringSecurityUserContext.java\n\n        @Component\n        public class SpringSecurityUserContext implements UserContext {\n          private final CalendarService calendarService;\n          private final UserDetailsService userDetailsService;\n        @Autowired\n        public SpringSecurityUserContext(CalendarService calendarService, \n        UserDetailsService userDetailsService) {\n           this.calendarService = calendarService;\n           this.userDetailsService = userDetailsService;\n        }\n        public CalendarUser getCurrentUser() {\n           SecurityContext context = SecurityContextHolder.getContext();\n           Authentication authentication = context.getAuthentication();\n           if (authentication == null) {\n             return null;\n           }\n           String email = authentication.getName();\n           return calendarService.findUserByEmail(email);\n        }\n        public void setCurrentUser(CalendarUser user) {\n           throw new UnsupportedOperationException();\n        }\n        }\n```", "```java\n    auth.inMemoryAuthentication().\n    withUser(\"user\").password(\"user\").roles(\"USER\");\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/configuration/\n        SecurityConfig.java\n\n        @Bean\n        @Override\n        public UserDetailsManager userDetailsService() {\n           InMemoryUserDetailsManager manager = new \n           InMemoryUserDetailsManager();\n           manager.createUser(\n               User.withUsername(\"user1@example.com\")\n                   .password(\"user1\").roles(\"USER\").build());\n           manager.createUser(\n               User.withUsername(\"admin1@example.com\")\n                   .password(\"admin1\").roles(\"USER\", \"ADMIN\").build());\n           return manager;\n        }\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/service/\n        DefaultCalendarService.java\n\n        public int createUser(CalendarUser user) {\n            List<GrantedAuthority> authorities = AuthorityUtils.\n            createAuthorityList(\"ROLE_USER\");\n            UserDetails userDetails = new User(user.getEmail(),\n            user.getPassword(), authorities);\n           // create a Spring Security user\n           userDetailsManager.createUser(userDetails);\n           // create a CalendarUser\n           return userDao.createUser(user);\n        }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/service/\n    SpringSecurityUserContext.java\n\n    public void setCurrentUser(CalendarUser user) {\n      UserDetails userDetails = userDetailsService.\n      loadUserByUsername(user.getEmail());\n      Authentication authentication = new   \n      UsernamePasswordAuthenticationToken(userDetails, user.getPassword(),\n      userDetails.getAuthorities());\n      SecurityContextHolder.getContext().\n      setAuthentication(authentication);\n    }\n```", "```java\nList<GrantedAuthority> authorities =\nAuthorityUtils.createAuthorityList(\"ROLE_USER\");\nUserDetails userDetails = new User(\"username\",\"password\",authorities); Authentication authentication = new UsernamePasswordAuthenticationToken ( userDetails,userDetails.getPassword(),userDetails.getAuthorities());\nSecurityContextHolder.getContext()\n.setAuthentication(authentication);\n```", "```java\n//src/main/java/com/packtpub/springsecurity/web/controllers/\nSignupController.java\n\n@RequestMapping(value=\"/signup/new\", method=RequestMethod.POST)\npublic String signup(@Valid SignupForm signupForm,\nBindingResult result, RedirectAttributes redirectAttributes) {\n... existing validation ¦\nuser.setPassword(signupForm.getPassword());\nint id = calendarService.createUser(user);\nuser.setId(id);\nuserContext.setCurrentUser(user);\nredirectAttributes.addFlashAttribute(\"message\", \"Success\");\nreturn \"redirect:/\";\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/core/userdetails/\nCalendarUserDetailsService.java\n\n// imports and package declaration omitted\n\n@Component\npublic class CalendarUserDetailsService implements\nUserDetailsService {\nprivate final CalendarUserDao calendarUserDao;\n@Autowired\npublic CalendarUserDetailsService(CalendarUserDao\n   calendarUserDao) {\n   this.calendarUserDao = calendarUserDao;\n}\npublic UserDetails loadUserByUsername(String username) throws\n   UsernameNotFoundException {\n   CalendarUser user = calendarUserDao.findUserByEmail(username);\n  if (user == null) {\n     throw new UsernameNotFoundException(\"Invalid\n       username/password.\");\n   }\n   Collection<? extends GrantedAuthority> authorities =\n     CalendarUserAuthorityUtils.createAuthorities(user);\n   return new User(user.getEmail(), user.getPassword(),\n     authorities);\n}\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n@Override\npublic void configure(AuthenticationManagerBuilder auth) throws Exception {\n    ...\n}\n@Bean\n@Override\npublic UserDetailsManager userDetailsService() {\n    ...\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/service/\nDefaultCalendarService.java\n\npublic class DefaultCalendarService implements CalendarService {\n   private final EventDao eventDao;\n   private final CalendarUserDao userDao;\n   @Autowired\n   public DefaultCalendarService(EventDao eventDao,CalendarUserDao userDao) {\n       this.eventDao = eventDao;\n       this.userDao = userDao;\n   }\n   ...\n   public int createUser(CalendarUser user) {\n       return userDao.createUser(user);\n   }\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/core/userdetails/\nCalendarUserDetailsService.java\n\npublic UserDetails loadUserByUsername(String username) throws\nUsernameNotFoundException {\n...\nreturn new CalendarUserDetails(user);\n}\nprivate final class CalendarUserDetails extends CalendarUser \nimplements UserDetails {\nCalendarUserDetails(CalendarUser user) {\n   setId(user.getId());\n   setEmail(user.getEmail());\n   setFirstName(user.getFirstName());\n   setLastName(user.getLastName());\n   setPassword(user.getPassword());\n}\npublic Collection<? extends GrantedAuthority>\n   getAuthorities() {\n   return CalendarUserAuthorityUtils.createAuthorities(this);\n}\npublic String getUsername() {\n   return getEmail();\n}\npublic boolean isAccountNonExpired() { return true; }\npublic boolean isAccountNonLocked() { return true; }\npublic boolean isCredentialsNonExpired() { return true; }\npublic boolean isEnabled() { return true; }\n}\n```", "```java\npublic class SpringSecurityUserContext implements UserContext {\npublic CalendarUser getCurrentUser() {\n   SecurityContext context = SecurityContextHolder.getContext();\n   Authentication authentication = context.getAuthentication();\n   if(authentication == null) {\n      return null;\n   }\n   return (CalendarUser) authentication.getPrincipal();\n}\n\npublic void setCurrentUser(CalendarUser user) {\n   Collection authorities =\n     CalendarUserAuthorityUtils.createAuthorities(user);\n   Authentication authentication = new      UsernamePasswordAuthenticationToken(user,user.getPassword(), authorities);\n   SecurityContextHolder.getContext()\n     .setAuthentication(authentication);\n}\n}\n```", "```java\n    //src/main/resources/templates/fragments/header.html\n\n    <ul class=\"nav navbar-nav pull-right\" \n sec:authorize=\"isAuthenticated()\">\n       <li id=\"greeting\">\n           <p class=\"navbar-text\">Welcome <div class=\"navbar-text\"   \n           th:text=\"${#authentication.getPrincipal().getName()}\">\n           User</div></p>\n       </li>\n```", "```java\n    SecurityContext context = SecurityContextHolder.getContext();\n    Authentication authentication = context.getAuthentication();\n    CalendarUser user = (CalendarUser) authentication.getPrincipal();\n    String firstAndLastName = user.getName();\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/authentication/\n    CalendarUserAuthenticationProvider.java\n\n    // ¦ imports omitted ...\n\n    @Component\n    public class CalendarUserAuthenticationProvider implements\n    AuthenticationProvider {\n    private final CalendarService calendarService;\n    @Autowired\n    public CalendarUserAuthenticationProvider\n    (CalendarService    calendarService) {\n       this.calendarService = calendarService;\n    }\n    public Authentication authenticate(Authentication\n       authentication) throws AuthenticationException {\n           UsernamePasswordAuthenticationToken token =   \n           (UsernamePasswordAuthenticationToken) \n       authentication;\n       String email = token.getName();\n       CalendarUser user = null;\n       if(email != null) {\n         user = calendarService.findUserByEmail(email);\n       }\n       if(user == null) {\n         throw new UsernameNotFoundException(\"Invalid\n         username/password\");\n       }\n       String password = user.getPassword();\n       if(!password.equals(token.getCredentials())) {\n         throw new BadCredentialsException(\"Invalid\n         username/password\");\n       }\n       Collection<? extends GrantedAuthority> authorities =\n         CalendarUserAuthorityUtils.createAuthorities(user);\n       return new UsernamePasswordAuthenticationToken(user, password,\n         authorities);\n    }\n    public boolean supports(Class<?> authentication) {\n       return UsernamePasswordAuthenticationToken\n         .class.equals(authentication);\n     }\n    }\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/configuration/\n        SecurityConfig.java\n\n @Autowired CalendarUserAuthenticationProvider cuap;        @Override\n        public void configure(AuthenticationManagerBuilder auth) \n        throws Exception {\n           auth.authenticationProvider(cuap);\n        }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/authentication/\n    DomainUsernamePasswordAuthenticationToken.java\n\n    public final class DomainUsernamePasswordAuthenticationToken extends     \n    UsernamePasswordAuthenticationToken {\n            private final String domain;\n            // used for attempting authentication\n           public DomainUsernamePasswordAuthenticationToken(String\n           principal, String credentials, String domain) {\n              super(principal, credentials);\n              this.domain = domain;\n            } \n    // used for returning to Spring Security after being\n    //authenticated\n    public DomainUsernamePasswordAuthenticationToken(CalendarUser\n       principal, String credentials, String domain,\n       Collection<? extends GrantedAuthority> authorities) {\n         super(principal, credentials, authorities);\n         this.domain = domain;\n       }\n    public String getDomain() {\n       return domain;\n    }\n    }\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/authentication/\n        CalendarUserAuthenticationProvider.java\n\n        public Authentication authenticate(Authentication authentication) \n        throws AuthenticationException {\n             DomainUsernamePasswordAuthenticationToken token =\n             (DomainUsernamePasswordAuthenticationToken) authentication;\n        String userName = token.getName();\n        String domain = token.getDomain();\n        String email = userName + \"@\" + domain;\n        ... previous validation of the user and password ...\n        return new DomainUsernamePasswordAuthenticationToken(user,\n        password, domain, authorities);\n        }\n        public boolean supports(Class<?> authentication) {\n          return DomainUsernamePasswordAuthenticationToken\n          .class.equals(authentication);\n        }\n```", "```java\n    //src/main/resources/templates/login.html\n\n    ...\n    <label for=\"username\">Username</label>\n    <input type=\"text\" id=\"username\" name=\"username\"/>\n    <label for=\"password\">Password</label>\n    <input type=\"password\" id=\"password\" name=\"password\"/>\n    <label for=\"domain\">Domain</label>\n    <input type=\"text\" id=\"domain\" name=\"domain\"/>\n    ¦\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/web/authentication/\n        DomainUsernamePasswordAuthenticationFilter.java\n\n        public final class\n        DomainUsernamePasswordAuthenticationFilter extends \n         UsernamePasswordAuthenticationFilter {\n        public Authentication attemptAuthentication\n        (HttpServletRequest request,HttpServletResponse response) throws\n        AuthenticationException {\n               if (!request.getMethod().equals(\"POST\")) {\n                 throw new AuthenticationServiceException\n                 (\"Authentication method not supported: \" \n                  + request.getMethod());\n               }\n           String username = obtainUsername(request);\n           String password = obtainPassword(request);\n           String domain = request.getParameter(\"domain\");\n           // authRequest.isAuthenticated() = false since no\n           //authorities are specified\n           DomainUsernamePasswordAuthenticationToken authRequest\n           = new DomainUsernamePasswordAuthenticationToken(username, \n           password, domain);\n          setDetails(request, authRequest);\n          return this.getAuthenticationManager()\n          .authenticate(authRequest);\n          }\n        }\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/\nSecurityConfig.java\n\n@Override\nprotected void configure(final HttpSecurity http) throws Exception {\n   http.authorizeRequests()\n       ...\n       .and().exceptionHandling()\n           .accessDeniedPage(\"/errors/403\")\n           .authenticationEntryPoint(\n               loginUrlAuthenticationEntryPoint())\n       .and().formLogin()\n           .loginPage(\"/login/form\")\n           .loginProcessingUrl(\"/login\")\n           .failureUrl(\"/login/form?error\")\n           .usernameParameter(\"username\")\n           .passwordParameter(\"password\")\n           .defaultSuccessUrl(\"/default\", true)\n           .permitAll()\n         ...\n          // Add custom UsernamePasswordAuthenticationFilter\n .addFilterAt( domainUsernamePasswordAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class) ; }\n@Bean public DomainUsernamePasswordAuthenticationFilter domainUsernamePasswordAuthenticationFilter()\n throws Exception {   DomainUsernamePasswordAuthenticationFilter dupaf = new DomainUsernamePasswordAuthenticationFilter(\n                            super.authenticationManagerBean());\n   dupaf.setFilterProcessesUrl(\"/login\");\n   dupaf.setUsernameParameter(\"username\");\n   dupaf.setPasswordParameter(\"password\");\n   dupaf.setAuthenticationSuccessHandler(\n           new SavedRequestAwareAuthenticationSuccessHandler(){{\n               setDefaultTargetUrl(\"/default\");\n           }}\n   );\n   dupaf.setAuthenticationFailureHandler(\n           new SimpleUrlAuthenticationFailureHandler(){{\n                setDefaultFailureUrl(\"/login/form?error\");\n           }}\n);\n dupaf.afterPropertiesSet();\n   return dupaf;\n}\n@Bean public LoginUrlAuthenticationEntryPoint loginUrlAuthenticationEntryPoint(){\n   return new LoginUrlAuthenticationEntryPoint(\"/login/form\");\n}\n```"]