["```java\n<int:header-value-router \n  input-channel=\"feedsChannel\" \n  header-name=\"feedtype\">\n  <int:mapping value=\"java\" channel=\"javachannel\" />\n  <int:mapping value=\"spring\" channel=\"springchannel\" />\n</int:header-value-router>\n```", "```java\nmapping has not been provided and hence the next channel will be javachannel, indicated by the header-name tag:\n```", "```java\n<int:header-value-router \n  input-channel=\"feedsChannel\" \n  header-name=\"javachannel\"/>\n```", "```java\n<int:recipient-list-router input-channel=\"feedsChannel\">\n  <int:recipient channel=\"transformFeedChannel\"/>\n  <int:recipient channel=\"auditFeedChannel\"/>\n</int:recipient-list-router>\n```", "```java\n<int-xml:xpath-router input-channel=\"feedChannel\">\n  <int-xml:xpath-expression expression=\"/feed/type\"/>\n</int-xml:xpath-router>\n```", "```java\n<int-xml:xpath-router input-channel=\"feedChannel\">\n  <int-xml:xpath-expression expression=\"/feed/type\"/>\n  <int-xml:mapping value=\"java\" channel=\"channelforjava\"/>\n  <int-xml:mapping value=\"spring\" channel=\"channelforspring\"/>\n</int-xml:xpath-router>\n```", "```java\ninvalidFeedChannel, while for a NullPointerException, it will route to npeFeedChannel:\n```", "```java\n<int:exception-type-router \n  input-channel=\"feedChannel\"\n  default-output-channel=\"defaultChannel\">\n<int:mapping \n  exception-type=\"java.lang.IllegalArgumentException\" \n  channel=\"invalidFeedChannel\"/>\n <int:mapping\n    exception-type=\"java.lang.NullPointerException\"\n    channel=\"npeFeedChannel\"/>\n</int:exception-type-router>\n<int:channel id=\" illegalFeedChannel \" />\n<int:channel id=\" npeFeedChannel \" />\n```", "```java\ndefault-output-channel=\"defaultChannel\"\n```", "```java\n@Component\npublic class AnnotatedFeedsAuthorRouter {\n  @Router\n  public String feedAuthor(Message<SoFeed > message) {\n    SoFeed sf = message.getPayload();\n    return sf.getAuthor() ;\n  }\n}\n```", "```java\n<int:filter \n  input-channel=\"fetchedFeedChannel\" \n  output-channel=\"filteredFeedChannel\" \n  ref=\"filterSoFeedBean\" \n  method=\"filterFeed\"/>\n```", "```java\n<bean id=\"filterSoFeedBean\" \nclass=\"com.cpandey.siexample.filter.SoFeedFilter\"/>\n```", "```java\npublic class SoFeedFilter {\npublic boolean filterFeed(Message<SyndEntry> message){\n  SyndEntry entry = message.getPayload();\n  if(entry.getDescription()!=null&&entry.getTitle()!=null){\n    return true;\n  }\n  return false;\n}\n```", "```java\n<int:filter \n  input-channel=\"fetchedFeedChannel\" \n  output-channel=\"filteredFeedChannel\" \n  ref=\"filterSoFeedBean\" \n  method=\"filterFeed\" \n  throw-exception-on-rejection=\"true\"/>\n```", "```java\n<int:filter \n  input-channel=\"fetchedFeedChannel\" \n  output-channel=\"filteredFeedChannel\" \n  ref=\"filterSoFeedBean\" \n  method=\"filterFeed\" \n  discard-channel=\"rejectedFeeds\"/>\n```", "```java\n@Component\npublic class SoFeedFilter {\n  @Filter\n  //Only process feeds which have value in its title and description\n  public boolean filterFeed(Message<SyndEntry> message){\n    SyndEntry entry = message.getPayload();\n    if(entry.getDescription()!=null&&entry.getTitle()!=null){\n      return true;\n    }\n  return false;\n}\n```", "```java\n<int:filter \n  input-channel=\"fetchedFeedChannel\" \n  output-channel=\"filteredFeedChannel\" \n  ref=\"filterSoFeedBean\" />\n```", "```java\npublic class SoFeedFilter implements MessageSelector{\npublic boolean accept(Message<?> message) {\n      …\n      return true;\n    }\n  return false;\n}\n```", "```java\n<int:filter \n  input-channel=\"fetchedFeedChannel\" \n  outputchannel=\"filteredFeedChannel\"> \n  <bean class=\" com.cpandey.siexample.filter.SoFeedFilter \"/>\n</int:filter>\n```", "```java\n<int:splitter\n  ref=\"splitterSoFeedBean\" \n  method=\"splitAndPublish\" \n  input-channel=\"filteredFeedChannel\" \n  output-channel=\"splitFeedOutputChannel\" />\n\n<bean id=\"splitterSoFeedBean\" \n  class=\"com.cpandey.siexample.splitter.SoFeedSplitter\"/>\n```", "```java\npublic class SoFeedSplitter {\n  public List<SyndCategoryImpl> plitAndPublish(Message<SyndEntry> message) {\n    SyndEntry syndEntry=message.getPayload();\n    List<SyndCategoryImpl> categories= syndEntry.getCategories();\n    return categories;\n  }\n}\n```", "```java\n<int:service-activator \n  id=\"splitChannelSA\"\n  ref=\"commonServiceActivator\"\n  method=\"printSplitMessage\"\n  input-channel=\"splitFeedOutputChannel\"/>\n```", "```java\npublic void printSplitMessage(Message<SyndCategoryImpl> message) {\n  if(message!=null){\n    System.out.println(message.getPayload());\n  }else{\n    System.out.println(\"Message is null\");\n  }\n\n}\n```", "```java\n@Splitter\npublic List<SyndCategoryImpl> splitAndPublish(Message<SyndEntry> message) {\n    SyndEntry syndEntry=message.getPayload();\n    List<SyndCategoryImpl> categories= syndEntry.getCategories();\n    return categories;\n  }\n```", "```java\npublic class SoFeedSplitter extends AbstractMessageSplitter {\n  @Override\n  protected Object splitMessage(Message<?> message) {\n    SyndEntry syndEntry=(SyndEntry)message.getPayload();\n    List<SyndCategoryImpl> categories= syndEntry.getCategories();\n    return categories;\n  }\n```", "```java\n<int:aggregator \n  input-channel=\"fetchedFeedChannelForAggregatior\"\n  output-channel=\"aggregatedFeedChannel\"\n  ref=\"aggregatorSoFeedBean\"\n  method=\"aggregateAndPublish\"\n  release-strategy=\"sofeedCompletionStrategyBean\"\n  release-strategy-method=\"checkCompleteness\"\n  correlation-strategy=\"soFeedCorrelationStrategyBean\"\n  correlation-strategy-method=\"groupFeedsBasedOnCategory\"\n  message-store=\"feedsMySqlStore \"\n  expire-groups-upon-completion=\"true\">\n  <int:poller fixed-rate=\"1000\"></int:poller>\n</int:aggregator>\n```", "```java\npublic class SoFeedAggregator {\n  public List<SyndEntry> aggregateAndPublish(List<SyndEntry> messages) {\n    //Do some pre-processing before passing on to next channel\n    return messages;\n  }\n}\n```", "```java\npublic class CorrelationStrategy {\n  public Object groupFeedsBasedOnCategory(Message<?> message) {\n    if(message!=null){\n      SyndEntry entry = (SyndEntry)message.getPayload();\n      List<SyndCategoryImpl> categories=entry.getCategories();\n      if(categories!=null&&categories.size()>0){\n        for (SyndCategoryImpl category: categories) {\n          //for simplicity, lets consider the first category\n          return category.getName();\n        }\n      }\n    }\n    return null;\n  }\n}\n```", "```java\npublic class CorrelationStrategy implements CorrelationStrategy {\n  public Object getCorrelationKey(Message<?> message) {\n    if(message!=null){\n      …\n            return category.getName();\n          }\n        }\n      }\n      return null;\n    }\n  }\n}\n```", "```java\npublic class CompletionStrategy {\n  public boolean checkCompleteness(List<SyndEntry> messages) {\n    if(messages!=null){\n      if(messages.size()>2){\n        return true;\n      }\n    }\n    return false;\n  }\n}\n```", "```java\n<bean id=\" feedsMySqlStore \" \n  class=\"org.springframework.integration.jdbc.JdbcMessageStore\">\n  <property name=\"dataSource\" ref=\"feedsSqlDataSource\"/>\n</bean>\n```", "```java\n<int:resequencer input-channel=\"fetchedFeedChannelForAggregatior\" \n  output-channel=\"cahinedInputFeedChannel\" \n  release-strategy=\"sofeedResCompletionStrategyBean\" \n  release-strategy-method=\"checkCompleteness\" \n  correlation-strategy=\"soFeedResCorrelationStrategyBean\" \n  correlation-strategy-method=\"groupFeedsBasedOnPublishDate\" \n  message-store=\"messageStore\"> \n  <int:poller fixed-rate=\"1000\"></int:poller>\n</int:resequencer >\n```", "```java\n<int:chain \n  input-channel=\"cahinedInputFeedChannel\" \n  output-channel=\"logChannel\"> \n  input-channel=\"cahinedInputFeedChannel\" \n  output-channel=\"logChannel\"> \n  <int:filter ref=\"filterSoFeedBean\" \n    method=\"filterFeed\" \n    throw-exception-on-rejection=\"true\"/> \n  <int:header-enricher> \n    <int:header name=\"test\" value=\"value\"/>\n  </int:header-enricher>\n  <int:service-activator \n    ref=\"commonServiceActivator\" \n    method=\"chainedFeed\"/>\n</int:chain>\n```"]