["```java\n@Inject\nprivate Config config;\n```", "```java\nConfig config = ConfigProvider.getConfig();\n```", "```java\n@Inject\n@ConfigProperty(name=\"my.url\")\nprivate URL myURL;\n```", "```java\n@Inject\n@ConfigProperty(name=\"my.url\", defaultValue=\"http://localhost/\")\nprivate URL myURL;\n```", "```java\n@Inject\n@ConfigProperty(name=\"my.url\")\nprivate Optional<URL> someUrl; // will be set to Optional.empty if the\n                               // property `my.url` cannot be found\n```", "```java\npackage io.packt.sample.config;import java.io.Serializable;import java.util.Collections;import java.util.Map;import org.eclipse.microprofile.config.spi.ConfigSource;public class EnvConfigSource ...\n```", "```java\nprivate String[] pets = config.getValue(\"myPets\", String[].class)\n```", "```java\npublic interface Converter<T> {\n    /**\n     * Configure the string value to a specified type\n     * @param value the string representation of a property value.\n     * @return the converted value or null\n     *\n     * @throws IllegalArgumentException if the value cannot be converted to        the specified type.\n     */\n    T convert(String value);\n```", "```java\n@Asynchronous\npublic Future<Connection> service() throws InterruptedException {\n  Connection conn = new Connection() {\n    {\n      Thread.sleep(1000);\n    }\n\n    @Override\n    public String getData() {\n      return \"service DATA\";\n    }\n };\n return CompletableFuture.completedFuture(conn);\n}\n```", "```java\n@Retry(maxRetries = 5, maxDuration= 1000, retryOn = {IOException.class})public void operationToRetry() {  ...}\n```", "```java\n@Retry(maxRetries = 2)\n@Fallback(StringFallbackHandler.class)\npublic String shouldFallback() {\n  ...\n}\n```", "```java\nimport javax.enterprise.context.ApplicationScoped;\n\nimport org.eclipse.microprofile.config.inject.ConfigProperty;\nimport org.eclipse.microprofile.faulttolerance.ExecutionContext;\nimport org.eclipse.microprofile.faulttolerance.FallbackHandler;\n\n@ApplicationScoped\npublic class StringFallbackHandler implements FallbackHandler<String> {\n    @ConfigProperty(name=\"app1.requestFallbackReply\", defaultValue = \"Unconfigured Default Reply\")\n    private String replyString;\n\n    @Override\n    public String handle(ExecutionContext ec) {\n        return replyString;\n    }\n}\n```", "```java\n@Timeout(200)public void operationCouldTimeout() {  ...}\n```", "```java\n@CircuitBreaker(requestVolumeThreshold = 4, failureRatio=0.75, delay = 1000)\npublic void operationCouldBeShortCircuited(){\n  ...\n}\n```", "```java\n@Bulkhead(4)public void bulkheadedOperation() {  ...}\n```", "```java\norg.example.microservice.MyService/doSomething/Retry/maxDuration=3000\n```", "```java\norg.example.microservice.MyService/Retry/maxRetries=100\n```", "```java\nRetry/maxRetries=30\n```"]