["```java\n    <beans \n\n      xmlns:int-jmx=\"http://www.springframework.org/schema/integration/jmx\"\n      xsi:schemaLocation=\"http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/integration/jmx http://www.springframework.org/schema/integration/jmx/spring-integration-jmx.xsd\">\n    ```", "```java\n    <dependency>\n      <groupId>org.springframework.integration</groupId>\n      <artifactId>spring-integration-jmx</artifactId>\n      <version>${spring.integration.version}</version>\n    </dependency>\n    ```", "```java\n      <context:mbean-server/>\n    ```", "```java\n      <context:mbean-export/>\n    ```", "```java\n    import javax.management.Notification;\n    import org.springframework.jmx.export.annotation.ManagedAttribute;\n    import org.springframework.jmx.export.annotation.ManagedOperation;\n    import org.springframework.jmx.export.annotation.ManagedResource;\n    import org.springframework.jmx.export.notification.NotificationPublisher;\n    import org.springframework.jmx.export.notification.NotificationPublisherAware;\n    import org.springframework.stereotype.Component;\n\n    @Component\n    @ManagedResource\n    public class TestMBean implements NotificationPublisherAware{\n      private NotificationPublisher notificationPublisher;\n      private String managedData;\n\n      @ManagedAttribute\n      public String getManagedData() {\n        return managedData;\n      }\n      @ManagedAttribute\n      public void setManagedData(String managedData) {\n        this.managedData = managedData;\n      }\n      @ManagedOperation\n      public Integer testAdd(Integer num1, Integer num2) {\n        notificationPublisher.sendNotification(new Notification(\"testAdd\", this, 0));\n        return num1 + num2;\n      }\n      @Override\n      public void setNotificationPublisher(NotificationPublisher notificationPublisher) {\n        this.notificationPublisher = notificationPublisher;\n      }\n    }\n    ```", "```java\n        -Dcom.sun.management.jmxremote\n        -Dcom.sun.management.jmxremote.port=6969\n        -Dcom.sun.management.jmxremote.ssl=false\n        -Dcom.sun.management.jmxremote.authenticate=false\n    ```", "```java\n<int-jmx:notification-listening-channel-adapter id=\"notifListener\" channel=\"listenForNotification\" object-name=\"com.cpandey.siexample.jmx:name=testMBean,type=TestMBean\"/>\n```", "```java\n    import org.springframework.context.support.AbstractApplicationContext;\n    import org.springframework.context.support.ClassPathXmlApplicationContext;\n\n    public final class FeedsExample {\n      private FeedsExample() { }\n\n      public static void main(final String... args) {\n        final AbstractApplicationContext context = new ClassPathXmlApplicationContext(\"classpath:META-INF/spring/integration/spring-integration-context.xml\");\n      }\n    }\n    ```", "```java\nimport org.springframework.context.support.AbstractApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport org.springframework.integration.support.MessageBuilder;\nimport org.springframework.messaging.MessageChannel;\n\npublic class NotificationPublisher {\n  public static void main(String[] args) {\n    final AbstractApplicationContext context = new ClassPathXmlApplicationContext(\"classpath:META-INF/spring/integration/spring-integration-context.xml\");\n    try {\n      Thread.sleep(60000);\n    } catch (InterruptedException e) {\n      //do nothing\n    }\n    MessageChannel publishNotification = context.getBean(\"publishNotification\", MessageChannel.class);\n    publishNotification.send(MessageBuilder.withPayload(\"Sample Message\").build());\n\n    MessageChannel triggerOperationChannel = context.getBean(\"triggerOperationChannel\", MessageChannel.class);\n    triggerOperationChannel.send(MessageBuilder.withPayload(\"Trigger Method Adapter\").build());\n\n    MessageChannel requestOperationChannel = context.getBean(\"requestOperationChannel\", MessageChannel.class);\n    requestOperationChannel.send(MessageBuilder.withPayload(\"Trigger Method Gateway\").build());\n\n    MessageChannel input = context.getBean(\"controlBusChannel\", MessageChannel.class);\n    String controlMessage = \"@controlBusTest.controlTestOperation()\";\n    LOGGER.info(\"Sending message: \" + controlMessage);\n    input.send(MessageBuilder.withPayload(controlMessage).build());\n\n    try {\n      Thread.sleep(180000);\n    } catch (InterruptedException e) {\n      //do nothing\n    }\n    context.stop();\n  }\n}\n```", "```java\n  <int:channel id=\"polledDataChannel\"/>\n  <int-jmx:attribute-polling-channel-adapter id=\"attribPoller\" channel=\"polledDataChannel\" object-name=\"com.cpandey.siexample.jmx:name=testMBean, type=TestMBean\"\n    attribute-name=\"ManagedData\">\n    <int:poller max-messages-per-poll=\"1\" fixed-rate=\"5000\"/>\n  </int-jmx:attribute-polling-channel-adapter>\n```", "```java\n  <int:service-activator ref=\"commonServiceActivator\" method=\"attributePolled\" input-channel=\"polledDataChannel\"/>\n```", "```java\n  <int:channel id=\"mbeanTreeDataChannel\"/>\n  <int-jmx:tree-polling-channel-adapter  id=\"treePoller\" \n    channel=\"mbeanTreeDataChannel\"    \t\n    query-name=\"com.cpandey.siexample.jmx:type=*\">\n      <int:poller max-messages-per-poll=\"1\" fixed-rate=\"5000\"/>\n  </int-jmx:tree-polling-channel-adapter>\n```", "```java\n    MessageChannel triggerOperationChannel = context.getBean(\"triggerOperationChannel\", MessageChannel.class);\n    triggerOperationChannel.send(MessageBuilder.withPayload(\"Trigger Method Adapter\").build());\n```", "```java\n  <int:channel id=\"requestOperationChannel\"/>\n  <int:channel id=\"replyFromOperationChannel\"/>\n  <int-jmx:operation-invoking-outbound-gateway id=\"triggerOperationGateway\" request-channel=\"requestOperationChannel\" reply-channel=\"replyFromOperationChannel\" object-name=\"com.cpandey.siexample.jmx:name=testMBean, type=TestMBean\" operation-name=\"getManagedData\"/>\n```", "```java\nfollowing lines of code:\n```", "```java\n    MessageChannel requestOperationChannel = context.getBean(\"requestOperationChannel\", MessageChannel.class);\n    requestOperationChannel.send(MessageBuilder.withPayload(\"Trigger Method Gateway\").build());\n```", "```java\n<int:service-activator ref=\"commonServiceActivator\" method=\"operationInvokedGateway\" input-channel=\"replyFromOperationChannel\"/>\n```", "```java\n  <int-jmx:mbean-export \n    default-domain=\"com.cpandey.siexample\"\n    server=\"mbeanServer\"/>\n```", "```java\n<int:message-history/>\n```", "```java\n  <int:message-history/>\n\n  <!-- Notification listening channel adapter -->\n  <int-jmx:notification-listening-channel-adapter id=\"notifListener\"\n    channel=\"listenForNotification\"\n    object-name=\"com.cpandey.siexample.jmx:name=testMBean,type=TestMBean\"/>\n\n  <!-- Notification publishing channel adapter -->\n  <int:channel id=\"publishNotification\"/>\n  <int-jmx:notification-publishing-channel-adapter id=\"publishListener\"\n    channel=\"publishNotification\"\n    object-name=\"com.cpandey.siexample.jmx:name=notificationPublisher\"\n    default-notification-type=\"default.notification.type\"/>\n```", "```java\n  <int:channel id=\"listenForNotification\">\n    <int:interceptors>\n      <int:wire-tap channel=\"logger\"/>\n    </int:interceptors>\n  </int:channel>\n\n<int:logging-channel-adapter \n  log-full-message=\"true\" id=\"logger\" level=\"INFO\"/>\n```", "```java\n  <int:channel id=\"controlBusChannel\"/>\n  <int:control-bus input-channel=\"controlBusChannel\"/>\n```", "```java\nimport org.apache.log4j.Logger;\nimport org.springframework.jmx.export.annotation.ManagedOperation;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ControlBusTest {\n  private static final Logger LOGGER = Logger.getLogger(ControlBusTest.class);\n  @ManagedOperation\n  public void controlTestOperation() {\n    LOGGER.info(\"controlTestOperation\");\n  }\n}\n\nMessageChannel input = context.getBean(\"controlBusChannel\", MessageChannel.class);\nString controlMessage = \"@controlBusTest.controlTestOperation()\";\nLOGGER.info(\"Sending message: \" + controlMessage);\ninput.send(MessageBuilder.withPayload(controlMessage).build());\n```", "```java\n<bean id=\"ftpTaskExecutor\" class=\"org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor\">\n  <property name=\"maxPoolSize\" value=\"15\"/>\n  <property name=\"threadNamePrefix\" value=\"ftpService-\"/>\n</bean>\n\n<int:service-activator ref=\"ftpFileProcessor\" method=\"parserFeedsFromFtp\" input-channel=\"ftpInputChannel\" output-channel=\"ftpOutputChannel\">\n    <int:poller fixed-rate=\"1000\" receive-timeout=\"6000\" task-executor=\" ftpTaskExecutor\"></int:poller>\n</int:service-activator>\n```", "```java\n<task:executor id=\"executor\"/>\n```", "```java\n<poller id=\"defaultPoller\" fixed-delay=\"1000 \"default=\"true\" task-executor=\"executor\"/>\n```", "```java\n<task:executor id=\"taskExecutor\" pool-size=\"10\"/>\n```"]