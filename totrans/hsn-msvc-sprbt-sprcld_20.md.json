["```java\nbrew cask install ngrok\n```", "```java\nngrok authtoken <YOUR_AUTH_TOKEN>\n```", "```java\nexport BOOK_HOME=~/Documents/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud\ngit clone https://github.com/PacktPublishing/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud $BOOK_HOME\ncd $BOOK_HOME/Chapter17\n```", "```java\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: product\nspec:\n  template:\n    spec:\n      containers:\n      - name: pro\n        env:\n        - name: SPRING_PROFILES_ACTIVE\n          value: \"docker\"\n        - name: SPRING_CONFIG_LOCATION\n          value: file:/config-repo/application.yml,file:/config-\n           repo/product.yml\n        envFrom:\n        - secretRef:\n            name: rabbitmq-credentials\n        - secretRef:\n            name: mongodb-credentials\n        volumeMounts:\n        - name: config-repo-volume\n          mountPath: /config-repo\n      volumes:\n      - name: config-repo-volume\n        configMap:\n          name: config-repo-product\n```", "```java\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: edge\nspec:\n  tls:\n    - hosts:\n      - minikube.me\n      secretName: tls-certificate\n  rules:\n  - host: minikube.me\n    http:\n      paths:\n      - path: /oauth\n        backend:\n          serviceName: auth-server\n          servicePort: 80\n      - path: /product-composite\n        backend:\n          serviceName: product-composite\n          servicePort: 80 \n      - path: /actuator/health\n        backend:\n          serviceName: product-composite\n          servicePort: 80\n```", "```java\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: nginx-ingress-controller\nspec:\n  template:\n    spec:\n      containers:\n        image: quay.io/kubernetes-ingress-controller/nginx-ingress-\n         controller:0.23.0\n        ports:\n        - containerPort: 443\n          hostPort: 443\n```", "```java\nkubectl create configmap config-repo-product --from-file=config-repo/application.yml --from-file=config-repo/product.yml --save-config\n```", "```java\nkubectl create secret generic rabbitmq-credentials \\\n --from-literal=SPRING_RABBITMQ_USERNAME=rabbit-user-dev \\\n --from-literal=SPRING_RABBITMQ_PASSWORD=rabbit-pwd-dev \\\n --save-config\n```", "```java\nkubectl create secret generic rabbitmq-server-credentials \\\n --from-literal=RABBITMQ_DEFAULT_USER=rabbit-user-dev \\\n --from-literal=RABBITMQ_DEFAULT_PASS=rabbit-pwd-dev \\\n --save-config\n```", "```java\nkubectl create secret tls tls-certificate --key kubernetes/cert/tls.key --cert kubernetes/cert/tls.crt\n```", "```java\nkubectl apply -k kubernetes/services/overlays/dev\n```", "```java\nkubectl wait --timeout=600s --for=condition=ready pod --all\n```", "```java\nsudo bash -c \"echo $(minikube ip) minikube.me | tee -a /etc/hosts\" \n```", "```java\ncd $BOOK_HOME/Chapter17\neval $(minikube docker-env)\n./gradlew build && docker-compose build\n```", "```java\nkubectl delete namespace hands-on\nkubectl create namespace hands-on\nkubectl config set-context $(kubectl config current-context) --namespace=hands-on \n```", "```java\n./kubernetes/scripts/deploy-dev-env.bash \n```", "```java\nHOST=minikube.me PORT=443 ./test-em-all.bash\n```", "```java\nACCESS_TOKEN=$(curl -k https://writer:secret@minikube.me/oauth/token -d grant_type=password -d username=magnus -d password=password -s | jq .access_token -r)\n\ncurl -ks https://minikube.me/product-composite/2 -H \"Authorization: Bearer $ACCESS_TOKEN\" | jq .productId\n```", "```java\nkubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.8.1/cert-manager.yaml\n```", "```java\nkubectl wait --timeout=600s --for=condition=ready pod --all -n cert-manager\n```", "```java\napiVersion: certmanager.k8s.io/v1alpha1\nkind: Issuer\nmetadata:\n  name: letsencrypt-issuer-staging\nspec:\n  acme:\n    email: <your email address>\n    server: https://acme-staging-v02.api.letsencrypt.org/directory\n    privateKeySecretRef:\n      name: letsencrypt-issuer-staging-account-key\n    solvers:\n    - http01:\n        ingress:\n          class: nginx\n```", "```java\nkubectl apply -f kubernetes/services/base/letsencrypt-issuer-staging.yaml\nkubectl apply -f kubernetes/services/base/letsencrypt-issuer-prod.yaml\n```", "```java\nngrok http https://minikube.me:443\n```", "```java\nNGROK_HOST=6cc09528.ngrok.io\n```", "```java\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: edge-ngrok\n  annotations:\n    certmanager.k8s.io/issuer: \"letsencrypt-issuer-staging\"\nspec:\n  tls:\n  - hosts:\n    - xxxxxxxx.ngrok.io\n    secretName: tls-ngrok-letsencrypt-certificate\n  rules:\n  - host: xxxxxxxx.ngrok.io\n```", "```java\nkubectl get cert --watch\n```", "```java\nkubectl apply -f kubernetes/services/base/ingress-edge-server-ngrok.yml\n```", "```java\nkeytool -printcert -sslserver $NGROK_HOST:443 | grep -E \"Owner:|Issuer:\"\n```", "```java\nHOST=$NGROK_HOST PORT=443 ./test-em-all.bash\n```", "```java\ncertmanager.k8s.io/issuer: \"letsencrypt-issuer-staging\"\n```", "```java\ncertmanager.k8s.io/issuer: \"letsencrypt-issuer-prod\"\n```", "```java\nkubectl apply -f kubernetes/services/base/ingress-edge-server-ngrok.yml\n```", "```java\nkeytool -printcert -sslserver $NGROK_HOST:443 | grep -E \"Owner:|Issuer:\"\n```", "```java\nHOST=$NGROK_HOST PORT=443 ./test-em-all.bash\n```", "```java\nkubectl delete namespace hands-on\n```", "```java\ndocker-compose down mongodb mysql rabbitmq\n```", "```java\nproduct:\n  build: microservices/product-service\n  image: hands-on/product-service\n  environment:\n    - SPRING_PROFILES_ACTIVE=docker\n    - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/product.yml\n    - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USR}\n    - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PWD}\n    - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=admin\n    - SPRING_DATA_MONGODB_USERNAME=${MONGODB_USR}\n    - SPRING_DATA_MONGODB_PASSWORD=${MONGODB_PWD}\n  volumes:\n    - $PWD/config-repo:/config-repo\n```", "```java\nRABBITMQ_USR=rabbit-user-prod\nRABBITMQ_PWD=rabbit-pwd-prod\nMONGODB_USR=mongodb-user-prod\nMONGODB_PWD=mongodb-pwd-prod\n```", "```java\neval $(minikube docker-env --unset)\n```", "```java\nminikube stop \n```", "```java\ndocker-compose build\n```", "```java\nCOMPOSE_FILE=docker-compose.yml ./test-em-all.bash start stop\n```", "```java\nCOMPOSE_FILE=docker-compose-partitions.yml ./test-em-all.bash start stop\n```", "```java\nCOMPOSE_FILE=docker-compose-kafka.yml ./test-em-all.bash start stop\n```", "```java\nminikube start\nkubectl config set-context $(kubectl config current-context) --namespace=hands-on\n```", "```java\neval $(minikube docker-env)\n```"]