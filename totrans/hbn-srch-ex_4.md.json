["```java\n...\n@Column\n@Field\n@DateBridge(resolution=Resolution.DAY)\nprivate Date releaseDate;\n...\n```", "```java\n...\n@Column\n@Field(indexNullAs=Field.DEFAULT_NULL_TOKEN)\nprivate String description;\n...\n```", "```java\nimport org.hibernate.search.bridge.StringBridge;\n\n/** Converts values from 0-1 into percentages (e.g. 0.25 -> 25) */\npublic class PercentageBridge implements StringBridge {\n   public String objectToString(Object object) {\n      try {\n         floatfieldValue = ((Float) object).floatValue();\n         if(fieldValue< 0f || fieldValue> 1f) return \"0\";\n         int percentageValue = (int) (fieldValue * 100);\n return Integer.toString(percentageValue);\n      } catch(Exception e) {\n         // default to zero for null values or other problems\n return \"0\";\n      }\n   }\n\n}\n```", "```java\n...\n@Column\n@Field\n@FieldBridge(impl=PercentageBridge.class)\nprivate float currentDiscountPercentage;\n...\n\n```", "```java\n...\npublic Object stringToObject(String stringValue) {\n   return Float.parseFloat(stringValue) / 100;\n}\n...\n```", "```java\npublic class PercentageBridge implements StringBridge,\n ParameterizedBridge {\n\n public static final String DECIMAL_PLACES_PROPERTY =\n \"decimal_places\";\n private int decimalPlaces = 2;  // default\n\n   public String objectToString(Object object) {\n      String format = \"%.\" + decimalPlaces + \"g%n\";\n      try {\n         float fieldValue = ((Float) object).floatValue();\n         if(fieldValue< 0f || fieldValue> 1f) return \"0\";\n         return String.format(format, (fieldValue * 100f));\n      } catch(Exception e) {\n         return String.format(format, \"0\");\n      }\n   }\n public void setParameterValues(Map<String, String> parameters) {\n      try {\n         this.decimalPlaces = Integer.parseInt(\n            parameters.get(DECIMAL_PLACES_PROPERTY) );\n      } catch(Exception e) {}\n   }\n\n}\n```", "```java\n...\n@Column\n@Field\n@FieldBridge(\n   impl=PercentageBridge.class,\n params=@Parameter(\n name=PercentageBridge.DECIMAL_PLACES_PROPERTY, value=\"4\")\n)\nprivate float currentDiscountPercentage;\n...\n```", "```java\nimport org.apache.lucene.document.Document;\nimport org.hibernate.search.bridge.FieldBridge;\nimport org.hibernate.search.bridge.LuceneOptions;\n\npublic class FileBridge implements FieldBridge {\n\n public void set(String name, Object value, \n Document document, LuceneOptionsluceneOptions) {\n      String file = ((String) value).toLowerCase();\n      String type = file.substring(\n      file.indexOf(\".\") + 1 ).toLowerCase();\n luceneOptions.addFieldToDocument(name+\".file\", file, document);\n luceneOptions.addFieldToDocument(name+\".file_type\", type, \n document);\n   }\n\n}\n```", "```java\n...\n@Column\n@Field\n@FieldBridge(impl=FileBridge.class)\nprivate String file;\n...\n```", "```java\npublic class DeviceClassBridge implements FieldBridge {\n\n   public void set(String name, Object value, \n         Document document, LuceneOptionsluceneOptions) {\n      Device device = (Device) value;\n      String fullName = device.getManufacturer()\n         + \" \" + device.getName();\n luceneOptions.addFieldToDocument(name + \".name\", \n fullName, document);\n   }\n\n}\n```", "```java\n@Entity\n@Indexed\n@ClassBridge(impl=DeviceClassBridge.class)\npublic class Device {\n\n   @Id\n   @GeneratedValue\n   private Long id;\n\n   @Column\n   private String manufacturer;\n\n   @Column\n   private String name;\n\n   // constructors, getters and setters...\n}\n\n```", "```java\n...\npublic Object get(String name, Object value, Document document) {\n   // return the full file name field... the file type field\n   // is not needed when going back in the reverse direction\n   return = document.get(name + \".file\");\n}\npublic String objectToString(Object object) {\n   // \"file\" is already a String, otherwise it would need conversion\n      return object;\n}\n...\n```", "```java\n...\n@AnalyzerDef(\n name=\"appAnalyzer\",\n charFilters={    \n      @CharFilterDef(factory=HTMLStripCharFilterFactory.class) \n   },\n tokenizer=@TokenizerDef(factory=StandardTokenizerFactory.class),\n filters={ \n      @TokenFilterDef(factory=StandardFilterFactory.class),\n      @TokenFilterDef(factory=StopFilterFactory.class),\n      @TokenFilterDef(factory=PhoneticFilterFactory.class, \n            params = {\n         @Parameter(name=\"encoder\", value=\"DoubleMetaphone\")\n            }),\n      @TokenFilterDef(factory=SnowballPorterFilterFactory.class, \n            params = {\n      @Parameter(name=\"language\", value=\"English\") \n      })\n   }\n)\n...\n```", "```java\n...\n@Column(length = 1000)\n@Field\n@Analyzer(definition=\"appAnalyzer\")\nprivate String description;\n...\n```", "```java\n...\n@AnalyzerDefs({\n   @AnalyzerDef(name=\"stripHTMLAnalyzer\", ...),\n   @AnalyzerDef(name=\"applyRegexAnalyzer\", ...)\n})\n...\n```", "```java\n@AnalyzerDefs({\n   @AnalyzerDef(name=\"englishAnalyzer\", ...),\n   @AnalyzerDef(name=\"frenchAnalyzer\", ...)\n})\n@AnalyzerDiscriminator(impl=CustomerReviewDiscriminator.class)\npublic class CustomerReview {\n   ...\n   @Field\n   private String language;\n   ...\n}\n```", "```java\npublic class LanguageDiscriminator implements Discriminator {\n\n public String getAnalyzerDefinitionName(Object value, \n Object entity, String field) {\n      if( entity == null || !(entity instanceofCustomerReview) ) {\n         return null;\n      }\n      CustomerReview review = (CustomerReview) entity;\n      if(review.getLanguage() == null) {\n         return null;\n       } else if(review.getLanguage().equals(\"en\")) {\n         return \"englishAnalyzer\";\n       } else if(review.getLanguage().equals(\"fr\")) {\n         return \"frenchAnalyzer\";\n       } else {\n         return null;\n      }\n   }\n\n}\n```", "```java\n...\n@Boost(2.0f)\npublic class App implements Serializable {\n...\n```", "```java\n...\n@Boost(1.5f)\nprivate String name;\n...\n@Boost(1.2f)\nprivate String description;\n...\n```", "```java\n...\n@DynamicBoost(impl=FiveStarBoostStrategy.class)\npublic class CustomerReview {\n...\n```", "```java\npublic class FiveStarBoostStrategy implements BoostStrategy {\n\n public float defineBoost(Object value) {\n      if(value == null || !(value instanceofCustomerReview)) {\n         return 1;\n      }\n      CustomerReviewcustomerReview = (CustomerReview) value;\n      if(customerReview.getStars() == 5) {\n         return 1.5f;\n      } else {\n         return 1;\n      }\n   }\n\n}\n```", "```java\n...\n@Column\nprivate boolean active;\n...\npublic App(String name, String image, String description) {\n   this.name = name;\n   this.image = image;\n   this.description = description;\n this.active = true;\n}\n...\npublic booleanisActive() {\n   return active;\n}\npublic void setActive(boolean active) {\n   this.active = active;\n}\n...\n```", "```java\n...\nimport com.packtpub.hibernatesearch.util.IndexWhenActiveInterceptor;\n...\n@Entity\n@Indexed(interceptor=IndexWhenActiveInterceptor.class)\npublic class App {\n...\n```", "```java\npackage com.packtpub.hibernatesearch.util;\n\nimport org.hibernate.search.indexes.interceptor.EntityIndexingInterceptor;\nimport org.hibernate.search.indexes.interceptor.IndexingOverride;\nimport com.packtpub.hibernatesearch.domain.App;\n\npublic class IndexWhenActiveInterceptor\n implementsEntityIndexingInterceptor<App> {\n\n   /** Only index newly-created App's when they are active */\n public IndexingOverrideonAdd(App entity) {\n      if(entity.isActive()) {\n         return IndexingOverride.APPLY_DEFAULT;\n      }\n      return IndexingOverride.SKIP;\n   }\n public IndexingOverrideonDelete(App entity) {\n      return IndexingOverride.APPLY_DEFAULT;\n   }\n\n   /** Index active App's, and remove inactive ones */\n public IndexingOverrideonUpdate(App entity) {\n      if(entity.isActive()) {\n         return IndexingOverride.UPDATE;\n            } else {\n         return IndexingOverride.REMOVE;\n      }\n   }\n\n   public IndexingOverrideonCollectionUpdate(App entity) {\n      retur nonUpdate(entity);\n   }\n\n}\n```"]