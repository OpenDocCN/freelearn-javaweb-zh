["```java\n      <bean id=\"dataSource\" \n        <!-DataSource configuration --> \n      </bean> \n      <bean id=\"transactionManager\" \n        class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"> \n        <property name=\"dataSource\" ref=\"dataSource\"/>    \n      </bean> \n\n```", "```java\n      <jee: jndi-lookup id=\"dataSource' jndi-name=\"jdbc/books\"/> \n        <bean id=\"transactionManager\"\n          class=\"org.springframework.transaction.jta.JtaTransactionManager\"> \n        </bean> \n\n```", "```java\n      <bean id=\"sessionFactory\" \n         class=\"org.springframework.orm.hibernate5.LocalSessionfactoryBean\" \n         <!-define parameters for session factory --> \n      </bean> \n\n      <bean id=\" transactionManager\"\n         class=\"org.springframework.orm.hibernate5.HibernateTransactionManager\"> \n         <property name=\"sessionFactory\" ref=\"sessionFactory\"/> \n      </bean> \n\n```", "```java\n      public Book serachBook(long ISBN); \n\n```", "```java\n      @Override \n      public Book serachBook(long ISBN) { \n        // TODO Auto-generated method stub \n        String SEARCH_BOOK = \"select * from book where ISBN=?\"; \n        Book book_serached = null; \n        try { \n          book_serached = jdbcTemplate.queryForObject(SEARCH_BOOK,  \n            new Object[] { ISBN },  \n            new RowMapper<Book>(){ \n            @Override \n              public Book mapRow(ResultSet set, int rowNum)  \n              throws SQLException { \n                Book book = new Book(); \n                book.setBookName(set.getString(\"bookName\")); \n                book.setAuthor(set.getString(\"author\")); \n                book.setDescription(set.getString(\"description\")); \n                book.setISBN(set.getLong(\"ISBN\")); \n                book.setPrice(set.getInt(\"price\")); \n                book.setPublication(set.getString(\"publication\")); \n                return book; \n              } \n            }); \n            return book_serached; \n          } catch (EmptyResultDataAccessException ex) { \n          return new Book(); \n        } \n      } \n\n```", "```java\n      public interface BookService { \n        public Book searchBook(long ISBN); \n        public boolean addBook(Book book); \n        public boolean updateBook(long ISBN, int price); \n        public boolean deleteBook(long ISBN); \n      } \n\n```", "```java\n      @Service(value = \"bookService\") \n      public class BookServiceImpl implements BookService { \n        @Autowired \n        PlatformTransactionManager transactionManager; \n\n        @Autowired  \n        BookDAO bookDAO; \n\n        @Override \n        public Book searchBook(long ISBN) { \n          TransactionDefinition definition = new  \n            DefaultTransactionDefinition(); \n          TransactionStatus transactionStatus =  \n            transactionManager.getTransaction(definition); \n          //set transaction as read-only \n          ((DefaultTransactionDefinition)  \n          definition).setReadOnly(true); \n          Book book = bookDAO.serachBook(ISBN); \n          return book; \n        } \n        // other methods from BookService     \n      }   \n\n```", "```java\n      @Override \n      public boolean addBook(Book book) { \n        // TODO Auto-generated method stub \n        TransactionDefinition definition = new  \n          DefaultTransactionDefinition(); \n        TransactionStatus transactionStatus =  \n          transactionManager.getTransaction(definition); \n\n        if (searchBook(book.getISBN()).getISBN() == 98564567l) { \n          System.out.println(\"no book\"); \n          int rows = bookDAO.addBook(book); \n          if (rows > 0) { \n            transactionManager.commit(transactionStatus); \n            return true; \n          } \n        } \n        return false; \n      } \n\n```", "```java\n      @Override \n      public boolean updateBook(long ISBN, int price) { \n        TransactionDefinition definition = new  \n          DefaultTransactionDefinition(); \n        TransactionStatus transactionStatus =  \n          transactionManager.getTransaction(definition); \n        if (searchBook(ISBN).getISBN() == ISBN) { \n          int rows = bookDAO.updateBook(ISBN, price); \n          if (rows > 0) { \n            transactionManager.commit(transactionStatus); \n            return true; \n          } \n        } \n        return false; \n      } \n\n      @Override \n      public boolean deleteBook(long ISBN)  \n      { \n        TransactionDefinition definition = new  \n          DefaultTransactionDefinition(); \n        TransactionStatus transactionStatus =  \n          transactionManager.getTransaction(definition); \n        if (searchBook(ISBN).getISBN() != 98564567l) { \n          boolean deleted = bookDAO.deleteBook(ISBN); \n          if (deleted) { \n            transactionManager.commit(transactionStatus); \n            return true; \n          } \n        } \n        return false; \n      } \n\n```", "```java\n      <context:component-scan base- package=\"com.packt.*\">\n      </context:component-scan> \n\n```", "```java\n      public static void main(String[] args) { \n        // TODO Auto-generated method stub \n        ApplicationContext context = new   \n          ClassPathXmlApplicationContext(\"connection_new.xml\"); \n        BookService service = (BookService)    \n          context.getBean(\"bookService\"); \n        // add book \n        boolean added = service.addBook(new Book(\"Java EE 7  \n          Developer Handbook\", 97815674L, \"PacktPub  \n          publication\", 332,  \"explore the Java EE7  \n          programming\", \"Peter pilgrim\")); \n        if (added) { \n          System.out.println(\"book inserted successfully\"); \n        } else \n        System.out.println(\"SORRY!cannot add book\"); \n        // update the book \n        boolean updated = service.updateBook(97815674L, 800); \n        if (updated) { \n          System.out.println(\"book updated successfully\"); \n        } else \n        System.out.println(\"SORRY!cannot update book\"); \n        // delete the book \n        boolean deleted = service.deleteBook(97815674L); \n        if (deleted) { \n          System.out.println(\"book deleted successfully\"); \n        } else \n        System.out.println(\"SORRY!cannot delete book\"); \n      } \n\n```", "```java\n      @Service(value = \"bookService\") \n      public class BookServiceImpl implements BookService { \n        @Autowired \n        TransactionTemplate transactionTemplate; \n\n        @Autowired \n        BookDAO bookDAO; \n\n        public Book searchBook(long ISBN) { \n          transactionTemplate.setReadOnly(true);   \n          return transactionTemplate.execute(new  \n            TransactionCallback<Book>()  \n          { \n            @Override \n            public Book doInTransaction(TransactionStatus status) { \n              // TODO Auto-generated method stub \n              Book book = bookDAO.serachBook(ISBN); \n              return book; \n          }     \n        });  \n      }  \n\n```", "```java\n      @Override \n      public boolean addBook(Book book) { \n        // TODO Auto-generated method stub \n        if (searchBook(book.getISBN()).getISBN() == 98564567l)  \n        { \n          transactionTemplate.setReadOnly(false); \n          return transactionTemplate.execute(new  \n            TransactionCallback<Boolean>()  \n          { \n            @Override \n            public boolean doInTransaction(TransactionStatus status) { \n              try { \n                int rows = bookDAO.addBook(book); \n                if (rows > 0) \n                  return true; \n              } catch (Exception exception) { \n                status.setRollbackOnly(); \n              } \n              return false; \n            } \n          }); \n        } \n        return false; \n      } \n\n```", "```java\n      <bean id=\"transactionTemplate\"\n        class=\"org.springframework.transaction.support.TransactionTemplate\"> \n        <property name=\"transactionManager\"  \n          ref=\"transactionManager\"></property> \n      </bean> \n\n```", "```java\n      public Book doInTransaction(TransactionStatus status) { \n        //Book book = bookDAO.serachBook(ISBN); \n        Book book=new Book(); \n        book.setISBN(ISBN); \n        bookDAO.addBook(book); \n        return book; \n      } \n\n```", "```java\n      Exception in thread \"main\" \n      org.springframework.dao.TransientDataAccessResourceException:  \n      PreparedStatementCallback; SQL [insert into book values(?,?,?,?,?,?)];  \n      Connection is read-only. Queries leading to data modification are not\n      allowed; nested exception is java.sql.SQLException:\n      Connection is read- only.  \n\n```", "```java\n<tx:advise id=:transactionAdvise\" transaction-manager=\"transactionamanager\">  \n  <tx:attributes> \n     <tx:method name=\"find*\" read-only=\"true\" \n       rollback- for =\"NoDataFoundException'> \n    </tx:attributes> \n  </tx:advise> \n\n```", "```java\n<bean id=\"transactionManager\" class=\" your choice of transaction manager\"> \n  <!-transaction manager configuration - -> \n</bean> \n<tx:annotation-driven transaction-manager=\"transcationManager\"/> \n\n```", "```java\n      @Service(value = \"bookService\") \n      public class BookServiceImpl implements BookService { \n\n        @Autowired \n        BookDAO bookDAO; \n\n        @Override \n        @Transactional(readOnly=true) \n        public Book searchBook(long ISBN)  \n        { \n          Book book = bookDAO.serachBook(ISBN); \n          return book; \n        } \n\n```", "```java\n      <tx:annotation-driven /> \n\n```", "```java\n      <beans xmlns=\"http://www.springframework.org/schema/beans\" \n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n        xmlns:context=\"http://www.springframework.org/schema/context\" \n        xmlns:tx=\"http://www.springframework.org/schema/tx\" \n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n        http://www.springframework.org/schema/beans/spring-beans.xsd  \n        http://www.springframework.org/schema/context  \n        http://www.springframework.org/schema/context/spring-context.xsd  \n        http://www.springframework.org/schema/tx  \n        http://www.springframework.org/schema/tx/spring-tx.xsd\"> \n\n```", "```java\n      <tx:annotation-driven /> \n\n```", "```java\n      @Transactional(readOnly=true) \n      public boolean addBook(Book book) { \n        if (searchBook(book.getISBN()).getISBN() == 98564567l) { \n          System.out.println(\"no book\"); \n          int rows = bookDAO.addBook(book); \n\n          if (rows > 0) { \n            return true; \n          } \n        } \n        return false;  \n      } \n\n```", "```java\n      Exception in thread \"main\" \n      org.springframework.dao.TransientDataAccessResourceException:  \n      PreparedStatementCallback; SQL [insert into book values(?,?,?,?,?,?)];\n      Connection is read-only. Queries leading to data modification are not\n      allowed; nested exception is java.sql.SQLException:Connection is read-only.\n      Queries leading to data modification are not allowed \n\n```"]