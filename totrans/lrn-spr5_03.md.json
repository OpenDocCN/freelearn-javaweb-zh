["```java\n      <beans xmlns=\"http://www.springframework.org/schema/beans\" \n        xmlns:jee=\"http://www.springframework.org/schema/jee\" \n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n        xsi:schemaLocation=\"http://www.springframework.org/schema/\n        beans  http://www.springframework.org/schema/beans/\n        spring-beans.xsd http://www.springframework.org/schema/jee\n        http://www.springframework.org/schema/jee/spring-jee.xsd\"> \n\n        <bean id=\"dataSource\"  \n          class=\"org.springframework.jndi.JndiObjectFactoryBean\"> \n          <property name=\"jndiName\"   \n            value=\"java:comp/env/jdbc/myDataSource\"/> \n        </bean> \n\n        <jee:jndi-lookup jndi-name=\"jdbc/myDataSource\" id=\"dataSource\" \n          resource-ref=\"true\"/> \n      </beans> \n\n```", "```java\n      <bean id=\"dataSource\"               \n         class=\"org.apache.commons.dbcp.BasicDataSource\">        \n        <property name=\"driverClassName\"                 \n          value=\"org.hsqldb.jdbcDriver\"/> \n        <property name=\"url\"    \n            value=\"jdbc:hsqldb:hsql://locahost/name_of_schama\"/> \n        <property name=\"username\"      \n            value=\"credential_for_username\"/> \n        <property name=\"password\"      \n            value=\"credential_for_password\"/> \n        <property name=\"initialSize\"      \n            value=\"\"/> \n        <property name=\"maxActive\"      \n            value=\"\"/> \n      </bean> \n\n```", "```java\n      <bean id=\"dataSource\"\n        class=\"org.springframework.jdbc.datasource.\n        DriverManagerDataSource\">        \n        <property name=\"driverClassName\"                 \n          value=\"org.hsqldb.jdbcDriver\"/> \n        <property name=\"url\"    \n          value=\"jdbc:hsqldb:hsql://locahost/name_of_schama\"/> \n        <property name=\"username\"      \n          value=\"credential_for_username\"/> \n        <property name=\"password\"      \n          value=\"credential_for_password\"/> \n      </bean> \n\n```", "```java\n      public class Book { \n        private String bookName; \n        private long ISBN; \n        private String publication; \n        private int price; \n        private String description; \n        private String [] authors; \n\n        public Book() { \n          // TODO Auto-generated constructor stub \n          this.bookName=\"Book Name\"; \n          this.ISBN =98564567l; \n          this.publication=\"Packt Publication\"; \n          this.price=200; \n          this.description=\"this is book in general\"; \n          this.author=\"ABCD\"; \n        } \n\n        public Book(String bookName, long ISBN, String  \n          publication,int price,String description,String  \n          author)  \n       { \n          this.bookName=bookName; \n          this.ISBN =ISBN; \n          this.publication=publication; \n          this.price=price; \n          this.description=description; \n           this.author=author; \n        } \n        // getters and setters \n        @Override \n        public String toString() { \n          // TODO Auto-generated method stub \n          return bookName+\"\\t\"+description+\"\\t\"+price; \n        } \n      }\n```", "```java\n      interface BookDAO \n      { \n        public int addBook(Book book); \n      } \n\n```", "```java\n      private DataSource dataSource; \n\n```", "```java\n      public class BookDAOImpl implements BookDAO { \n        private DataSource dataSource; \n\n        public void setDataSource(DataSource dataSource) { \n          this.dataSource = dataSource; \n        } \n\n      @Override\n      public int addBook(Book book) { \n          // TODO Auto-generated method stub \n          int rows=0; \n          String INSERT_BOOK=\"insert into book values(?,?,?,?,?,?)\"; \n          try { \n            Connection connection=dataSource.getConnection(); \n            PreparedStatement ps=  \n                   connection.prepareStatement(INSERT_BOOK); \n            ps.setString(1,book.getBookName()); \n            ps.setLong(2,book.getISBN()); \n            ps.setString(3,book.getPublication()); \n            ps.setInt(4,book.getPrice()); \n            ps.setString(5,book.getDescription()); \n            ps.setString(6,book.getAuthor()); \n            rows=ps.executeUpdate(); \n          } catch (SQLException e) { \n            // TODO Auto-generated catch block \n            e.printStackTrace(); \n          } \n          return rows; \n        } \n      } \n\n```", "```java\n<bean id=\"dataSource\" \n  class= \n   \"org.springframework.jdbc.datasource.DriverManagerDataSource\"> \n    <property name=\"driverClassName\"    \n        value=\"com.mysql.jdbc.Driver\" /> \n    <property name=\"url\"  \n        value=\"jdbc:mysql://localhost:3306/bookDB\" /> \n    <property name=\"username\" value=\"root\" /> \n    <property name=\"password\" value=\"mysql\" /> \n  </bean> \n\n  <bean id=\"bookDao\" class=\"com.packt.ch03.dao.BookDAOImpl\" \n     autowire=\"byname\"> \n  </bean> \n\n```", "```java\n      public static void main(String[] args) { \n        // TODO Auto-generated method stub \n        ApplicationContext context=new  \n          ClassPathXmlApplicationContext(\"connection.xml\"); \n        BookDAO bookDAO=(BookDAO) context.getBean(\"bookDao\"); \n        int rows=bookDAO.addBook(new Book(\"Learning Modular     \n          Java Programming\", 9781234,\"PacktPub   \n          publication\",800,\"explore the power of   \n          Modular programming\",\"T.M.Jog\"));        \n        if(rows>0) \n        { \n          System.out.println(\"book inserted successfully\"); \n        } \n        else \n          System.out.println(\"SORRY!cannot add book\"); \n      }  \n\n```", "```java\n      @Repository(value=\"bookDAO_new\") \n      public class BookDAO_Annotation implements BookDAO { \n        @Autowired \n        private DataSource dataSource; \n\n        @Override \n        public int addBook(Book book) { \n          // TODO Auto-generated method stub \n          int rows=0; \n          // code similar to insertion of book as shown in     \n          Case1\\. \n          return rows; \n        } \n      } \n\n```", "```java\n      <context:annotation-config/> \n <context:component-scan base- \n        package=\"com.packt.ch03.*\"></context:component-scan> \n\n      <bean id=\"dataSource\" \n        class=\"org.springframework.jdbc.datasource.\n        DriverManagerDataSo urce\"> \n        <!-add properties similar to Case1 -- > \n      </bean> \n\n```", "```java\n      public class MainBookDAO_Annotation { \n          public static void main(String[] args) { \n          // TODO Auto-generated method stub \n          ApplicationContext context=new  \n            ClassPathXmlApplicationContext(\"connection_new.xml\"); \n\n          BookDAO bookDAO=(BookDAO) context.getBean(\"bookDAO_new\"); \n          int rows=bookDAO.addBook(new Book(\"Learning Modular Java  \n             Programming\", 9781235L,\"PacktPub  \n             publication\",800,\"explore the power of  \n             Modular programming\",\"T.M.Jog\")); \n          if(rows>0) \n          { \n            System.out.println(\"book inserted successfully\"); \n          } \n          else \n          System.out.println(\"SORRY!cannot add book\"); \n        } \n      } \n\n```", "```java\n      @Repository (value = \"bookDAO_jdbcTemplate\") \n      public class BookDAO_JdbcTemplate implements BookDAO { \n\n        @Autowired \n        JdbcTemplate jdbcTemplate; \n\n        @Override \n        public int addBook(Book book) { \n          // TODO Auto-generated method stub \n          int rows = 0; \n          String INSERT_BOOK = \"insert into book  \n             values(?,?,?,?,?,?)\"; \n\n          rows=jdbcTemplate.update(INSERT_BOOK, book.getBookName(),                              book.getISBN(), book.getPublication(),   \n            book.getPrice(),book.getDescription(),  \n            book.getAuthor()); \n          return rows; \n        } \n      } \n\n```", "```java\n      @Override \n      public int updateBook(long ISBN, int price) { \n        // TODO Auto-generated method stub \n        int rows = 0; \n        String UPDATE_BOOK = \"update book set price=? where ISBN=?\"; \n\n        rows=jdbcTemplate.update(UPDATE_BOOK, price,ISBN); \n        return rows; \n      } \n\n      @Override \n      public boolean deleteBook(long ISBN) { \n        // TODO Auto-generated method stub \n        int rows = 0; \n        boolean flag=false; \n        String DELETE_BOOK = \"delete from book where ISBN=?\"; \n\n        rows=jdbcTemplate.update(DELETE_BOOK, ISBN); \n        if(rows>0) \n        flag=true; \n\n        return flag; \n      } \n\n```", "```java\n      <context:annotation-config/> \n      <context:component-scan base- \n        package=\"com.packt.ch03.*\"></context:component-scan> \n\n      <bean id=\"dataSource\" \n        class=\"org.springframework.jdbc.datasource.\n        DriverManagerDataSource\"> \n        <property name=\"driverClassName\"  \n          value=\"com.mysql.jdbc.Driver\" /> \n        <property name=\"url\"  \n          value=\"jdbc:mysql://localhost:3306/bookDB\" /> \n        <property name=\"username\" value=\"root\" /> \n        <property name=\"password\" value=\"mysql\" /> \n      </bean> \n\n      <bean id=\"jdbcTemplate\"  \n        class=\"org.springframework.jdbc.core.JdbcTemplate\"> \n        <property name=\"dataSource\" ref=\"dataSource\"></property> \n      </bean> \n\n```", "```java\n      public class MainBookDAO_operations { \n        public static void main(String[] args) { \n          // TODO Auto-generated method stub \n          ApplicationContext context=new  \n            ClassPathXmlApplicationContext(\"connection_new.xml\"); \n          BookDAO bookDAO=(BookDAO)  \n            context.getBean(\"bookDAO_jdbcTemplate\"); \n          //add book \n          int rows=bookDAO.addBook(new Book(\"Java EE 7 Developer  \n             Handbook\", 97815674L,\"PacktPub  \n             publication\",332,\"explore the Java EE7  \n             programming\",\"Peter pilgrim\")); \n          if(rows>0) \n          { \n            System.out.println(\"book inserted successfully\"); \n          } \n          else \n            System.out.println(\"SORRY!cannot add book\"); \n          //update the book \n          rows=bookDAO.updateBook(97815674L,432); \n          if(rows>0) \n          { \n            System.out.println(\"book updated successfully\"); \n          } \n          else \n            System.out.println(\"SORRY!cannot update book\"); \n          //delete the book \n          boolean deleted=bookDAO.deleteBook(97815674L); \n          if(deleted) \n          { \n            System.out.println(\"book deleted successfully\"); \n          } \n          else \n            System.out.println(\"SORRY!cannot delete book\"); \n        } \n      } \n\n```", "```java\n      String INSERT_BOOK = \"insert into book\n        values(:bookName,:ISBN,:publication,:price,:description,\n        : author)\";\n```", "```java\n      @Repository(value=\"BookDAO_named\") \n      public class BookDAO_NamedParameter implements BookDAO { \n\n        @Autowired \n        private NamedParameterJdbcTemplate namedTemplate; \n\n        @Override \n        public int addBook(Book book) { \n          // TODO Auto-generated method stub \n          int rows = 0; \n          String INSERT_BOOK = \"insert into book  \n            values(:bookName,:ISBN,:publication,:price, \n            :description,:author)\"; \n          Map<String,Object>params=new HashMap<String,Object>(); \n          params.put(\"bookName\", book.getBookName()); \n          params.put(\"ISBN\", book.getISBN()); \n          params.put(\"publication\", book.getPublication()); \n          params.put(\"price\",book.getPrice()); \n          params.put(\"description\",book.getDescription()); \n          params.put(\"author\", book.getAuthor()); \n          rows=namedTemplate.update(INSERT_BOOK,params);  \n\n          return rows; \n        } \n\n        @Override \n        public int updateBook(long ISBN, int price) { \n          // TODO Auto-generated method stub \n          int rows = 0; \n          String UPDATE_BOOK =  \n           \"update book set price=:price where ISBN=:ISBN\"; \n\n          Map<String,Object>params=new HashMap<String,Object>(); \n          params.put(\"ISBN\", ISBN); \n          params.put(\"price\",price); \n          rows=namedTemplate.update(UPDATE_BOOK,params); \n          return rows; \n        } \n\n        @Override \n        public boolean deleteBook(long ISBN) { \n          // TODO Auto-generated method stub \n          int rows = 0; \n          boolean flag=false; \n          String DELETE_BOOK = \"delete from book where ISBN=:ISBN\"; \n\n          Map<String,Object>params=new HashMap<String,Object>(); \n          params.put(\"ISBN\", ISBN); \n          rows=namedTemplate.update(DELETE_BOOK, params); \n          if(rows>0) \n            flag=true; \n          return flag; \n        } \n      } \n\n```", "```java\n      <bean id=\"namedTemplate\" \n        class=\"org.springframework.jdbc.core.namedparam. \n          NamedParameterJdbcTemplate\">   \n        <constructor-arg ref=\"dataSource\"/> \n      </bean> \n\n```", "```java\n      BookDAO bookDAO=(BookDAO) context.getBean(\"BookDAO_named\"); \n\n```", "```java\n      @Repository(value=\"daoSupport\") \n      public class BookDAO_JdbcTemplateSupport extends JdbcDaoSupport  \n        implements BookDAO \n      { \n        @Autowired \n        public BookDAO_JdbcTemplateSupport(JdbcTemplate jdbcTemplate) \n        { \n          setJdbcTemplate(jdbcTemplate); \n        } \n\n        @Override \n        public int addBook(Book book) { \n          // TODO Auto-generated method stub \n          int rows = 0; \n          String INSERT_BOOK = \"insert into book values(?,?,?,?,?,?)\"; \n\n          rows=getJdbcTemplate().update(INSERT_BOOK,  \n            book.getBookName(), book.getISBN(),  \n            book.getPublication(), book.getPrice(), \n            book.getDescription(), book.getAuthor()); \n\n          return rows; \n        } \n\n        @Override \n        public int updateBook(long ISBN, int price) { \n          // TODO Auto-generated method stub \n          int rows = 0; \n          String UPDATE_BOOK = \"update book set price=? where ISBN=?\"; \n\n          rows=getJdbcTemplate().update(UPDATE_BOOK, price,ISBN); \n          return rows; \n        } \n\n        @Override \n        public boolean deleteBook(long ISBN) { \n          // TODO Auto-generated method stub \n          int rows = 0; \n          boolean flag=false; \n          String DELETE_BOOK = \"delete from book where ISBN=?\"; \n\n          rows=getJdbcTemplate().update(DELETE_BOOK, ISBN); \n          if(rows>0) \n            flag=true; \n\n          return flag; \n        } \n      } \n\n```", "```java\n<bean id=\"sessionFactory\" \n    class=\"org.springframework.orm.hibernate5.LocalSessionFactoryBean\"> \n    <property name=\"dataSource\" ref=\"dataSource\" /> \n    <property name=\"mappingResources\"> \n      <list> \n        <value>book.hbm.xml</value> \n      </list> \n    </property> \n    <property name=\"hibernateProperties\"> \n      <props> \n        <prop key=    \n          \"hibernate.dialect\">org.hibernate.dialect.MySQLDialect \n        </prop> \n        <prop key=\"hibernate.show_sql\">true</prop> \n        <prop key=\"hibernate.hbm2ddl.auto\">update</prop> \n      </props> \n    </property> \n  </bean> \n\n```", "```java\n<bean id=\"hibernateTemplate\" \\\n  class=\"org.springframework.orm.hibernate5.HibernateTemplate\"> \n    <property name=\"sessionFactory\" ref=\"sessionFactory\"></property> \n</bean> \n\n```", "```java\n      <hibernate-mapping> \n        <class name=\"com.packt.ch03.beans.Book\" table=\"book_hib\"> \n          <id name=\"ISBN\" type=\"long\"> \n            <column name=\"ISBN\" /> \n            <generator class=\"assigned\" /> \n          </id> \n          <property name=\"bookName\" type=\"java.lang.String\"> \n            <column name=\"book_name\" /> \n          </property>               \n          <property name=\"description\" type=\"java.lang.String\"> \n            <column name=\"description\" /> \n          </property> \n          <property name=\"author\" type=\"java.lang.String\"> \n            <column name=\"book_author\" /> \n          </property> \n          <property name=\"price\" type=\"int\"> \n            <column name=\"book_price\" /> \n          </property> \n        </class> \n\n      </hibernate-mapping>\n```", "```java\n      @Repository(value = \"bookDAO_sessionFactory\") \n      public class BookDAO_SessionFactory implements BookDAO { \n\n        @Autowired \n        SessionFactory sessionFactory; \n\n        @Override \n        public int addBook(Book book) { \n          // TODO Auto-generated method stub \n          Session session = sessionFactory.openSession(); \n          Transaction transaction = session.beginTransaction(); \n          try { \n            session.saveOrUpdate(book); \n            transaction.commit(); \n            session.close(); \n            return 1; \n          } catch (DataAccessException exception) { \n            exception.printStackTrace(); \n          } \n          return 0; \n        } \n\n        @Override \n        public int updateBook(long ISBN, int price) { \n          // TODO Auto-generated method stub \n          Session session = sessionFactory.openSession(); \n          Transaction transaction = session.beginTransaction(); \n          try { \n            Book book = session.get(Book.class, ISBN); \n            book.setPrice(price); \n            session.saveOrUpdate(book); \n            transaction.commit(); \n            session.close(); \n            return 1; \n          } catch (DataAccessException exception) { \n            exception.printStackTrace(); \n          } \n          return 0; \n        } \n\n        @Override \n        public boolean deleteBook(long ISBN) { \n          // TODO Auto-generated method stub \n          Session session = sessionFactory.openSession(); \n          Transaction transaction = session.beginTransaction(); \n          try { \n            Book book = session.get(Book.class, ISBN); \n            session.delete(book); \n            transaction.commit(); \n            session.close(); \n            return true; \n          } catch (DataAccessException exception) { \n            exception.printStackTrace(); \n          } \n          return false; \n        } \n      } \n\n```", "```java\n      <context:annotation-config /> \n      <context:component-scan base-package=\"com.packt.ch03.*\"> \n      </context:component-scan> \n\n      <bean id=\"dataSource\" \n        class=\"org.springframework.jdbc.datasource. \n        DriverManagerDataSource\"> \n        <!-properties for dataSourceà \n      </bean> \n\n      <bean id=\"sessionFactory\" class=  \n        \"org.springframework.orm.hibernate5.LocalSessionFactoryBean\"> \n        <property name=\"dataSource\" ref=\"dataSource\" /> \n        <property name=\"mappingResources\"> \n          <list> \n            <value>book.hbm.xml</value> \n          </list> \n        </property> \n        <property name=\"hibernateProperties\"> \n          <props> \n            <prop key=      \n              \"hibernate.dialect\">org.hibernate.dialect.MySQLDialect \n            </prop> \n            <prop key=\"hibernate.show_sql\">true</prop> \n            <prop key=\"hibernate.hbm2ddl.auto\">update</prop> \n          </props> \n        </property> \n      </bean> \n\n```", "```java\n      public static void main(String[] args) { \n       // TODO Auto-generated method stub \n       ApplicationContext context=new  \n         ClassPathXmlApplicationContext(\"connection_new.xml\"); \n       BookDAO bookDAO=(BookDAO)  \n         context.getBean(\"bookDAO_sessionFactory\"); \n       //add book\n       int rows=bookDAO.addBook(new Book(\"Java EE 7 Developer  \n         Handbook\", 97815674L,\"PacktPub  \n         publication\",332,\"explore the Java EE7  \n         programming\",\"Peter pilgrim\")); \n       if(rows>0) \n       { \n         System.out.println(\"book inserted successfully\"); \n       } \n       else\n        System.out.println(\"SORRY!cannot add book\"); \n\n      //update the book\n      rows=bookDAO.updateBook(97815674L,432); \n      if(rows>0) \n      { \n        System.out.println(\"book updated successfully\"); \n      }\n      else\n        System.out.println(\"SORRY!cannot update book\"); \n        //delete the book\n        boolean deleted=bookDAO.deleteBook(97815674L); \n        if(deleted) \n        { \n          System.out.println(\"book deleted successfully\"); \n        }\n        else\n          System.out.println(\"SORRY!cannot delete book\"); \n      } \n\n```", "```java\n<beans xmlns=\"http://www.springframework.org/schema/beans\" \n  xmlns:cache=\"http://www.springframework.org/schema/cache\" \n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \nxsi:schemaLocation=\"http://www.springframework.org/schema/beans \n    http://www.springframework.org/schema/beans/spring-beans.xsd  \n  http://www.springframework.org/schema/cache \n  http://www.springframework.org/schema/cache/spring-cache.xsd\"> \n        <cache:annotation-driven /> \n</beans> \n\n```", "```java\n      public Book getBook(long ISBN); \n\n```", "```java\n      public Book getBook(long ISBN) { \n        // TODO Auto-generated method stub \n        Session session = sessionFactory.openSession(); \n        Transaction transaction = session.beginTransaction(); \n        Book book = null; \n        try { \n          book = session.get(Book.class, ISBN); \n          transaction.commit(); \n          session.close(); \n        } catch (DataAccessException exception) { \n          exception.printStackTrace(); \n          book; \n      } \n\n```", "```java\n      public static void main(String[] args) { \n        // TODO Auto-generated method stub \n        ApplicationContext context=new  \n          ClassPathXmlApplicationContext(\"connection_new.xml\"); \n        BookDAO bookDAO=(BookDAO)   \n          context.getBean(\"bookDAO_sessionFactory\"); \n        Book book=bookDAO.getBook(97815674L);    \n\n        System.out.println(book.getBookName()+ \n          \"\\t\"+book.getAuthor()); \n        Book book1=bookDAO.getBook(97815674L); \n        System.out.println(book1.getBookName()+ \n          \"\\t\"+book1.getAuthor()); \n      } \n\n```", "```java\n      Hibernate: select book0_.ISBN as ISBN1_0_0_, book0_.book_name as        book_nam2_0_0_, book0_.description as descript3_0_0_,\n      book0_.book_author as book_aut4_0_0_, book0_.book_price as\n      book_pri5_0_0_ from book_hib book0_ where book0_.ISBN=? \n      book:-Java EE 7 Developer Handbook  Peter pilgrim \n\n      Hibernate: select book0_.ISBN as ISBN1_0_0_, book0_.book_name as        book_nam2_0_0_, book0_.description as descript3_0_0_,  \n      book0_.book_author as book_aut4_0_0_, book0_.book_price as \n      book_pri5_0_0_ from book_hib book0_ where book0_.ISBN=? \n      book1:-Java EE 7 Developer Handbook  Peter pilgrim \n\n```", "```java\n      @Cacheable(\"repo\") \n      public Book getBook(long ISBN) {// code will go here } \n\n```", "```java\n      <cache:annotation-driven /> \n\n```", "```java\n      <bean id=\"cacheManager\"  \n        class=\"org.springframework.cache.support.SimpleCacheManager\"> \n        <property name=\"caches\"> \n          <set> \n            <bean class=\"org.springframework.cache.concurrent.\n              ConcurrentMapCache FactoryBean\"> \n              <property name=\"name\" value=\"repo\"></property> \n            </bean> \n          </set> \n        </property> \n      </bean> \n\n```", "```java\n      Hibernate: select book0_.ISBN as ISBN1_0_0_, book0_.book_name as        book_nam2_0_0_, book0_.description as descript3_0_0_,  \n      book0_.book_author as book_aut4_0_0_, book0_.book_price as \n      book_pri5_0_0_ from book_hib book0_ where book0_.ISBN=? \n      book:-Java EE 7 Developer Handbook  Peter pilgrim \n\n      book1:-Java EE 7 Developer Handbook  Peter pilgrim \n\n```"]