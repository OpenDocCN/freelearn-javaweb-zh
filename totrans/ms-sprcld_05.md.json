["```java\n---\nspring:\n profiles: zone1\n\neureka:\n instance:\n   metadataMap:\n     zone: zone1\n   client:\n     serviceUrl:\n       defaultZone: http://localhost:8761/eureka/\n\nserver: \n port: ${PORT:8081}\n```", "```java\n{\n \"name\":\"client-service\",\n \"profiles\":[\"zone1\"],\n \"label\":null,\n \"version\":null,\n \"state\":null,\n \"propertySources\":[{\n \"name\":\"classpath:/config/client-service-zone1.yml\",\n \"source\":{\n \"eureka.instance.metadataMap.zone\":\"zone1\",\n \"eureka.client.serviceUrl.defaultZone\":\"http://localhost:8761/eureka/\",\n \"server.port\":\"${PORT:8081}\"\n }\n }]\n}\n```", "```java\neureka.client.serviceUrl.defaultZone: http://localhost:8762/eureka/\neureka.instance.metadataMap.zone: zone2\nserver.port: 8082\n```", "```java\neureka:\n client:\n serviceUrl:\n defaultZone: http://localhost:8763/eureka/\n instance:\n metadataMap:\n zone: zone3\nserver:\n port: 8083\n```", "```java\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-config-server</artifactId>\n</dependency>\n```", "```java\n@SpringBootApplication\n@EnableConfigServer\npublic class ConfigApplication {\n\n public static void main(String[] args) {\n   new SpringApplicationBuilder(ConfigApplication.class).web(true).run(args);\n }\n\n}\n```", "```java\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-starter-config</artifactId>\n</dependency>\n```", "```java\nspring: \n application:\n   name: client-service\n cloud:\n   config:\n     uri: http://localhost:8889\n```", "```java\nspring: \n application:\n   name: discovery-service\n cloud:\n   config:\n     uri: http://localhost:8889\n```", "```java\nspring: \n application:\n   name: discovery-service \n\nserver: \n port: ${PORT:8761} \n\neureka:\n client:\n   registerWithEureka: false\n   fetchRegistry: false\n```", "```java\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-config-server</artifactId>\n</dependency>\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-starter-eureka</artifactId>\n</dependency>\n```", "```java\nspring: \n application:\n   name: client-service\n cloud:\n   config:\n     discovery:\n       enabled: true\n       serviceId: config-server\n```", "```java\nspring:\n application:\n   name: config-server\n cloud:\n   config:\n     server:\n       git:\n         uri: https://github.com/piomin/sample-spring-cloud-config-repo.git\n         username: ${github.username}\n         password: ${github.password}\n         cloneOnStart: true\n```", "```java\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8761/eureka/\n  instance:\n    metadataMap:\n      zone: zone3\nserver:\n  port: 8083\n```", "```java\nspring: \n application:\n   name: client-service\n cloud:\n   config:\n     uri: http://localhost:8889\n     profile: zone1\n     label: discovery\n#    label: e546dd6 // uncomment for rollback\n```", "```java\nspring:\n cloud:\n   config:\n     server:\n       git:\n         uri: https://github.com/piomin/spring-cloud-config-repo/config-repo\n         repos:\n           simple: https://github.com/simple/config-repo\n           special:\n             pattern: special*/dev*,*special*/dev*\n             uri: https://github.com/special/config-repo\n           local:\n             pattern: local*\n             uri: file:/home/config/config-repo \n```", "```java\ndocker run --cap-add=IPC_LOCK -d --name=vault -e 'VAULT_DEV_ROOT_TOKEN_ID=client' -p 8200:8200 vault \n```", "```java\n$ vault write secret/hello value=world\n$ vault read secret/hello\n```", "```java\n$ curl -H \"X-Vault-Token: client\" -H \"Content-Type: application/json\" -X POST -d '{\"server.port\":8081,\"sample.string.property\": \"Client App\",\"sample.int.property\": 1}' http://192.168.99.100:8200/v1/secret/client-service\n```", "```java\n$ curl -H \"X-Vault-Token: client\" -X GET http://192.168.99.100:8200/v1/secret/client-service\n```", "```java\nspring:\n application:\n   name: config-server\n cloud:\n   config:\n     server:\n       vault:\n         host: 192.168.99.100\n         port: 8200\n```", "```java\n$ curl -X \"GET\" \"http://localhost:8889/client-service/default\" -H \"X-Config-Token: client\"\n```", "```java\n{\n    \"name\":\"client-service\",\n    \"profiles\":[\"default\"],\n    \"label\":null,\n    \"version\":null,\n    \"state\":null,\n    \"propertySources\":[{\n        \"name\":\"vault:client-service\",\n        \"source\":{\n            \"sample.int.property\":1,\n            \"sample.string.property\":\"Client App\",\n            \"server.port\":8081\n        }\n    }]\n} \n```", "```java\nspring:\n application:\n   name: client-service\n cloud:\n   config:\n     uri: http://localhost:8889\n     token: client\n```", "```java\nspring:\n cloud:\n   config:\n     uri: https://localhost:8889\n     username: user\n     password: secret\n```", "```java\neureka:\n instance:\n   metadataMap:\n     zone: zone1\n client:\n   serviceUrl:\n     defaultZone: http://localhost:8761/eureka/\nserver: \n port: ${PORT:8081}\nmanagement:\n security:\n   enabled: false \nsample:\n string:\n   property: Client App\n int:\n   property: 1\n```", "```java\n@Component\n@RefreshScope\npublic class ClientConfiguration {\n\n @Value(\"${sample.string.property}\")\n private String sampleStringProperty;\n @Value(\"${sample.int.property}\")\n private int sampleIntProperty; \n\n public String showProperties() {\n   return String.format(\"Hello from %s %d\", sampleStringProperty, sampleIntProperty);\n }\n\n}\n```", "```java\n@RestController\npublic class ClientController {\n\n @Autowired\n private ClientConfiguration conf; \n\n @GetMapping(\"/ping\")\n public String ping() {\n     return conf.showProperties();\n } \n\n}\n```", "```java\ndocker run -d --name rabbit -p 5672:5672 -p 15672:15672 rabbitmq:management\n```", "```java\n <dependency>\n     <groupId>org.springframework.cloud</groupId>\n     <artifactId>spring-cloud-starter-bus-amqp</artifactId>\n </dependency>\n```", "```java\nspring:\n rabbitmq:\n   host: 192.168.99.100\n   port: 5672\n   username: guest\n   password: guest\n```", "```java\n<dependency>\n <groupId>org.springframework.cloud</groupId>\n <artifactId>spring-cloud-config-monitor</artifactId>\n</dependency>\n<dependency>\n <groupId>org.springframework.cloud</groupId>\n <artifactId>spring-cloud-starter-bus-amqp</artifactId>\n</dependency>\n```", "```java\nspring:\n application:\n   name: config-server\n cloud:\n   config:\n     server:\n       monitor:\n         github:\n           enabled: true\n```", "```java\n@Bean\npublic GithubPropertyPathNotificationExtractor githubPropertyPathNotificationExtractor() {\n    return new GithubPropertyPathNotificationExtractor();\n}\n```", "```java\n$ curl -H \"X-Github-Event: push\" -H \"Content-Type: application/json\" -X POST -d '{\"commits\": [{\"modified\": [\"client-service-zone1.yml\"]}]}' http://localhost:8889/monitor\n```", "```java\ndocker run -d --name gitlab -p 10443:443 -p 10080:80 -p 10022:22 gitlab/gitlab-ce:latest\n```", "```java\nspring:\n application:\n   name: config-server\n cloud:\n   config:\n     server:\n       monitor:\n         gitlab:\n           enabled: true\n       git:\n         uri: http://192.168.99.100:10080/root/sample-spring-cloud-config-repo.git\n         username: root\n         password: root123\n         cloneOnStart: true \n```", "```java\n@Bean\npublic GitlabPropertyPathNotificationExtractor gitlabPropertyPathNotificationExtractor() {\n    return new GitlabPropertyPathNotificationExtractor();\n}\n```"]