["```java\nGET http://myHost:myPort/openapi\n```", "```java\n@GET\n@Path(\"/findByMake\")\n@Operation(summary = \"Finds cars by make\",\n           description = \"Find cars by their manufacturer\")\npublic Response findCarsByMake(...)\n{ ... }\n```", "```java\n/car/findByMake:\n get:\n summary: Finds cars by make\n description: Find cars by their manufacturer\n```", "```java\n@GET\n@Path(\"/{name}\")\n@Operation(summary = \"Get customer by name\")\n  @APIResponse(description = \"The customer\",\n             content = @Content(mediaType = \"application/json\",\n                                schema = @Schema(implementation = Customer.class))),\n@APIResponse(responseCode = \"400\", description = \"Customer not found\")\npublic Response getCustomerByName(\n        @Parameter(description = \"The name of the customer to be fetched\", required = true) @PathParam(\"name\") String name)\n\n{...}\n```", "```java\n/customer/{name}:\n get:\n summary: Get customer by name\n operationId: getCutomerByName\n parameters:\n - name: name\n in: path\n description: 'The name of the customer to be fetched'\n required: true\n schema:\n type: string\n responses:\n default:\n description: The customer\n content:\n application/json:\n schema:\n $ref: '#/components/schemas/Customer'\n 400:\n description: Customer not found\n```", "```java\nOASFactory.createObject(Info.class).title(\"Weather\")\n          .description(\"Weather APIs\").version(\"1.0.0\");\n```", "```java\nmp.openapi.model.reader=com.mypackage.MyModelReader\n```", "```java\nmp.openapi.filter=com.mypackage.MyFilter\n```", "```java\npackage io.pckt.restc.contract;import javax.ws.rs.GET;import javax.ws.rs.Path;import javax.ws.rs.PathParam;import javax.ws.rs.Produces;import javax.ws.rs.core.MediaType;@Path(\"/api/json\")public interface WorldClockApi { static final String BASE_URL = \"http://worldclockapi.com/api/json\"; @GET @Path(\"/utc/now\") @Produces(MediaType.APPLICATION_JSON) Now utc(); @GET @Path(\"{tz}/now\") @Produces(MediaType.APPLICATION_JSON) Now tz(@PathParam(\"tz\") String tz);}public class Now ...\n```", "```java\npackage io.pckt.restc.contract;\n\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\n@Path(\"/api\")\n@ApplicationScoped\npublic class WorldClockUser {\n @GET\n @Path(\"/now-utc\")\n @Produces(MediaType.TEXT_PLAIN)\n public String getCurrentDateTime() {\n WorldClockApi remoteApi = RestClientBuilder.newBuilder()\n .baseUri(URI.create(WorldClockApi.BASE_URL))\n .build(WorldClockApi.class);\n Now now = remoteApi.utc();\n return now.getCurrentDateTime();\n }\n}\n```", "```java\nimport javax.ws.rs.GET;import javax.ws.rs.Path;import javax.ws.rs.PathParam;import javax.ws.rs.Produces;import javax.ws.rs.core.MediaType;import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;@Path(\"/api/json\")@RegisterRestClient()public interface WorldClockApi { static final String BASE_URL = \"http://worldclockapi.com/api/json\"; ...\n```", "```java\n@Path(\"/api/json\")@RegisterRestClient(baseUri = WorldClockApi.BASE_URL, configKey = \"worldClock\")public interface WorldClockApi { static final String BASE_URL = \"http://worldclockapi.com/api/json\";...}\n```", "```java\nWorldClockApiWithHeaders.java\npublic interface WorldClockApiWithHeaders {\n static final String BASE_URL = \"http://worldclockapi.com/api/json\";\n\n default String lookupUserAgent() {\n Config config = ConfigProvider.getConfig();\n String userAgent = config.getValue(\"WorldClockApi.userAgent\", String.class);\n if(userAgent == null) {\n userAgent = \"MicroProfile REST Client 1.2\";\n }\n return userAgent;\n }\n\n @GET\n @Path(\"/utc/now\")\n @Produces(MediaType.APPLICATION_JSON)\n @ClientHeaderParam(name = \"User-Agent\", value = \"{lookupUserAgent}\")\n Now utc();\n\n @GET\n @Path(\"{tz}/now\")\n @Produces(MediaType.APPLICATION_JSON)\n @ClientHeaderParam(name = \"User-Agent\", value = \"MicroProfile REST Client 1.2\")\n Now tz(@PathParam(\"tz\") String tz);\n}\n\n```", "```java\npackage org.eclipse.microprofile.rest.client.ext;\n\npublic interface ClientHeadersFactory {\n MultivaluedMap<String, String> update(\n    MultivaluedMap<String, String> incomingHeaders,\n    MultivaluedMap<String, String> clientOutgoingHeaders);\n}\n```", "```java\nimport javax.annotation.Priority;import javax.ws.rs.Priorities;import javax.ws.rs.core.MultivaluedMap;import javax.ws.rs.core.Response;import java.util.Optional;public interface ResponseExceptionMapper<T extends Throwable> {    int DEFAULT_PRIORITY = Priorities.USER;    T toThrowable(Response response);    default boolean handles(int status, MultivaluedMap<String, Object> headers) {        return status >= 400;    }    default int getPriority() {        return Optional.ofNullable(getClass().getAnnotation(Priority.class))            .map(Priority::value)            .orElse(DEFAULT_PRIORITY);    }}\n```", "```java\nRestClientBuilder.newBuilder().property(\"microprofile.rest.client.disable.default.mapper\",true)\n```", "```java\nimport java.util.concurrent.CompletionStage;import javax.ws.rs.GET;import javax.ws.rs.Path;import javax.ws.rs.PathParam;import javax.ws.rs.Produces;import javax.ws.rs.core.MediaType;@Path(\"/api/json\")public interface WorldClockApiAsync { String BASE_URL = \"http://worldclockapi.com/api/json\"; @GET @Path(\"/utc/now\") @Produces(MediaType.APPLICATION_JSON) CompletionStage<Now> utc(); @GET @Path(\"{tz}/now\") @Produces(MediaType.APPLICATION_JSON) ...\n```"]