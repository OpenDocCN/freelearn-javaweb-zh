["```java\nexport BOOK_HOME=~/Documents/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud\ngit clone https://github.com/PacktPublishing/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud $BOOK_HOME\ncd $BOOK_HOME/Chapter13\n```", "```java\nMono<ProductAggregate> getCompositeProduct(\n    @PathVariable int productId,\n    @RequestParam(value = \"delay\", required = false, defaultValue = \n    \"0\") int delay,\n    @RequestParam(value = \"faultPercent\", required = false, \n    defaultValue = \"0\") int faultPercent\n);\n```", "```java\nMono<Product> getProduct(\n     @PathVariable int productId,\n     @RequestParam(value = \"delay\", required = false, defaultValue\n     = \"0\") int delay,\n     @RequestParam(value = \"faultPercent\", required = false, \n     defaultValue = \"0\") int faultPercent\n);\n```", "```java\npublic Mono<ProductAggregate> getCompositeProduct(int productId, int delay, int faultPercent) {\n    return Mono.zip(\n        ...\n        integration.getProduct(productId, delay, faultPercent),\n        ....\n```", "```java\npublic Mono<Product> getProduct(int productId, int delay, int faultPercent) {\n    URI url = UriComponentsBuilder\n        .fromUriString(productServiceUrl + \"/product/{pid}?delay=\n         {delay}&faultPercent={fp}\")\n        .build(productId, delay, faultPercent);\n    return getWebClient().get().uri(url)...\n```", "```java\npublic Mono<Product> getProduct(int productId, int delay, int faultPercent) {\n    if (delay > 0) simulateDelay(delay);\n    if (faultPercent > 0) throwErrorIfBadLuck(faultPercent);\n    ...\n}\n```", "```java\nprivate void simulateDelay(int delay) {\n    LOG.debug(\"Sleeping for {} seconds...\", delay);\n    try {Thread.sleep(delay * 1000);} catch (InterruptedException e) {}\n    LOG.debug(\"Moving on...\");\n}\n```", "```java\nprivate void throwErrorIfBadLuck(int faultPercent) {\n    int randomThreshold = getRandomNumber(1, 100);\n    if (faultPercent < randomThreshold) {\n        LOG.debug(\"We got lucky, no error occurred, {} < {}\", \n        faultPercent, randomThreshold);\n    } else {\n        LOG.debug(\"Bad luck, an error occurred, {} >= {}\", \n        faultPercent, randomThreshold);\n        throw new RuntimeException(\"Something went wrong...\");\n    }\n}\n\nprivate final Random randomNumberGenerator = new Random();\nprivate int getRandomNumber(int min, int max) {\n    if (max < min) {\n        throw new RuntimeException(\"Max must be greater than min\");\n    }\n    return randomNumberGenerator.nextInt((max - min) + 1) + min;\n}\n```", "```java\next {\n   resilience4jVersion = \"0.14.1\"\n}\ndependencies {\n   implementation(\"io.github.resilience4j:resilience4j-spring-\n    boot2:${resilience4jVersion}\")\n   implementation(\"io.github.resilience4j:resilience4j-\n    reactor:${resilience4jVersion}\")\n   ...\n```", "```java\n@CircuitBreaker(name = \"product\")\npublic Mono<Product> getProduct(int productId, int delay, int faultPercent) {\n    ...\n    return getWebClient().get().uri(url)\n        .retrieve().bodyToMono(Product.class).log()\n        .onErrorMap(WebClientResponseException.class, ex -> \n         handleException(ex))\n        .timeout(Duration.ofSeconds(productServiceTimeoutSec));\n}\n```", "```java\nprivate final int productServiceTimeoutSec;\n\n@Autowired\npublic ProductCompositeIntegration(\n    ...\n    @Value(\"${app.product-service.timeoutSec}\") int productServiceTimeoutSec\n) {\n    ...\n    this.productServiceTimeoutSec = productServiceTimeoutSec;\n}\n```", "```java\nprivate final ProductCompositeIntegration integration;\n\n@Autowired\npublic ProductCompositeServiceImpl(... ProductCompositeIntegration integration) {\n    this.integration = integration;\n}\n\npublic Mono<ProductAggregate> getCompositeProduct(int productId, int delay, int faultPercent) {\n    return Mono.zip(..., integration.getProduct(productId, delay, faultPercent), ...\n```", "```java\npublic Mono<ProductAggregate> getCompositeProduct(int productId, int delay, int faultPercent) {\n    return Mono.zip(\n        ...\n        integration.getProduct(productId, delay, faultPercent)\n           .onErrorReturn(CircuitBreakerOpenException.class, \n            getProductFallbackValue(productId)),\n        ...\n```", "```java\nprivate Product getProductFallbackValue(int productId) {\n    if (productId == 13) {\n        throw new NotFoundException(\"Product Id: \" + productId + \" not \n        found in fallback cache!\");\n    }\n    return new Product(productId, \"Fallback product\" + productId, \n    productId, serviceUtil.getServiceAddress());\n}\n```", "```java\napp.product-service.timeoutSec: 2\n\nresilience4j.circuitbreaker:\n  backends:\n    product:\n      registerHealthIndicator: true\n      ringBufferSizeInClosedState: 5\n      failureRateThreshold: 50\n      waitInterval: 10000\n      ringBufferSizeInHalfOpenState: 3\n      automaticTransitionFromOpenToHalfOpenEnabled: true\n      ignoreExceptions:\n        - se.magnus.util.exceptions.InvalidInputException\n        - se.magnus.util.exceptions.NotFoundException\n```", "```java\n@Retry(name = \"product\")\n@CircuitBreaker(name = \"product\")\npublic Mono<Product> getProduct(int productId, int delay, int faultPercent) {\n```", "```java\npublic Mono<ProductAggregate> getCompositeProduct(int productId, int delay, int faultPercent) {\n    return Mono.zip(\n        ...\n        integration.getProduct(productId, delay, faultPercent)\n            .onErrorMap(RetryExceptionWrapper.class, retryException -> \n             retryException.getCause())\n            .onErrorReturn(CircuitBreakerOpenException.class, \n             getProductFallbackValue(productId)),\n```", "```java\nresilience4j.retry:\n  backends:\n    product:\n      maxRetryAttempts: 3\n      waitDuration: 1000\n      retryExceptions:\n      - org.springframework.web.reactive.function.client.WebClientResponseException$InternalServerError\n```", "```java\n...\nfunction testCircuitBreaker() {\n    echo \"Start Circuit Breaker tests!\"\n    ...\n}\n...\ntestCircuitBreaker\necho \"End, all tests OK:\" `date`\n```", "```java\n...\n  product:\n    build: microservices/product-service\n    networks:\n      - my-network\n...\nnetworks:\n  my-network:\n    name: my-network\n```", "```java\ndocker run --rm -it --network=my-network alpine wget product-composite:8080/actuator/health -qO - | jq -r .details.productCircuitBreaker.details.state\n```", "```java\nEXEC=\"docker run --rm -it --network=my-network alpine\"\nassertEqual \"CLOSED\" \"$($EXEC wget product-composite:8080/actuator/health -qO - | jq -r .details.productCircuitBreaker.details.state)\"\n\n```", "```java\nfor ((n=0; n<3; n++))\ndo\n    assertCurl 500 \"curl -k https://$HOST:$PORT/product-\n    composite/$PROD_ID_REVS_RECS?delay=3 $AUTH -s\"\n    message=$(echo $RESPONSE | jq -r .message)\n assertEqual \"Did not observe any item or terminal signal within \n    2000ms\" \"${message:0:57}\"\ndone\n```", "```java\nassertCurl 200 \"curl -k https://$HOST:$PORT/product-composite/$PROD_ID_REVS_RECS?delay=3 $AUTH -s\"\nassertEqual \"Fallback product2\" \"$(echo \"$RESPONSE\" | jq -r .name)\"\n\nassertCurl 200 \"curl -k https://$HOST:$PORT/product-composite/$PROD_ID_REVS_RECS $AUTH -s\"\nassertEqual \"Fallback product2\" \"$(echo \"$RESPONSE\" | jq -r .name)\"\n\n```", "```java\nassertCurl 404 \"curl -k https://$HOST:$PORT/product-composite/$PROD_ID_NOT_FOUND $AUTH -s\"\nassertEqual \"Product Id: $PROD_ID_NOT_FOUND not found in fallback cache!\" \"$(echo $RESPONSE | jq -r .message)\"\n```", "```java\necho \"Will sleep for 10 sec waiting for the CB to go Half Open...\"\nsleep 10\n\n```", "```java\nassertEqual \"HALF_OPEN\" \"$($EXEC wget product-composite:8080/actuator/health -qO - | jq -r .details.productCircuitBreaker.details.state)\"\n\nfor ((n=0; n<3; n++))\ndo\n    assertCurl 200 \"curl -k https://$HOST:$PORT/product-\n    composite/$PROD_ID_REVS_RECS $AUTH -s\"\n    assertEqual \"product name C\" \"$(echo \"$RESPONSE\" | jq -r .name)\"\ndone\n\nassertEqual \"CLOSED\" \"$($EXEC wget product-composite:8080/actuator/health -qO - | jq -r .details.productCircuitBreaker.details.state)\"\n```", "```java\nassertEqual \"CLOSED_TO_OPEN\"      \"$($EXEC wget product-composite:8080/actuator/circuitbreakerevents/product/STATE_TRANSITION -qO - | jq -r .circuitBreakerEvents[-3].stateTransition)\"\nassertEqual \"OPEN_TO_HALF_OPEN\"   \"$($EXEC wget product-composite:8080/actuator/circuitbreakerevents/product/STATE_TRANSITION -qO - | jq -r .circuitBreakerEvents[-2].stateTransition)\"\nassertEqual \"HALF_OPEN_TO_CLOSED\" \"$($EXEC wget product-composite:8080/actuator/circuitbreakerevents/product/STATE_TRANSITION -qO - | jq -r .circuitBreakerEvents[-1].stateTransition)\"\n```", "```java\ncd $BOOK_HOME/Chapter13\n./gradlew build && docker-compose build\n```", "```java\n./test-em-all.bash start\n```", "```java\nunset ACCESS_TOKEN\nACCESS_TOKEN=$(curl -k https://writer:secret@localhost:8443/oauth/token -d grant_type=password -d username=magnus -d password=password -s | jq -r .access_token)\necho $ACCESS_TOKEN\n```", "```java\ncurl -H \"Authorization: Bearer $ACCESS_TOKEN\" -k https://localhost:8443/product-composite/2 -w \"%{http_code}\\n\" -o /dev/null -s\n```", "```java\ndocker run --rm -it --network=my-network alpine wget product-composite:8080/actuator/health -qO - | jq -r .details.productCircuitBreaker.details.state\n```", "```java\ncurl -H \"Authorization: Bearer $ACCESS_TOKEN\" -k https://localhost:8443/product-composite/2?delay=3 -s | jq .\n```", "```java\n{\n  \"timestamp\": \"2019-05-03T15:12:57.554+0000\",\n  \"path\": \"/product-composite/2\",\n  \"status\": 500,\n  \"error\": \"Internal Server Error\",\n  \"message\": \"Did not observe any item or terminal signal within 2000ms \n   in 'onErrorResume' (and no fallback has been configured)\"\n}\n```", "```java\n{\n  \"productId\": 2,\n  \"name\": \"Fallback product2\",\n  ...\n}\n```", "```java\ndocker run --rm -it --network=my-network alpine wget product-composite:8080/actuator/health -qO - | jq -r .details.productCircuitBreaker.details.state\n```", "```java\ncurl -H \"Authorization: Bearer $ACCESS_TOKEN\" -k https://localhost:8443/product-composite/2 -w \"%{http_code}\\n\" -o /dev/null -s\n```", "```java\ndocker run --rm -it --network=my-network alpine wget product-composite:8080/actuator/health -qO - | jq -r .details.productCircuitBreaker.details.state\n```", "```java\ndocker run --rm -it --network=my-network alpine wget product-composite:8080/actuator/circuitbreakerevents/product/STATE_TRANSITION -qO - | jq -r '.circuitBreakerEvents[-3].stateTransition, .circuitBreakerEvents[-2].stateTransition, .circuitBreakerEvents[-1].stateTransition'\n```", "```java\nCLOSED_TO_OPEN\nOPEN_TO_HALF_OPEN\nHALF_OPEN_TO_CLOSED\n```", "```java\ntime curl -H \"Authorization: Bearer $ACCESS_TOKEN\" -k https://localhost:8443/product-composite/2?faultPercent=25 -w \"%{http_code}\\n\" -o /dev/null -s\n```", "```java\n200\nreal 0m0.078s\n...\n```", "```java\n200\nreal 0m1.077s\n```", "```java\ndocker run --rm -it --network=my-network alpine wget product-composite:8080/actuator/retryevents -qO - | jq '.retryEvents[-2], .retryEvents[-1]'\n```", "```java\n{\n  \"retryName\": \"product\",\n  \"type\": \"RETRY\",\n  \"creationTime\": \"2019-05-01T05:40:18.458858Z[Etc/UTC]\",\n  \"errorMessage\": \"org.springframework.web.reactive.\n    function.client.WebClientResponseException$InternalServerError: 500 \n    Internal Server Error\",\n  \"numberOfAttempts\": 1\n}\n{\n  \"retryName\": \"product\",\n  \"type\": \"SUCCESS\",\n  \"creationTime\": \"2019-05-01T05:40:19.471136Z[Etc/UTC]\",\n  \"numberOfAttempts\": 1\n}\n```"]