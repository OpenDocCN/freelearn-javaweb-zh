["```java\n<dependency>\n    <groupId>io.specto</groupId>\n    <artifactId>hoverfly-java</artifactId>\n    <version>0.9.0</version>\n    <scope>test</scope>\n</dependency>\n```", "```java\n@ClassRule\npublic static HoverflyRule hoverflyRule = HoverflyRule\n .inSimulationMode(dsl(\n service(\"account-service:8091\")\n     .andDelay(200, TimeUnit.MILLISECONDS).forAll()\n     .get(startsWith(\"/customer/\"))\n     .willReturn(success(\"[{\\\"id\\\":\\\"1\\\",\\\"number\\\":\\\"1234567890\\\",\\\"balance\\\":5000}]\", \"application/json\")),\n service(\"account-service:9091\")\n     .andDelay(50, TimeUnit.MILLISECONDS).forAll()\n     .get(startsWith(\"/customer/\"))\n     .willReturn(success(\"[{\\\"id\\\":\\\"2\\\",\\\"number\\\":\\\"1234567891\\\",\\\"balance\\\":8000}]\", \"application/json\"))))\n .printSimulationData();\n```", "```java\n@RunWith(SpringRunner.class)\n@SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT)\npublic class CustomerControllerTest {\n\n    private static Logger LOGGER = LoggerFactory.getLogger(CustomerControllerTest.class);\n\n    @Autowired\n    TestRestTemplate template; \n    // ...\n\n    @Test\n    public void testCustomerWithAccounts() {\n        for (int i = 0; i < 1000; i++) {\n            Customer c = template.getForObject(\"/withAccounts/{id}\", Customer.class, 1);\n            LOGGER.info(\"Customer: {}\", c);\n        }\n    }\n\n}\n```", "```java\nservice(\"account-service:10091\")\n    .andDelay(10000, TimeUnit.MILLISECONDS).forAll()\n    .get(startsWith(\"/customer/\"))\n    .willReturn(success(\"[{\\\"id\\\":\\\"3\\\",\\\"number\\\":\\\"1234567892\\\",\\\"balance\\\":10000}]\", \"application/json\"))\n```", "```java\nlistOfServers: account-service:8091, account-service:9091, account-service:10091\n```", "```java\n@LoadBalanced\n@Bean\nRestTemplate restTemplate(RestTemplateBuilder restTemplateBuilder) {\n    return restTemplateBuilder\n        .setConnectTimeout(1000)\n        .setReadTimeout(1000)\n        .build();\n}\n```", "```java\n@Configuration\npublic class RibbonConfiguration {\n\n    @Bean\n    public IRule ribbonRule() {\n        return new WeightedResponseTimeRule();\n    }\n\n    @Bean\n    public IPing ribbonPing() {\n        return new PingUrl();\n    }\n\n}\n```", "```java\naccount-service:\n ribbon:\n   NFLoadBalancerPingClassName: com.netflix.loadbalancer.PingUrl\n   NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule\n```", "```java\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-hystrix</artifactId>\n</dependency>\n```", "```java\n@Service\npublic class CustomerService {\n\n    @Autowired\n    RestTemplate template;\n    @Autowired\n    CustomerRepository repository;\n    // ...\n\n    @HystrixCommand(fallbackMethod = \"findCustomerAccountsFallback\")\n    public List<Account> findCustomerAccounts(Long id) {\n        Account[] accounts = template.getForObject(\"http://account-service/customer/{customerId}\", Account[].class, id);\n        return Arrays.stream(accounts).collect(Collectors.toList());\n    }\n\n    public List<Account> findCustomerAccountsFallback(Long id) {\n        return new ArrayList<>();\n    }\n\n}\n```", "```java\n{\"id\":1,\"name\":\"John Scott\",\"type\":\"NEW\",\"accounts\":[]}\n{\"id\":1,\"name\":\"John Scott\",\"type\":\"NEW\",\"accounts\":[{\"id\":1,\"number\":\"1234567890\",\"balance\":5000},{\"id\":2,\"number\":\"1234567891\",\"balance\":5000},{\"id\":3,\"number\":\"1234567892\",\"balance\":0}]}\n```", "```java\n@SpringBootApplication\n@RibbonClient(name = \"account-service\")\n@EnableHystrix\n@EnableCaching\npublic class CustomerApplication {\n\n    @LoadBalanced\n    @Bean\n    RestTemplate restTemplate() {\n        return new RestTemplate();\n    }\n\n    public static void main(String[] args) {\n        new SpringApplicationBuilder(CustomerApplication.class).web(true).run(args);\n    }\n\n    @Bean\n    public CacheManager cacheManager() {\n        return new ConcurrentMapCacheManager(\"accounts\");\n    }\n    // ...\n\n}\n```", "```java\n@Autowired\nCacheManager cacheManager;\n@CachePut(\"accounts\")\n@HystrixCommand(fallbackMethod = \"findCustomerAccountsFallback\")\npublic List<Account> findCustomerAccounts(Long id) {\n    Account[] accounts = template.getForObject(\"http://account-service/customer/{customerId}\", Account[].class, id);\n    return Arrays.stream(accounts).collect(Collectors.toList());\n}\n\npublic List<Account> findCustomerAccountsFallback(Long id) {\n    ValueWrapper w = cacheManager.getCache(\"accounts\").get(id);\n    if (w != null) {\n        return (List<Account>) w.get();\n    } else {\n    return new ArrayList<>();\n    }\n}\n```", "```java\n@CachePut(\"accounts\")\n@HystrixCommand(fallbackMethod = \"findCustomerAccountsFallback\",\n commandProperties = {\n    @HystrixProperty(name = \"execution.isolation.thread.timeoutInMilliseconds\", value = \"500\"),\n    @HystrixProperty(name = \"circuitBreaker.requestVolumeThreshold\", value = \"10\"),\n    @HystrixProperty(name = \"circuitBreaker.errorThresholdPercentage\", value = \"30\"),\n    @HystrixProperty(name = \"circuitBreaker.sleepWindowInMilliseconds\", value = \"5000\"),\n    @HystrixProperty(name = \"metrics.rollingStats.timeInMilliseconds\", value = \"10000\")\n }\n)\npublic List<Account> findCustomerAccounts(Long id) {\n    Account[] accounts = template.getForObject(\"http://account-service/customer/{customerId}\", Account[].class, id);\n    return Arrays.stream(accounts).collect(Collectors.toList());\n}\n```", "```java\n16:54:04+01:00 Found response delay setting for this request host: {account-service:8091 200} // (1)\n16:54:05+01:00 Found response delay setting for this request host: {account-service:9091 2000}\n16:54:05+01:00 Found response delay setting for this request host: {account-service:8091 200}\n16:54:06+01:00 Found response delay setting for this request host: {account-service:9091 2000}\n16:54:06+01:00 Found response delay setting for this request host: {account-service:8091 200}\n...\n16:54:09+01:00 Found response delay setting for this request host: {account-service:9091 2000} // (2)\n16:54:10.137 Customer [id=1, name=John Scott, type=NEW, accounts=[Account [id=1, number=1234567890, balance=5000]]] // (3)\n...\n16:54:20.169 Customer [id=1, name=John Scott, type=NEW, accounts=[Account [id=1, number=1234567890, balance=5000]]] // (4)\n16:54:20+01:00 Found response delay setting for this request host: {account-service:8091 200} // (5)\n16:54:20+01:00 Found response delay setting for this request host: {account-service:9091 2000}\n16:54:21+01:00 Found response delay setting for this request host: {account-service:8091 200}\n...\n16:54:25+01:00 Found response delay setting for this request host: {account-service:8091 200} // (6)\n16:54:26.157 Customer [id=1, name=John Scott, type=NEW, accounts=[Account [id=1, number=1234567890, balance=5000]]] // (7)\n```", "```java\nRandom r = new Random();\nOrder order = new Order();\norder.setCustomerId((long) r.nextInt(3)+1);\norder.setProductIds(Arrays.asList(new Long[] {(long) r.nextInt(10)+1,(long) r.nextInt(10)+1}));\norder = template.postForObject(\"http://localhost:8090\", order, Order.class); // (1)\nif (order.getStatus() != OrderStatus.REJECTED) {\n    template.put(\"http://localhost:8090/{id}\", null, order.getId()); // (2)\n}\n```", "```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n```", "```java\n{\"type\":\"HystrixCommand\",\"name\":\"customer-service.findWithAccounts\",\"group\":\"CustomerService\",\"currentTime\":1513089204882,\"isCircuitBreakerOpen\":false,\"errorPercentage\":0,\"errorCount\":0,\"requestCount\":74,\"rollingCountBadRequests\":0,\"rollingCountCollapsedRequests\":0,\"rollingCountEmit\":0,\"rollingCountExceptionsThrown\":0,\"rollingCountFailure\":0,\"rollingCountFallbackEmit\":0,\"rollingCountFallbackFailure\":0,\"rollingCountFallbackMissing\":0,\"rollingCountFallbackRejection\":0,\"rollingCountFallbackSuccess\":0,\"rollingCountResponsesFromCache\":0,\"rollingCountSemaphoreRejected\":0,\"rollingCountShortCircuited\":0,\"rollingCountSuccess\":75,\"rollingCountThreadPoolRejected\":0,\"rollingCountTimeout\":0,\"currentConcurrentExecutionCount\":0,\"rollingMaxConcurrentExecutionCount\":1,\"latencyExecute_mean\":5,\"latencyExecute\":{\"0\":0,\"25\":0,\"50\":0,\"75\":15,\"90\":16,\"95\":31,\"99\":47,\"99.5\":47,\"100\":62},\"latencyTotal_mean\":5,\"latencyTotal\":{\"0\":0,\"25\":0,\"50\":0,\"75\":15,\"90\":16,\"95\":31,\"99\":47,\"99.5\":47,\"100\":62},\"propertyValue_circuitBreakerRequestVolumeThreshold\":10,\"propertyValue_circuitBreakerSleepWindowInMilliseconds\":10000,\"propertyValue_circuitBreakerErrorThresholdPercentage\":30,\"propertyValue_circuitBreakerForceOpen\":false,\"propertyValue_circuitBreakerForceClosed\":false,\"propertyValue_circuitBreakerEnabled\":true,\"propertyValue_executionIsolationStrategy\":\"THREAD\",\"propertyValue_executionIsolationThreadTimeoutInMilliseconds\":2000,\"propertyValue_executionTimeoutInMilliseconds\":2000,\"propertyValue_executionIsolationThreadInterruptOnTimeout\":true,\"propertyValue_executionIsolationThreadPoolKeyOverride\":null,\"propertyValue_executionIsolationSemaphoreMaxConcurrentRequests\":10,\"propertyValue_fallbackIsolationSemaphoreMaxConcurrentRequests\":10,\"propertyValue_metricsRollingStatisticalWindowInMilliseconds\":10000,\"propertyValue_requestCacheEnabled\":true,\"propertyValue_requestLogEnabled\":true,\"reportingHosts\":1,\"threadPool\":\"CustomerService\"}\n```", "```java\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-hystrix-dashboard</artifactId>\n</dependency>\n```", "```java\n@SpringBootApplication\n@EnableHystrixDashboard\npublic class HystrixApplication {\n\n    public static void main(String[] args) {\n        new SpringApplicationBuilder(HystrixApplication.class).web(true).run(args);\n    }\n\n}\n```", "```java\n@Service\npublic class CustomerService {\n\n    // ...\n    @CachePut(\"customers\")\n    @HystrixCommand(commandKey = \"customer-service.findWithAccounts\", fallbackMethod = \"findCustomerWithAccountsFallback\",\n        commandProperties = {\n            @HystrixProperty(name = \"execution.isolation.thread.timeoutInMilliseconds\", value = \"2000\"),\n            @HystrixProperty(name = \"circuitBreaker.requestVolumeThreshold\", value = \"10\"),\n            @HystrixProperty(name = \"circuitBreaker.errorThresholdPercentage\", value = \"30\"),\n            @HystrixProperty(name = \"circuitBreaker.sleepWindowInMilliseconds\", value = \"10000\"),\n            @HystrixProperty(name = \"metrics.rollingStats.timeInMilliseconds\", value = \"10000\")\n        })\n    public Customer findCustomerWithAccounts(Long customerId) {\n        Customer customer = template.getForObject(\"http://customer-service/withAccounts/{id}\", Customer.class, customerId);\n        return customer;\n    }\n\n    public Customer findCustomerWithAccountsFallback(Long customerId) {\n        ValueWrapper w = cacheManager.getCache(\"customers\").get(customerId);\n        if (w != null) {\n            return (Customer) w.get();\n        } else {\n            return new Customer();\n        }\n    }\n\n}\n```", "```java\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-turbine</artifactId>\n</dependency>\n```", "```java\nturbine:\n appConfig: order-service,customer-service\n   clusterNameExpression: \"'default'\"\n```", "```java\nturbine:\n  aggregator:\n    clusterConfig: ORDER-SERVICE,CUSTOMER-SERVICE\n  appConfig: order-service,customer-service\n```", "```java\nspring: \n application:\n   name: order-service \n\nserver:\n port: ${PORT:8090} \n\neureka:\n client:\n   serviceUrl:\n     defaultZone: ${EUREKA_URL:http://localhost:8761/eureka/}\n\nmanagement:\n security:\n   enabled: false\n     port: 8090\n```", "```java\n<dependency>\n <groupId>org.springframework.cloud</groupId>\n <artifactId>spring-cloud-starter-turbine-stream</artifactId>\n</dependency>\n<dependency>\n <groupId>org.springframework.cloud</groupId>\n <artifactId>spring-cloud-starter-stream-rabbit</artifactId>\n</dependency>\n```", "```java\nspring:\n rabbitmq:\n   host: 192.168.99.100\n   port: 5672\n   username: guest\n   password: guest\n```", "```java\nribbon:\n eureka:\n   enabled: true\n MaxAutoRetries: 1\n MaxAutoRetriesNextServer: 2\n ConnectTimeout: 500\n ReadTimeout: 1000\n\nfeign:\n hystrix:\n   enabled: false\n```", "```java\nhystrix:\n command:\n   default:\n     circuitBreaker:\n       requestVolumeThreshold: 10\n       errorThresholdPercentage: 30\n       sleepWindowInMilliseconds: 10000\n     execution:\n       isolation:\n         thread:\n           timeoutInMilliseconds: 1000\n     metrics:\n       rollingStats:\n         timeInMilliseconds: 10000\n```", "```java\n@FeignClient(name = \"customer-service\", fallback = CustomerClientFallback.class)\npublic interface CustomerClient {\n\n    @CachePut(\"customers\")\n    @GetMapping(\"/withAccounts/{customerId}\")\n    Customer findByIdWithAccounts(@PathVariable(\"customerId\") Long customerId);\n\n}\n```", "```java\n@Component\npublic class CustomerClientFallback implements CustomerClient {\n\n    @Autowired\n    CacheManager cacheManager;\n\n    @Override \n    public Customer findByIdWithAccountsFallback(Long customerId) {\n        ValueWrapper w = cacheManager.getCache(\"customers\").get(customerId);\n        if (w != null) {\n            return (Customer) w.get();\n        } else {\n            return new Customer();\n        }\n    }\n\n}\n```", "```java\n@FeignClient(name = \"account-service\", fallbackFactory = AccountClientFallbackFactory.class)\npublic interface AccountClient {\n\n    @CachePut\n    @GetMapping(\"/customer/{customerId}\")\n    List<Account> findByCustomer(@PathVariable(\"customerId\") Long customerId); \n\n}\n```", "```java\n@Component\npublic class AccountClientFallbackFactory implements FallbackFactory<AccountClient> {\n\n    @Autowired\n    CacheManager cacheManager;\n\n    @Override\n    public AccountClient create(Throwable cause) {\n        return new AccountClient() {\n            @Override\n            List<Account> findByCustomer(Long customerId) {\n                ValueWrapper w = cacheManager.getCache(\"accounts\").get(customerId);\n                if (w != null) {\n                    return (List<Account>) w.get();\n                } else {\n                    return new Customer();\n                }\n            }\n        }\n    }\n}\n```"]