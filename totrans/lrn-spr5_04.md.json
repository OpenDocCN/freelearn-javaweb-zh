["```java\nexpression(<scope_of_method>    <return_type><fully_qualified_name_of_class>.*(parameter_list)\n```", "```java\nwithin(type_to_specify) \n\n```", "```java\nbean(name_of_bean) \n\n```", "```java\npackage com.packt.ch04; \nClass MyClass implements MyInterface{ \n  // method declaration \n} \n\n```", "```java\n      <!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\"> \n      <log4j:configuration  \n         xmlns:log4j='http://jakarta.apache.org/log4j/'> \n        <appender name=\"CA\"  \n          class=\"org.apache.log4j.ConsoleAppender\"> \n          <layout class=\"org.apache.log4j.PatternLayout\"> \n            <param name=\"ConversionPattern\" value=\"%-4r [%t]  \n              %-5p %c %x - %m%n\" /> \n          </layout> \n        </appender> \n        <appender name=\"file\"  \n          class=\"org.apache.log4j.RollingFileAppender\"> \n          <param name=\"File\" value=\"C:\\\\log\\\\log.txt\" /> \n          <param name=\"Append\" value=\"true\" /> \n          <param name=\"MaxFileSize\" value=\"3000KB\" /> \n          <layout class=\"org.apache.log4j.PatternLayout\"> \n            <param name=\"ConversionPattern\" value=\"%d{DATE}  \n              %-5p %-15c{1}: %m%n\" /> \n          </layout> \n        </appender> \n        <root> \n          <priority value=\"INFO\" /> \n          <appender-ref ref=\"CA\" /> \n          <appender-ref ref=\"file\" /> \n        </root> \n      </log4j:configuration> \n\n```", "```java\n      public class BookDAO_JdbcTemplate implements BookDAO {  \n        Logger logger=Logger.getLogger(BookDAO_JdbcTemplate.class); \n        public int addBook(Book book) { \n          // TODO Auto-generated method stub \n          int rows = 0; \n          String INSERT_BOOK = \"insert into book  \n            values(?,?,?,?,?,?)\"; \n          logger.info(\"adding the book in table\"); \n\n          rows=jdbcTemplate.update(INSERT_BOOK, book.getBookName(),  \n            book.getISBN(), book.getPublication(),  \n            book.getPrice(), \n            book.getDescription(), book.getAuthor()); \n\n            logger.info(\"book added in the table successfully\"+  \n              rows+\"affected\"); \n          return rows; \n        } \n\n```", "```java\n      public class MyLoggingAspect { \n        Logger logger=Logger.getLogger(getClass()); \n        public void beforeAdvise(JoinPoint joinPoint) { \n          logger.info(\"method will be invoked :- \n            \"+joinPoint.getSignature());   \n        }       \n      } \n\n```", "```java\n      <beans xmlns=\"http://www.springframework.org/schema/beans\"     \n        xmlns:aop=\"http://www.springframework.org/schema/aop\"  \n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n      xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n        http://www.springframework.org/schema/beans/spring-beans.xsd  \n        http://www.springframework.org/schema/aop \n        http://www.springframework.org/schema/aop/spring-aop.xsd\">\n```", "```java\n<bean id=\"myLogger\"\n  class=\"com.packt.ch04.aspects.MyLoggingAspect\" />\n```", "```java\n      <aop:config>\n        <aop:aspect id=\"myLogger\" ref=\"logging\">\n          <aop:pointcut id=\"pointcut1\"\n            expression=\"execution(com.packt.ch03.dao.BookDAO.addBook\n            (com.packt.ch03.beans.Book))\" />\n          <aop:before pointcut-ref=\"pointcut1\" \n            method=\"beforeAdvise\"/>\n        </aop:aspect>\n      </aop:config>\n```", "```java\n      0 [main] INFO       org.springframework.context.support.ClassPathXmlApplicationContext -       Refreshing       org.springframework.context.support.ClassPathXmlApplicationContext@5      33e64: startup date [Sun Oct 02 23:44:36 IST 2016]; root of       context hierarchy\n      66 [main] INFO       org.springframework.beans.factory.xml.XmlBeanDefinitionReader -       Loading XML bean definitions from class path resource       [connection_new.xml]\n      842 [main] INFO       org.springframework.jdbc.datasource.DriverManagerDataSource - Loaded       JDBC driver: com.mysql.jdbc.Driver\n      931 [main] INFO com.packt.ch04.aspects.MyLoggingAspect - method       will be invoked :-int com.packt.ch03.dao.BookDAO.addBook(Book)\n      book inserted successfully\n      book updated successfully\n      book deleted successfully\n```", "```java\n      public void afterAdvise(JoinPoint joinPoint) { \n       logger.info(\"executed successfully :- \n         \"+joinPoint.getSignature()); \n      } \n\n```", "```java\n      <aop:pointcut id=\"pointcut2\"   \n        expression=\"execution(com.packt.ch03.dao.BookDAO.*(..))\" /> \n      <aop:after pointcut-ref=\"pointcut2\" method=\"afterAdvise\"/>\n```", "```java\n999 [main] INFO com.packt.ch04.aspects.MyLoggingAspect - method will be invoked :-int com.packt.ch03.dao.BookDAO.addBook(Book)\n1360 [main] INFO com.packt.ch04.aspects.MyLoggingAspect - executed successfully :-int com.packt.ch03.dao.BookDAO.addBook(Book)\nbook inserted successfully\n1418 [main] INFO com.packt.ch04.aspects.MyLoggingAspect - executed successfully :-int com.packt.ch03.dao.BookDAO.updateBook(long,int)\nbook updated successfully\n1466 [main] INFO com.packt.ch04.aspects.MyLoggingAspect - executed successfully :-boolean com.packt.ch03.dao.BookDAO.deleteBook(long)\nbook deleted successfully\n```", "```java\n      public void returnAdvise(JoinPoint joinPoint, Object val) { \n        logger.info(joinPoint.getSignature()+ \" returning val\" + val); \n      } \n\n```", "```java\n      <aop:after-returning pointcut-ref=\"pointcut2\"\n        returning=\"val\" method=\"returnAdvise\" />\n```", "```java\n      1378 [main] INFO  com.packt.ch04.aspects.MyLoggingAspect  - int       com.packt.ch03.dao.BookDAO.addBook(Book)  \n      returning val:-1 \n      1426 [main] INFO  com.packt.ch04.aspects.MyLoggingAspect  - int       com.packt.ch03.dao.BookDAO.updateBook(long,int) returning val:-1 \n      1475 [main] INFO  com.packt.ch04.aspects.MyLoggingAspect  -\n      boolean com.packt.ch03.dao.BookDAO.deleteBook(long)\n      returning val:-true \n\n```", "```java\n      Exception in thread \"main\" \n      org.springframework.aop.AopInvocationException: Null return value       from advice does not match primitive return type for: public   \n      abstract int  \n      com.packt.ch03.dao.BookDAO.addBook(com.packt.ch03.beans.Book) \n\n```", "```java\n      <aop:around pointcut-ref=\"pointcut1\" method=\"aroundAdvise\" />\n```", "```java\n      1016 [main] INFO com.packt.ch04.aspects.MyLoggingAspect - around       advise before int com.packt.ch03.dao.BookDAO.addBook(Book)  \n      B.L.method getting invoked\n      1402 [main] INFO com.packt.ch04.aspects.MyLoggingAspect - number       of rows affected:-1\n      1402 [main] INFO com.packt.ch04.aspects.MyLoggingAspect - around\n      advise after int com.packt.ch03.dao.BookDAO.addBook(Book)\n      B.L.method getting invoked\n      1403 [main] INFO com.packt.ch04.aspects.MyLoggingAspect - int\n      com.packt.ch03.dao.BookDAO.addBook(Book) took 388 to complete\n```", "```java\n      public void throwingAdvise(JoinPoint joinPoint,  \n        Exception exception) \n      { \n        logger.info(joinPoint.getTarget().getClass().getName()+\"  \n          got and exception\" + \"\\t\" + exception.toString()); \n      } \n\n```", "```java\n      <aop:after-throwing pointcut-ref=\"pointcut1\"\n        method=\"throwingAdvise\" throwing=\"exception\" />\n```", "```java\n      1322 [main] ERROR com.packt.ch04.aspects.MyLoggingAspect  - int \n      com.packt.ch03.dao.BookDAO.addBook(Book) got and exception  \n      org.springframework.dao.DuplicateKeyException: \n      PreparedStatementCallback; SQL [insert into book \n      values(?,?,?,?,?,?)]; Duplicate entry '9781235' for key 1; nested \n      exception is \n      com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolation\n      Exception: Duplicate entry '9781235' for key 1 \n\n```", "```java\n<aop:aspectj-autoproxy/> \n\n```", "```java\n      @Aspect \n      public class MyLoggingAspect {\n        Logger logger=Logger.*getLogger*(getClass());\n        @Before(\"execution(*  \n          com.packt.ch03.dao.BookDAO.addBook(\n          com.packt.ch03.beans.Book))\") \n\n        public void beforeAdvise(JoinPoint joinPoint) {\n          logger.info(\"method will be invoked :- \n          \"+joinPoint.getSignature()); \n        }\n      }\n```", "```java\n      <bean id=\"logging\" \n        class=\"com.packt.ch04.aspects.MyLoggingAspect\" />\n```", "```java\n      <aop:aspectj-autoproxy/>\n```", "```java\n      23742 [main] INFO  com.packt.ch04.aspects.MyLoggingAspect  - \n      method will be invoked :-int \n      com.packt.ch03.dao.BookDAO.addBook(Book) \n\n```", "```java\n      @Pointcut(value=\"execution(* \n      com.packt.ch03.dao.BookDAO.addBook(com.packt.ch03.beans.Book))\") \n        public void selectAdd(){} \n\n```", "```java\n      @Before(\"selectAdd()\") \n      public void beforeAdvise(JoinPoint joinPoint) { \n        logger.info(\"method will be invoked :- \n        \"+joinPoint.getSignature()); \n      }\n```", "```java\n      @Aspect \n      public class MyLoggingAspect { \n\n        Logger logger=Logger.getLogger(getClass()); \n        @Pointcut(value=\"execution(*com.packt.ch03.dao.BookDAO.addBook(\n        com.packt.ch03.beans.Book))\") \n        public void selectAdd(){   } \n\n        @Pointcut(value=\"execution(*   \n          com.packt.ch03.dao.BookDAO.*(..))\")\n\n        public void selectAll(){    } \n\n        // old configuration\n        /*\n        @Before(\"execution(* \n        com.packt.ch03.dao.BookDAO.addBook(\n        com.packt.ch03.beans.Book))\")\n        public void beforeAdvise(JoinPoint joinPoint) {\n          logger.info(\"method will be invoked :-\n          \"+joinPoint.getSignature());\n        }\n        */\n        @Before(\"selectAdd()\") \n        public void beforeAdvise(JoinPoint joinPoint) { \n          logger.info(\"method will be invoked :- \n          \"+joinPoint.getSignature()); \n        }\n        @After(\"selectAll()\") \n        public void afterAdvise(JoinPoint joinPoint) { \n          logger.info(\"executed successfully :- \n          \"+joinPoint.getSignature()); \n        }\n        @AfterThrowing(pointcut=\"execution(*\n          com.packt.ch03.dao.BookDAO.addBook(\n          com.packt.ch03.beans.Book))\",  \n          throwing=\"exception\") \n        public void throwingAdvise(JoinPoint joinPoint,\n          Exception exception)\n        {\n          logger.error(joinPoint.getSignature()+\" got and exception\"  \n            + \"\\t\" + exception.toString()); \n        }\n        @Around(\"selectAdd()\") \n        public int aroundAdvise(ProceedingJoinPoint joinPoint) { \n          long start_time=System.*currentTimeMillis*();\n          logger.info(\"around advise before\n          \"+joinPoint.getSignature()\n          +\" B.L.method getting invoked\");\n        Integer o=null;\n        try {\n          o=(Integer)joinPoint.proceed();\n          logger.info(\"number of rows affected:-\"+o);\n        } catch (Throwable e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        }\n        logger.info(\"around advise after\n        \"+joinPoint.getSignature()+\n        \" B.L.method getting invoked\");\n        long end_time=System.*currentTimeMillis*();\n        logger.info(joinPoint.getSignature()+\" took \" +\n        (end_time-start_time)+\" to complete\");\n        return o.intValue();  } \n\n        @AfterReturning(pointcut=\"selectAll()\", returning=\"val\") \n        public void returnAdvise(JoinPoint joinPoint, Object val) { \n          logger.info(joinPoint.getSignature()+\n          \" returning val:-\" + val); \n        }\n      }\n```", "```java\n<aop:config proxy-target-class=\"true\"> \n  <!-aspect configuration à \n</aop:config> \n\n```", "```java\n<aop:aspect-autoproxy proxy-target-=class=\"true\"/> \n\n```", "```java\n<aop:aspect> \n  <aop:declare-parents types-matching=\"\" implement-interface=\" \n    default-impl=\"\" /> \n</aop:aspect> \n\n```", "```java\n@DeclareParents(value=\" \" , defaultImpl=\" \") \n\n```", "```java\n      public interface BookDAO_new { \n        String getDescription(long ISBN); \n      }\n```", "```java\n      @Repository \n      public class BookDAO_new_Impl implements BookDAO_new { \n        @Autowired \n        JdbcTemplate jdbcTemplate; \n        @Override \n        public String getDescription(long ISBN) { \n          // TODO Auto-generated method stub \n          String GET_DESCRIPTION=\" select description from book where           ISBN=?\"; \n          String description=jdbcTemplate.queryForObject(\n            GET_DESCRIPTION, new Object[]{ISBN},String.class);\n          return description; \n        }\n      }\n```", "```java\n      @Aspect \n      public class MyIntroductionAspect { \n        @DeclareParents(value=\"com.packt.ch03.dao.BookDAO+\",\n        defaultImpl=com.packt.ch03.dao.BookDAO_new_Impl.class)\n        BookDAO_new bookDAO_new; \n      }\n```", "```java\n      <bean class=\"com.packt.ch04.aspects.MyIntroductionAspect\"></bean>\n```", "```java\n      <aop:aspectj-autoproxy proxy-target-class=\"true\"/>\n```", "```java\n      public class MainBookDAO_operations { \n        public static void main(String[] args) { \n          // TODO Auto-generated method stub \n          ApplicationContext context=new  \n            ClassPathXmlApplicationContext(\"connection_new.xml\"); \n          BookDAO bookDAO=(BookDAO)  \n            context.getBean(\"bookDAO_jdbcTemplate\"); \n          //add book\n          int rows=bookDAO.addBook(new Book(\"Java EE 7 Developer  \n          Handbook\", 97815674L,\"PacktPub\n          publication\",332,\"explore the Java EE7\n          programming\",\"Peter pilgrim\"));\n          if(rows>0) \n          { \n            System.out.println(\"book inserted successfully\"); \n          } \n          else\n            System.out.println(\"SORRY!cannot add book\"); \n\n          //update the book\n          rows=bookDAO.updateBook(97815674L,432); \n          if(rows>0) \n          { \n            System.out.println(\"book updated successfully\"); \n          }else \n          System.out.println(\"SORRY!cannot update book\"); \n          String desc=((BookDAO_new)bookDAO).getDescription(97815674L); \n          System.out.println(desc); \n\n          //delete the book\n          boolean deleted=bookDAO.deleteBook(97815674L); \n          if(deleted) \n          { \n            System.out.println(\"book deleted successfully\"); \n          }else \n          System.out.println(\"SORRY!cannot delete book\"); \n        } \n      } \n\n```", "```java\n      book inserted successfully \n      book updated successfully \n      explore the Java EE7 programming \n      book deleted successfully \n\n```"]