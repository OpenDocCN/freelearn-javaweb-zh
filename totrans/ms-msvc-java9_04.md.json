["```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<project   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"> \n    <modelVersion>4.0.0</modelVersion> \n\n    <groupId>com.packtpub.mmj</groupId> \n    <artifactId>6392_chapter4</artifactId> \n    <version>PACKT-SNAPSHOT</version> \n    <name>6392_chapter4</name> \n    <description>Master Microservices with Java Ed 2, Chapter 4 - Implementing Microservices</description> \n\n    <packaging>pom</packaging> \n    <properties> \n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> \n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding> \n        <java.version>1.9</java.version> \n        <maven.compiler.source>1.9</maven.compiler.source> \n        <maven.compiler.target>1.9</maven.compiler.target> \n    </properties> \n\n    <parent> \n        <groupId>org.springframework.boot</groupId> \n        <artifactId>spring-boot-starter-parent</artifactId> \n        <version>2.0.0.M1</version> \n    </parent> \n    <dependencyManagement> \n        <dependencies> \n            <dependency> \n                <groupId>org.springframework.cloud</groupId> \n                <artifactId>spring-cloud-dependencies</artifactId> \n                <version>Finchley.M2</version> \n                <type>pom</type> \n                <scope>import</scope> \n            </dependency> \n        </dependencies> \n    </dependencyManagement> \n\n    <modules> \n        <module>eureka-service</module> \n        <module>restaurant-service</module> \n        <module>booking-service</module> \n        <module>user-service</module> \n    </modules> \n\n    <!-- Build step is required to include the spring boot artifacts in generated jars --> \n    <build> \n        <finalName>${project.artifactId}</finalName> \n        <plugins> \n            <plugin> \n                <groupId>org.springframework.boot</groupId> \n                <artifactId>spring-boot-maven-plugin</artifactId> \n            </plugin> \n            <plugin> \n                <groupId>org.apache.maven.plugins</groupId> \n                <artifactId>maven-compiler-plugin</artifactId> \n                <version>3.6.1</version> \n                <configuration> \n                    <source>1.9</source> \n                    <target>1.9</target> \n                    <showDeprecation>true</showDeprecation> \n                    <showWarnings>true</showWarnings> \n                </configuration> \n            </plugin> \n        </plugins> \n    </build> \n\n    <!-- Added repository additionally as Finchley.M2 was not available in central repository --> \n    <repositories> \n        <repository> \n            <id>Spring Milestones</id> \n            <url>https://repo.spring.io/libs-milestone</url> \n            <snapshots> \n                <enabled>false</enabled> \n            </snapshots> \n        </repository> \n    </repositories> \n\n    <pluginRepositories> \n        <pluginRepository> \n            <id>Spring Milestones</id> \n            <url>https://repo.spring.io/libs-milestone</url> \n            <snapshots> \n                <enabled>false</enabled> \n            </snapshots> \n        </pluginRepository> \n    </pluginRepositories> \n</project> \n```", "```java\n@RestController \n@RequestMapping(\"/v1/restaurants\") \npublic class RestaurantController { \n\n    protected Logger logger = Logger.getLogger(RestaurantController.class.getName()); \n\n    protected RestaurantService restaurantService; \n\n    @Autowired \n    public RestaurantController(RestaurantService restaurantService) { \n        this.restaurantService = restaurantService; \n    } \n\n    /** \n     * Fetch restaurants with the specified name. A partial case-insensitive \n     * match is supported. So <code>http://.../restaurants/rest</code> will find \n     * any restaurants with upper or lower case 'rest' in their name. \n     * \n     * @param name \n     * @return A non-null, non-empty collection of restaurants. \n     */ \n    @RequestMapping(method = RequestMethod.GET) \n    public ResponseEntity<Collection<Restaurant>> findByName(@RequestParam(\"name\") String name) { \n\nlogger.info(String.format(\"restaurant-service findByName() invoked:{} for {} \", restaurantService.getClass().getName(), name)); \n        name = name.trim().toLowerCase(); \n        Collection<Restaurant> restaurants; \n        try { \n            restaurants = restaurantService.findByName(name); \n        } catch (Exception ex) { \n            logger.log(Level.WARNING, \"Exception raised findByName REST Call\", ex); \n            return new ResponseEntity< Collection< Restaurant>>(HttpStatus.INTERNAL_SERVER_ERROR); \n        } \n        return restaurants.size() > 0 ? new ResponseEntity< Collection< Restaurant>>(restaurants, HttpStatus.OK) \n                : new ResponseEntity< Collection< Restaurant>>(HttpStatus.NO_CONTENT); \n    } \n\n    /** \n     * Fetch restaurants with the given id. \n     * <code>http://.../v1/restaurants/{restaurant_id}</code> will return \n     * restaurant with given id. \n     * \n     * @param retaurant_id \n     * @return A non-null, non-empty collection of restaurants. \n     */ \n    @RequestMapping(value = \"/{restaurant_id}\", method = RequestMethod.GET) \n    public ResponseEntity<Entity> findById(@PathVariable(\"restaurant_id\") String id) { \n\n       logger.info(String.format(\"restaurant-service findById() invoked:{} for {} \", restaurantService.getClass().getName(), id)); \n        id = id.trim(); \n        Entity restaurant; \n        try { \n            restaurant = restaurantService.findById(id); \n        } catch (Exception ex) { \n            logger.log(Level.SEVERE, \"Exception raised findById REST Call\", ex); \n            return new ResponseEntity<Entity>(HttpStatus.INTERNAL_SERVER_ERROR); \n        } \n        return restaurant != null ? new ResponseEntity<Entity>(restaurant, HttpStatus.OK) \n                : new ResponseEntity<Entity>(HttpStatus.NO_CONTENT); \n    } \n\n    /** \n     * Add restaurant with the specified information. \n     * \n     * @param Restaurant \n     * @return A non-null restaurant. \n     * @throws RestaurantNotFoundException If there are no matches at all. \n     */ \n    @RequestMapping(method = RequestMethod.POST) \n    public ResponseEntity<Restaurant> add(@RequestBody RestaurantVO restaurantVO) { \n\n        logger.info(String.format(\"restaurant-service add() invoked: %s for %s\", restaurantService.getClass().getName(), restaurantVO.getName()); \n\n        Restaurant restaurant = new Restaurant(null, null, null); \n        BeanUtils.copyProperties(restaurantVO, restaurant); \n        try { \n            restaurantService.add(restaurant); \n        } catch (Exception ex) { \n            logger.log(Level.WARNING, \"Exception raised add Restaurant REST Call \"+ ex); \n            return new ResponseEntity<Restaurant>(HttpStatus.UNPROCESSABLE_ENTITY); \n        } \n        return new ResponseEntity<Restaurant>(HttpStatus.CREATED); \n    } \n} \n```", "```java\npublic interface RestaurantService { \n\n    public void add(Restaurant restaurant) throws Exception; \n\n    public void update(Restaurant restaurant) throws Exception; \n\n    public void delete(String id) throws Exception; \n\n    public Entity findById(String restaurantId) throws Exception; \n\n    public Collection<Restaurant> findByName(String name) throws Exception; \n\n    public Collection<Restaurant> findByCriteria(Map<String, ArrayList<String>> name) throws Exception; \n}\n```", "```java\n@Service(\"restaurantService\") \npublic class RestaurantServiceImpl extends BaseService<Restaurant, String> \n        implements RestaurantService { \n\n    private RestaurantRepository<Restaurant, String> restaurantRepository; \n\n    @Autowired \n    public RestaurantServiceImpl(RestaurantRepository<Restaurant, String> restaurantRepository) { \n        super(restaurantRepository); \n        this.restaurantRepository = restaurantRepository; \n    } \n\n    public void add(Restaurant restaurant) throws Exception { \n        if (restaurant.getName() == null || \"\".equals(restaurant.getName())) { \n            throw new Exception(\"Restaurant name cannot be null or empty string.\"); \n        } \n\n        if (restaurantRepository.containsName(restaurant.getName())) { \n            throw new Exception(String.format(\"There is already a product with the name - %s\", restaurant.getName())); \n        } \n\n        super.add(restaurant); \n    } \n\n    @Override \n    public Collection<Restaurant> findByName(String name) throws Exception { \n        return restaurantRepository.findByName(name); \n    } \n\n    @Override \n    public void update(Restaurant restaurant) throws Exception { \n        restaurantRepository.update(restaurant); \n    } \n\n    @Override \n    public void delete(String id) throws Exception { \n        restaurantRepository.remove(id); \n    } \n\n    @Override \n    public Entity findById(String restaurantId) throws Exception { \n        return restaurantRepository.get(restaurantId); \n    } \n\n    @Override \n    public Collection<Restaurant> findByCriteria(Map<String, ArrayList<String>> name) throws Exception { \n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates. \n    } \n} \n```", "```java\npublic interface RestaurantRepository<Restaurant, String> extends Repository<Restaurant, String> { \n\n    boolean containsName(String name) throws Exception; \n\n    Collection<Restaurant> findByName(String name) throws Exception; \n} \n```", "```java\npublic interface Repository<TE, T> extends ReadOnlyRepository<TE, T> { \n\n    void add(TE entity); \n\n    void remove(T id); \n\n    void update(TE entity); \n} \n```", "```java\npublic interface ReadOnlyRepository<TE, T> { \n\n    boolean contains(T id); \n\n    Entity get(T id); \n\n    Collection<TE> getAll(); \n} \n```", "```java\n@Repository(\"restaurantRepository\") \npublic class InMemRestaurantRepository implements RestaurantRepository<Restaurant, String> { \n    private Map<String, Restaurant> entities; \n\n    public InMemRestaurantRepository() { \n        entities = new HashMap(); \n        Restaurant restaurant = new Restaurant(\"Big-O Restaurant\", \"1\", null); \n        entities.put(\"1\", restaurant); \n        restaurant = new Restaurant(\"O Restaurant\", \"2\", null); \n        entities.put(\"2\", restaurant); \n    } \n\n    @Override \n    public boolean containsName(String name) { \n        try { \n            return this.findByName(name).size() > 0; \n        } catch (Exception ex) { \n            //Exception Handler \n        } \n        return false; \n    } \n\n    @Override \n    public void add(Restaurant entity) { \n        entities.put(entity.getId(), entity); \n    } \n\n    @Override \n    public void remove(String id) { \n        if (entities.containsKey(id)) { \n            entities.remove(id); \n        } \n    } \n\n    @Override \n    public void update(Restaurant entity) { \n        if (entities.containsKey(entity.getId())) { \n            entities.put(entity.getId(), entity); \n        } \n    } \n\n    @Override \n    public Collection<Restaurant> findByName(String name) throws Exception { \n        Collection<Restaurant> restaurants = new ArrayList<>(); \n        int noOfChars = name.length(); \n        entities.forEach((k, v) -> { \n            if (v.getName().toLowerCase().contains(name.subSequence(0, noOfChars))) { \n                restaurants.add(v); \n            } \n        }); \n        return restaurants; \n    } \n\n    @Override \n    public boolean contains(String id) { \n        throw new UnsupportedOperationException(\"Not supported yet.\");  \n    } \n\n    @Override \n    public Entity get(String id) { \n        return entities.get(id); \n    } \n\n    @Override \n    public Collection<Restaurant> getAll() { \n        return entities.values(); \n    } \n} \n```", "```java\npublic class Restaurant extends BaseEntity<String> { \n\n    private List<Table> tables = new ArrayList<>(); \n\n    public Restaurant(String name, String id, List<Table> tables) { \n        super(id, name); \n        this.tables = tables; \n    } \n\n    public void setTables(List<Table> tables) { \n        this.tables = tables; \n    } \n\n    public List<Table> getTables() { \n        return tables; \n    } \n\n    @Override \n    public String toString() { \n        return String.format(\"{id: %s, name: %s, address: %s, tables: %s}\", this.getId(), \n                         this.getName(), this.getAddress(), this.getTables()); \n    } \n\n} \n```", "```java\npublic class Table extends BaseEntity<BigInteger> { \n\n    private int capacity; \n\n    public Table(String name, BigInteger id, int capacity) { \n        super(id, name); \n        this.capacity = capacity; \n    } \n\n    public void setCapacity(int capacity) { \n        this.capacity = capacity; \n    } \n\n    public int getCapacity() { \n        return capacity; \n    } \n\n    @Override \n    public String toString() { \n        return String.format(\"{id: %s, name: %s, capacity: %s}\", \n                         this.getId(), this.getName(), this.getCapacity());    } \n\n} \n```", "```java\npublic abstract class Entity<T> { \n\n    T id; \n    String name; \n\n    public T getId() { \n        return id; \n    } \n\n    public void setId(T id) { \n        this.id = id; \n    } \n\n    public String getName() { \n        return name; \n    } \n\n    public void setName(String name) { \n        this.name = name; \n    } \n\n} \n```", "```java\npublic abstract class BaseEntity<T> extends Entity<T> { \n\n    private T id; \n    private boolean isModified; \n    private String name; \n\n    public BaseEntity(T id, String name) { \n        this.id = id; \n        this.name = name; \n    } \n\n    public T getId() { \n        return id; \n    } \n\n    public void setId(T id) { \n        this.id = id; \n    } \n\n    public boolean isIsModified() { \n        return isModified; \n    } \n\n    public void setIsModified(boolean isModified) { \n        this.isModified = isModified; \n    } \n\n    public String getName() { \n        return name; \n    } \n\n    public void setName(String name) { \n        this.name = name; \n    } \n\n} \n```", "```java\n<dependency> \n      <groupId>org.springframework.cloud</groupId> \n      <artifactId>spring-cloud-starter-config</artifactId> \n</dependency> \n<dependency> \n      <groupId>org.springframework.cloud</groupId> \n      <artifactId>spring-cloud-netflix-eureka-server</artifactId> \n</dependency> \n```", "```java\npackage com.packtpub.mmj.eureka.service; \n\nimport org.springframework.boot.SpringApplication; \nimport org.springframework.boot.autoconfigure.SpringBootApplication; \nimport org.springframework.cloud.netflix.eureka.server.EnableEurekaServer; \n\n@SpringBootApplication \n@EnableEurekaServer \npublic class App { \n\n    public static void main(String[] args) { \n        SpringApplication.run(App.class, args); \n    } \n} \n```", "```java\nserver: \n  port: 8761  # HTTP port \n\neureka: \n  instance: \n    hostname: localhost \n  client: \n    registerWithEureka: false \n    fetchRegistry: false \n    serviceUrl: \n        defaultZone: ${vcap.services.${PREFIX:}eureka.credentials.uri:http://user:password@localhost:8761}/eureka/ \n  server: \n    waitTimeInMsWhenSyncEmpty: 0 \n    enableSelfPreservation: false \n\n```", "```java\neureka: \n  client: \n    serviceUrl: \n      defaultZone: http://localhost:8761/eureka/ \n```", "```java\njava -jar <service>/target/<service_jar_file> \n```", "```java\njava -jar restaurant-service/target/restaurant-service.jar \njava -jar eureka-service/target/eureka-service.jar \n```", "```java\njava -jar eureka-service/target/eureka-service.jar\njava -jar restaurant-service/target/restaurant-service.jar java -jar booking-service/target/booking-service.jar java -jar user-service/target/user-service.jar\n```", "```java\n<dependency> \n    <groupId>org.springframework.boot</groupId> \n    <artifactId>spring-boot-starter-test</artifactId> \n</dependency> \n```", "```java\n@RunWith(SpringJUnit4ClassRunner.class) \n@SpringApplicationConfiguration(classes = RestaurantApp.class) \npublic class RestaurantControllerIntegrationTests extends \n        AbstractRestaurantControllerTests { \n\n}\n```", "```java\npublic abstract class AbstractRestaurantControllerTests { \n\n    protected static final String RESTAURANT = \"1\"; \n    protected static final String RESTAURANT_NAME = \"Big-O Restaurant\"; \n\n    @Autowired \n    RestaurantController restaurantController; \n\n    @Test \n    public void validResturantById() { \n        Logger.getGlobal().info(\"Start validResturantById test\"); \n        ResponseEntity<Entity> restaurant = restaurantController.findById(RESTAURANT); \n\n        Assert.assertEquals(HttpStatus.OK, restaurant.getStatusCode()); \n        Assert.assertTrue(restaurant.hasBody()); \n        Assert.assertNotNull(restaurant.getBody()); \n        Assert.assertEquals(RESTAURANT, restaurant.getBody().getId()); \n        Assert.assertEquals(RESTAURANT_NAME, restaurant.getBody().getName()); \n        Logger.getGlobal().info(\"End validResturantById test\"); \n    } \n\n    @Test \n    public void validResturantByName() { \n        Logger.getGlobal().info(\"Start validResturantByName test\"); \n        ResponseEntity<Collection<Restaurant>> restaurants = restaurantController.findByName(RESTAURANT_NAME); \n        Logger.getGlobal().info(\"In validAccount test\"); \n\n        Assert.assertEquals(HttpStatus.OK, restaurants.getStatusCode()); \n        Assert.assertTrue(restaurants.hasBody()); \n        Assert.assertNotNull(restaurants.getBody()); \n        Assert.assertFalse(restaurants.getBody().isEmpty()); \n        Restaurant restaurant = (Restaurant) restaurants.getBody().toArray()[0]; \n        Assert.assertEquals(RESTAURANT, restaurant.getId()); \n        Assert.assertEquals(RESTAURANT_NAME, restaurant.getName()); \n        Logger.getGlobal().info(\"End validResturantByName test\"); \n    } \n\n    @Test \n    public void validAdd() { \n        Logger.getGlobal().info(\"Start validAdd test\"); \n        RestaurantVO restaurant = new RestaurantVO(); \n        restaurant.setId(\"999\"); \n        restaurant.setName(\"Test Restaurant\"); \n\n        ResponseEntity<Restaurant> restaurants = restaurantController.add(restaurant); \n        Assert.assertEquals(HttpStatus.CREATED, restaurants.getStatusCode()); \n        Logger.getGlobal().info(\"End validAdd test\"); \n    } \n} \n```", "```java\npublic class RestaurantControllerTests extends AbstractRestaurantControllerTests { \n\n    protected static final Restaurant restaurantStaticInstance = new Restaurant(RESTAURANT, \n            RESTAURANT_NAME, null); \n\n    protected static class TestRestaurantRepository implements RestaurantRepository<Restaurant, String> { \n\n        private Map<String, Restaurant> entities; \n\n        public TestRestaurantRepository() { \n            entities = new HashMap(); \n            Restaurant restaurant = new Restaurant(\"Big-O Restaurant\", \"1\", null); \n            entities.put(\"1\", restaurant); \n            restaurant = new Restaurant(\"O Restaurant\", \"2\", null); \n            entities.put(\"2\", restaurant); \n        } \n\n        @Override \n        public boolean containsName(String name) { \n            try { \n                return this.findByName(name).size() > 0; \n            } catch (Exception ex) { \n                //Exception Handler \n            } \n            return false; \n        } \n\n        @Override \n        public void add(Restaurant entity) { \n            entities.put(entity.getId(), entity); \n        } \n\n        @Override \n        public void remove(String id) { \n            if (entities.containsKey(id)) { \n                entities.remove(id); \n            } \n        } \n\n        @Override \n        public void update(Restaurant entity) { \n            if (entities.containsKey(entity.getId())) { \n                entities.put(entity.getId(), entity); \n            } \n        } \n\n        @Override \n        public Collection<Restaurant> findByName(String name) throws Exception { \n            Collection<Restaurant> restaurants = new ArrayList(); \n            int noOfChars = name.length(); \n            entities.forEach((k, v) -> { \n                if (v.getName().toLowerCase().contains(name.subSequence(0, noOfChars))) { \n                    restaurants.add(v); \n                } \n            }); \n            return restaurants; \n        } \n\n        @Override \n        public boolean contains(String id) { \n            throw new UnsupportedOperationException(\"Not supported yet.\");\n        } \n\n        @Override \n        public Entity get(String id) { \n            return entities.get(id); \n        } \n        @Override \n        public Collection<Restaurant> getAll() { \n            return entities.values(); \n        } \n    } \n\n    protected TestRestaurantRepository testRestaurantRepository = new TestRestaurantRepository(); \n    protected RestaurantService restaurantService = new RestaurantServiceImpl(testRestaurantRepository); \n\n    @Before \n    public void setup() { \n        restaurantController = new RestaurantController(restaurantService); \n\n    } \n} \n```"]