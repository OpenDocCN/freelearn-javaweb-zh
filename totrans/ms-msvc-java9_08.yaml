- en: Consuming Services Using a Microservice Web Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, after developing the microservices, it would be interesting to see how
    the services offered by the **online table reservation system** (**OTRS**) could
    be consumed by web or mobile applications. We will develop the web application
    (UI) using AngularJS/Bootstrap to build the prototype of the web application.
    This sample application will display the data and flow of this sample project—a
    small utility project. This web application will also be a sample project and
    will run independently. Earlier, web applications were being developed in single
    web archives (files with `.war` extensions) that contained both UI and server-side
    code. The reason for doing so was pretty simple, as UI was also developed using
    Java with JSPs, servlets, JSF, and so on. Nowadays, UIs are being developed independently
    using JavaScript. Therefore, these UI apps also deploy as a single microservice.
    In this chapter, we'll explore how these independent UI applications are being
    developed. We will develop and implement the OTRS sample app without login and
    authorization flow. We'll deploy a very limited functionality implementation and
    cover the high-level AngularJS concepts. For more information on AngularJS, you
    can refer to *AngularJS by Example*, *Chandermani*, *Packt Publishing*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: AngularJS framework overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Development of OTRS features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a web application (UI)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AngularJS framework overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, since we are ready with our HTML5 web application setup, we can go through
    the basics of AngularJS. This will help us to understand the AngularJS code. This
    section depicts the high level of understanding that you can utilize to understand
    the sample application and explore further using AngularJS documentation or by
    referring to other Packt Publishing resources.
  prefs: []
  type: TYPE_NORMAL
- en: AngularJS is a client-side JavaScript framework. It is flexible enough to be
    used as a **model-view-controller** (**MVC**) or a **model-view-viewmodel** (**MVVM)**.
    It also provides built-in services such as `$http` or `$log` using a dependency
    injection pattern.
  prefs: []
  type: TYPE_NORMAL
- en: MVC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MVC is a well-known design pattern. Struts and Spring MVC are popular examples.
    Let''s see how they fit in the JavaScript world:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model**: Models are JavaScript objects that contain the application data.
    They also represent the state of the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View**: View is a presentation layer that consists of HTML files. Here, you
    can show the data from models and provide the interactive interface to the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controller**: You can define the controller in JavaScript and it contains
    the application logic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MVVM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MVVM is an architecture design pattern that specifically targets the UI development.
    MVVM is designed to make two-way data binding easier. Two-way data binding provides
    the synchronization between the model and the view. When the model (data) changes,
    it reflects immediately on the view. Similarly, when the user changes the data
    on the view, it reflects on the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model**: This is very similar to MVC and contains the business logic and
    data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View**: Like MVC, it contains the presentation logic or user interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View model**: A view model contains the data binding between the view and
    the model. Therefore, it is an interface between the view and the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A module is the first thing we define for any AngularJS application. A module
    is a container that contains the different parts of the application, such as controllers,
    services, filters, and so on. An AngularJS application can be written in a single
    module or multiple modules. An AngularJS module can also contain other modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many other JavaScript frameworks use the `main` method for instantiating and
    wiring the different parts of the application. AngularJS does not have the `main`
    method. It uses the module as an entry point due to the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Modularity**: You can divide and create your application feature-wise or
    with reusable components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Simplicity**: You might have come across complex and large application code,
    which makes maintenance and enhancement a headache. No more: AngularJS makes code
    simple, readable, and easy to understand.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Testing**: It makes unit testing and end-to-end testing easier as you can
    override configuration and load only the modules that are required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each AngularJS application needs to have a single module for bootstrapping
    the AngularJS application. Bootstrapping our application requires the following
    three parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Application module**: A JavaScript file (`app.js`) that contains the AngularJS
    module, as shown:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Loading Angular library and application module**: An `index.html` file containing
    the reference to the JavaScript file with other AngularJS libraries:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Application DOM configuration**: This tells the AngularJS location of the
    DOM element where bootstrapping should take place. It can be done in one of two
    ways:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An `index.html` file that also contains a HTML element (typically `<html>`)
    with the `ng-app` (AngularJS directive) attribute having the value given in `app.js`.
    AngularJS directives are prefixed with `ng` (AngularJS): `<html lang="en" ng-app="otrsApp"
    class="no-js">`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Or, use this command if you are loading the JavaScript files asynchronously:
    `AngularJS.bootstrap(document.documentElement, [''otrsApp'']);`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An AngularJS module has two important parts, `config()` and `run()`, apart
    from other components such as controllers, services, filters, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`config()` is used for registering and configuring the modules and it only
    entertains the providers and constants using `$injector`. `$injector` is an AngularJS
    service. We''ll cover providers and `$injector` in the next section. You cannot
    use instances here. It prevents the use of services before it is fully configured.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`run()` is used for executing the code after `$injector` is created using the
    preceding `config()` method. This only entertains the instances and constants.
    You cannot use providers here to avoid configuration at runtime.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providers and services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s have a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`$log` is a built-in AngularJS service that provides the logging API. Here,
    we are using another built-in service, `$injector`, that allows us to use the
    `$log` service. `$injector` is an argument in the controller. AngularJS uses function
    definitions and regex to provide the `$injector` service to a caller, also known
    as the controller. These are examples of how AngularJS effectively uses the dependency
    injection pattern.'
  prefs: []
  type: TYPE_NORMAL
- en: AngularJS heavily uses the dependency injection pattern, using the injector
    service (`$injector`) to instantiate and wire most of the objects we use in our
    AngularJS applications. This injector creates two types of objects—services and
    specialized objects.
  prefs: []
  type: TYPE_NORMAL
- en: For simplification, you can say that we (developers) define services. On the
    contrary, specialized objects are AngularJS items such as controllers, filters,
    directives, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: AngularJS provides five recipe types that tell the injector how to create service
    objects—**provider**, **value**, **factory**, **service**, and **constant**.
  prefs: []
  type: TYPE_NORMAL
- en: The provider is the core and most complex recipe type. Other recipes are synthetic
    sugar on it. We generally avoid using the provider except when we need to create
    reusable code that requires global configuration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The value and constant recipe types work as their names suggest. Neither of
    them can have dependencies. Moreover, the difference between them lies with their
    usage. You cannot use value service objects in the configuration phase.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Factory and service are the most used service types. They are of a similar type.
    We use the factory recipe when we want to produce JavaScript primitives and functions.
    On the other hand, the service is used when we want to produce custom-defined
    types.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we now have some understanding of services, we can say that there are two
    common uses of services—organizing code and sharing code across applications.
    Services are singleton objects, which are lazily instantiated by the AngularJS
    service factory. We have already seen a few of the built-in AngularJS services
    such as `$injector`, `$log`, and so on. AngularJS services are prefixed with the
    `$` symbol.
  prefs: []
  type: TYPE_NORMAL
- en: Scopes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In AngularJS applications, two types of scopes are widely used—`$rootScope`
    and `$scope`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$rootScope` is the topmost object in the scope hierarchy and has the global
    scope associated with it. That means that any variable you attach to it will be
    available everywhere, and therefore, the use of `$rootScope` should be a carefully
    considered decision.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controllers have `$scope` as an argument in the callback function. It is used
    for binding data from the controller to the view. Its scope is limited to the
    use of the controller it is associated with.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The controller is defined by the JavaScript `constructor` function as having `$scope`
    as an argument. The controller''s main purpose is to tie the data to the view.
    The controller function is also used for writing business logic—setting up the
    initial state of the `$scope` object and adding the behavior to `$scope`. The
    controller signature looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, the controller is a part of the `RestModule`, the name of the controller
    is `RestaurantCtrl`, and `$scope` and `restaurantService` are passed as arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The purpose of filters is to format the value of a given expression. In the
    following code, we have defined the `datetime1` filter that takes the date as
    an argument and changes the value to the `dd MMM yyyy HH:mm` format, such as 04
    Apr 2016 04:13 PM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Directives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we saw in the *Modules* section, AngularJS directives are HTML attributes
    with an `ng` prefix. Some of the popular directives are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ng-app`: This directive defines the AngularJS application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ng-model`: This directive binds the HTML form input to data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ng-bind`: This directive binds the data to the HTML view'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ng-submit`: This directive submits the HTML form'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ng-repeat`: This directive iterates the collection:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: UI-Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In **single-page applications** (**SPAs**), the page only loads once and the
    user navigates through different links without a page refresh. It is all possible
    because of routing. Routing is a way to make SPA navigation feel like a normal
    site. Therefore, routing is very important for SPA.
  prefs: []
  type: TYPE_NORMAL
- en: The AngularUI team built UI-Router, an AngularJS routing framework. UI-Router
    is not a part of core AngularJS. UI-Router not only changes the route URL, but
    it also changes the state of the application when the user clicks on any link
    in the SPA. Because UI-Router can also make state changes, you can change the
    view of the page without changing the URL. This is possible because of the application
    state management by the UI-Router.
  prefs: []
  type: TYPE_NORMAL
- en: If we consider the SPA as a state machine, then the state is a current state
    of the application. We will use the `ui-sref` attribute in a HTML link tag when
    we create the route link. The `href` attribute in the link will be generated from
    this and point to certain states of the application that are created in `app.js`.
  prefs: []
  type: TYPE_NORMAL
- en: We use the `ui-view` attribute in the HTML `div` to use the UI-Router. For example,
  prefs: []
  type: TYPE_NORMAL
- en: '`<div ui-view></div>`.'
  prefs: []
  type: TYPE_NORMAL
- en: Development of OTRS features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you know, we are developing the SPA. Therefore, once the application loads,
    you can perform all of the operations without a page refresh. All interactions
    with the server are performed using AJAX calls. Now, we''ll make use of the AngularJS
    concepts that we covered in the first section. We''ll cover the following scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: A page that will display a list of restaurants. This will also be our home page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search restaurants.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restaurant details with reservation options.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Login (not from the server, but used for displaying the flow).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reservation confirmation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the home page, we will create an `index.html` file and a template that will
    contain the restaurant listings in the middle section, or the content area.
  prefs: []
  type: TYPE_NORMAL
- en: Home page/restaurant list page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The home page is the main page of any web application. To design the home page,
    we are going to use the Angular-UI Bootstrap rather than the actual Bootstrap.
    Angular-UI is an Angular version of Bootstrap. The home page will be divided into
    three sections:'
  prefs: []
  type: TYPE_NORMAL
- en: The header section will contain the application name, the search restaurants
    form, and the user name at the top-right corner.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The content or middle section will contain the restaurant listings, which will
    have the restaurant name as the link. This link will point to the restaurant details
    and reservation page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The footer section will contain the application name with the copyright mark.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You must be interested in viewing the home page before designing or implementing
    it. Therefore, let us first see how it will look once we have our content ready:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/43192e48-94ba-4302-b413-5182d9d1da4f.png)'
  prefs: []
  type: TYPE_IMG
- en: OTRS home page with restaurants listing
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to design our home page, we need to add the following four files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`index.html`: Our main HTML file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app.js`: Our main AngularJS module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`restaurants.js`: The restaurants module that also contains the restaurant
    Angular service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`restaurants.html`: The HTML template that will display the list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: of restaurants
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: index.html
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we'll add `./app/index.html` to our project workspace. The contents of
    the `index.html` file will be as explained here onwards.
  prefs: []
  type: TYPE_NORMAL
- en: I have added comments in between the code to make the code more readable and
    easier to understand.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `index.html` file is divided into many parts. We''ll discuss a few of the
    key parts here. First, we will see how to address old versions of Internet Explorer.
    If you want to target the Internet Explorer browser versions greater than eight
    or IE version nine onwards, then we need to add the following block of code that
    will prevent JavaScript from rendering and give the `no-js` output to the end
    user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Then, after adding a few `meta` tags and the title of the application, we'll
    also define the important `meta` tag `viewport`. The `viewport` is used for responsive
    UI designs.
  prefs: []
  type: TYPE_NORMAL
- en: The `width` property defined in the content attribute controls the size of the
    `viewport`. It can be set to a specific number of pixels, such as `width = 600`,
    or to the special `device-width` value that is the width of the screen in CSS
    pixels at a scale of 100%.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `initial-scale` property controls the zoom level when the page is first
    loaded. The maximum-scale, minimum-scale, and user-scalable properties control
    how users are allowed to zoom the page in or out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next few lines, we''ll define the style sheets of our application. We
    are adding `normalize.css` and `main.css` from HTML5 boilerplate code. We are
    also adding our application''s customer CSS `app.css`. Finally, we are adding
    the Bootstrap 3 CSS. Apart from the customer `app.css`, other CSS is referenced
    in it. There is no change in these CSS files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Then, we'll define the scripts using the `script` tag. We are adding the modernizer,
    Angular, Angular-route, and `app.js`, our own developed custom JavaScript file.
  prefs: []
  type: TYPE_NORMAL
- en: We have already discussed Angular and Angular-UI. `app.js` will be discussed
    in
  prefs: []
  type: TYPE_NORMAL
- en: the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The modernizer allows web developers to use new CSS3 and HTML5 features while
    maintaining a fine level of control over browsers that don't support them. Basically,
    the modernizer performs the next generation feature detection (checking the availability
    of those features) while the page loads in the browser and reports the results.
    Based on these results, you can detect what the latest features available in the
    browser are, and based on that, you can provide an interface to the end user.
    If the browser does not support a few of the features, then an alternate flow
    or UI is provided to the end user.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are also adding the Bootstrap templates, which are written in JavaScript,
    using the `ui-bootstrap-tpls javascript` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also add style to the `head` tag, as shown in the following code. This
    style allows drop-down menus to work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the `body` tag, we are defining the controller of the application using the
  prefs: []
  type: TYPE_NORMAL
- en: '`ng-controller` attribute. While the page loads, it tells the controller the
    name of the application to Angular, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define the `header` section of the home page. In the `header` section,
    we''ll define the application title, `Online Table Reservation System`. Also,
    we''ll define the search form that will search the restaurants:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the next section, the middle section, includes where we actually bind
    the different views, marked with actual content comments. The `ui-view` attribute
    in `div` gets its content dynamically from Angular, such as restaurant details,
    restaurant lists, and so on. We have also added a warning dialog and spinner to
    the middle section that will be visible as and when required:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The final section of the `index.html` is the footer. Here, we are just adding
    the static content and copyright text. You can add whatever content you want here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: app.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`app.js` is our main application file. Because we have defined it in `index.html`,'
  prefs: []
  type: TYPE_NORMAL
- en: it gets loaded as soon as our `index.html` is called.
  prefs: []
  type: TYPE_NORMAL
- en: We need to take care that we do not mix route (URI) with REST endpoints. Routes
    represent the state/view of the SPA.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we are using the edge server (proxy server), everything will be accessible
    from it including our REST endpoints. External applications including the UI will
    use the edge server host to access the application. You can configure it in a
    global constants file and then use it wherever it is required. This will allow
    you to configure the REST host at a single place and use it at other places:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: restaurants.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`restaurants.js` represents an Angular service for our application that we''ll
    use for the restaurants. We know that there are two common uses of services—organizing
    code and sharing code across applications. Therefore, we have created a restaurants
    service that will be used among different modules such as search, list, details,
    and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Services are singleton objects, which are lazily instantiated by the AngularJS
    service factory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following section initializes the restaurants service module and loads
    the required dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the configuration, we are defining the routes and state of the `otrsApp.restaurants`
    module using UI-Router.
  prefs: []
  type: TYPE_NORMAL
- en: First, we define the `restaurants` state by passing the JSON object containing
    the URL that points to the router URI, the template URL that points to the HTML
    template that displays the `restaurants` state, and the controller that will handle
    the events on the `restaurants` view.
  prefs: []
  type: TYPE_NORMAL
- en: 'On top of the `restaurants` view (`route - /restaurants`), a nested `restaurants.profile`
    state is also defined that will represent the specific restaurant. For example,
    `/restaurant/1` would open and display the restaurant profile (details) page of
    a restaurant that is represented by `Id 1`. This state is called when a link is
    clicked in the `restaurants` template. In this `ui-sref="restaurants.profile({id:
    rest.id})"`, `rest` represents the `restaurant` object retrieved from the `restaurants`
    view.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that the state name is `''restaurants.profile''`, which tells the AngularJS
    UI-Router that the profile is a nested state of the `restaurants` state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next code section, we are defining the restaurant service using the
    Angular factory service type. This restaurant service on load fetches the list
    of restaurants from the server using a REST call. It provides a list and searches
    restaurant operations and restaurant data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In the next section of the `restaurants.js` module, we'll add two controllers
    that we defined for the `restaurants` and `restaurants.profile` states in the
    routing configuration. These two controllers are `RestaurantsCtrl` and `RestaurantCtrl`,
    and they handle the `restaurants` state and the `restaurants.profiles` state respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `RestaurantsCtrl` controller is pretty simple, in that it loads the restaurants
    data using the restaurants service list method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The `RestaurantCtrl` controller is responsible for showing the restaurant details
    of a given ID. This is also responsible for performing the reservation operations
    on the displayed restaurant. This control will be used when we design the restaurant
    details page with reservation options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We have also added a few of the filters in the `restaurants.js` module to format
    the date and time. These filters perform the following formatting on the input
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: '`date1`: Returns the input date in `dd MMM yyyy` format, for example, 13-Apr-2016'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`time1`: Returns the input time in HH:mm:ss format, for example, 11:55:04'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dateTime1`: Returns the input date and time in `dd MMM yyyy HH:mm:ss` format,
    for example, 13-Apr-2016 11:55:04'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following code snippet, we''ve applied these three filters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: restaurants.html
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to add the templates that we have defined for the `restaurants.profile`
    state. As you can see, in the template, we are using the `ng-repeat` directive
    to iterate the list of objects returned by `restaurantService.restaurants`. The
    `restaurantService` scope variable is defined in the controller. `''RestaurantsCtrl''`
    is associated with this template in the `restaurants` state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Search restaurants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the home page `index.html`, we have added the search form in the `header`
    section that allows us to search restaurants. The search restaurants functionality
    will use the same files as described earlier. It makes use of `app.js` (search
    form handler), `restaurants.js` (restaurant service), and `restaurants.html` to
    display the searched records:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b40a4348-76e8-435b-a8cb-384039b8b5a8.png)'
  prefs: []
  type: TYPE_IMG
- en: OTRS home page with restaurants listing
  prefs: []
  type: TYPE_NORMAL
- en: Restaurant details with reservation option
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Restaurant details with reservation option will be part of the content area
    (middle section of the page). This will contain a breadcrumb at the top with restaurants
    as a link to the restaurant listing page, followed by the name and address of
    the restaurant. The last section will contain the reservation section containing
    date and time selection boxes and a reserve button.
  prefs: []
  type: TYPE_NORMAL
- en: 'This page will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/efbae38e-baf9-455f-8379-4b5cdd67bf1b.png)'
  prefs: []
  type: TYPE_IMG
- en: Restaurants Detail Page with Reservation Option
  prefs: []
  type: TYPE_NORMAL
- en: Here, we will make use of the same restaurant service declared in `restaurants.js`.
  prefs: []
  type: TYPE_NORMAL
- en: The only change will be the template as described for the `restaurants.profile`
    state. This template will be defined using `restaurant.html`.
  prefs: []
  type: TYPE_NORMAL
- en: restaurant.html
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you can see, the breadcrumb is using the `restaurants` route, which is defined
    using the `ui-sref` attribute. The reservation form designed in this template
    calls the `book()` function defined in the controller `RestaurantCtrl` using the
    directive `ng-submit` on the form submit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Login page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When a user clicks on the Reserve button on the Restaurant Detail page after
    selecting the date and time of the reservation, the Restaurant Detail page checks
    whether the user is already logged in or not. If the user is not logged in, then
    the Login page displays. It looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/829ecbf3-dbee-4ed3-80f4-653c622b1671.png)'
  prefs: []
  type: TYPE_IMG
- en: Login page
  prefs: []
  type: TYPE_NORMAL
- en: We are not authenticating the user from the server. Instead, we are just populating
    the user name in the session storage and root scope for implementing the flow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the user logs in, they are redirected back to the same booking page with
    the persisted state. Then, the user can proceed with the reservation. The Login
    page uses basically two files: `login.html` and `login.js`.'
  prefs: []
  type: TYPE_NORMAL
- en: login.html
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `login.html` template consists of only two input fields, username and password,
    with the Login button and Cancel link. The Cancel link resets the form and the
    Login button submits the login form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we are using `LoginCtrl` with the `ng-controller` directive. The Login
    form is submitted using the `ng-submit` directive that calls the `submit` function
    of `LoginCtrl`. Input values are first collected using the `ng-model` directive
    and then submitted using their respective properties - `_email` and `_password`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: login.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The login module is defined in the `login.js` file that contains and loads the
    dependencies using the `module` function. The login state is defined with the
    help of the `config` function that takes the JSON object containing the `url`,
    `controller`, and `templateUrl` properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `controller`, we define the `cancel` and `submit` operations, which
    are called from the `login.html` template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Reservation confirmation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the user is logged in and has clicked on the Reservation button, the restaurant
    controller shows the alert box with confirmation, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dfa8dc28-1080-49fa-aa56-86c3ca29acb2.png)'
  prefs: []
  type: TYPE_IMG
- en: Restaurants detail page with reservation confirmation
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the web application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we are planning to use the latest technology stack for our UI application
    development, we will use Node.js and **npm** (**Node.js package manager**) that
    provide the open-source runtime environment for developing the server-side JavaScript
    web application.
  prefs: []
  type: TYPE_NORMAL
- en: I would recommend to go through this section once. It will introduce you to
    JavaScript build tooling and stacks. However, you can skip it if you know the
    JavaScript build tools or do not want to explore them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Node.js is built on Chrome''s V8 JavaScript engine and uses an event-driven,
    non-blocking I/O, which makes it lightweight and efficient. The default package
    manager of Node.js, npm, is the largest ecosystem of open-source libraries. It
    allows the installation of Node.js programs and makes it easier to specify and
    link dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to install npm if it's not already installed. It is a prerequisite.
    You can check the link at: [https://docs.npmjs.com/getting-started/installing-node](https://docs.npmjs.com/getting-started/installing-node)
    to install npm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To check if npm is set up correctly execute the `npm -v` command on the CLI.
    It should return the installed npm version in the output. We can switch to NetBeans
    for creating a new AngularJS JS HTML5 project in NetBeans. At the time of writing
    this chapter, I have used NetBeans 8.1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to File | New Project. A new project dialog should appear. Select HTML5/JavaScript
    under the Categories list and HTML5/JS Application under the Projects option,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c5bce51d-efdb-40ce-b615-50fe03a9b569.png)'
  prefs: []
  type: TYPE_IMG
- en: NetBeans - New HTML5/JavaScript project
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Next button. Then, feed the Project Name, Project Location,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: and Project Folder in the Name and Location dialog and click on the
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next button:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/3c602ecc-b62d-4a0a-95a6-da19f131c495.png)'
  prefs: []
  type: TYPE_IMG
- en: NetBeans New Project - Name and Location
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Site Template dialog, select the AngularJS Seed item under the Download
    Online Template: option and click on the Next button. The AngularJS Seed project
    is available at: [https://github.com/angular/angular-seed](https://github.com/angular/angular-seed):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4a404d56-6b00-4c9e-89cf-b2b2b2297910.png)'
  prefs: []
  type: TYPE_IMG
- en: NetBeans new project - site Ttemplate
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Tools dialog, select Create package.json, Create bower.json, and Create
    gulpfile.js. We''ll use gulp as our build tool. Gulp and Grunt are two of the
    most popular build frameworks for JS. As a Java programmer, you can correlate
    these tools to Ant. Both are awesome in their own way. If you want, you can also
    use `Gruntfile.js` as a build tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/976ef34a-cba5-492c-8002-d218f577e5d6.png)'
  prefs: []
  type: TYPE_IMG
- en: Netbeans New Project - Tools
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, once you click on Finish, you can see the HTML5/JS application directories
    and files. The directory structure will look like the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d648df11-ae57-4cdb-9c23-1df565f87006.png)'
  prefs: []
  type: TYPE_IMG
- en: AngularJS seed directory structure
  prefs: []
  type: TYPE_NORMAL
- en: 'You will also see an exclamation mark in your project if all of the required
    dependencies are not configured properly. You can resolve project problems by
    right-clicking on the project and then selecting the Resolve Project Problems
    option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8f574c16-80be-4778-be6f-f3c5173b582a.png)'
  prefs: []
  type: TYPE_IMG
- en: Resolve Project Problems dialog
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, NetBeans resolves project problems if you click on the Resolve... button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can also resolve a few of the problems by giving the correct path for some
    of the JS modules such as Bower, gulp, and Node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Bower**: Required to manage the JavaScript libraries for the OTRS application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gulp**: A task runner, required for building our projects like ANT'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node**: For executing our server-side OTRS application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bower is a dependencies management tool that works like npm. Npm is used for
    installing the Node.js modules, whereas Bower is used for managing your web application's
    libraries/components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Tools menu and select Options. Now, set the path of Bower, gulp,
    and Node.js, as shown in the HTML/JS tools (top bar icon) in the following screenshot.
    For setting up the Bower path, click on the Bower tab, as shown in the following
    screenshot, and update the path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d5186eb3-34cf-4f81-9a39-88fcba50a37f.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting Bower path
  prefs: []
  type: TYPE_NORMAL
- en: 'For setting up the Gulp Path, click on the Gulp tab, as shown in the following
    screenshot, and update the path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6319ca05-d1a5-4538-927e-44b41c22b949.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting Gulp path
  prefs: []
  type: TYPE_NORMAL
- en: 'For setting up the Node Path, click on the Node.js tab, as shown in the following
    screenshot, and update the path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7cc72097-0710-483a-9b83-d04b9a095ff8.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting Node path
  prefs: []
  type: TYPE_NORMAL
- en: 'Once this is done, package.json will look like the following. We have modified
    the values for a few of the entries such as name, descriptions, dependencies,
    and so on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we''ll update `bower.json`, as shown in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll modify the `.bowerrc` file, as shown in the following code, to
    specify the directory where Bower will store the components defined in `bower.json`.
    We''ll store the Bower component under the application directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll set up the `gulpfile.js`. We''ll use `CoffeeScript` to define
    the `gulp` tasks. Therefore, we will just define the `CoffeeScript` in `gulpfile.js`
    and the actual task will be defined in the `gulpfile.coffee` file. Let''s see
    the content of the `gulpfile.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'In this step, we''ll define the `gulp` configuration. We are using `CoffeeScript`
    to define the `gulp` file. The name of the `gulp` file written in `CoffeeScript`
    is `gulpfile.coffee`. The default task is defined as `default_sequence`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s understand what `default_sequence` task performs:'
  prefs: []
  type: TYPE_NORMAL
- en: As per the defined `default_sequence` task, first it will connect to the server,
    then build the web application, and keep a watch on the changes. The watch will
    help to render changes we make in the code and will be displayed immediately on
    the UI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The most important tasks in this script are `connect` and `watch`. Others are
    self-explanatory. So, lets dig in them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gulp-connect`: This is a `gulp` plugin to run the web server. It also allows
    for live reload.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gulp-watch`: This is a file watcher that uses chokidar and emits vinyl objects
    (objects describe the file—its path and content). In simple words, we can say
    that `gulp-watch` watches files for changes and triggers tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `gulpfile.coffee` will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we are ready with the preceding changes, we will install `gulp` using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'To install windows build tools, run the following command in Windows environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, we''ll install the other `gulp` libraries such as `gulp-clean`, `gulp-connect`,
    and so on, using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can install the Bower dependencies defined in the `bower.json` file
    using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'If Bower is not installed, please install it with following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the preceding command will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c00982cc-fe4d-4411-bcf5-a890c3a7ceeb.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sample output - bower install --s
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the last step in the setup. Here, we will confirm that the directory
    structure should look like the following. We''ll keep the `src` and `published`
    artifacts (in the `./public` directory) as separate directories. Therefore, the
    following directory structure is different from the default AngularJS seed project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are references to some good reads:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AngularJS by Example*, *Packt Publishing:* ([https://www.packtpub.com/web-development/angularjs-example](https://www.packtpub.com/web-development/angularjs-example))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular Seed Project: ([https://github.com/angular/angular-seed](https://github.com/angular/angular-seed))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular UI: ([https://angular-ui.github.io/bootstrap/](https://angular-ui.github.io/bootstrap/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Gulp: ([http://gulpjs.com/](http://gulpjs.com/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned about the new dynamic web application development.
  prefs: []
  type: TYPE_NORMAL
- en: It has changed completely over the years. The web application frontend is completely
    developed in pure HTML and JavaScript instead of using any server-side technologies
    such as JSP, servlets, ASP, and so on. UI application development with JavaScript
    now has its own development environments such as npm, Bower, and so on. We have
    explored the AngularJS framework to develop our web application. It made things
    easier by providing built-in features and support for Bootstrap and the `$http`
    service that deals with the AJAX calls.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you have grasped the UI development overview and the way modern applications
    are developed and integrated with server-side microservices. In the next chapter,
    we will learn the best practices and common principals of microservice design.
    The chapter will provide details about microservices development using industry
    practices and examples. It will also contain examples of where microservices implementation
    goes wrong and how you can avoid such problems.
  prefs: []
  type: TYPE_NORMAL
