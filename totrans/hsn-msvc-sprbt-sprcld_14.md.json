["```java\nexport BOOK_HOME=~/Documents/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud\ngit clone https://github.com/PacktPublishing/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud $BOOK_HOME\ncd $BOOK_HOME/Chapter12\n```", "```java\n@EnableConfigServer\n@SpringBootApplication\npublic class ConfigServerApplication {\n```", "```java\nserver.port: 8888\n\nspring.cloud.config.server.native.searchLocations: file:${PWD}/config-repo\n\nmanagement.endpoint.health.show-details: \"ALWAYS\"\nmanagement.endpoints.web.exposure.include: \"*\"\n\nlogging.level.root: info\n---\nspring.profiles: docker\nspring.cloud.config.server.native.searchLocations: file:/config-repo\n\n```", "```java\ninclude ':spring-cloud:config-server'\n```", "```java\n - id: config-server\n   uri: http://${app.config-server}:8888\n  predicates:\n  - Path=/config/**\n  filters:\n  - RewritePath=/config/(?<segment>.*), /$\\{segment}\n```", "```java\ncurl https://dev-usr:dev-pwd@localhost:8443/config/product/docker -ks | jq\n```", "```java\nconfig-server:\n  environment:\n    - SPRING_PROFILES_ACTIVE=docker,native\n    - ENCRYPT_KEY=${CONFIG_SERVER_ENCRYPT_KEY}\n    - SPRING_SECURITY_USER_NAME=${CONFIG_SERVER_USR}\n    - SPRING_SECURITY_USER_PASSWORD=${CONFIG_SERVER_PWD}\n  volumes:\n    - $PWD/config-repo:/config-repo\n  build: spring-cloud/config-server\n  mem_limit: 350m\n```", "```java\nCONFIG_SERVER_ENCRYPT_KEY=my-very-secure-encrypt-key\nCONFIG_SERVER_USR=dev-usr\nCONFIG_SERVER_PWD=dev-pwd\n```", "```java\nproduct:\n  environment:\n - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}\n - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}\n```", "```java\n@DataMongoTest(properties = {\"spring.cloud.config.enabled=false\"})\n\n@DataJpaTest(properties = {\"spring.cloud.config.enabled=false\"})\n\n@SpringBootTest(webEnvironment=RANDOM_PORT, properties = {\"eureka.client.enabled=false\", \"spring.cloud.config.enabled=false\"})\n```", "```java\napp.config-server: localhost\n\nspring:\n  application.name: product\n  cloud.config:\n    failFast: true\n    retry:\n      initialInterval: 3000\n      multiplier: 1.3\n      maxInterval: 10000\n      maxAttempts: 20\n    uri: http://${CONFIG_SERVER_USR}:${CONFIG_SERVER_PWD}@${app.config-server}:8888\n\n---\nspring.profiles: docker\n\napp.config-server: config-server\n```", "```java\n  product:\n    environment:\n      - SPRING_PROFILES_ACTIVE=docker\n      - MANAGEMENT_HEALTH_RABBIT_ENABLED=false\n      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka\n      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_PARTITIONED=true\n      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCECOUNT=2\n      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCEINDEX=0\n```", "```java\n---\nspring.profiles: streaming_partitioned\nspring.cloud.stream.bindings.input.consumer:\n  partitioned: true\n  instanceCount: 2\n\n---\nspring.profiles: streaming_instance_0\nspring.cloud.stream.bindings.input.consumer.instanceIndex: 0\n\n---\nspring.profiles: streaming_instance_1\nspring.cloud.stream.bindings.input.consumer.instanceIndex: 1\n\n---\nspring.profiles: kafka\n\nmanagement.health.rabbit.enabled: false\nspring.cloud.stream.defaultBinder: kafka\n```", "```java\n---\nspring.profiles: streaming_partitioned\n\nspring.cloud.stream.bindings.output-products.producer:\n  partition-key-expression: payload.key\n  partition-count: 2\n\nspring.cloud.stream.bindings.output-recommendations.producer:\n  partition-key-expression: payload.key\n  partition-count: 2\n\nspring.cloud.stream.bindings.output-reviews.producer:\n  partition-key-expression: payload.key\n  partition-count: 2\n\n---\nspring.profiles: kafka\n\nmanagement.health.rabbit.enabled: false\nspring.cloud.stream.defaultBinder: kafka\n```", "```java\nproduct:\n    environment:\n      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka\n      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}\n      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}\n```", "```java\ncd $BOOK_HOME/Chapter12\n./gradlew build && docker-compose build\n```", "```java\n./test-em-all.bash start\n```", "```java\ncurl https://dev-usr:dev-pwd@localhost:8443/config/product/docker -ks | jq .\n```", "```java\n{\n  \"name\": \"product\",\n  \"profiles\": [\n    \"docker\"\n  ],\n  ...\n  \"propertySources\": [\n    {\n      \"name\": \"file:/config-repo/product.yml (document #1)\",\n      \"source\": {\n        \"spring.profiles\": \"docker\",\n        \"server.port\": 8080,\n        ...\n      }\n    },\n    {\n      \"name\": \"file:/config-repo/application.yml (document #1)\",\n      \"source\": {\n        \"spring.profiles\": \"docker\",\n        ...\n      }\n    },\n    {\n      \"name\": \"file:/config-repo/product.yml (document #0)\",\n      \"source\": {\n        \"server.port\": 7001,\n        ...\n      }\n    },\n    {\n      \"name\": \"file:/config-repo/application.yml (document #0)\",\n      \"source\": {\n        ...\n        \"app.eureka-password\": \"p\",\n        \"spring.rabbitmq.password\": \"guest\"\n      }\n    }\n  ]\n}\n```", "```java\napp:\n  eureka-password: '{cipher}bf298f6d5f878b342f9e44bec08cb9ac00b4ce57e98316f030194a225fac89fb'\n\nspring.rabbitmq:\n  password: '{cipher}17fcf0ae5b8c5cf87de6875b699be4a1746dd493a99d926c7a26a68c422117ef'\n```", "```java\ncurl -k https://dev-usr:dev-pwd@localhost:8443/config/encrypt --data-urlencode \"hello world\"\n```", "```java\ncurl -k https://dev-usr:dev-pwd@localhost:8443/config/decrypt -d 9eca39e823957f37f0f0f4d8b2c6c46cd49ef461d1cab20c65710823a8b412ce\n```", "```java\nmy-secret:'{cipher}9eca39e823957f37f0f0f4d8b2c\n6c46cd49ef461d1cab20c65710823a8b412ce'\n```", "```java\ndocker-compose down\n```", "```java\ncurl https://dev-usr:dev-pwd@localhost:8443/config/application/default -ks | jq \n```"]