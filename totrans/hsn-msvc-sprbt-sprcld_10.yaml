- en: Introduction to Spring Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have seen how we can use Spring Boot to build microservices with
    well-documented APIs, along with Spring WebFlux and SpringFox; persist data in
    MongoDB and SQL databases using Spring Data for MongoDB and JPA; build reactive
    microservices either as non-blocking APIs using Project Reactor or as event-driven
    asynchronous services using Spring Cloud Stream with RabbitMQ or Kafka, together
    with Docker; and manage and test a system landscape consisting of microservices,
    databases, and messaging systems.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it's time to see how we can use **Spring Cloud** to make our services production-ready,
    scalable, robust, configurable, secure, and resilient.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will introduce you to how Spring Cloud can be used to implement
    the following design patterns from [Chapter 1](282e7b49-42b8-4649-af81-b4b6830d391d.xhtml),
    *Introduction to Microservices*, the *Design patterns for microservices* section:'
  prefs: []
  type: TYPE_NORMAL
- en: Service discovery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edge server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Centralized configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Circuit breaker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distributed tracing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter does not contain any source code, and so no tools need to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: The evolution of Spring Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In its initial 1.0 release in March 2015, Spring Cloud was mainly a wrapper
    around the Netflix OSS tools, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Netflix Eureka, a discovery server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Netflix Ribbon, a client-side load balancer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Netflix Zuul, an edge server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Netflix Hystrix, a circuit breaker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The initial release of Spring Cloud also contained a configuration server and
    integration with Spring Security that provided OAuth 2.0 protected APIs. In May
    2016, the Brixton release (V1.1) of Spring Cloud was made generally available.
    With the Brixton release, Spring Cloud got support for distributed tracing based
    on Spring Cloud Sleuth and Zipkin, which originated from Twitter. These initial
    Spring Cloud components could be used to implement the preceding design patterns. For
    more details, see [https://spring.io/blog/2015/03/04/spring-cloud-1-0-0-available-now](https://spring.io/blog/2015/03/04/spring-cloud-1-0-0-available-now) and [https://spring.io/blog/2016/05/11/spring-cloud-brixton-release-is-available](https://spring.io/blog/2016/05/11/spring-cloud-brixton-release-is-available).
  prefs: []
  type: TYPE_NORMAL
- en: 'Since its inception, Spring Cloud has grown considerably over the years and
    has added support for the following, among others:'
  prefs: []
  type: TYPE_NORMAL
- en: Service discovery and centralized configuration based on HashiCorp Consul and
    Apache Zookeeper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event-driven microservices using Spring Cloud Stream
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud providers such as Microsoft Azure, Amazon Web Services, and Google Cloud
    Platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See [https://spring.io/projects/spring-cloud](https://spring.io/projects/spring-cloud)
    for a complete list of tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the release of Spring Cloud Greenwich (V2.1) in January 2019, some of
    the Netflix tools mentioned previously have been placed in maintenance mode in
    Spring Cloud. The following replacements are recommended by the Spring Cloud project:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Current component** | **Replaced by** |'
  prefs: []
  type: TYPE_TB
- en: '| Netflix Hystrix  | Resilience4j |'
  prefs: []
  type: TYPE_TB
- en: '| Netflix Hystrix Dashboard/Netflix Turbine | Micrometer and monitoring system
    |'
  prefs: []
  type: TYPE_TB
- en: '| Netflix Ribbon | Spring Cloud load balancer |'
  prefs: []
  type: TYPE_TB
- en: '| Netflix Zuul | Spring Cloud Gateway |'
  prefs: []
  type: TYPE_TB
- en: For more details, for example on what maintenance mode means, see [https://spring.io/blog/2019/01/23/spring-cloud-greenwich-release-is-now-available](https://spring.io/blog/2019/01/23/spring-cloud-greenwich-release-is-now-available).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, we will use the replacement alternatives to implement the design
    patterns mentioned previously. The following table maps each design pattern to
    the software components that will be used to implement them:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Design pattern** | **Software component** |'
  prefs: []
  type: TYPE_TB
- en: '| Service discovery | Netflix Eureka and Spring Cloud load balancer |'
  prefs: []
  type: TYPE_TB
- en: '| Edge server | Spring Cloud Gateway and Spring Security OAuth |'
  prefs: []
  type: TYPE_TB
- en: '| Centralized configuration | Spring Cloud Configuration Server |'
  prefs: []
  type: TYPE_TB
- en: '| Circuit breaker | Resilience4j |'
  prefs: []
  type: TYPE_TB
- en: '| Distributed tracing | Spring Cloud Sleuth and Zipkin |'
  prefs: []
  type: TYPE_TB
- en: Now, let's go through the design patterns and introduce the software components
    that will be used to implement them!
  prefs: []
  type: TYPE_NORMAL
- en: Using Spring Cloud Gateway as an edge server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another very important support function is an edge server. As we already described
    in [Chapter 1](282e7b49-42b8-4649-af81-b4b6830d391d.xhtml), *Introduction to Microservices*,
    in the *Edge server* section, it can be used to secure a microservice landscape,
    that is, hide private services from external usage and protect public services
    when they're used by external clients.
  prefs: []
  type: TYPE_NORMAL
- en: Initially, Spring Cloud used Netflix Zuul v1 as its edge server. Since the Spring
    Cloud Greenwich release, it's recommended to use **Spring Cloud Gateway** instead. Spring
    Cloud Gateway comes with similar support for critical features, such as URL path-based
    routing and the protection of endpoints via the use of OAuth 2.0 and **OpenID
    Connect** (**OIDC**).
  prefs: []
  type: TYPE_NORMAL
- en: One important difference between Netflix Zuul v1 and Spring Cloud Gateway is
    that Spring Cloud Gateway is based on non-blocking APIs that use Spring 5, Project
    Reactor, and Spring Boot 2, while Netflix Zuul v1 is based on blocking APIs. This
    means that Spring Cloud Gateway should be able to handle larger amounts of concurrent
    requests than Netflix Zuul v1, which is important for an edge server that all
    external traffic goes through.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows how all requests from external clients go through Spring
    Cloud Gateway as an edge server. Based on URL paths, it routes requests to the
    intended microservice:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1d389b62-e8c6-4111-bce0-9406d0c5f0fc.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding diagram, we can see how the edge server will send external
    requests that have a URL path that starts with `/product-composite/` to the **Product
    Composite** microservice. The core services **Product**, **Recommendation**, and
    **Review** are not reachable from external clients.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 10](a3383211-405d-4319-b142-ddb8cf3674fd.xhtml), *Using Spring Cloud
    Gateway to Hide Microservices Behind an Edge Server*, we will look at how to set
    up Spring Cloud Gateway with our microservices.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 11](bcb9bba0-d2fe-4ee8-954b-07a7e38e1115.xhtml), *Secure Access
    to APIs*, we will see how we can use Spring Cloud Gateway together with Spring
    Security OAuth2 to protect access to the edge server using OAuth 2.0 and OIDC.
    We will also see how Spring Cloud Gateway can propagate identity information of
    the caller down to our microservices, for example, the username or email address
    of the caller.
  prefs: []
  type: TYPE_NORMAL
- en: With Spring Cloud Gateway introduced, let's introduce how to use Spring Cloud
    Config for centralized configuration.
  prefs: []
  type: TYPE_NORMAL
