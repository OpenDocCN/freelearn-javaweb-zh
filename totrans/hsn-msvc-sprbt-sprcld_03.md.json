["```java\n@SpringBootApplication\npublic class MyApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(MyApplication.class, args);\n  }\n}\n```", "```java\n@Component\npublic class MyComponentImpl implements MyComponent { ...\n```", "```java\npublic class AnotherComponent {\n\n  private final MyComponent myComponent;\n\n  @Autowired\n  public AnotherComponent(MyComponent myComponent) {\n    this.myComponent = myComponent;\n  }\n```", "```java\npackage se.magnus.myapp;\n\n@SpringBootApplication\n@ComponentScan({\"se.magnus.myapp\",\"se.magnus.utils\"})\npublic class MyApplication {\n```", "```java\npackage se.magnus.utils;\n\n@Component\npublic class MyUtility { ...\n```", "```java\npackage se.magnus.myapp.services;\n\npublic class AnotherComponent {\n\n private final MyUtility myUtility;\n\n @Autowired\n public AnotherComponent(MyUtility myUtility) {\n   this.myUtility = myUtility;\n }\n```", "```java\n@Configuration\npublic class SubscriberApplication {\n\n  @Bean\n  public Filter logFilter() {\n    CommonsRequestLoggingFilter filter = new \n        CommonsRequestLoggingFilter();\n    filter.setIncludeQueryString(true);\n    filter.setIncludePayload(true);\n    filter.setMaxPayloadLength(5120);\n    return filter;\n  }\n```", "```java\nimplementation('org.springframework.boot:spring-boot-starter-webflux')\n```", "```java\n2018-09-30 15:23:43.592 INFO 17429 --- [ main] o.s.b.web.embedded.netty.NettyWebServer : Netty started on port(s): 8080\n```", "```java\nimplementation('org.springframework.boot:spring-boot-starter-webflux') \n{\n exclude group: 'org.springframework.boot', module: 'spring-boot-\n starter-reactor-netty'\n}\nimplementation('org.springframework.boot:spring-boot-starter-tomcat')\n```", "```java\n2018-09-30 18:23:44.182 INFO 17648 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http)\n```", "```java\nserver.port: 7001\n```", "```java\n@RestController\npublic class MyRestService {\n\n  @GetMapping(value = \"/my-resource\", produces = \"application/json\")\n  List<Resource> listResources() {\n    ...\n  }\n```", "```java\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.IdClass;\nimport javax.persistence.Table;\n\n@Entity\n@IdClass(ReviewEntityPK.class)\n@Table(name = \"review\")\npublic class ReviewEntity {\n @Id private int productId;\n @Id private int reviewId;\n private String author;\n private String subject;\n private String content;\n```", "```java\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.annotation.Version;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\n@Document\npublic class RecommendationEntity {\n\n    @Id\n    private String id;\n\n    @Version\n    private int version;\n\n    private int productId;\n    private int recommendationId;\n    private String author;\n    private int rate;\n    private String content;\n```", "```java\nimport org.springframework.data.repository.CrudRepository;\n\npublic interface ReviewRepository extends CrudRepository<ReviewEntity, ReviewEntityPK> {\n    Collection<ReviewEntity> findByProductId(int productId);\n}\n```", "```java\npublic class ReviewEntityPK implements Serializable {\n    public int productId;\n    public int reviewId;\n}\n```", "```java\nprivate final ReviewRepository repository;\n\n@Autowired\npublic ReviewService(ReviewRepository repository) {\n this.repository = repository;\n}\n\npublic void someMethod() {\n  repository.save(entity);\n  repository.delete(entity);\n  repository.findByProductId(productId);\n```", "```java\nimport org.springframework.data.repository.reactive.ReactiveCrudRepository;\nimport reactor.core.publisher.Flux;\n\npublic interface RecommendationRepository extends ReactiveCrudRepository<RecommendationEntity, String> {\n    Flux<RecommendationEntity> findByProductId(int productId);\n}\n```", "```java\npublic class MyMessage {\n  private String attribute1 = null;\n  private String attribute2 = null;\n```", "```java\nimport org.springframework.cloud.stream.messaging.Source;\n\n@EnableBinding(Source.class)\npublic class MyPublisher {\n\n @Autowired private Source mysource;\n\n public String processMessage(MyMessage message) {\n   mysource.output().send(MessageBuilder.withPayload(message).build());\n```", "```java\nimport org.springframework.cloud.stream.messaging.Sink;\n\n@EnableBinding(Sink.class)\npublic class MySubscriber {\n\n @StreamListener(target = Sink.INPUT)\n public void receive(MyMessage message) {\n LOG.info(\"Received: {}\",message);\n```", "```java\nimplementation('org.springframework.cloud:spring-cloud-starter-stream-rabbit')\n```", "```java\nspring.cloud.stream:\n  default.contentType: application/json\n  bindings.output.destination: mydestination\n```", "```java\nspring.cloud.stream:\n  default.contentType: application/json\n  bindings.input.destination: mydestination\n```", "```java\nFROM openjdk:12.0.2\n\nMAINTAINER Magnus Larsson <magnus.larsson.ml@gmail.com>\n\nEXPOSE 8080\nADD ./build/libs/*.jar app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n```", "```java\nproduct:\n build: microservices/product-service\n\nrecommendation:\n build: microservices/recommendation-service\n\nreview:\n  build: microservices/review-service\n\ncomposite:\n  build: microservices/product-composite-service\n  ports:\n    - \"8080:8080\"\n```"]