["```java\nexport BOOK_HOME=~/Documents/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud\ngit clone https://github.com/PacktPublishing/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud $BOOK_HOME\ncd $BOOK_HOME/Chapter10\n```", "```java\n  product-composite:\n    build: microservices/product-composite-service\n    ports:\n      - \"8080:8080\"\n\n  eureka:\n    build: spring-cloud/eureka-server\n    ports:\n      - \"8761:8761\"\n```", "```java\ninclude ':spring-cloud:gateway'\n```", "```java\ngateway:\n  environment:\n    - SPRING_PROFILES_ACTIVE=docker\n  build: spring-cloud/gateway\n  mem_limit: 350m\n  ports:\n    - \"8080:8080\"\n```", "```java\n@Bean\nReactiveHealthIndicator healthcheckMicroservices() {\n\n    ReactiveHealthIndicatorRegistry registry = \n        new DefaultReactiveHealthIndicatorRegistry\n            (new LinkedHashMap<>());\n\n    registry.register(\"product\",() -> \n        getHealth(\"http://product\"));\n    registry.register(\"recommendation\", () ->\n        getHealth(\"http://recommendation\"));\n    registry.register(\"review\", () ->\n        getHealth(\"http://review\"));\n    registry.register(\"product-composite\", () ->\n        getHealth(\"http://product-composite\"));\n\n    return new CompositeReactiveHealthIndicator\n        (healthAggregator, registry);\n}\n\nprivate Mono<Health> getHealth(String url) {\n    url += \"/actuator/health\";\n    LOG.debug(\"Will call the Health API on URL: {}\", url);\n    return getWebClient().get().uri(url)\n        .retrieve().bodyToMono(String.class)\n        .map(s -> new Health.Builder().up().build())\n        .onErrorResume(ex -> \n            Mono.just(new Health.Builder().down(ex).build()))\n        .log();\n}\n```", "```java\n@Bean\n@LoadBalanced\npublic WebClient.Builder loadBalancedWebClientBuilder() {\n   final WebClient.Builder builder = WebClient.builder();\n   return builder;\n}\n```", "```java\nmanagement.endpoint.health.show-details: \"ALWAYS\"\nmanagement.endpoints.web.exposure.include: \"*\"\n\n```", "```java\nlogging:\n  level:\n    root: INFO\n    org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator: INFO\n    org.springframework.cloud.gateway: TRACE\n```", "```java\nspring.cloud.gateway.routes:\n- id: product-composite\n  uri: lb://product-composite\n  predicates:\n  - Path=/product-composite/**\n```", "```java\n- id: eureka-api\n  uri: http://${app.eureka-server}:8761\n  predicates:\n  - Path=/eureka/api/{segment}\n  filters:\n  - SetPath=/eureka/{segment}\n```", "```java\n- id: eureka-web-start\n  uri: http://${app.eureka-server}:8761\n  predicates:\n  - Path=/eureka/web\n  filters:\n  - SetPath=/\n\n- id: eureka-web-other\n  uri: http://${app.eureka-server}:8761\n  predicates:\n  - Path=/eureka/**\n```", "```java\napp.eureka-server: localhost\n---\nspring.profiles: docker\napp.eureka-server: eureka\n```", "```java\ncurl http://httpstat.us/200 -i\n```", "```java\n- id: host_route_200\n  uri: http://httpstat.us\n  predicates:\n  - Host=i.feel.lucky:8080\n  - Path=/headerrouting/**\n  filters:\n  - SetPath=/200\n```", "```java\n- id: host_route_418\n  uri: http://httpstat.us\n  predicates:\n  - Host=im.a.teapot:8080\n  - Path=/headerrouting/**\n  filters:\n  - SetPath=/418\n```", "```java\n- id: host_route_501\n  uri: http://httpstat.us\n  predicates:\n  - Path=/headerrouting/**\n  filters:\n  - SetPath=/501\n```", "```java\ncd $BOOK_HOME/Chapter10\n./gradlew build && docker-compose build\n```", "```java\n./test-em-all.bash start\n```", "```java\ndocker-compose ps gateway eureka product-composite product recommendation review\n```", "```java\ncurl localhost:8080/actuator/gateway/routes -s | jq '.[] | {\"\\(.route_id)\": \"\\(.route_definition.predicates[0].args._genkey_0)\"}'\n```", "```java\ndocker-compose logs -f --tail=0 gateway\n```", "```java\ncurl http://localhost:8080/product-composite/2\n```", "```java\nPattern \"/product-composite/**\" matches against value \"/product-composite/2\"\nRoute matched: product-composite\nLoadBalancerClientFilter url chosen: http://b8013440aea0:8080/product-composite/2\n```", "```java\ncurl -H \"accept:application/json\" localhost:8080/eureka/api/apps -s | \\ jq -r .applications.application[].instance[].instanceId\n```", "```java\ncurl http://localhost:8080/headerrouting -H \"Host: i.feel.lucky:8080\"\n```", "```java\ncurl http://localhost:8080/headerrouting -H \"Host: im.a.teapot:8080\"\n```", "```java\ncurl http://localhost:8080/headerrouting\n```", "```java\nsudo bash -c \"echo '127.0.0.1 i.feel.lucky im.a.teapot' >> /etc/hosts\"\n```", "```java\ncurl http://i.feel.lucky:8080/headerrouting\ncurl http://im.a.teapot:8080/headerrouting\n```", "```java\ndocker-compose down\n```"]