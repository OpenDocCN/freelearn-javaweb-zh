["```java\n        <servlet> \n          <servlet-name>books</servlet-name> \n            <servlet-class>     \n              org.springframework.web.servlet.DispatcherServlet \n            </servlet-class> \n          </servlet> \n        <servlet-mapping> \n          <servlet-name>books</servlet-name> \n          <url-pattern>/*</url-pattern> \n        </servlet-mapping> \n\n```", "```java\n@RestController \npublic class MyRestController { \n\n  @RequestMapping(value=\"/welcome\",method=RequestMethod.GET) \n  public String getData() \n  { \n    return(\"welcome to web services\"); \n  } \n} \n\n```", "```java\n        public class Main { \n          public static void main(String[] args) { \n           // TODO Auto-generated method stub \n           String URI=    \n             \"http://localhost:8080/Ch09_Spring_Restful/welcome\" \n           RestTemplate template=new RestTemplate(); \n           System.out.println(template.getForObject(URI,String.class)); \n          } \n        } \n\n```", "```java\n        @RestController \n        @EnableWebMvc \n        public class MyBookController { \n\n          @Autowired \n          BookDAO bookDAO; \n          @GetMapping(\"/books/{ISBN}\") \n          public ResponseEntity getBook(@PathVariable long ISBN) { \n\n            Book book = bookDAO.getBook(ISBN); \n            if (null == book) { \n              return new ResponseEntity<Book>(HttpStatus.NOT_FOUND); \n            } \n\n            return new ResponseEntity(book, HttpStatus.OK); \n          } \n        } \n\n```", "```java\n        public class Main_Get_Book { \n          public static void main(String[] args) { \n            // TODO Auto-generated method stub \n\n            RestTemplate template=new RestTemplate(); \n            Book book=   \n             template.getForObject( \n               \"http://localhost:8081/Ch09_Spring_Rest_JDBC/books/14\", \n               Book.class); \n            System.out.println(book.getAuthor()+\"\\t\"+book.getISBN()); \n          } \n        } \n\n```", "```java\n        @PutMapping(\"/books/{ISBN}\") \n          public ResponseEntity<Book> updateBook(@PathVariable long  \n          ISBN, @RequestBody Book book)  \n        { \n          Book book_searched = bookDAO.getBook(ISBN); \n          if (book_searched == null) { \n            return new ResponseEntity(HttpStatus.NOT_FOUND); \n          } \n          bookDAO.updateBook(ISBN, book.getPrice()); \n\n          book_searched.setPrice(book.getPrice()); \n          return new ResponseEntity(book_searched, HttpStatus.OK); \n        } \n\n```", "```java\n        public class Main_Update { \n          public static void main(String[] args) { \n            // TODO Auto-generated method stub \n            RestTemplate template = new RestTemplate(); \n\n            Map<String,Long> request_parms=new HashMap<>(); \n            request_parms.put(\"ISBN\",13l); \n\n            Book book=new Book(); \n            book.setPrice(200); \n            template.put \n              (\"http://localhost:8081/Ch09_Spring_Rest_JDBC/books/13\", \n                book,request_parms); \n          } \n        } \n\n```", "```java\n        void put(URL_for_the_resource, Object_to_update,Map_of_variable) \n\n```", "```java\n        @PostMapping(\"/books\") \n        public ResponseEntity<Book> addBook(@RequestBody Book book) { \n          System.out.println(\"book added\" + book.getDescription()); \n          if (book == null) { \n            return new ResponseEntity<Book>(HttpStatus.NOT_FOUND); \n          } \n          int data = bookDAO.addBook(book); \n          if (data > 0) \n            return new ResponseEntity(book, HttpStatus.OK); \n          return new ResponseEntity(book, HttpStatus.NOT_FOUND); \n        } \n\n```", "```java\n        public class Main_AddBook { \n          public static void main(String[] args) { \n            // TODO Auto-generated method stub \n            RestTemplate template = new RestTemplate(); \n\n            Book book=new Book(\"add book\",1234l,\"adding  \n              book\",1000,\"description adding\",\"abcd\"); \n            book.setDescription(\"new description\"); \n            Book book2= template.postForObject( \n              \"http://localhost:8081/Ch09_Spring_Rest_JDBC/books\",   \n              book,Book.class); \n            System.out.println(book2.getAuthor()); \n          } \n        } \n\n```", "```java\n          @GetMapping(\"/books\") \n          public ResponseEntity getAllBooks() { \n\n            List<Book> books = bookDAO.findAllBooks(); \n            return new ResponseEntity(books, HttpStatus.OK); \n          } \n\n```", "```java\n        public class Main_GetAll { \n\n          public static void main(String[] args) { \n            RestTemplate template = new RestTemplate(); \n            ResponseEntity<Book[]> responseEntity=   \n              template.getForEntity( \n                \"http://localhost:8081/Ch09_Spring_Rest_JDBC/books\",   \n                Book[].class); \n            Book[] books=responseEntity.getBody(); \n            for(Book book:books) \n            System.out.println(book.getAuthor()+\"\\t\"+book.getISBN()); \n          } \n        } \n\n```", "```java\n        @RestController \n         public class MyBookController { \n         @RequestMapping(value=\"/books/{author}\", method =   \n           RequestMethod.GET) \n         public String getBook(@PathVariable String author,  \n           ModelMap model)  \n           { \n             List<Book> books=new ArrayList<>(); \n            books.add(new    \n              Book(\"Book1\",10l,\"publication1\",100, \n              \"description\",\"auuthor1\")); \n            books.add(new Book(\"Book2\",11l,\"publication1\",200,    \n              \"description\",\"auuthor1\")); \n            books.add(new Book(\"Book3\",12l,\"publication1\",500, \n              \"description\",\"auuthor1\")); \n\n            model.addAttribute(\"book\", books); \n             return \"book\"; \n          } \n        } \n\n```", "```java\n        public class PdfView extends AbstractPdfView { \n          @Override \n          protected void buildPdfDocument(Map<String, Object> model,  \n            Document document, PdfWriter writer, \n              HttpServletRequest request, HttpServletResponse    \n                response) throws Exception  \n          { \n            List<Book> books = (List<Book>) model.get(\"book\"); \n            PdfPTable table = new PdfPTable(3); \n              table.getDefaultCell().setHorizontalAlignment \n            (Element.ALIGN_CENTER); \n            table.getDefaultCell(). \n              setVerticalAlignment(Element.ALIGN_MIDDLE); \n            table.getDefaultCell().setBackgroundColor(Color.lightGray); \n\n            table.addCell(\"Book Name\"); \n            table.addCell(\"Author Name\"); \n            table.addCell(\"Price\"); \n\n            for (Book book : books) { \n              table.addCell(book.getBookName()); \n              table.addCell(book.getAuthor()); \n              table.addCell(\"\" + book.getPrice()); \n            } \n            document.add(table); \n\n          } \n        } \n\n```", "```java\n        public class PdfViewResolver implements ViewResolver{ \n\n          @Override \n          public View resolveViewName(String viewName, Locale locale)  \n            throws Exception { \n            PdfView view = new PdfView(); \n            return view; \n          } \n        } \n\n```", "```java\n        <bean id=\"cnManager\"  class= \"org.springframework.web.accept. \n            ContentNegotiationManagerFactoryBean\"> \n            <property name=\"ignoreAcceptHeader\" value=\"true\" /> \n            <property name=\"defaultContentType\" value=\"text/html\" /> \n        </bean>\n```", "```java\n        <html> \n        <%@ taglib prefix=\"c\"   \n                 uri=\"http://java.sun.com/jsp/jstl/core\"%> \n        <title>Book LIST</title> \n        </head> \n        <body> \n          <table border=\"1\"> \n            <tr> \n              <td>Book NAME</td> \n              <td>Book AUTHOR</td> \n              <td>BOOK PRICE</td> \n            </tr> \n            <tr> \n              <td>${book.bookName}</td> \n              <td>${book.author}</td> \n              <td>${book.price}</td> \n            </tr> \n          </table> \n        </body> \n        </html>\n```"]