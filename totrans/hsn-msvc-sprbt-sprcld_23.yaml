- en: Monitoring Microservices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to use Prometheus and Grafana to collect,
    monitor, and alert about performance metrics. As we mentioned in [Chapter 1](282e7b49-42b8-4649-af81-b4b6830d391d.xhtml),
    *Introduction to Microservices*, in the *Centralized monitoring and alarms* section,
    in a production environment, it is crucial to be able to collect metrics for application
    performance and hardware resource usage. Monitoring these metrics is required
    in order to avoid long response times or outages for API requests and other processes.
  prefs: []
  type: TYPE_NORMAL
- en: To be able to monitor a system landscape of microservices in a cost-efficient
    and proactive way, we need to define alarms that are triggered automatically if
    the metrics exceed the configured limits.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to performance monitoring using Prometheus and Grafana
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes in source code for collecting application metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and deploying microservices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring microservices using Grafana dashboards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up alarms in Grafana
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All of the commands that are described in this book have been run on a MacBook
    Pro using macOS Mojave but should be straightforward to modify so that they can
    be run on another platform, such as Linux or Windows.
  prefs: []
  type: TYPE_NORMAL
- en: The source code for this chapter can be found in this book's GitHub repository: [https://github.com/PacktPublishing/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud/tree/master/Chapter20](https://github.com/PacktPublishing/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud/tree/master/Chapter20).
  prefs: []
  type: TYPE_NORMAL
- en: 'To be able to run the commands as described in this book, you need to download
    the source code to a folder and set up an environment variable, `$BOOK_HOME`,
    that points to that folder. Some sample commands are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: All of the source code examples in this chapter come from the source code in `$BOOK_HOME/Chapter20` and have
    been tested using Kubernetes 1.15.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to see the changes that we applied to the source code for this chapter so
    that you can use Prometheus and Grafana to monitor an alert on performance metrics,
    you can compare it with the source code for [Chapter 19](7a733f89-e54e-48d2-9a03-d7d2f72157ac.xhtml),
    *Centralized Logging with the EFK Stack*. You can use your favorite differentiating tool
    and compare the two folders `$BOOK_HOME/Chapter19` and `$BOOK_HOME/Chapter20`.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to performance monitoring using Prometheus and Grafana
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will reuse the deployment of Prometheus and Grafana that
    we created in [Chapter 18](422649a4-94bc-48ae-b92b-e3894c014962.xhtml), *Using
    a Service Mesh to Improve Observability and Management*, in the *Deploying Istio
    in the Kubernetes cluster* section. Also in that chapter, in the *Introducing
    the runtime components in Istio* section, we were briefly introduced to Prometheus,
    a popular open source database for time series such as performance metrics. We
    were also introduced to Grafana as an open source tool for visualizing performance
    metrics. Istio's console for observability, Kiali, is integrated with Grafana.
    A user can navigate from a service of interest in Kiali to its corresponding performance
    metrics in Grafana. Kiali can also render some performance-related graphs without
    the use of Grafana. In this chapter, we will get some hands-on experience with
    this integration by using these tools together.
  prefs: []
  type: TYPE_NORMAL
- en: The Istio configuration we deployed in [Chapter 18](422649a4-94bc-48ae-b92b-e3894c014962.xhtml), *Using
    a Service Mesh to Improve Observability and Management*, includes a configuration
    of Prometheus, where it automatically collects metrics from pods in Kubernetes.
    All we need to do is set up an endpoint in our microservice that produces metrics
    in a format Prometheus can consume. We also need to add annotations to the Kubernetes
    pods so that Prometheus can find the address of the endpoints. See the *Changes
    in source code for collecting application metrics* section of this chapter for
    details on how to set this up.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram illustrates the relationship between the runtime components
    we just discussed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/53cbe67e-e1ec-419c-8113-92bb9bd15231.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we can see how Prometheus uses the annotations in the definitions of the
    Kubernetes pods to be able to collect metrics from our microservices. It then
    stores these metrics in its database. A user can access the web UIs of Kiali and
    Grafana to monitor these metrics in a **web browser**. The **web browser** uses
    the **minikube tunnel** that was introduced in [Chapter 18](422649a4-94bc-48ae-b92b-e3894c014962.xhtml),
    *Using a Service Mesh to Improve Observability and Management*, in the *Setting
    up access to Istio services* section, to access Kiali and Grafana.
  prefs: []
  type: TYPE_NORMAL
- en: Please remember that the configuration that was used for deploying Istio from
    [Chapter 18](422649a4-94bc-48ae-b92b-e3894c014962.xhtml), *Using a Service Mesh
    to Improve Observability and Management*, is only intended for development and
    test, not production. For example, performance metrics stored in the Prometheus
    database will not survive the Prometheus pod being restarted!
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at what changes have been applied to the source
    code to make the microservices produce performance metrics that Prometheus can
    collect.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in source code for collecting application metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Spring Boot 2 supports producing performance metrics in a Prometheus format
    using the Micrometer library ([https://micrometer.io](https://micrometer.io)).
    There''s only one change we need to make to the source code: we need to add a
    dependency to the Micrometer library, `micrometer-registry-prometheus`, in the
    Gradle build files, `build.gradle`, for each microservice. Here, the following
    dependency has been added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This will make the microservices produce Prometheus metrics on port `4004`
    using the `"/actuator/prometheus"` URI. To let Prometheus know about these endpoints,
    each microservice''s pod is annotated with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: View the deployment definitions in the `kubernetes/services/base/deployments`
    folder for more details.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make it easier to identify the source of the metrics once they have been
    collected by Prometheus, they are tagged with the name of the microservice that
    produced the metric. This is achieved by adding the following configuration to
    the common configuration file, `config-repo/application.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This will result in each metric that's produced having an extra label named
    `application`. It will contain the value of the standard Spring property for the
    name of a microservice, `spring.application.name`.
  prefs: []
  type: TYPE_NORMAL
- en: These are all the changes that are required to prepare the microservices to
    produce performance metrics and to make Prometheus aware of what endpoints to
    use to start collecting these metrics. In the next section, we will build and
    deploy the microservices.
  prefs: []
  type: TYPE_NORMAL
- en: Building and deploying the microservices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Building, deploying, and verifying the deployment using the `test-em-all.bash` test
    script is done in the same way it was done in [Chapter 19](7a733f89-e54e-48d2-9a03-d7d2f72157ac.xhtml),
    *Centralized Logging with the EFK Stack*, in the *Building and deploying the microservices*
    section. Run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build the Docker images from the source with the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Recreate the namespace, `hands-on`, and set it as the default namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the deployment by running the `deploy-dev-env.bash` script with the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the Minikube tunnel, if it''s not already running, as follows (see [Chapter
    18](422649a4-94bc-48ae-b92b-e3894c014962.xhtml), *Using a Service Mesh to Improve
    Observability and Management*, the *Setting up access to Istio services* section,
    for a recap if you need one):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the normal tests to verify the deployment with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Expect the output to be similar to what we''ve seen in the previous chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c0e56736-a6d9-4bad-9624-d1daf3195629.png)'
  prefs: []
  type: TYPE_IMG
- en: With the microservices deployed, we can move on and start monitoring our microservices
    using Grafana!
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring microservices using Grafana dashboards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we already mentioned in the introduction, Kiali is integrated with Grafana
    and provides some very useful dashboards out of the box. In general, they are
    focused on application-level performance metrics such as requests per second,
    response times, and fault percentages for processing requests. They are, as we
    will see shortly, very useful on an application level. But if we want to understand
    the usage of the underlying hardware resources, we need more detailed metrics,
    for example, Java VM-related metrics.
  prefs: []
  type: TYPE_NORMAL
- en: Grafana has an active community that, among other things, shares reusable dashboards.
    We will try out a dashboard from the community that's tailored for getting a lot
    of valuable Java VM-related metrics from a Spring Boot 2 application such as our
    microservices. Finally, we will see how we can build our own dashboards in Grafana.
    But let's start by exploring the integration between Kiali and Grafana.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we do that, we need to make two preparations:'
  prefs: []
  type: TYPE_NORMAL
- en: Install a local mail - server for tests and configure Grafana to be able to
    send emails to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will use the mail server in the section "Setting up alarms in Grafana".
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To be able to monitor some metrics, we will start the load test tool we used
    in previous chapters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing a local mail server for tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will set up a local test mail server and configure Grafana
    to send alert emails to the mail server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Grafana can send emails to any SMPT mail server, but to keep the tests local,
    we will deploy a test mail server named `maildev`. Consider the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the test mail server with the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the test mail server is up and running by visiting its web page
    at [http://mail-server.hands-on.svc.cluster.local](http://mail-server.hands-on.svc.cluster.local).
    Expect a web page such as the following to be rendered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c3dc6129-9eed-4130-af97-33e94b21a429.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Configure Grafana to send emails to the test mail server by setting up a number
    of environment variables. Run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: For more details, see [https://hub.docker.com/r/djfarrelly/maildev](https://hub.docker.com/r/djfarrelly/maildev).
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have a test mail server up and running and Grafana has been configured
    to send emails to it. In the next section we will start the load test tool.
  prefs: []
  type: TYPE_NORMAL
- en: Starting up the load test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To have something to monitor, let''s start up the load test using Siege, which
    we used in previous chapters. Run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now, we are ready to learn about the integration between Kiali and Grafana and
    explore the Grafana dashboards that come with Istio.
  prefs: []
  type: TYPE_NORMAL
- en: Using Kiali's built-in Grafana dashboards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 18](422649a4-94bc-48ae-b92b-e3894c014962.xhtml), *Using a Service
    Mesh to Improve Observability and Management*, in the *Observing the service mesh*
    section, we learned about Kiali, but we skipped the part where Kiali shows performance
    metrics. Now, it's time to get back to that subject!
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following steps to learn about Kiali''s integration with Grafana:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Kiali web UI in a web browser using the `http://kiali.istio-system.svc.cluster.local:20001`
    URL. Log in with `admin`/`admin` if required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the service page by clicking on the Services tab from the menu on the
    left-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Product service page by clicking on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the Service:product page, select the Inbound Metrics tab. You will see the
    following page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/457f3485-6af5-4f6f-a6ef-c7b0adf28a24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Kiali will visualize some overall performance graphs. However, far more detailed
    performance metrics are available in Grafana. Click on the View in Grafana link
    and Grafana will open up in a new tab. Expect a web page like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e4795b3f-5a78-41f3-8401-5f3de515cd62.png)'
  prefs: []
  type: TYPE_IMG
- en: There are a lot of performance metrics at an application-level being presented
    here, such as HTTP request rates, response times, and error rates. The metrics
    are presented for the Product service, that is, the service that was selected
    in Kiali. Click on the Service drop-down menu in the top left corner of the page
    to select another service. Feel free to look around!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Istio comes with a set of pre-installed Grafana dashboards; click on Istio/Istio
    Service Dashboard to view a list of available dashboards. Now, select the Istio
    Mesh Dashboard. You will see a web page that looks similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8d9b08eb-3211-45ee-a1b1-04e82a48aeaa.png)'
  prefs: []
  type: TYPE_IMG
- en: This dashboard gives a very good overview of the microservices that are parts
    of the service mesh, as well as their current status in terms of requests per
    second, response times, and success rate.
  prefs: []
  type: TYPE_NORMAL
- en: As we've already mentioned, the Istio dashboards give a very good overview at
    an application level. But there is also a need for monitoring the metrics of hardware
    usage per microservice. In the next section, we will learn about how existing
    dashboards can be imported—specifically, a dashboard showing Java VM metrics for
    a Spring Boot 2-based application.
  prefs: []
  type: TYPE_NORMAL
- en: Importing existing Grafana dashboards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we''ve already mentioned, Grafana has an active community that shares reusable
    dashboards. They can be explored at [https://grafana.com/grafana/dashboards](https://grafana.com/grafana/dashboards).
    We will try out a dashboard, called **JVM** (**Micrometer**), that''s tailored
    for getting a lot of valuable JVM-related metrics from Spring Boot 2 applications.
    The URL to the dashboard is [https://grafana.com/grafana/dashboards/4701](https://grafana.com/grafana/dashboards/4701).
    It is very easy to import a dashboard in Grafana. Perform the following steps
    to import this dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the dashboard named JVM (Micrometer) by following these steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the Grafana web page, click on the + sign in the left-hand side menu and
    then select Import.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: On the Import page, paste the dashboard ID `4701` into the Grafana.com Dashboard field
    and press the Tab key to leave the field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: On the Import page that will be displayed, click on the Prometheus drop-down
    menu and select Prometheus.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, by clicking on the Import button, the JVM (Micrometer) dashboard will be
    imported and rendered.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inspect the JVM (Micrometer) dashboard by following these steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To get a good view of the metrics, click on the time picker on the top-right.
    This will allow you to select a proper time interval:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Last 5 minutes as the range. Click on the time picker again and set the
    refresh rate to 5 seconds.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Apply button after specifying the refresh rate.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Application drop-down menu, which can be found on the top-left of the
    page, select the product-composite microservice.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since we are running a load test using Siege in the background, we will see
    a lot of metrics. The following is a sample screenshot:'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/21a2ab89-07a0-4a0a-9836-4ddb9fbac91a.png)'
  prefs: []
  type: TYPE_IMG
- en: In this dashboard, we can find all types of Java VM relevant metrics for, among
    others, CPU, memory, and I/O usage, as well as HTTP-related metrics such as requests/second,
    average duration, and error rates. Feel free to explore these metrics on your
    own!
  prefs: []
  type: TYPE_NORMAL
- en: Being able to import existing dashboards is of great value when we want to get
    started quickly. However, what's even more important is to know how to create
    our own dashboard. We will learn about this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Developing your own Grafana dashboards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting started with developing Grafana dashboards is straightforward. The important
    thing for us to understand is what metrics Prometheus makes available for us.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will learn how to examine the available metrics. Based on
    these, we will create a dashboard that can be used to monitor some of the more
    interesting metrics.
  prefs: []
  type: TYPE_NORMAL
- en: Examining Prometheus metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the *Changes in source code for collecting application metrics* section,
    we configured Prometheus to collect metrics from our microservices. We can actually
    make a call to the same endpoint and see what metrics Prometheus collects. Run
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Expect a lot of output from the command, as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6ca8a2ed-3cb0-4233-84eb-18c1ba2f8f0b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Among all of the metrics that are reported, there are two very interesting
    ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '`resilience4j_retry_calls`: Resilience4j reports on how its retry mechanism
    operates. It reports four different values for successful and failed requests,
    with and without retries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resilience4j_circuitbreaker_state`: Resilience4j reports on the state of the
    circuit breaker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that the metrics have a label named `application`, which contains the name
    of the microservice. This field comes from the configuration of the `management.metrics.tags.application`
    property, which we did in the *Changes in source code for collecting application
    metrics* section.
  prefs: []
  type: TYPE_NORMAL
- en: These metrics seem interesting to monitor. None of the dashboards we have used
    so far use metrics from Resilience4j. In the next section, we will create a dashboard
    for these metrics.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn how to create a dashboard that visualizes the
    Resilience4j metrics we described in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will set up the dashboard in the following subsections:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an empty dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new panel for the circuit breaker metric
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new panel for the retry metric
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arranging the panels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an empty dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps to create an empty dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Grafana web page, click on the + sign in the left-hand menu and then
    select dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A web page named New dashboard will be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/177f95ee-296f-4b8e-9877-a27a1d127388.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the dashboard settings button (it has a gear as its icon), as shown
    in the preceding screenshot. Then, follow these steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the name of the dashboard in the Name field and set the value to Hands-on
    Dashboard.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Save button.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the time picker to select the default values for the dashboard, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Last 5 minutes as the range.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the time picker again and specify 5 seconds as the refresh rate in
    the Refreshing every field at the bottom of the panel.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Apply button after specifying a refresh rate.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Save button from the menu at the top of the page.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable Save current time range and click on the Save button in the Save Changes dialog
    window.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a new panel for the circuit breaker metric
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a new panel for the circuit breaker metric:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Add panel button at the top-left of the page (it has an icon of
    a graph with a + sign next to it).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add Query button. A page will be displayed where the new panel
    can be configured.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the query field, under the A letter, specify the name of the circuit breaker
    metric, that is, resilience4j_circuitbreaker_state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Legend field, specify the format, that is, {{application}}.{{namespace}}.
    This will create a legend in the panel where the involved microservices will be
    labeled with its name and namespace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The filled in values should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e086766e-4246-4776-a512-e23c79ef4d16.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the third tab, named General, from the left-hand side menu and set
    the Title field to Circuit Breaker.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the back button on the top-left of the page to get back to the dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a new panel for the retry metric
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, we will repeat the same procedure that we went through for adding a panel
    for the preceding circuit breaker metric, but instead, we will specify the values
    for the retry metrics:'
  prefs: []
  type: TYPE_NORMAL
- en: In the query field, specify `rate(resilience4j_retry_calls[30s])`. Since the
    retry metric is a counter, its value will only go up. An ever-increasing metric
    is rather uninteresting to monitor. The **rate** function is used to convert the
    retry metric into a rate per second metric. The time window specified, that is,
    30 s, is used by the rate function to calculate the average values of the rate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the legend, specify `{{application}}.{{namespace}} ({{kind}})`. Just like
    the output for the preceding Prometheus endpoint, we will get four metrics for
    the retry mechanism. To separate them in the legend, the `kind` attribute needs
    to be added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that Grafana immediately starts to render a graph in the panel editor based
    on the specified values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify `Retry` as the title.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the back button to get back to the dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Arranging the panels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps to arrange the panels on the dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: You can resize a panel by dragging its lower right-hand corner to the preferred
    size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also move a panel by dragging its header to the desired position.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is an example layout of the two panels:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b77f5f50-990c-482e-afcc-126be94bac9b.png)'
  prefs: []
  type: TYPE_IMG
- en: Finally, click on the Save button at the top of the page. A Save Changes dialog
    will show up; enter an optional description and hit the Save button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the dashboard created we are ready to try it out: in the next section,
    we will try out both metrics.'
  prefs: []
  type: TYPE_NORMAL
- en: Trying out the new dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start testing the new dashboard, we must stop the load test tool,
    Siege. For this, go to the command window where Siege is running and press *Ctrl
    + C* to stop it.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by testing how to monitor the circuit breaker. Afterward, we will
    try out the retry metrics.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the circuit breaker metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we force the circuit breaker to open up, its state will change from **closed** to
    **open**, and then eventually to the **half-open** state. This should be reported
    in the circuit breaker panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the circuit, just like we did in [Chapter 13](23795d34-4068-4961-842d-989cde26b642.xhtml),
    *Improving Resilience Using Resilience4j*, in the *Trying out the circuit breaker
    and retry mechanism* section; that is, make three requests to the API in a row,
    all of which will fail. Run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We can expect three 500 as a response, indicating three errors in a row, that
    is, what it takes to open the circuit breaker!
  prefs: []
  type: TYPE_NORMAL
- en: At some rare occasions, I have noticed that the circuit breaker metrics are
    not reported in Grafana. If they don't show up after a minute, simply rerun the
    preceding command to reopen the circuit breaker again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Expect the value for the circuit breaker metric to rise to `1`, indicating
    that the circuit is open. After a while, it should rise to `2`, indicating that
    the circuit is now half-open. This demonstrates that we can monitor that the circuit
    breaker opens up if there are problems. Close the circuit breaker again by issuing
    three successful requests to the API with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We will get three `200` as responses. Note that the circuit breaker metric goes
    back to 0 again in the dashboard; that is, it's closed.
  prefs: []
  type: TYPE_NORMAL
- en: 'After this test, the Grafana dashboard should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1050575f-3831-4835-a706-bf25efa841f4.png)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshot, we can see that the retry mechanism also reports
    metrics that succeeded and failed.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have seen the circuit breaker metrics in action, let's see the retry
    metrics in action!
  prefs: []
  type: TYPE_NORMAL
- en: Testing the retry metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To trigger the retry mechanism, we will use the `faultPercentage` parameter
    we used in previous chapters. To avoid triggering the circuit breaker, we need
    to use relatively low values for the parameter. Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will call the API once every third second. It specifies
    that 10% of the requests shall fail so that the retry mechanism kicks in and retries
    the failed request. After a few minutes, the dashboard should report metrics such
    as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/21697539-9aba-49a7-9102-1efeca3cd906.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we can see that the majority of the requests have
    been executed successfully, without any retries. Approximately 10% of the requests
    have been retried by the retry mechanism and successfully executed after the retry. Before
    proceeding to the next section, remember to stop the request loop that we started
    for the preceding retry test!
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how to set up alarms in Grafana, based on
    these metrics.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up alarms in Grafana
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Being able to monitor the circuit breaker and retry metrics is of great value,
    but even more important is the capability to define automated alarms on these
    metrics. Automated alarms relieve us from monitoring the metrics manually.
  prefs: []
  type: TYPE_NORMAL
- en: Grafana comes with built-in support for defining alarms and sending notifications
    to a number of destinations. In this section we will define alerts on the circuit
    breaker and configure Grafana to send emails to the test mail server when alerts
    are raised. The local test mail server was installed in section *Installing a
    local mail server for tests*.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will define a mail-based notification channel that will
    be used by the alert in the section after this.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a mail-based notification channel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To configure a mail-based notification channel in Grafana, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: On the Grafana web page, on the menu to the left, click on the Alerting menu
    choice (with an alarm bell as its icon) and select Notification channels.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add channel button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the name to `mail`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the type to `Email`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable Send on all alerts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable Include image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter an email address of your choice. Emails will only be sent to the local
    test mail server, independent of what email address that''s specified. The configuration
    of the notification channel should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/868fa4cb-c3fb-4419-8640-e3e10655d322.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Send Test button to send a test mail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Save button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Dashboard button in the left-hand side menu and then on the home
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Hands-on Dashboard from the list to get back to the dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the test mail server''s web page to ensure that we have received a test
    email. You should receive the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/81a70ae5-3443-432f-935e-0987ae320c54.png)'
  prefs: []
  type: TYPE_IMG
- en: With a notification channel in place, we are ready to define an alert on the
    circuit breaker.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an alarm on the circuit breaker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create an alarm on the circuit breaker, we need to create the alert and then
    add an alert list to the dashboard, where we can see what alert events have occurred
    over time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to create an alert for the circuit breaker:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Hands-on Dashboard, click on the header of the circuit breaker panel.
    A drop-down menu will appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Edit menu option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Alert tab in the tab list to the left (shown as an alarm bell icon).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Create Alert button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Evaluate every field, set the value to `10s`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the For field, set the value to `0m`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Conditions section, specify the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the WHEN field to `max()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the OF field to `query(A, 1m, now)`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the IS ABOVE field to `0.5`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Scroll down to confirm that the notification has been sent to the default notification
    channel, that is, the mail channel we defined previously. The alarm definition
    should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/42d25ca0-c993-40b4-8b9c-85487788edda.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the back button (left arrow) to get back to the dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we need to perform the following steps to create an alarm list:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Add panel button at the top of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Choose Visualization in the New Panel page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Among the presented visualizations, select Alert List. Click on it twice to
    display an Options list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Show option called Recent state changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enable Alerts from this dashboard. The settings should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/104910bd-eef6-4656-be83-50c72c884211.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the back button to get back to the dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rearrange the panel to suit your needs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the changes to the dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is a sample layout with the alarm list added:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/901da6a7-bf7d-40d5-8ef3-ab3a19a31e89.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the circuit breaker reports the metrics as healthy (with a green
    heart) and that the alert list contains an OK event for the circuit breaker.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it's time to try out the alarm!
  prefs: []
  type: TYPE_NORMAL
- en: Trying out the circuit breaker alarm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, we will repeat the tests from the *Testing the circuit breaker metrics* section,
    but this time, we expect alarms to be raised and emails to be sent as well! Let''s
    get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by opening the circuit breaker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The dashboard should report the circuit as open as it did previously. After
    a minute, an alarm should be raised and an email should also be sent. Expect the
    dashboard to look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c59df830-87fe-4b2c-986a-42f792e063d6.png)'
  prefs: []
  type: TYPE_IMG
- en: Take note of the alarm icon in the header of the circuit breaker panel (a red
    broken heart). The red line marks the time of the alert event and that an alert
    has been added to the alert list.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the test mail server, you should see an email, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/80de707b-9f84-480d-8419-01872070ef0b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Great; we got alarms, just like we expected! Now, close the circuit, making
    the problem go away with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The metric should go back to normal, that is `0`, and after a minute, the alert
    should go green again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Expect the dashboard to look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5c851716-2af5-4b61-a141-a7aa0c6f25ba.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that the alarm icon in the header of the circuit breaker panel is green
    again; the green line marks the time for the OK event and that an OK event has
    been added in the alert list.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the test mail server, you should see an email, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9adcc46b-e266-4566-8fe9-4c45566b7133.png)'
  prefs: []
  type: TYPE_IMG
- en: That completes how to monitor microservices using Prometheus and Grafana.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to use Prometheus and Grafana to collect
    and monitor alerts on performance metrics.
  prefs: []
  type: TYPE_NORMAL
- en: We saw that, for collecting performance metrics, we can use Prometheus in a
    Kubernetes environment. We then learned how Prometheus can automatically collect
    metrics from a pod when a few Prometheus annotations are added to the pod's definition.
    In order to produce metrics in our microservices, we used Micrometer.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we saw how we can monitor the collected metrics using Grafana dashboards.
    Both of the dashboards that come with Kiali, as well as the dashboards that were
    shared by the Grafana community. We also learned how to develop our own dashboards
    where we used metrics from Resilience4j to monitor the usage of its circuit breaker
    and retry mechanisms.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned how to define alerts on metrics in Grafana and how to use
    Grafana to send out alert notifications. We used a local test mail server to receive alert
    notifications from Grafana as emails.
  prefs: []
  type: TYPE_NORMAL
- en: I hope this book has helped you learn how to develop microservices using all
    the amazing features of Spring Boot, Spring Cloud, Kubernetes, and Istio and that
    you feel encouraged to try them out!
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What changes did we need to make to the source code in the microservices to
    make them produce metrics that are consumed by Prometheus?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the `management.metrics.tags.application` config parameter used for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want to analyze a support case regarding high CPU consumption, which
    of the dashboards in this chapter would you start with?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want to analyze a support case regarding slow API responses, which of
    the dashboards in this chapter would you start with?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the problem with counter-based metrics such as Resilience4J's retry
    metrics and what can be done so that we can monitor them in a useful way?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Why does the metric for the circuit breaker report 1 for a short while before
    it reports 2? See the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4ea782fb-939e-4629-8a5d-b0d2f181f8d1.png)'
  prefs: []
  type: TYPE_IMG
- en: .
  prefs: []
  type: TYPE_NORMAL
