["```java\ndocker run -d --name keycloak -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin -p 8180:8180 -v `pwd`/packt-mp-realm.json:/config/quarkus-packt.json -it jboss/keycloak:6.0.1 -b 0.0.0.0 ...\n```", "```java\nmvn compile quarkus:dev\n```", "```java\nScotts-iMacPro:svcs1 starksm$ mvn compile quarkus:dev\n[INFO] Scanning for projects...\n...\n20:56:27 INFO [io.quarkus]] (main) Quarkus 0.15.0 started in 2.492s. Listening on: http://[::]:8081\n20:56:27 INFO [io.quarkus]] (main) Installed features: [cdi, jaeger, resteasy, resteasy-jsonb, security, smallrye-fault-tolerance, smallrye-health, smallrye-jwt, smallrye-metrics, smallrye-openapi, smallrye-opentracing, smallrye-rest-client, swagger-ui]\n```", "```java\nmvn clean package\n```", "```java\n java -jar target/sample-svcs2-runner.jar\n```", "```java\nScotts-iMacPro:svcs2 starksm$ java -jar target/sample-svcs2-runner.jar...20:58:55 INFO [io.quarkus]] (main) Quarkus 0.15.0 started in 0.936s. Listening on: http://[::]:808220:58:55 INFO [io.quarkus]] (main) Installed features: [cdi, jaeger, resteasy, resteasy-jsonb, security, smallrye-health, smallrye-jwt, smallrye-metrics, smallrye-opentracing, smallrye-rest-client]\n```", "```java\nmvn clean package\n\n```", "```java\njava -jar target/sample-web-runner.jar\n\n```", "```java\n# MP Config values for ConfigTestController\ninjected.value=Injected value\ninjected.piValue=3.1415926532\nlookup.value=A Lookup value\n```", "```java\n@Path(\"timed\")\n@Timed(name = \"timed-request\")\n@GET\n@Produces(MediaType.TEXT_PLAIN)\npublic String timedRequest() {\n    long start = System.currentTimeMillis();\n    // Demo, not production style\n    int wait = new Random().nextInt(1000);\n    try {\n        Thread.sleep(wait);\n    } catch (InterruptedException e) {\n        // Demo\n        e.printStackTrace();\n    }\n    long end = System.currentTimeMillis();\n    long delay = end - start;\n\n    doIncrement();\n    long count = getCustomerCount();\n    return String.format(\"MetricController#timedRequest, delay[0-1000]=%d, \n    count=%d\", delay, count);\n}\n```", "```java\n# TYPE application:io_packt_sample_metric_metric_controller_timed_request_rate_per_second gauge\napplication:io_packt_sample_metric_metric_controller_timed_request_rate_per_second 0.4434851530761856\n# TYPE application:io_packt_sample_metric_metric_controller_timed_request_one_min_rate_per_second gauge\napplication:io_packt_sample_metric_metric_controller_timed_request_one_min_rate_per_second 0.552026648777594\n...\n# TYPE application:io_packt_sample_metric_metric_controller_timed_request_seconds summary\napplication:io_packt_sample_metric_metric_controller_timed_request_seconds_count 6.0\napplication:io_packt_sample_metric_metric_controller_timed_request_seconds{quantile=\"0.5\"} 0.923901552\n...\napplication:io_packt_sample_metric_metric_controller_timed_request_seconds{quantile=\"0.999\"} 0.970502841\n```", "```java\n@GET@Path(\"/randomDelay\")@Produces(MediaType.TEXT_PLAIN)@Traced(operationName = \"TracedEndpoint#demoRandomDelay\")public String randomDelay() {    long start = System.currentTimeMillis();    // 0-5 seconds random sleep    long sleep = Math.round(Math.random() * 5000);    try {        Thread.sleep(sleep);    } catch (InterruptedException e) {        e.printStackTrace();    }    long end = System.currentTimeMillis();    return String.format(\"TracedEndpoint.randomDelay[0-5000], elapsed=%d\",     (end - start));}\n```", "```java\n@ApplicationPath(\"/demo1\")\n@LoginConfig(authMethod = \"MP-JWT\", realmName = \"quarkus-quickstart\")\n@OpenAPIDefinition(\n    info = @Info(\n        title = \"Quarkus MicroProfile 2.2 Extensions Demo\",\n        version = \"1.0\",\n        contact = @Contact(\n            name = \"QUARKUS - COMMUNITY\",\n            url = \"https://quarkus.io/community/\",\n            email = \"quarkus-dev+subscribe@googlegroups.com\"),\n        license = @License(\n            name = \"Apache 2.0\",\n            url = \"http://www.apache.org/licenses/LICENSE-2.0.html\")\n    ),\n    servers = {\n        @Server(url = \"http://localhost:8080/\", description = \"demo1 host\"),\n        @Server(url = \"http://localhost:8081/\", description = \"demo2 host\")\n    },\n    externalDocs = @ExternalDocumentation(url=\"http://microprofile.io\", description = \n    \"Eclipse MicroProfile Homepage\")\n)\npublic class DemoRestApplication extends Application {\n...\n```", "```java\n@GET\n@Path(\"/now\")\n@Produces(MediaType.APPLICATION_JSON)\n@Tag(name = \"time\", description = \"time service methods\")\n@ExternalDocumentation(description = \"Basic World Clock API Home.\",\n    url = \"http://worldclockapi.com/\")\n@Operation(summary = \"Queries the WorldClockApi using the MP-RestClient\",\n    description = \"Uses the WorldClockApi type proxy injected by the \n    MP-RestClient to access the worldclockapi.com service\")\npublic Now utc() {\n    return clockApi.utc();\n}\n```", "```java\nHello[open] user=anonymous, upn=no-upn\n```", "```java\npublic class JwtEndpoint {\n    @Inject\n    private JsonWebToken jwt;\n    @Inject\n    @Claim(standard = Claims.raw_token)\n    private ClaimValue<String> jwtString;\n    @Inject\n    @Claim(standard = Claims.upn)\n    private ClaimValue<String> upn;\n    @Context\n    private SecurityContext context;\n...\n    @GET\n    @Path(\"/secureHello\")\n    @Produces(MediaType.TEXT_PLAIN)\n    @RolesAllowed(\"user\") // 1\n    public String secureHello() {\n        String user = jwt == null ? \"anonymous\" : jwt.getName(); // 2\n        String scheme = context.getAuthenticationScheme(); // 3\n        boolean isUserInRole = context.isUserInRole(\"PacktMPUser\"); // 4\n        return String.format(\"Hello[secure] user=%s, upn=%s, scheme=%s, \n        isUserInRole(PacktMPUser)=%s\", user, upn.getValue(), \n        scheme, isUserInRole);\n    }\n```", "```java\nHello[secure] user=packt-mp-book, upn=packt-mp-book, scheme=MP-JWT, isUserInRole(PacktMPUser)=true\n```", "```java\n@RegisterRestClient(baseUri = WorldClockApi.BASE_URL)public interface WorldClockApi {    static final String BASE_URL = \"http://worldclockapi.com/api/json\";    @GET    @Path(\"/utc/now\")    @Produces(MediaType.APPLICATION_JSON)    Now utc();    @GET    @Path(\"{tz}/now\")    @Produces(MediaType.APPLICATION_JSON)    Now tz(@PathParam(\"tz\") String tz);}\n```"]