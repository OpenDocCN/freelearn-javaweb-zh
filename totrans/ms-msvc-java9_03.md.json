["```java\npublic abstract class Entity<T> { \n\n    T id; \n    String name; \n    ... (getter/setter and other relevant code)} \n```", "```java\npublic abstract class BaseEntity<T> extends Entity<T> { \n\n    private final boolean isModified;    \n    public BaseEntity(T id, String name) { \n        super.id = id; \n        super.name = name; \n        isModified = false; \n    } \n    ... (getter/setter and other relevant code) \n} \n```", "```java\npublic class Table extends BaseEntity<BigInteger> { \n\n    private int capacity; \n\n    public Table(String name, BigInteger id, int capacity) { \n        super(id, name); \n        this.capacity = capacity; \n    } \n\n    public void setCapacity(int capacity) { \n        this.capacity = capacity; \n    } \n\n    public int getCapacity() { \n        return capacity; \n    } \n} \n```", "```java\npublic class Restaurant extends BaseEntity<String> { \n\n    private List<Table> tables = new ArrayList<>(); \n    public Restaurant(String name, String id, List<Table> tables) { \n        super(id, name); \n        this.tables = tables; \n    } \n\n    public void setTables(List<Table> tables) { \n        this.tables = tables; \n    } \n\n    public List<Table> getTables() { \n        return tables; \n    } \n\n    @Override \n    public String toString() { \n        return new StringBuilder(\"{id: \").append(id).append(\", name: \") \n                .append(name).append(\", tables: \").append(tables).append(\"}\").toString(); \n    } \n} \n```", "```java\npublic interface ReadOnlyRepository<TE, T> { \n\n    boolean contains(T id); \n\n    Entity get(T id); \n\n    Collection<TE> getAll(); \n} \n```", "```java\npublic interface Repository<TE, T> extends ReadOnlyRepository<TE, T> { \n\n    void add(TE entity); \n\n    void remove(T id); \n\n    void update(TE entity); \n} \n```", "```java\npublic interface RestaurantRepository<Restaurant, String> extends Repository<Restaurant, String> { \n\n    boolean ContainsName(String name); \n} \n\npublic class InMemRestaurantRepository implements RestaurantRepository<Restaurant, String> { \n\n    private Map<String, Restaurant> entities; \n\n    public InMemRestaurantRepository() { \n        entities = new HashMap(); \n    } \n\n    @Override \n    public boolean ContainsName(String name) { \n        return entities.containsKey(name); \n    } \n\n    @Override \n    public void add(Restaurant entity) { \n        entities.put(entity.getName(), entity); \n    } \n\n    @Override \n    public void remove(String id) { \n        if (entities.containsKey(id)) { \n            entities.remove(id); \n        } \n    } \n\n    @Override \n    public void update(Restaurant entity) { \n        if (entities.containsKey(entity.getName())) { \n            entities.put(entity.getName(), entity); \n        } \n    } \n\n    @Override \n    public boolean contains(String id) { \n        throw new UnsupportedOperationException(\"Not supported yet.\"); \n     //To change body of generated methods, choose Tools | Templates. \n    } \n\n    @Override \n    public Entity get(String id) { \n        throw new UnsupportedOperationException(\"Not supported yet.\"); \n     //To change body of generated methods, choose Tools | Templates. \n    } \n\n    @Override \n    public Collection<Restaurant> getAll() { \n        return entities.values(); \n    } \n\n} \n```", "```java\npublic abstract class ReadOnlyBaseService<TE, T> { \n\n    private final Repository<TE, T> repository; \n\n    ReadOnlyBaseService(ReadOnlyRepository<TE, T> repository) { \n        this.repository = repository; \n    } \n    ... \n} \n```", "```java\npublic abstract class BaseService<TE, T> extends ReadOnlyBaseService<TE, T> { \n    private final Repository<TE, T> _repository; \n\n    BaseService(Repository<TE, T> repository) { \n        super(repository); \n        _repository = repository; \n    } \n\n    public void add(TE entity) throws Exception { \n        _repository.add(entity); \n    } \n\n    public Collection<TE> getAll() { \n        return _repository.getAll(); \n    } \n} \n```", "```java\npublic class RestaurantService extends BaseService<Restaurant, BigInteger> { \n\n    private final RestaurantRepository<Restaurant, String> restaurantRepository; \n\n    public RestaurantService(RestaurantRepository repository) { \n        super(repository); \n        restaurantRepository = repository; \n    } \n\n    public void add(Restaurant restaurant) throws Exception { \n        if (restaurantRepository.ContainsName(restaurant.getName())) { \n            throw new Exception(String.format(\"There is already a product with the name - %s\", restaurant.getName())); \n        } \n\n        if (restaurant.getName() == null || \"\".equals(restaurant.getName())) { \n            throw new Exception(\"Restaurant name cannot be null or empty string.\"); \n        } \n        super.add(restaurant); \n    } \n    @Override \n    public Collection<Restaurant> getAll() { \n        return super.getAll(); \n    } \n} \n```", "```java\npublic class RestaurantApp { \n\n    public static void main(String[] args) { \n        try { \n            // Initialize the RestaurantService \n            RestaurantService restaurantService = new RestaurantService(new InMemRestaurantRepository()); \n\n            // Data Creation for Restaurants \n            Table table1 = new Table(\"Table 1\", BigInteger.ONE, 6); \n            Table table2 = new Table(\"Table 2\", BigInteger.valueOf(2), 4); \n            Table table3 = new Table(\"Table 3\", BigInteger.valueOf(3), 2); \n            List<Table> tableList = new ArrayList(); \n            tableList.add(table1); \n            tableList.add(table2); \n            tableList.add(table3); \n            Restaurant restaurant1 = new Restaurant(\"Big-O Restaurant\", \"1\", tableList); \n\n            // Adding the created restaurant using Service \n            restaurantService.add(restaurant1); \n\n            // Note: To raise an exception give Same restaurant name to one of the below restaurant \n            Restaurant restaurant2 = new Restaurant(\"Pizza Shops\", \"2\", null); \n            restaurantService.add(restaurant2); \n\n            Restaurant restaurant3 = new Restaurant(\"La Pasta\", \"3\", null); \n            restaurantService.add(restaurant3); \n\n            // Retrieving all restaurants using Service \n            Collection<Restaurant> restaurants = restaurantService.getAll(); \n\n            // Print the retrieved restaurants on console \n            System.out.println(\"Restaurants List:\"); \n            restaurants.stream().forEach((restaurant) -> { \n                System.out.println(String.format(\"Restaurant: %s\", restaurant)); \n            }); \n        } catch (Exception ex) { \n            System.out.println(String.format(\"Exception: %s\", ex.getMessage())); \n            // Exception Handling Code \n        } \n    } \n} \n\n```", "```java\nScanning for projects... \n\n------------------------------------------------------------------------ \nBuilding 6392_chapter3 1.0-SNAPSHOT \n------------------------------------------------------------------------ \n\n--- exec-maven-plugin:1.5.0:java (default-cli) @ 6392_chapter3 --- \nRestaurants List: \nRestaurant: {id: 3, name: La Pasta, tables: null} \nRestaurant: {id: 2, name: Pizza Shops, tables: null} \nRestaurant: {id: 1, name: Big-O Restaurant, tables: [{id: 1, name: Table 1, capacity: 6}, {id: 2, name: Table 2, capacity: 4}, {id: 3, name: Table 3, capacity: 2}]} \n------------------------------------------------------------------------ \nBUILD SUCCESS \n------------------------------------------------------------------------ \n```"]