["```java\nkeytool -genkeypair -alias account-key -keyalg RSA -keysize 2048 -storetype PKCS12 -keystore account-key.p12 -validity 3650\n\nEnter keystore password:\nRe-enter new password:\nWhat is your first and last name?\n [Unknown]: localhost\nWhat is the name of your organizational unit?\n [Unknown]: =\nWhat is the name of your organization?\n [Unknown]: piomin\nWhat is the name of your City or Locality?\n [Unknown]: Warsaw\nWhat is the name of your State or Province?\n [Unknown]: mazowieckie\nWhat is the two-letter country code for this unit?\n [Unknown]: PL\nIs CN=localhost, OU=Unknown, O=piomin, L=Warsaw, ST=mazowieckie, C=PL correct?\n [no]: yes\n```", "```java\nserver: \n port: ${PORT:8090}\n\nssl:\n key-store: classpath:account-key.p12\n key-store-password: 123456\n key-store-type: PKCS12\n key-alias: account-key\n\nsecurity:\n require-ssl: true\n```", "```java\neureka:\n instance:\n  nonSecurePortEnabled: false\n  securePortEnabled: true\n  securePort: ${PORT:8091}\n  statusPageUrl: https://localhost:${eureka.instance.securePort}/info\n  healthCheckUrl: https://localhost:${eureka.instance.securePort}/health\n  homePageUrl: https://localhost:${eureka.instance.securePort}\n```", "```java\nkeytool -genkey -alias account -store  type JKS -keyalg RSA -keysize 2048 -keystore account.jks -validity 3650\nkeytool -genkey -alias discovery -storetype JKS -keyalg RSA -keysize 2048 -keystore discovery.jks -validity 3650\n```", "```java\nkeytool -exportcert -alias account -keystore account.jks -file account.cer\nkeytool -exportcert -alias discovery -keystore discovery.jks -file discovery.cer\n```", "```java\nkeytool -importcert -alias discovery -keystore account.jks -file discovery.cer\nkeytool -importcert -alias account -keystore discovery.jks -file account.cer\n```", "```java\nkeytool -genkey -alias order -storetype JKS -keyalg RSA -keysize 2048 -keystore order.jks -validity 3650\nkeytool -exportcert -alias order -keystore order.jks -file order.cer\nkeytool -importcert -alias discovery -keystore order.jks -file discovery.cer\nkeytool -importcert -alias order -keystore discovery.jks -file order.cer\n```", "```java\nserver: \n port: ${PORT:8761}\n ssl:\n  enabled: true\n  client-auth: need\n  key-store: classpath:discovery.jks\n  key-store-password: 123456\n  trust-store: classpath:discovery.jks\n  trust-store-password: 123456\n  key-alias: discovery\n```", "```java\nkeytool -importkeystore -srckeystore account.jks -srcstoretype JKS -deststoretype PKCS12 -destkeystore account.p12\n```", "```java\n@Bean\npublic DiscoveryClient.DiscoveryClientOptionalArgs discoveryClientOptionalArgs() throws NoSuchAlgorithmException {\n DiscoveryClient.DiscoveryClientOptionalArgs args = new DiscoveryClient.DiscoveryClientOptionalArgs();\n System.setProperty(\"javax.net.ssl.keyStore\",             \n    \"src/main/resources/account.jks\");\n System.setProperty(\"javax.net.ssl.keyStorePassword\", \"123456\");\n System.setProperty(\"javax.net.ssl.trustStore\", \n    \"src/main/resources/account.jks\");\n System.setProperty(\"javax.net.ssl.trustStorePassword\", \"123456\");\n EurekaJerseyClientBuilder builder = new EurekaJerseyClientBuilder();\n builder.withClientName(\"account-client\");\n builder.withSystemSSLConfiguration();\n builder.withMaxTotalConnections(10);\n builder.withMaxConnectionsPerHost(10);\n args.setEurekaJerseyClient(builder.build());\n return args;\n}\n```", "```java\n$ curl http://localhost:8888/encrypt -d 123456\nAQAzI8jv26K3n6ff+iFzQA9DUpWmg79emWu4ndEXyvjYnKFSG7rBmJP0oFTb8RzjZbTwt4ehRiKWqu5qXkH8SAv/8mr2kdwB28kfVvPj/Lb5hdUkH1TVrylcnpZaKaQYBaxlsa0RWAKQDk8MQKRw1nJ5HM4LY9yjda0YQFNYAy0/KRnwUFihiV5xDk5lMOiG4b77AVLmz+9aSAODKLO57wOQUzM1tSA7lO9HyDQW2Hzl1q93uOCaP5VQLCJAjmHcHvhlvM442bU3B29JNjH+2nFS0RhEyUvpUqzo+PBi4RoAKJH9XZ8G7RaTOeWIcJhentKRf0U/EgWIVW21NpsE29BHwf4F2JZiWY2+WqcHuHk367X21vk11AVl9tJk9aUVNRk=\n```", "```java\nencrypt:\n keyStore:\n  location: classpath:/config.jks\n  password: 123456\n  alias: config\n  secret: 123456\n```", "```java\nserver: \n port: ${PORT:8091}\n ssl:\n enabled: true\n key-store: classpath:account.jks\n key-store-password: '{cipher}AQAzI8jv26K3n6ff+iFzQA9DUpWmg79emWu4ndEXyvjYnKFSG7rBmJP0oFTb8RzjZbTwt4ehRiKWqu5qXkH8SAv/8mr2kdwB28kfVvPj/Lb5hdUkH1TVrylcnpZaKaQYBaxlsa0RWAKQDk8MQKRw1nJ5HM4LY9yjda0YQFNYAy0/KRnwUFihiV5xDk5lMOiG4b77AVLmz+9aSAODKLO57wOQUzM1tSA7lO9HyDQW2Hzl1q93uOCaP5VQLCJAjmHcHvhlvM442bU3B29JNjH+2nFS0RhEyUvpUqzo+PBi4RoAKJH9XZ8G7RaTOeWIcJhentKRf0U/EgWIVW21NpsE29BHwf4F2JZiWY2+WqcHuHk367X21vk11AVl9tJk9aUVNRk='\n key-alias: account\n```", "```java\nsecurity:\n basic:\n  enabled: true\n user:\n  name: admin\n  password: admin123\n```", "```java\nspring:\n cloud:\n  config:\n   uri: http://admin:admin123@localhost:8888\n```", "```java\nspring:\n cloud:\n  config:\n   uri: http://localhost:8888\n   username: admin\n   password: admin123\n```", "```java\n@Configuration\npublic class SSLConfigServiceBootstrapConfiguration {\n\n    @Autowired\n    ConfigClientProperties properties;\n\n    @Bean\n    public ConfigServicePropertySourceLocator configServicePropertySourceLocator() throws Exception {\n        final char[] password = \"123456\".toCharArray();\n        final File keyStoreFile = new File(\"src/main/resources/discovery.jks\");\n        SSLContext sslContext = SSLContexts.custom()\n                .loadKeyMaterial(keyStoreFile, password, password)\n                .loadTrustMaterial(keyStoreFile).build();\n        CloseableHttpClient httpClient = HttpClients.custom().setSSLContext(sslContext).build();\n        HttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpClient);\n        ConfigServicePropertySourceLocator configServicePropertySourceLocator = new ConfigServicePropertySourceLocator(properties);\n        configServicePropertySourceLocator.setRestTemplate(new RestTemplate(requestFactory));\n        return configServicePropertySourceLocator;\n    }\n\n}\n```", "```java\norg.springframework.cloud.bootstrap.BootstrapConfiguration = pl.piomin.services.account.SSLConfigServiceBootstrapConfiguration\n```", "```java\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-oauth2</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-security</artifactId>\n</dependency>\n```", "```java\n@SpringBootApplication\n@EnableAuthorizationServer\npublic class AuthApplication {\n\n    public static void main(String[] args) {\n        new SpringApplicationBuilder(AuthApplication.class).web(true).run(args);\n    }\n\n}\n```", "```java\nsecurity:\n  user:\n    name: root\n    password: password\n  oauth2:\n    client:\n      client-id: piotr.minkowski\n      client-secret: 123456\n      scope: read\n```", "```java\n$ curl piotr.minkowski:123456@localhost:9999/oauth/token -d grant_type=password -d username=root -d password=password\n```", "```java\nhttp://localhost:9999/oauth/authorize?response_type=token&client_id=piotr.minkowski&redirect_uri=http://example.com&scope=read\n```", "```java\nhttp://example.com/#access_token=dd736a4a-1408-4f3f-b3ca-43dcc05e6df0&token_type=bearer&expires_in=43200.\n```", "```java\n@Configuration\n@EnableAuthorizationServer\npublic class AuthServerConfig extends AuthorizationServerConfigurerAdapter {\n\n    @Override\n    public void configure(AuthorizationServerSecurityConfigurer oauthServer) throws     Exception {\n      oauthServer\n        .tokenKeyAccess(\"permitAll()\")\n        .checkTokenAccess(\"isAuthenticated()\");\n    }\n\n    @Override\n    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n        clients.inMemory()\n            .withClient(\"piotr.minkowski\").secret(\"123456\")\n                .scopes(\"read\")\n                .authorities(\"ROLE_CLIENT\")\n                .authorizedGrantTypes(\"authorization_code\", \"refresh_token\", \"implicit\")\n                .autoApprove(true)\n            .and()\n            .withClient(\"john.smith\").secret(\"123456\")\n                .scopes(\"read\", \"write\")\n                .authorities(\"ROLE_CLIENT\")\n                .authorizedGrantTypes(\"authorization_code\", \"refresh_token\", \"implicit\")\n                .autoApprove(true);\n    }\n\n}\n```", "```java\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter { \n\n    @Autowired\n    private AuthenticationManager authenticationManager; \n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.requestMatchers()\n         .antMatchers(\"/login\", \"/oauth/authorize\")\n         .and()\n         .authorizeRequests()\n         .anyRequest().authenticated()\n         .and()\n         .formLogin().permitAll();\n    }\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.parentAuthenticationManager(authenticationManager)\n            .inMemoryAuthentication()\n            .withUser(\"piotr.minkowski\").password(\"123456\").roles(\"USERS\");\n    }\n\n}\n```", "```java\n@Configuration\n@EnableOAuth2Sso\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.antMatcher(\"/**\")\n            .authorizeRequests()\n            .antMatchers(\"/login**\")\n                .permitAll()\n            .anyRequest()\n                .authenticated();\n    }\n\n}\n```", "```java\nsecurity:\n basic:\n  enabled: false\n oauth2:\n  client:\n   clientId: piotr.minkowski\n   clientSecret: 123456\n   accessTokenUri: http://localhost:9999/oauth/token\n   userAuthorizationUri: http://localhost:9999/oauth/authorize\n  resource:\n   userInfoUri: http://localhost:9999/user\n```", "```java\n@RestController\npublic class UserController {\n\n    @RequestMapping(\"/user\")\n    public Principal user(Principal user) {\n        return user;\n    }\n\n}\n```", "```java\ndocker run -d --name mysql -e MYSQL_DATABASE=oauth2 -e MYSQL_USER=oauth2 -e MYSQL_PASSWORD=oauth2 -e MYSQL_ALLOW_EMPTY_PASSWORD=yes -p 33306:3306 mysql\n```", "```java\nspring:\n application:\n  name: auth-service\n datasource:\n  url: jdbc:mysql://192.168.99.100:33306/oauth2?useSSL=false\n  username: oauth2\n  password: oauth2\n  driver-class-name: com.mysql.jdbc.Driver\n  schema: classpath:/script/schema.sql\n  data: classpath:/script/data.sql\n```", "```java\nINSERT INTO `oauth_client_details` (`client_id`, `client_secret`, `scope`, `authorized_grant_types`, `access_token_validity`, `additional_information`) VALUES ('piotr.minkowski', '123456', 'read', 'authorization_code,password,refresh_token,implicit', '900', '{}');\nINSERT INTO `oauth_client_details` (`client_id`, `client_secret`, `scope`, `authorized_grant_types`, `access_token_validity`, `additional_information`) VALUES ('john.smith', '123456', 'write', 'authorization_code,password,refresh_token,implicit', '900', '{}');\n```", "```java\n@Configuration\n@EnableAuthorizationServer\npublic class OAuth2Config extends AuthorizationServerConfigurerAdapter { \n\n    @Autowired\n    private DataSource dataSource;\n    @Autowired\n    private AuthenticationManager authenticationManager; \n\n    @Override\n    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {\n        endpoints.authenticationManager(this.authenticationManager)\n            .tokenStore(tokenStore())\n            .accessTokenConverter(accessTokenConverter());\n }\n\n    @Override\n    public void configure(AuthorizationServerSecurityConfigurer oauthServer) throws Exception {\n        oauthServer.checkTokenAccess(\"permitAll()\");\n    }\n\n    @Bean\n    public JwtAccessTokenConverter accessTokenConverter() {\n        return new JwtAccessTokenConverter();\n    }\n\n    @Override\n    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n        clients.jdbc(dataSource);\n    } \n\n    @Bean\n    public JdbcTokenStore tokenStore() {\n        return new JdbcTokenStore(dataSource);\n    }\n\n}\n```", "```java\n@Component(\"userDetailsService\")\npublic class UserDetailsServiceImpl implements UserDetailsService { \n\n    private final Logger log = LoggerFactory.getLogger(UserDetailsServiceImpl.class); \n\n    @Autowired\n    private UserRepository userRepository; \n\n    @Override\n    @Transactional\n    public UserDetails loadUserByUsername(final String login) { \n        log.debug(\"Authenticating {}\", login);\n        String lowercaseLogin = login.toLowerCase(); \n        User userFromDatabase;\n        if(lowercaseLogin.contains(\"@\")) {\n            userFromDatabase = userRepository.findByEmail(lowercaseLogin);\n        } else {\n            userFromDatabase = userRepository.findByUsernameCaseInsensitive(lowercaseLogin);\n        } \n        if (userFromDatabase == null) {\n            throw new UsernameNotFoundException(\"User \" + lowercaseLogin + \" was not found in the database\");\n        } else if (!userFromDatabase.isActivated()) {\n            throw new UserNotActivatedException(\"User \" + lowercaseLogin + \" is not activated\");\n        } \n        Collection<GrantedAuthority> grantedAuthorities = new ArrayList<>();\n        for (Authority authority : userFromDatabase.getAuthorities()) {\n            GrantedAuthority grantedAuthority = new SimpleGrantedAuthority(authority.getName());\n            grantedAuthorities.add(grantedAuthority);\n        } \n        return new org.springframework.security.core.userdetails.User(userFromDatabase.getUsername(), userFromDatabase.getPassword(), grantedAuthorities);\n }\n\n}\n```", "```java\n@FeignClient(name = \"customer-service\")\npublic interface CustomerClient {\n\n    @GetMapping(\"/withAccounts/{customerId}\")\n    Customer findByIdWithAccounts(@PathVariable(\"customerId\") Long customerId);\n\n}\n```", "```java\n@PreAuthorize(\"#oauth2.hasScope('write')\")\n@PutMapping\npublic Customer update(@RequestBody Customer customer) {\n    return repository.update(customer);\n}\n\n@PreAuthorize(\"#oauth2.hasScope('read')\")\n@GetMapping(\"/withAccounts/{id}\")\npublic Customer findByIdWithAccounts(@PathVariable(\"id\") Long id) throws JsonProcessingException {\n    List<Account> accounts = accountClient.findByCustomer(id);\n    LOGGER.info(\"Accounts found: {}\", mapper.writeValueAsString(accounts));\n    Customer c = repository.findById(id);\n    c.setAccounts(accounts);\n    return c;\n}\n```", "```java\n@Configuration\n@EnableResourceServer\n@EnableGlobalMethodSecurity(prePostEnabled = true)\npublic class OAuth2ResourceServerConfig extends GlobalMethodSecurityConfiguration {\n\n    @Override\n    protected MethodSecurityExpressionHandler createExpressionHandler() {\n        return new OAuth2MethodSecurityExpressionHandler();\n    }\n\n}\n```", "```java\nfeign.FeignException: status 401 reading CustomerClient#findByIdWithAccounts(); content:{\"error\":\"unauthorized\",\"error_description\":\"Full authentication is required to access this resource\"}\n```", "```java\npublic class CustomerClientConfiguration {\n\n    @Value(\"${security.oauth2.client.access-token-uri}\")\n    private String accessTokenUri;\n    @Value(\"${security.oauth2.client.client-id}\")\n    private String clientId;\n    @Value(\"${security.oauth2.client.client-secret}\")\n    private String clientSecret;\n    @Value(\"${security.oauth2.client.scope}\")\n    private String scope;\n\n    @Bean\n    RequestInterceptor oauth2FeignRequestInterceptor() {\n        return new OAuth2FeignRequestInterceptor(new DefaultOAuth2ClientContext(), resource());\n    }\n\n    @Bean\n    Logger.Level feignLoggerLevel() {\n        return Logger.Level.FULL;\n    }\n\n    private OAuth2ProtectedResourceDetails resource() {\n        ResourceOwnerPasswordResourceDetails resourceDetails = new ResourceOwnerPasswordResourceDetails();\n        resourceDetails.setUsername(\"root\");\n        resourceDetails.setPassword(\"password\");\n        resourceDetails.setAccessTokenUri(accessTokenUri);\n        resourceDetails.setClientId(clientId);\n        resourceDetails.setClientSecret(clientSecret);\n        resourceDetails.setGrantType(\"password\");\n        resourceDetails.setScope(Arrays.asList(scope));\n        return resourceDetails;\n    }\n\n}\n```", "```java\n@Test\npublic void testClient() {\n    ResourceOwnerPasswordResourceDetails resourceDetails = new ResourceOwnerPasswordResourceDetails();\n    resourceDetails.setUsername(\"root\");\n    resourceDetails.setPassword(\"password\");\n    resourceDetails.setAccessTokenUri(\"http://localhost:9999/oauth/token\");\n    resourceDetails.setClientId(\"piotr.minkowski\");\n    resourceDetails.setClientSecret(\"123456\");\n    resourceDetails.setGrantType(\"password\");\n    resourceDetails.setScope(Arrays.asList(\"read\"));\n    DefaultOAuth2ClientContext clientContext = new DefaultOAuth2ClientContext();\n    OAuth2RestTemplate restTemplate = new OAuth2RestTemplate(resourceDetails, clientContext);\n    restTemplate.setMessageConverters(Arrays.asList(new MappingJackson2HttpMessageConverter()));\n    Random r = new Random();\n    Order order = new Order();\n    order.setCustomerId((long) r.nextInt(3) + 1);\n    order.setProductIds(Arrays.asList(new Long[] { (long) r.nextInt(10) + 1, (long) r.nextInt(10) + 1 }));\n    order = restTemplate.postForObject(\"http://localhost:8090\", order, Order.class);\n    if (order.getStatus() != OrderStatus.REJECTED) {\n        restTemplate.put(\"http://localhost:8090/{id}\", null, order.getId());\n    }\n}\n```", "```java\n@SpringBootApplication\n@EnableOAuth2Sso\n@EnableZuulProxy\npublic class GatewayApplication {\n\n    public static void main(String[] args) {\n        new SpringApplicationBuilder(GatewayApplication.class).web(true).run(args);\n    }\n\n}\n```", "```java\nsecurity:\n  oauth2:\n    client:\n      accessTokenUri: /uaa/oauth/token\n      userAuthorizationUri: /uaa/oauth/authorize\n      clientId: piotr.minkowski\n      clientSecret: 123456\n    resource:\n      userInfoUri: http://localhost:9999/user\n\nzuul:\n  routes:\n    account-service:\n      path: /account/**\n    customer-service:\n      path: /customer/**\n    order-service:\n      path: /order/**\n    product-service:\n      path: /product/**\n    uaa:\n      sensitiveHeaders:\n      path: /uaa/**\n      url: http://localhost:9999\n  add-proxy-headers: true\n```"]