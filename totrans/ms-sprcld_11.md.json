["```java\n<dependencyManagement>\n <dependencies>\n  <dependency>\n   <groupId>org.springframework.cloud</groupId>\n   <artifactId>spring-cloud-stream-dependencies</artifactId>\n   <version>Ditmars.SR2</version>\n   <type>pom</type>\n   <scope>import</scope>\n  </dependency>\n </dependencies>\n</dependencyManagement>\n```", "```java\n<dependency>\n <groupId>org.springframework.cloud</groupId>\n <artifactId>spring-cloud-stream</artifactId>\n</dependency>\n<dependency>\n <groupId>org.springframework.cloud</groupId>\n <artifactId>spring-cloud-sleuth</artifactId>\n</dependency>\n```", "```java\n@SpringBootApplication\n@EnableDiscoveryClient\n@EnableBinding(Processor.class)\npublic class OrderApplication {\n\n    public static void main(String[] args) {\n        new SpringApplicationBuilder(OrderApplication.class).web(true).run(args);\n    }\n\n}\n```", "```java\n<dependency>\n <groupId>org.springframework.cloud</groupId>\n <artifactId>spring-cloud-starter-stream-kafka</artifactId>\n</dependency>\n```", "```java\n<dependency>\n <groupId>org.springframework.cloud</groupId>\n <artifactId>spring-cloud-starter-stream-rabbit</artifactId>\n</dependency>\n```", "```java\n@Service\npublic class OrderSender {\n\n    @Autowired\n    private Source source;\n\n    public boolean send(Order order) {\n        return this.source.output().send(MessageBuilder.withPayload(order).build());\n    }\n\n}\n```", "```java\n@RestController\npublic class OrderController {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(OrderController.class); \n    private ObjectMapper mapper = new ObjectMapper();\n\n    @Autowired\n    OrderRepository repository;\n    @Autowired\n    OrderSender sender;\n\n    @PostMapping\n    public Order process(@RequestBody Order order) throws JsonProcessingException {\n        Order o = repository.add(order);\n        LOGGER.info(\"Order saved: {}\", mapper.writeValueAsString(order));\n        boolean isSent = sender.send(o);\n        LOGGER.info(\"Order sent: {}\",     mapper.writeValueAsString(Collections.singletonMap(\"isSent\", isSent)));\n        return o;\n    }\n\n}\n```", "```java\n@SpringBootApplication\n@EnableDiscoveryClient\n@EnableBinding(Processor.class)\npublic class AccountApplication { \n\n    @Autowired\n    AccountService service;\n\n    public static void main(String[] args) {\n        new SpringApplicationBuilder(AccountApplication.class).web(true).run(args);\n    }\n\n    @Bean\n    @StreamListener(Processor.INPUT)\n    public void receiveOrder(Order order) throws JsonProcessingException {\n        service.process(order);\n    }\n\n}\n```", "```java\ndocker run -d --name rabbit -p 15672:15672 -p 5672:5672 rabbitmq:management\n```", "```java\nspring:\n rabbitmq:\n  host: 192.168.99.100\n  port: 5672\n```", "```java\nspring:\n cloud:\n  stream:\n   rabbit:\n    bindings:\n     output:\n      producer:\n       exchangeType: direct\n     input:\n      consumer:\n       exchangeType: direct\n```", "```java\nspring:\n cloud: \n  stream:\n   bindings:\n    output:\n     destination: orders-out\n    input:\n     destination: orders-in\n```", "```java\nspring:\n cloud: \n  stream:\n   bindings:\n    output:\n     destination: orders-in\n    input:\n     destination: orders-out\n```", "```java\npublic interface ProductOrder {\n\n    @Input\n    SubscribableChannel productOrdersIn();\n\n    @Output\n    MessageChannel productOrdersOut();\n}\n```", "```java\npublic interface ProductOrder {\n\n    @Input(\"productOrdersIn\")\n    SubscribableChannel ordersIn();\n\n    @Output(\"productOrdersOut\")\n    MessageChannel ordersOut();\n}\n```", "```java\n@Service\npublic class ProductOrderSender {\n\n    @Autowired\n    private MessageChannel output;\n\n    @Autowired\n    public SendingBean(@Qualifier(\"productOrdersOut\") MessageChannel output) {\n        this.output = output;\n    }\n\n    public boolean send(Order order) {\n        return this.output.send(MessageBuilder.withPayload(order).build());\n    }\n\n}\n```", "```java\n@StreamListener(ProductOrder.INPUT)\npublic void receiveOrder(Order order) throws JsonProcessingException {\n    service.process(order);\n}\n```", "```java\n@FeignClient(name = \"product-service\")\npublic interface ProductClient {\n\n    @PostMapping(\"/ids\")\n    List<Product> findByIds(@RequestBody List<Long> ids); \n}\n```", "```java\ncurl -H \"Content-Type: application/json\" -X POST -d '{\"customerId\":1,\"productIds\":[1,3,4],\"status\":\"NEW\"}' http://localhost:8080/api/order\n```", "```java\n12:34:48.696 INFO [68038cdd653f7b0b,68038cdd653f7b0b] Order saved: {\"id\":1,\"status\":\"NEW\",\"price\":0,\"customerId\":1,\"accountId\":null,\"productIds\":[1,3,4]}\n12:34:49.821 INFO [68038cdd653f7b0b,68038cdd653f7b0b] Order sent: {\"isSent\":true}\n```", "```java\n12:34:50.079 INFO [68038cdd653f7b0b,23432d962ec92f7a] Order processed: {\"id\":1,\"status\":\"NEW\",\"price\":0,\"customerId\":1,\"accountId\":null,\"productIds\":[1,3,4]}\n12:34:50.332 INFO [68038cdd653f7b0b,23432d962ec92f7a] Account found: {\"id\":1,\"number\":\"1234567890\",\"balance\":50000,\"customerId\":1}\n12:34:52.344 INFO [68038cdd653f7b0b,23432d962ec92f7a] Products found: [{\"id\":1,\"name\":\"Test1\",\"price\":1000},{\"id\":3,\"name\":\"Test3\",\"price\":2000},{\"id\":4,\"name\":\"Test4\",\"price\":3000}]\n```", "```java\nspring: \n application:\n  name: product-service\n rabbitmq:\n  host: 192.168.99.100\n  port: 5672\n cloud: \n  stream:\n   bindings:\n    output:\n     destination: orders-in\n    input:\n     destination: orders-out\n   rabbit:\n    bindings:\n     output:\n      producer:\n       exchangeType: direct\n       routingKeyExpression: '\"#\"'\n```", "```java\n@Autowired\nProductRepository productRepository;\n@Autowired\nOrderSender orderSender;\n\npublic void process(final Order order) throws JsonProcessingException {\n LOGGER.info(\"Order processed: {}\", mapper.writeValueAsString(order));\n for (Long productId : order.getProductIds()) {\n     Product product = productRepository.findById(productId);\n     if (product.getCount() == 0) {\n         order.setStatus(OrderStatus.REJECTED);\n         break;\n     }\n     product.setCount(product.getCount() - 1);\n     productRepository.update(product);\n     LOGGER.info(\"Product updated: {}\", mapper.writeValueAsString(product));\n }\n if (order.getStatus() != OrderStatus.REJECTED) {\n     order.setStatus(OrderStatus.ACCEPTED);\n }\n LOGGER.info(\"Order response sent: {}\", mapper.writeValueAsString(Collections.singletonMap(\"status\", order.getStatus())));\n orderSender.send(order);\n}\n```", "```java\n---\nspring:\n profiles: instance1\n cloud:\n  stream:\n   instanceCount: 2\n   instanceIndex: 0\nserver: \n port: ${PORT:8091}\n\n---\nspring:\n profiles: instance2\n cloud:\n  stream:\n   instanceCount: 2\n   instanceIndex: 1\nserver: \n port: ${PORT:9091}\n```", "```java\nspring:\n cloud: \n  stream:\n   bindings:\n    output:\n     destination: orders-in\n    input:\n     destination: orders-out\n     group: account\n```", "```java\nspring.cloud.stream.bindings.output.producer.partitionKeyExpression=payload.customerId\nspring.cloud.stream.bindings.output.producer.partitionCount=2\n```", "```java\nspring:\n cloud: \n  stream:\n   bindings:\n    input:\n     consumer:\n      partitioned: true\n     destination: orders-out\n     group: product\n```", "```java\n@Bean\n@InboundChannelAdapter(value = Source.OUTPUT, poller = @Poller(fixedDelay = \"1000\", maxMessagesPerPoll = \"1\"))\npublic MessageSource<Order> ordersSource() {\n    Random r = new Random();\n    return () -> new GenericMessage<>(new Order(OrderStatus.NEW, (long) r.nextInt(5), Collections.singletonList((long) r.nextInt(10))));\n}\n```", "```java\n@StreamListener(Processor.INPUT)\n@SendTo(Processor.OUTPUT)\npublic Order receiveAndSendOrder(Order order) throws JsonProcessingException {\n    LOGGER.info(\"Order received: {}\", mapper.writeValueAsString(order));\n    return service.process(order);\n}\n```", "```java\n@EnableBinding(Processor.class)\npublic class OrderProcessor {\n\n    @Transformer(inputChannel = Processor.INPUT, outputChannel = Processor.OUTPUT)\n    public Order process(final Order order) throws JsonProcessingException {\n        LOGGER.info(\"Order processed: {}\", mapper.writeValueAsString(order));\n        // ...\n\n        products.forEach(p -> order.setPrice(order.getPrice() + p.getPrice()));\n        if (order.getPrice() <= account.getBalance()) {\n            order.setStatus(OrderStatus.ACCEPTED);\n            account.setBalance(account.getBalance() - order.getPrice());\n        } else {\n            order.setStatus(OrderStatus.REJECTED);\n        }\n        return order;\n    }\n\n}\n```", "```java\npublic boolean send(Order order) {\n    Message<Order> orderMessage = MessageBuilder.withPayload(order).build();\n    orderMessage.getHeaders().put(\"processor\", \"account\");\n    return this.source.output().send(orderMessage);\n}\n```", "```java\n@SpringBootApplication\n@EnableDiscoveryClient\n@EnableBinding(Processor.class)\npublic class OrderApplication {\n\n    @StreamListener(target = Processor.INPUT, condition = \"headers['processor']=='account'\")\n    public void receiveOrder(Order order) throws JsonProcessingException {\n        LOGGER.info(\"Order received from account: {}\", mapper.writeValueAsString(order));\n        // ...\n    }\n\n    @StreamListener(target = Processor.INPUT, condition = \"headers['processor']=='product'\")\n    public void receiveOrder(Order order) throws JsonProcessingException {\n        LOGGER.info(\"Order received from product: {}\", mapper.writeValueAsString(order));\n        // ...\n    }\n\n}\n```", "```java\ndocker run -d --name kafka -p 2181:2181 -p 9092:9092 --env ADVERTISED_HOST=192.168.99.100 --env ADVERTISED_PORT=9092 spotify/kafka\n```", "```java\nspring: \n application:\n  name: order-service\n  kafka:\n   bootstrap-servers: 192.168.99.100:9092\n cloud: \n  stream:\n   bindings:\n    output:\n     destination: orders-out\n     producer:\n      partitionKeyExpression: payload.customerId\n      partitionCount: 2\n    input:\n     destination: orders-in\n   kafka:\n    binder:\n     zkNodes: 192.168.99.100\n```", "```java\n16:58:30.008 INFO [,] Discovered coordinator 192.168.99.100:9092 (id: 2147483647 rack: null) for group account.\n16:58:30.038 INFO [,] Successfully joined group account with generation 1\n16:58:30.039 INFO [,] Setting newly assigned partitions [orders-out-0, orders-out-1] for group account\n16:58:30.081 INFO [,] partitions assigned:[orders-out-0, orders-out-1]\n```", "```java\n<dependency>\n <groupId>org.springframework.cloud</groupId>\n <artifactId>spring-cloud-stream-binder-kstream</artifactId>\n</dependency>\n```", "```java\n@SpringBootApplication\n@EnableBinding(KStreamProcessor.class)\npublic class AccountApplication {\n\n    @StreamListener(\"input\")\n    @SendTo(\"output\")\n    public KStream<?, Order> process(KStream<?, Order> input) {\n        // ..\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(AccountApplication.class, args);\n    }\n\n}\n```", "```java\n<dependency>\n <groupId>org.springframework.cloud</groupId>\n <artifactId>spring-cloud-stream-binder-rabbit</artifactId>\n</dependency>\n<dependency>\n <groupId>org.springframework.cloud</groupId>\n <artifactId>spring-cloud-stream-binder-kafka</artifactId>\n</dependency>\n```", "```java\nspring:\n cloud:\n  stream:\n   bindings:\n    output:\n     destination: orders-in\n     binder: rabbit1\n    input:\n     consumer:\n      partitioned: true\n     destination: orders-out\n     binder: kafka1\n     group: account\n   rabbit:\n    bindings:\n     output:\n      producer:\n       exchangeType: direct\n       routingKeyExpression: '\"#\"'\n   binders:\n    rabbit1:\n     type: rabbit\n     environment:\n      spring:\n       rabbitmq:\n        host: 192.168.99.100\n    kafka1:\n     type: kafka\n     environment:\n      spring:\n       kafka:\n        bootstrap-servers: 192.168.99.100:9092\n```"]