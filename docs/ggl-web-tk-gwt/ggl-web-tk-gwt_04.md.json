["```java\n    public interface LiveSearchService extends RemoteService\n    {\n    public List getCompletionItems(String itemToMatch);\n    }\n\n    ```", "```java\n    public interface LiveSearchServiceAsync\n    {\n    public void getCompletionItems\n    (String itemToMatch, AsyncCallback callback);\n    }\n\n    ```", "```java\n    public class LiveSearchServiceImpl extends RemoteServiceServlet\n    implements LiveSearchService\n    {\n    private String[] items = new String[]\n    {\"apple\", \"peach\", \"orange\", \"banana\", \"plum\", \"avocado\",\n    \"strawberry\", \"pear\", \"watermelon\", \"pineapple\", \"grape\",\n    \"blueberry\", \"cantaloupe\"\n    };\n    public List getCompletionItems(String itemToMatch)\n    {\n    ArrayList completionList = new ArrayList();\n    for (int i = 0; i < items.length; i++)\n    {\n    if (items[i].startsWith(itemToMatch.toLowerCase()))\n    {\n    completionList.add(items[i]);\n    }\n    }\n    return completionList;\n    }\n    }\n\n    ```", "```java\n    public FlexTable liveResultsPanel = new FlexTable();\n    public TextBox searchText = new TextBox();\n    final LiveSearchServiceAsync\n    liveSearchService=(LiveSearchServiceAsync)\n    GWT.create(LiveSearchService.class);\n\n    ```", "```java\n    ServiceDefTarget endpoint=(ServiceDefTarget) liveSearchService;\n    endpoint.setServiceEntryPoint(\"/Samples/livesearch\");\n    VerticalPanel workPanel = new VerticalPanel();\n    searchText.setStyleName(\"liveSearch-TextBox\");\n\n    ```", "```java\n    searchText.addKeyboardListener(new KeyboardListener()\n    {\n    public void onKeyPress\n    (Widget sender, char keyCode, int modifiers)\n    {\n    // not implemented\n    }\n    public void onKeyDown\n    (Widget sender, char keyCode, int modifiers)\n    {\n    for (int i = 0; i < liveResultsPanel.getRowCount(); i++)\n    {\n    liveResultsPanel.removeRow(i);\n    }\n    }\n    public void onKeyUp\n    (Widget sender, char keyCode, int modifiers)\n    {\n    for (int i = 0; i < liveResultsPanel.getRowCount(); i++)\n    {\n    liveResultsPanel.removeRow(i);\n    }\n    if (searchText.getText().length() > 0)\n    {\n    AsyncCallback callback = new AsyncCallback()\n    {\n    public void onSuccess(Object result)\n    {\n    ArrayList resultItems = (ArrayList) result;\n    int row = 0;\n    for(Iterator iter=resultItems.iterator();\n    iter.hasNext();)\n    {\n    liveResultsPanel.setText\n    (row++, 0, (String) iter.next());\n    }\n    }\n    public void onFailure(Throwable caught)\n    {\n    Window.alert(\"Live search failed because \"\n    + caught.getMessage());\n    }\n    };\n    liveSearchService.getCompletionItems\n    (searchText.getText(),callback);\n    }\n    }\n    });\n\n    ```", "```java\n    liveResultsPanel.setStyleName(\"liveSearch-Results\");\n    HorizontalPanel infoPanel = new HorizontalPanel();\n    infoPanel.add(new HTML\n    (\"<div class='infoProse'>Type the first few letters\n    of the name of a fruit in the text box below. A\n    list of fruits with names starting with the typed\n    letters will be displayed. The list is retrieved\n    from the server asynchronously. This is nice AJAX\n    pattern for providing user-friendly search\n    functionality in an application.</div>\"));\n    workPanel.add(searchText);\n    workPanel.add(liveResultsPanel);\n    DockPanel workPane = new DockPanel();\n    workPane.add(infoPanel, DockPanel.NORTH);\n    workPane.add(workPanel, DockPanel.CENTER);\n    workPane.setCellHeight(workPanel, \"100%\");\n    workPane.setCellWidth(workPanel, \"100%\");\n    initWidget(workPane);\n\n    ```", "```java\n    <servlet path=\"/livesearch\" class=\n    \"com.packtpub.gwtbook.samples.server.LiveSearchServiceImpl\"/>\n\n    ```", "```java\n    public interface PasswordStrengthService extends RemoteService\n    {\n    public int checkStrength(String password);\n    }\n\n    ```", "```java\n    public interface PasswordStrengthServiceAsync\n    {\n    public void checkStrength\n    (String password, AsyncCallback callback);\n    }\n\n    ```", "```java\n    public class PasswordStrengthServiceImpl extends\n    RemoteServiceServlet implements PasswordStrengthService\n    {\n    private int STRONG = 9;\n    private int MEDIUM = 6;\n    private int WEAK = 3;\n    public int checkStrength(String password)\n    {\n    if (password.length() <= 4)\n    {\n    return WEAK;\n    }\n    else if (password.length() < 8)\n    {\n    return MEDIUM;\n    }else\n    {\n    return STRONG;\n    }\n    }\n    }\n\n    ```", "```java\n    public TextBox passwordText = new TextBox();\n    final PasswordStrengthServiceAsync pwStrengthService =\n    (PasswordStrengthServiceAsync) GWT.create(PasswordStrengthService.class);\n    public ArrayList strength = new ArrayList();\n\n    ```", "```java\n    private void clearStrengthPanel()\n    {\n    for (Iterator iter = strength.iterator(); iter.hasNext();)\n    {\n    ((CheckBox) iter.next()).\n    setStyleName(getPasswordStrengthStyle(0));\n    }\n    }\n\n    ```", "```java\n    private String getPasswordStrengthStyle(int passwordStrength)\n    {\n    if (passwordStrength == 3)\n    {\n    return \"pwStrength-Weak\";\n    }\n    else if (passwordStrength == 6)\n    {\n    return \"pwStrength-Medium\";\n    }\n    else if (passwordStrength == 9)\n    {\n    return \"pwStrength-Strong\";\n    }\n    else\n    {\n    return \"\";\n    }\n    }\n\n    ```", "```java\n    HorizontalPanel strengthPanel = new HorizontalPanel();\n    strengthPanel.setStyleName(\"pwStrength-Panel\");\n    for (int i = 0; i < 9; i++)\n    {\n    CheckBox singleBox = new CheckBox();\n    strengthPanel.add(singleBox);\n    strength.add(singleBox);\n    }\n    VerticalPanel workPanel = new VerticalPanel();\n    ServiceDefTarget endpoint=(ServiceDefTarget) pwStrengthService;\n    endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() +\n    \"pwstrength\");\n\n    ```", "```java\n    passwordText.setStyleName(\"pwStrength-Textbox\");\n    passwordText.addKeyboardListener(new KeyboardListener()\n    {\n    public void onKeyDown\n    (Widget sender, char keyCode, int modifiers)\n    {\n    }\n    public void onKeyPress\n    (Widget sender, char keyCode, int modifiers)\n    {\n    }\n    public void onKeyUp(Widget sender, char keyCode, int modifiers)\n    {\n    if (passwordText.getText().length() > 0)\n    {\n    AsyncCallback callback = new AsyncCallback()\n    {\n    public void onSuccess(Object result)\n    {\n    clearStrengthPanel();\n    int checkedStrength = ((Integer) result).intValue();\n    for (int i = 0; i < checkedStrength; i++)\n    {\n    ((CheckBox) strength.get(i)).setStyleName\n    (getPasswordStrengthStyle(checkedStrength));\n    }\n    }\n    public void onFailure(Throwable caught)\n    {\n    Window.alert(\"Error calling the password strength service.\" + caught.getMessage());\n    }\n    };\n    pwStrengthService.checkStrength\n    (passwordText.getText(), callback);\n    }\n    else\n    {\n    clearStrengthPanel();\n    }\n    }\n    });\n\n    ```", "```java\n    HorizontalPanel infoPanel = new HorizontalPanel();\n    infoPanel.add(new HTML(\n    \"<div class='infoProse'>Start typing a password\n    string. The strength of the password will be\n    checked and displayed below. Red indicates that the\n    password is Weak, Orange indicates a Medium\n    strength password and Green indicates a Strong\n    password. The algorithm for checking the strength\n    is very basic and checks the length of the password\n    string.</div>\"));\n    workPanel.add(passwordText);\n    workPanel.add(infoPanel);\n    workPanel.add(strengthPanel);\n    DockPanel workPane = new DockPanel();\n    workPane.add(infoPanel, DockPanel.NORTH);\n    workPane.add(workPanel, DockPanel.CENTER);\n    workPane.setCellHeight(workPanel, \"100%\");\n    workPane.setCellWidth(workPanel, \"100%\");\n    initWidget(workPane);\n\n    ```", "```java\n    <servlet path=\"/pwstrength\" class=\n    \"com.packtpub.gwtbook.samples.server.\n    PasswordStrengthServiceImpl\"/>\n\n    ```", "```java\n    public interface AutoFormFillService extends RemoteService\n    {\n    public HashMap getFormInfo(String formKey);\n    }\n\n    ```", "```java\n    public interface AutoFormFillServiceAsync\n    {\n    public void getFormInfo\n    (String formKey, AsyncCallback callback);\n    }\n\n    ```", "```java\n    private HashMap formInfo = new HashMap();\n    private void loadCustomerData()\n    {\n    HashMap customer1 = new HashMap();\n    customer1.put(\"first name\", \"Joe\");\n    customer1.put(\"last name\", \"Customer\");\n    customer1.put(\"address\", \"123 peachtree street\");\n    customer1.put(\"city\", \"Atlanta\");\n    customer1.put(\"state\", \"GA\");\n    customer1.put(\"zip\", \"30339\");\n    customer1.put(\"phone\", \"770-123-4567\");\n    formInfo.put(\"1111\", customer1);\n    HashMap customer2 = new HashMap();\n    customer2.put(\"first name\", \"Jane\");\n    customer2.put(\"last name\", \"Customer\");\n    customer2.put(\"address\", \"456 elm street\");\n    customer2.put(\"city\", \"Miami\");\n    customer2.put(\"state\", \"FL\");\n    customer2.put(\"zip\", \"24156\");\n    customer2.put(\"phone\", \"817-123-4567\");\n    formInfo.put(\"2222\", customer2);\n    HashMap customer3 = new HashMap();\n    customer3.put(\"first name\", \"Jeff\");\n    customer3.put(\"last name\", \"Customer\");\n    customer3.put(\"address\", \"789 sunset blvd\");\n    customer3.put(\"city\", \"Los Angeles\");\n    customer3.put(\"state\", \"CA\");\n    customer3.put(\"zip\", \"90211\");\n    customer3.put(\"phone\", \"714-478-9802\");\n    formInfo.put(\"3333\", customer3);\n    }\n\n    ```", "```java\n    public HashMap getFormInfo(String formKey)\n    {\n    if (formInfo.containsKey(formKey))\n    {\n    return (HashMap) formInfo.get(formKey);\n    }\n    else\n    {\n    return new HashMap();\n    }\n    }\n\n    ```", "```java\n    private TextBox custID = new TextBox();\n    private TextBox firstName = new TextBox();\n    private TextBox lastName = new TextBox();\n    private TextBox address = new TextBox();\n    private TextBox zip = new TextBox();\n    private TextBox phone = new TextBox();\n    private TextBox city = new TextBox();\n    private TextBox state = new TextBox();\n    private Label custIDLbl = new Label(\"Customer ID : \");\n    private Label firstNameLbl = new Label(\"First Name : \");\n    private Label lastNameLbl = new Label(\"Last Name : \");\n    private Label addressLbl = new Label(\"Address : \");\n    private Label zipLbl = new Label(\"Zip Code : \");\n    private Label phoneLbl = new Label(\"Phone Number : \");\n    private Label cityLbl = new Label(\"City : \");\n    private Label stateLbl = new Label(\"State : \");\n    HorizontalPanel itemPanel = new HorizontalPanel();\n\n    ```", "```java\n    final AutoFormFillServiceAsync autoFormFillService =\n    (AutoFormFillServiceAsync) GWT.create (AutoFormFillService.class);\n\n    ```", "```java\n    private void setValues(HashMap values)\n    {\n    if (values.size() > 0)\n    {\n    firstName.setText((String) values.get(\"first name\"));\n    lastName.setText((String) values.get(\"last name\"));\n    address.setText((String) values.get(\"address\"));\n    city.setText((String) values.get(\"city\"));\n    state.setText((String) values.get(\"state\"));\n    zip.setText((String) values.get(\"zip\"));\n    phone.setText((String) values.get(\"phone\"));\n    }\n    else\n    {\n    clearValues();\n    }\n    }\n    private void clearValues()\n    {\n    firstName.setText(\" \");\n    lastName.setText(\" \");\n    address.setText(\" \");\n    city.setText(\" \");\n    state.setText(\" \");\n    zip.setText(\" \");\n    phone.setText(\" \");\n    }\n\n    ```", "```java\n    public Label getAddressLbl()\n    {\n    return addressLbl;\n    }\n    public Label getCityLbl()\n    {\n    return cityLbl;\n    }\n    public Label getCustIDLbl()\n    {\n    return custIDLbl;\n    }\n    public Label getFirstNameLbl()\n    {\n    return firstNameLbl;\n    }\n    public Label getLastNameLbl()\n    {\n    return lastNameLbl;\n    }\n    public Label getPhoneLbl()\n    {\n    return phoneLbl;\n    }\n    public Label getStateLbl()\n    {\n    return stateLbl;\n    }\n    public Label getZipLbl()\n    {\n    return zipLbl;\n    }\n\n    ```", "```java\n    public TextBox getAddress()\n    {\n    return address;\n    }\n    public TextBox getCity()\n    {\n    return city;\n    }\n    public TextBox getCustID()\n    {\n    return custID;\n    }\n    public TextBox getFirstName()\n    {\n    return firstName;\n    }\n    public TextBox getLastName()\n    {\n    return lastName;\n    }\n    public TextBox getPhone()\n    {\n    return phone;\n    }\n    public TextBox getState()\n    {\n    return state;\n    }\n    public TextBox getZip()\n    {\n    return zip;\n    }\n\n    ```", "```java\n    ServiceDefTarget endpoint = (ServiceDefTarget)\n    autoFormFillService;\n    endpoint.setServiceEntryPoint(\"/Samples/autoformfill\");\n\n    ```", "```java\n    HorizontalPanel itemPanel = new HorizontalPanel();\n    itemPanel.setStyleName(\"autoFormItem-Panel\");\n    custIDLbl.setStyleName(\"autoFormItem-Label\");\n    itemPanel.add(custIDLbl);\n    custID.setStyleName(\"autoFormItem-Textbox\");\n    itemPanel.add(custID);\n    workPanel.add(itemPanel);\n\n    ```", "```java\n    custID.addKeyboardListener(new KeyboardListener()\n    {\n    public void onKeyDown(Widget sender,\n    char keyCode, int modifiers)\n    {\n    }\n    public void onKeyPress(Widget sender,\n    char keyCode, int modifiers)\n    {\n    }\n    public void onKeyUp(Widget sender, char\n    keyCode, int modifiers)\n    {\n    if (custID.getText().length() > 0)\n    {\n    AsyncCallback callback = new\n    AsyncCallback()\n    {\n    public void onSuccess\n    (Object result)\n    {\n    setValues((HashMap) result);\n    }\n    };\n    autoFormFillService.getFormInfo\n    (custID.getText(), callback);\n    }\n    else\n    {\n    clearValues();\n    }\n    }\n    public void onFailure(Throwable caught)\n    {\n    Window.alert(\"Error while calling the\n    Auto Form Fill service.\"\n    + caught.getMessage());\n    }\n    });\n\n    ```", "```java\n    HorizontalPanel infoPanel = new HorizontalPanel();\n    infoPanel.add(new HTML(\n    \"<div class='infoProse'>This example\n    demonstrates how to automatically fill a\n    form by retrieving the data from the server\n    asynchronously. Start typing a customer ID\n    in the provided field, and corresponding\n    values for that customer are retrieved\n    asynchronously from the server and the form\n    filled for you.</div>\"));\n    DockPanel workPane = new DockPanel();\n    workPane.add(infoPanel, DockPanel.NORTH);\n    workPane.add(workPanel, DockPanel.CENTER);\n    workPane.setCellHeight(workPanel, \"100%\");\n    workPane.setCellWidth(workPanel, \"100%\");\n    initWidget(workPane);\n\n    ```", "```java\n    <servlet path=\"/autoformfill\" class=\n    \"com.packtpub.gwtbook.samples.server. AutoFormFillServiceImpl\"/>\n\n    ```", "```java\nHashMap customer2 = new HashMap();\ncustomer2.put(\"first name\", \"Jane\");\ncustomer2.put(\"last name\", \"Customer\");\ncustomer2.put(\"address\", \"456 elm street\");\ncustomer2.put(\"city\", \"Miami\");\ncustomer2.put(\"state\", \"FL\");\ncustomer2.put(\"zip\", \"24156\");\ncustomer2.put(\"phone\", \"817-123-4567\");\nformInfo.put(\"2222\", customer2);\n\n```", "```java\nfirstName.setText((String) values.get(\"first name\"));\nlastName.setText((String) values.get(\"last name\"));\naddress.setText((String) values.get(\"address\"));\ncity.setText((String) values.get(\"city\"));\nstate.setText((String) values.get(\"state\"));\nzip.setText((String) values.get(\"zip\"));\nphone.setText((String) values.get(\"phone\"));\n\n```", "```java\n    private class CustomerData\n    {\n    private String firstName;\n    private String lastName;\n    private String country;\n    private String city;\n    public CustomerData(String firstName, String lastName,\n    String city, String country)\n    {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.country = country;\n    this.city = city;\n    }\n    public String getCountry()\n    {\n    return country;\n    }\n    public String getCity()\n    {\n    return city;\n    }\n    public String getFirstName()\n    {\n    return firstName;\n    }\n    public String getLastName()\n    {\n    return lastName;\n    }\n    }\n\n    ```", "```java\n    private int sortDirection = 0;\n    private FlexTable sortableTable = new FlexTable();\n    private String[] columnHeaders = new String[]\n    { \"First Name\", \"Last Name\", \"City\", \"Country\" };\n    private ArrayList customerData = new ArrayList();\n    private HashMap dataBucket = new HashMap();\n    private ArrayList sortColumnValues = new ArrayList();\n\n    ```", "```java\n    VerticalPanel workPanel = new VerticalPanel();\n    sortableTable.setWidth(500 + \"px\");\n    sortableTable.setStyleName(\"sortableTable\");\n    sortableTable.setBorderWidth(1);\n    sortableTable.setCellPadding(4);\n    sortableTable.setCellSpacing(1);\n    sortableTable.setHTML(0, 0, columnHeaders[0]\n    + \"&nbsp;<img border='0' src='images/blank.gif'/>\");\n    sortableTable.setHTML(0, 1, columnHeaders[1]\n    + \"&nbsp;<img border='0' src='images/blank.gif'/>\");\n    sortableTable.setHTML(0, 2, columnHeaders[2]\n    + \"&nbsp;<img border='0' src='images/blank.gif'/>\");\n    sortableTable.setHTML(0, 3, columnHeaders[3]\n    + \"&nbsp;<img border='0' src='images/blank.gif'/>\");\n\n    ```", "```java\n    customerData.add(new CustomerData(\"Rahul\",\"Dravid\",\"Bangalore\",\n    \"India\"));\n    customerData.add(new CustomerData(\"Nat\", \"Flintoff\", \"London\",\n    \"England\"));\n    customerData.add(new CustomerData(\"Inzamamul\", \"Haq\", \"Lahore\",\n    \"Pakistan\"));\n    customerData.add(new CustomerData(\"Graeme\", \"Smith\", \"Durban\",\n    \"SouthAfrica\"));\n    customerData.add(new CustomerData(\"Ricky\", \"Ponting\", \"Sydney\",\n    \"Australia\"));\n    int row = 1;\n    for (Iterator iter = customerData.iterator(); iter.hasNext();)\n    {\n    CustomerData element = (CustomerData) iter.next();\n    sortableTable.setText(row, 0, element.getFirstName());\n    sortableTable.setText(row, 1, element.getLastName());\n    sortableTable.setText(row, 2, element.getCity());\n    sortableTable.setText(row, 3, element.getCountry());\n    row++;\n    }\n    RowFormatter rowFormatter = sortableTable.getRowFormatter();\n    rowFormatter.setStyleName(0, \"tableHeader\");\n    sortableTable.addTableListener(new TableListener()\n    {\n    public void onCellClicked(SourcesTableEvents sender, int row,\n    int cell)\n    {\n    if (row == 0)\n    {\n    sortTable(row, cell);\n    }\n    }\n    });\n\n    ```", "```java\n    HorizontalPanel infoPanel = new HorizontalPanel();\n    infoPanel.add(new HTML(\n    \"<div class='infoProse'>This example shows\n    how to create tables whose rows can be\n    sorted by clicking on the column\n    header.</div>\"));\n    workPanel.setStyleName(\"sortableTables-Panel\");\n    workPanel.add(sortableTable);\n    DockPanel workPane = new DockPanel();\n    workPane.add(infoPanel, DockPanel.NORTH);\n    workPane.add(workPanel, DockPanel.CENTER);\n    workPane.setCellHeight(workPanel, \"100%\");\n    workPane.setCellWidth(workPanel, \"100%\");\n    sortTable(0, 0);\n    initWidget(workPane);\n\n    ```", "```java\n    private void redrawColumnHeaders(int column)\n    {\n    if (sortDirection == 0)\n    {\n    sortableTable.setHTML(0, column, columnHeaders[column]\n    + \"&nbsp;<img border='0' src='images/desc.gif'/>\");\n    }\n    else if (sortDirection == 1)\n    {\n    sortableTable.setHTML(0, column, columnHeaders[column]\n    + \"&nbsp;<img border='0' src='images/asc.gif'/>\");\n    }\n    else\n    {\n    sortableTable.setHTML(0, column, columnHeaders[column]\n    + \"&nbsp;<img border='0' src='images/blank.gif'/>\");\n    }\n    for (int i = 0; i < 4; i++)\n    {\n    if (i != column)\n    {\n    sortableTable.setHTML(0, i, columnHeaders[i]\n    + \"&nbsp;<img border='0' src='images/blank.gif'/>\");\n    }\n    }\n    }\n\n    ```", "```java\n    private void redrawTable()\n    {\n    int row = 1;\n    for (Iterator iter = sortColumnValues.iterator();\n    iter.hasNext();)\n    {\n    String key = (String) iter.next();\n    CustomerData custData = (CustomerData) dataBucket.get(key);\n    sortableTable.setText(row, 0, custData.getFirstName());\n    sortableTable.setText(row, 1, custData.getLastName());\n    sortableTable.setText(row, 2, custData.getCity());\n    sortableTable.setText(row, 3, custData.getCountry());\n    row++;\n    }\n    }\n\n    ```", "```java\n    public void sortTable(int row, int cell)\n    {\n    dataBucket.clear();\n    sortColumnValues.clear();\n    for (int i = 1; i < customerData.size() + 1; i++)\n    {\n    dataBucket.put(sortableTable.getText(i, cell), new\n    CustomerData(\n    sortableTable.getText(i, 0), sortableTable.getText(i, 1),\n    sortableTable.getText(i, 2), sortableTable.getText\n    (i, 3)));\n    sortColumnValues.add(sortableTable.getText(i, cell));\n    }\n    if (sortDirection == 0)\n    {\n    sortDirection = 1;\n    Collections.sort(sortColumnValues);\n    }\n    else\n    {\n    sortDirection = 0;\n    Collections.reverse(sortColumnValues);\n    }\n    redrawColumnHeader(cell);\n    resetColumnHeaders(cell);\n    redrawTable();\n    }\n\n    ```", "```java\ncustomerData.add(new CustomerData(\"Rahul\", \"Dravid\", \"Bangalore\",\n\"India\"));\n\n```", "```java\nCustomerData element = (CustomerData) iter.next();\nsortableTable.setText(row, 0, element.getFirstName());\nsortableTable.setText(row, 1, element.getLastName());\nsortableTable.setText(row, 2, element.getCity());\nsortableTable.setText(row, 3, element.getCountry());\n\n```", "```java\nsortableTable.setHTML(0, 0, columnHeaders[0] + \"&nbsp; <img border='0' src='images/blank.gif'/>\");\n\n```", "```java\nfor (int i = 1; i < customerData.size() + 1; i++)\n{\ndataBucket.put(sortableTable.getText(i, cell), new CustomerData(\nsortableTable.getText(i, 0), sortableTable.getText(i, 1),\nsortableTable.getText(i, 2), sortableTable.getText(i, 3)));\nsortColumnValues.add(sortableTable.getText(i, cell));\n}\n\n```", "```java\nif (sortDirection == 0)\n{\nsortDirection = 1;\nCollections.sort(sortColumnValues);\n}\nelse\n{\nsortDirection = 0;\nCollections.reverse(sortColumnValues);\n}\n\n```", "```java\n    public interface DynamicListsService extends RemoteService\n    {\n    public List getManufacturers();\n    public List getBrands(String manufacturer);\n    public List getModels(String manufacturer, String brand);\n    }\n\n    ```", "```java\n    public interface DynamicListsServiceAsync\n    {\n    public void getManufacturers(AsyncCallback callback);\n    public void getBrands(String manufacturer,\n    AsyncCallback callback);\n    public void getModels(String manufacturer, String brand,\n    AsyncCallback callback);\n    }\n\n    ```", "```java\n    private class Manufacturer\n    {\n    private HashMap brands = new HashMap();\n    public Manufacturer(HashMap brands)\n    {\n    this.brands = brands;\n    }\n    public HashMap getBrands()\n    {\n    return brands;\n    }\n    }\n\n    ```", "```java\n    private void loadData()\n    {\n    ArrayList brandModels = new ArrayList();\n    brandModels.add(\"EX\");\n    brandModels.add(\"DX Hatchback\");\n    brandModels.add(\"DX 4-Door\");\n    HashMap manufacturerBrands = new HashMap();\n    manufacturerBrands.put(\"Civic\", brandModels);\n    brandModels = new ArrayList();\n    brandModels.add(\"SX\");\n    brandModels.add(\"Sedan\");\n    manufacturerBrands.put(\"Accord\", brandModels);\n    brandModels = new ArrayList();\n    brandModels.add(\"LX\");\n    brandModels.add(\"Deluxe\");\n    manufacturerBrands.put(\"Odyssey\", brandModels);\n    Manufacturer manufacturer = new\n    Manufacturer(manufacturerBrands);\n    data.put(\"Honda\", manufacturer);\n    brandModels = new ArrayList();\n    brandModels.add(\"LXE\");\n    brandModels.add(\"LX\");\n    manufacturerBrands = new HashMap();\n    manufacturerBrands.put(\"Altima\", brandModels);\n    brandModels = new ArrayList();\n    brandModels.add(\"NX\");\n    brandModels.add(\"EXE\");\n    manufacturerBrands.put(\"Sentra\", brandModels);\n    manufacturer = new Manufacturer(manufacturerBrands);\n    data.put(\"Nissan\", manufacturer);\n    brandModels = new ArrayList();\n    brandModels.add(\"E300\");\n    brandModels.add(\"E500\");\n    manufacturerBrands = new HashMap();\n    manufacturerBrands.put(\"E-Class\", brandModels);\n    brandModels = new ArrayList();\n    brandModels.add(\"C250\");\n    brandModels.add(\"C300\");\n    manufacturerBrands.put(\"C-Class\", brandModels);\n    manufacturer = new Manufacturer(manufacturerBrands);\n    data.put(\"Mercedes\", manufacturer);\n    }\n\n    ```", "```java\n    public ArrayList getManufacturers()\n    {\n    ArrayList manufacturersList = new ArrayList();\n    for (Iterator iter=data.keySet().iterator(); iter.hasNext();)\n    {\n    manufacturersList.add((String) iter.next());\n    }\n    return manufacturersList;\n    }\n\n    ```", "```java\n    public ArrayList getBrands(String manufacturer)\n    {\n    ArrayList brandsList = new ArrayList();\n    for (Iterator iter = ((Manufacturer)data.get(manufacturer))\n    .getBrands().keySet().iterator(); iter.hasNext();)\n    {\n    brandsList.add((String) iter.next());\n    }\n    return brandsList;\n    }\n\n    ```", "```java\n    public ArrayList getModels(String manufacturer, String brand)\n    {\n    ArrayList modelsList = new ArrayList();\n    Manufacturer mfr = (Manufacturer) data.get(manufacturer);\n    HashMap mfrBrands = (HashMap) mfr.getBrands();\n    for (Iterator iter = ((ArrayList)\n    mfrBrands.get(brand)).iterator(); iter.hasNext();)\n    {\n    modelsList.add((String) iter.next());\n    }\n    return modelsList;\n    }\n\n    ```", "```java\n    Grid manufacturers = new Grid(5, 1);\n    Grid brands = new Grid(5, 1);\n    Grid models = new Grid(5, 1);\n    final DynamicListsServiceAsync dynamicListsService =\n    (DynamicListsServiceAsync) GWT.create (DynamicListsService.class);\n\n    ```", "```java\n    public void clearSelections(Grid grid, boolean clearData)\n    {\n    for (int i = 0; i < grid.getRowCount(); i++)\n    {\n    if (clearData)\n    {\n    grid.setText(i, 0, \" \");\n    }\n    }\n    }\n\n    ```", "```java\n    HorizontalPanel workPanel = new HorizontalPanel();\n    ServiceDefTarget endpoint = (ServiceDefTarget)\n    dynamicListsService;\n    endpoint.setServiceEntryPoint(\"/Samples/dynamiclists\");\n\n    ```", "```java\n    manufacturers.addTableListener(new TableListener()\n    {\n    public void onCellClicked\n    (SourcesTableEvents sender,\n    int row, int cell)\n    {\n    clearSelections(manufacturers,\n    false);\n    clearSelections(brands, true);\n    clearSelections(models, true);\n    selectedManufacturer = row;\n    AsyncCallback callback = new\n    AsyncCallback()\n    {\n    public void onSuccess(Object\n    result)\n    {\n    brands.clear();\n    int row = 0;\n    for (Iterator iter =\n    ((ArrayList) result).\n    iterator();\n    iter.hasNext();)\n    {\n    brands.setText(row++, 0,\n    (String) iter.next());\n    }\n    }\n    public void onFailure(Throwable\n    caught)\n    {\n    Window.alert(\"Error calling\n    the Dynamic Lists service to\n    get the brands.\" +\n    caught.getMessage());\n    }\n    };\n    dynamicListsService.getBrands\n    (manufacturers.getText(row,\n    cell),callback);\n    }\n    });\n\n    ```", "```java\n    brands.addTableListener\n    (new TableListener()\n    {\n    public void onCellClicked\n    (SourcesTableEvents sender, int row, int cell)\n    {\n    clearSelections(brands, false);\n    clearSelections(models, true);\n    AsyncCallback callback = new\n    AsyncCallback()\n    {\n    public void onSuccess(Object result)\n    {\n    models.clear();\n    int row = 0;\n    for (Iterator iter = ((ArrayList)\n    result).iterator(); iter.hasNext();)\n    {\n    models.setText(row++, 0, (String)\n    iter.next());\n    }\n    }\n    public void onFailure(Throwable caught)\n    {\n    Window.alert(\"Error calling the Dynamic\n    Lists service to get the models.\" +\n    caught.getMessage());\n    }\n    };\n    dynamicListsService.getModels\n    (manufacturers.getText\n    (selectedManufacturer, cell),\n    brands.getText(row, cell), callback);\n    }\n    });\n\n    ```", "```java\n    models.addTableListener(new TableListener()\n    {\n    public void onCellClicked\n    (SourcesTableEvents sender, int row,\n    int cell)\n    {\n    clearSelections(models, false);\n    models.getCellFormatter()\n    .setStyleName(row, cell,\n    \"dynamicLists-Selected\");\n    }\n    });\n    AsyncCallback callback = new AsyncCallback()\n    {\n    public void onSuccess(Object result)\n    {\n    int row = 0;\n    for (Iterator iter = ((ArrayList) result).iterator(); iter.hasNext();)\n    {\n    manufacturers.setText(row++, 0, (String) iter.next());\n    }\n    }\n    public void onFailure(Throwable caught)\n    {\n    Window.alert(\"Error calling the Dynamic Lists service to\n    get the manufacturers.\" + caught.getMessage());\n    }\n    };\n    dynamicListsService.getManufacturers(callback);\n\n    ```", "```java\n    VerticalPanel itemPanel = new VerticalPanel();\n    Label itemLabel = new Label(\"Select Manufacturer\");\n    itemLabel.setStyleName(\"dynamicLists-Label\");\n    itemPanel.add(itemLabel);\n    itemPanel.add(manufacturers);\n    workPanel.add(itemPanel);\n    itemPanel = new VerticalPanel();\n    itemLabel = new Label(\"Select Brand\");\n    itemLabel.setStyleName(\"dynamicLists-Label\");\n    itemPanel.add(itemLabel);\n    itemPanel.add(brands);\n    workPanel.add(itemPanel);\n    itemPanel = new VerticalPanel();\n    itemLabel = new Label(\"Models\");\n    itemLabel.setStyleName(\"dynamicLists-Label\");\n    itemPanel.add(itemLabel);\n    itemPanel.add(models);\n    workPanel.add(itemPanel);\n    manufacturers.setStyleName(\"dynamicLists-List\");\n    brands.setStyleName(\"dynamicLists-List\");\n    models.setStyleName(\"dynamicLists-List\");\n    workPanel.setStyleName(\"dynamicLists-Panel\");\n\n    ```", "```java\n    HorizontalPanel infoPanel = new HorizontalPanel();\n    infoPanel.add(new HTML(\n    \"<div class='infoProse'>This example\n    demonstrates the creation of dynamic\n    lists. You select an item from the first\n    list and corresponding items are retrieved\n    asynchronously from the server to display\n    in the second list. You can then select an\n    item in the second list to get another\n    selection of items. In this particular\n    example, we retrieve car brand by\n    manufacturer, and then get and display the\n    specific models for the selected\n    brand.</div>\"));\n    DockPanel workPane = new DockPanel();\n    workPane.add(infoPanel, DockPanel.NORTH);\n    workPane.add(workPanel, DockPanel.CENTER);\n    workPane.setCellHeight(workPanel, \"100%\");\n    workPane.setCellWidth(workPanel, \"100%\");\n    initWidget(workPane);\n\n    ```", "```java\n    <servlet path=\"/dynamiclists\" class=\n    \"com.packtpub.gwtbook.samples.server.DynamicListsServiceImpl\"/>\n\n    ```", "```java\nbrandModels = new ArrayList();\nbrandModels.add(\"E300\");\nbrandModels.add(\"E500\");\nmanufacturerBrands = new HashMap();\nmanufacturerBrands.put(\"E-Class\", brandModels);\nbrandModels = new ArrayList();\nbrandModels.add(\"C250\");\nbrandModels.add(\"C300\");\nmanufacturerBrands.put(\"C-Class\", brandModels);\nmanufacturer = new Manufacturer(manufacturerBrands);\ndata.put(\"Mercedes\", manufacturer);\n\n```", "```java\nManufacturer mfr = (Manufacturer) data.get(manufacturer);\nHashMap mfrBrands = (HashMap) mfr.getBrands();\nfor (Iterator iter = ((ArrayList) mfrBrands.get(brand)).iterator();\niter.hasNext();)\n{\nmodelsList.add((String) iter.next());\n}\nreturn modelsList;\n\n```", "```java\n    private Label originalName;\n    private String originalText;\n    private Button saveButton;\n    private Button cancelButton;\n    private Image image = new Image(\"images/sample.jpg\");\n    private Label orLabel = new Label(\"or\");\n\n    ```", "```java\n    private void ShowText()\n    {\n    originalText = originalName.getText();\n    originalName.setVisible(false);\n    saveButton.setVisible(true);\n    orLabel.setVisible(true);\n    cancelButton.setVisible(true);\n    newName.setText(originalText);\n    newName.setVisible(true);\n    newName.setFocus(true);\n    newName.setStyleName(\"flickrPanel-textBox-edit\");\n    }\n\n    ```", "```java\n    originalName.addClickListener(new ClickListener()\n    {\n    public void onClick(Widget sender)\n    {\n    ShowText();\n    }\n    });\n\n    ```", "```java\n    originalName.addMouseListener(new MouseListener()\n    {\n    public void onMouseDown\n    (Widget sender, int x, int y)\n    {\n    }\n    public void onMouseEnter\n    (Widget sender)\n    {\n    originalName.setStyleName\n    \"flickrPanel-label-hover\");\n    }\n    public void onMouseLeave\n    (Widget sender)\n    {\n    originalName.setStyleName\n    (\"flickrPanel-label\");\n    }\n    public void onMouseMove\n    (Widget sender, int x, int y)\n    {\n    }\n    public void onMouseUp\n    (Widget sender, int x, int y)\n    {\n    }\n    });\n\n    ```", "```java\n    newName.addKeyboardListener(new KeyboardListenerAdapter()\n    {\n    public void onKeyPress(Widget sender, char keyCode, int\n    modifiers)\n    {\n    switch (keyCode)\n    {\n    case KeyboardListenerAdapter. KEY_ENTER:saveChange();\n    break;\n    case KeyboardListenerAdapter. KEY_ESCAPE:cancelChange();\n    break;\n    }\n    }\n    });\n\n    ```", "```java\n    saveButton.addClickListener(new ClickListener()\n    {\n    public void onClick(Widget sender)\n    {\n    saveChange();\n    }\n    });\n\n    ```", "```java\n    cancelButton.addClickListener(new ClickListener()\n    {\n    public void onClick(Widget sender)\n    {\n    cancelChange();\n    }\n    });\n\n    ```", "```java\n    originalName.setVisible(true);\n    newName.setVisible(false);\n    saveButton.setVisible(false);\n    orLabel.setVisible(false);\n    cancelButton.setVisible(false);\n\n    ```", "```java\n    HorizontalPanel buttonPanel = new HorizontalPanel();\n    buttonPanel.setStyleName(\"flickrPanel-buttonPanel\");\n    buttonPanel.add(saveButton);\n    buttonPanel.add(orLabel);\n    buttonPanel.add(cancelButton);\n    DockPanel workPane = new DockPanel();\n    workPane.add(infoPanel, DockPanel.NORTH);\n    VerticalPanel workPanel = new VerticalPanel();\n    workPanel.setStyleName(\"flickrPanel\");\n    workPanel.add(image);\n    workPanel.add(originalName);\n    workPanel.add(newName);\n    workPanel.add(buttonPanel);\n    workPane.add(workPanel, DockPanel.CENTER);\n    workPane.setCellHeight(workPanel, \"100%\");\n    workPane.setCellWidth(workPanel, \"100%\");\n    initWidget(workPane);\n\n    ```", "```java\n    private void showLabel()\n    {\n    originalName.setVisible(true);\n    saveButton.setVisible(false);\n    orLabel.setVisible(false);\n    cancelButton.setVisible(false);\n    newName.setVisible(false);\n    }\n\n    ```", "```java\n    private void saveChange()\n    {\n    originalName.setText(newName.getText());\n    showLabel();\n    // This is where you can call an RPC service to update\n    // a db or call some other service to propagate\n    // the change. In this example we just change the\n    // text of the label.\n    }\n\n    ```", "```java\n    public void cancelChange()\n    {\n    originalName.setText(originalText);\n    showLabel();\n    }\n\n    ```", "```java\noriginalText = originalName.getText();\noriginalName.setVisible(false);\nsaveButton.setVisible(true);\norLabel.setVisible(true);\ncancelButton.setVisible(true);\nnewName.setText(originalText);\nnewName.setVisible(true);\nnewName.setFocus(true);\nnewName.setStyleName(\"flickrPanel-textBox-edit\");\n\n```", "```java\noriginalName.setText(newName.getText());\noriginalName.setVisible(true);\nsaveButton.setVisible(false);\norLabel.setVisible(false);\ncancelButton.setVisible(false);\nnewName.setVisible(false);\n\n```", "```java\noriginalName.setText(originalText);\noriginalName.setVisible(true);\nsaveButton.setVisible(false);\norLabel.setVisible(false);\ncancelButton.setVisible(false);\nnewName.setVisible(false);\n\n```"]