["```java\n    public interface PageableDataService extends RemoteService\n    {\n    public List getCustomerData(int startIndex, int numItems );\n    }\n\n    ```", "```java\n    public interface PageableDataServiceAsync\n    {\n    public void getCustomerData(int startIndex, int numItems,\n    AsyncCallback callback);\n    }\n\n    ```", "```java\n    private ArrayList customerData = new ArrayList();\n\n    ```", "```java\n    private void loadData()\n    {\n    Class.forName(\"org.hsqldb.jdbcDriver\");\n    Connection conn = DriverManager.getConnection\n    ( \"jdbc:hsqldb:file:samplesdb\", \"sa\", \"\");\n    Statement st = conn.createStatement();\n    ResultSet rs = st.executeQuery(\"SELECT * FROM users\");\n    for (; rs.next();)\n    {\n    ArrayList customer = new ArrayList();\n    customer.add((String) rs.getObject(2));\n    customer.add((String) rs.getObject(3));\n    customer.add((String) rs.getObject(4));\n    customer.add((String) rs.getObject(5));\n    customer.add((String) rs.getObject(6));\n    customerData.add(customer);\n    }\n    st.execute(\"SHUTDOWN\");\n    conn.close();\n    }\n\n    ```", "```java\n    public PageableDataServiceImpl()\n    {\n    super();\n    loadData();\n    }\n\n    ```", "```java\n    public ArrayList getCustomerData(int startIndex, int numItems)\n    {\n    ArrayList customers = new ArrayList();\n    for (int i = startIndex - 1; i < (startIndex + numItems); i++)\n    {\n    customers.add((ArrayList) customerData.get(i));\n    }\n    return customers;\n    }\n\n    ```", "```java\n    private FlexTable customerTable = new FlexTable();\n    private Button backButton = new Button(\"<<<\");\n    private Button forwardButton = new Button(\">>\");\n    private String[] customerTableHeaders = new String[]\n    { \"Name\", \"City\",\"Zip Code\", \"State\", \"Phone\" };\n    private int startIndex = 1;\n\n    ```", "```java\n    final PageableDataServiceAsync pageableDataService =\n    (PageableDataServiceAsync)\n    GWT.create(PageableDataService.class);\n    ServiceDefTarget endpoint = (ServiceDefTarget)\n    pageableDataService;\n    endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() +\n    \"pageabledata\");\n\n    ```", "```java\n    private void clearTable()\n    {\n    for (int row=1; row<customerTable.getRowCount(); row++)\n    {\n    for (int col=0; col<customerTable.getCellCount(row); col++)\n    {\n    customerTable.clearCell(row, col);\n    }\n    }\n    }\n\n    ```", "```java\n    private void update(int startIndex)\n    {\n    AsyncCallback callback = new AsyncCallback()\n    public void onSuccess(Object result)\n    {\n    ArrayList customerData = (ArrayList) result;\n    int row = 1;\n    clearTable();\n    for (Iterator iter=customerData.iterator(); iter.hasNext();)\n    {\n    ArrayList customer = (ArrayList) iter.next();\n    customerTable.setText(row, 0, (String) customer.get(0));\n    customerTable.setText(row, 1, (String) customer.get(1));\n    customerTable.setText(row, 2, (String) customer.get(2));\n    customerTable.setText(row, 3, (String) customer.get(3));\n    customerTable.setText(row, 4, (String) customer.get(4));\n    row++;\n    }\n    }\n    public void onFailure(Throwable caught)\n    {\n    Window.alert(\"Error when invoking the pageable data service\n    : \" + caught.getMessage());\n    }\n    pageableDataService.getCustomerData(startIndex, 10, callback);\n    }\n\n    ```", "```java\n    VerticalPanel workPanel = new VerticalPanel();\n    customerTable.setWidth(500 + \"px\");\n    customerTable.setBorderWidth(1);\n    customerTable.setCellPadding(4);\n    customerTable.setCellSpacing(1);\n    customerTable.setText(0, 0, customerTableHeaders[0]);\n    customerTable.setText(0, 1, customerTableHeaders[1]);\n    customerTable.setText(0, 2, customerTableHeaders[2]);\n    customerTable.setText(0, 3, customerTableHeaders[3]);\n    customerTable.setText(0, 4, customerTableHeaders[4]);\n\n    ```", "```java\n    HorizontalPanel innerNavBar = new HorizontalPanel();\n    innerNavBar.setStyleName(\"pageableData-NavBar\");\n    innerNavBar.setSpacing(8);\n    innerNavBar.add(backButton);\n    innerNavBar.add(forwardButton);\n\n    ```", "```java\n    backButton.addClickListener(new ClickListener()\n    {\n    public void onClick(Widget sender)\n    {\n    if (startIndex >= 10)\n    startIndex -= 10;\n    update(startIndex);\n    }\n    });\n\n    ```", "```java\n    forwardButton.addClickListener(new ClickListener()\n    {\n    public void onClick(Widget sender)\n    {\n    if (startIndex < 40)\n    {\n    startIndex += 10;\n    update(startIndex);\n    }\n    }\n    });\n\n    ```", "```java\n    workPanel.add(innerNavBar);\n    HorizontalPanel infoPanel = new HorizontalPanel();\n    infoPanel.add(new HTML(\"<div class='infoProse'>Create lists that can be paged by fetching data from the server on demand\n    we go forward and backward in the list.</div>\"));\n    workPanel.add(customerTable);\n    DockPanel workPane = new DockPanel();\n    workPane.add(infoPanel, DockPanel.NORTH);\n    workPane.add(workPanel, DockPanel.CENTER);\n    workPane.setCellHeight(workPanel, \"100%\");\n    workPane.setCellWidth(workPanel, \"100%\");\n    initWidget(workPane);\n    update(1);\n\n    ```", "```java\n    <servlet path=\"/Samples/pageabledata\" class=\n    \"com.packtpub.gwtbook.samples.server.PageableDataServiceImpl\"/>\n\n    ```", "```java\nClass.forName(\"org.hsqldb.jdbcDriver\");\nConnection conn = DriverManager.getConnection\n(\"jdbc:hsqldb:file:samplesdb\", \"sa\", \"\");\n\n```", "```java\nArrayList customerData = (ArrayList) result;\nint row = 1;\nclearTable();\nfor (Iterator iter = customerData.iterator(); iter.hasNext();)\n{\nArrayList customer = (ArrayList) iter.next();\ncustomerTable.setText(row, 0, (String) customer.get(0));\ncustomerTable.setText(row, 1, (String) customer.get(1));\ncustomerTable.setText(row, 2, (String) customer.get(2));\ncustomerTable.setText(row, 3, (String) customer.get(3));\ncustomerTable.setText(row, 4, (String) customer.get(4));\nrow++;\n}\n\n```", "```java\n    private Tree editableTree = new Tree();\n    private TreeItem currentSelection = new TreeItem();\n    private TextBox textbox = new TextBox();\n    private AbsolutePanel workPanel = new AbsolutePanel();\n    private DockPanel workPane = new DockPanel();\n\n    ```", "```java\n    private void initTree()\n    {\n    TreeItem root = new TreeItem(\"root\");\n    root.setState(true);\n    int index = 100;\n    for (int j = 0; j < 10; j++)\n    {\n    TreeItem item = new TreeItem();\n    item.setText(\"File \" + index++);\n    root.addItem(item);\n    }\n    editableTree.addItem(root);\n    }\n\n    ```", "```java\n    initTree();\n    editableTree.addTreeListener(new TreeListener()\n    {\n    public void onTreeItemSelected(TreeItem item)\n    {\n    if (textbox.isAttached())\n    {\n    if(!currentSelection.getText().equals(textbox.getText()))\n    {\n    currentSelection.setText(textbox.getText());\n    }\n    workPanel.remove(textbox);\n    }\n    textbox.setHeight(item.getOffsetHeight() + \"px\");\n    textbox.setWidth(\"90px\");\n    int xpos = item.getAbsoluteLeft() - 133;\n    int ypos = item.getAbsoluteTop() - 115;\n    workPanel.add(textbox, xpos, ypos);\n    textbox.setText(item.getText());\n    textbox.setFocus(true);\n    currentSelection = item;\n    textbox.addFocusListener(new FocusListener()\n    {\n    public void onLostFocus(Widget sender)\n    {\n    if (sender.isAttached())\n    {\n    if (!currentSelection.getText()\n    .equals(textbox.getText()))\n    {\n    currentSelection.setText (textbox.getText());\n    }\n    workPanel.remove(textbox);\n    }\n    }\n    });\n    }\n    public void onTreeItemStateChanged(TreeItem item)\n    {\n    }\n    }\n\n    ```", "```java\n    HorizontalPanel infoPanel = new HorizontalPanel();\n    infoPanel.add(new HTML\n    (\"<div class='infoProse'>This sample shows a tree whose nodes\n    can be edited by clicking on a tree node.</div>\"));\n    workPanel.add(editableTree);\n    workPane.add(infoPanel, DockPanel.NORTH);\n    workPane.add(workPanel, DockPanel.CENTER);\n    workPane.setCellHeight(workPanel, \"100%\");\n    workPane.setCellWidth(workPanel, \"100%\");\n    initWidget(workPane);\n\n    ```", "```java\npublic void onLostFocus(Widget sender)\n{\nif (sender.isAttached())\n{\nif (!currentSelection.getText().equals(textbox.getText()))\n{\ncurrentSelection.setText(textbox.getText());\n}\nworkPanel.remove(textbox);\n}\n}\n\n```", "```java\n    public interface LogSpyService extends RemoteService\n    {\n    public ArrayList getAllLogEntries();\n    public ArrayList getNextLogEntries();\n    }\n\n    ```", "```java\n    public interface LogSpyServiceAsync\n    {\n    public void getAllLogEntries(AsyncCallback callback);\n    public void getNextLogEntries(AsyncCallback callback);\n    }\n\n    ```", "```java\n    private long filePointer = 0;\n    private File logfile = new File(\"test2.log\");\n    private ArrayList readLogFile()\n    {\n    ArrayList entries = new ArrayList();\n    RandomAccessFile file = new RandomAccessFile(logfile, \"r\");\n    long fileLength = logfile.length();\n    if (fileLength > filePointer)\n    {\n    file.seek(filePointer);\n    String line = file.readLine();\n    while (line != null)\n    {\n    line = file.readLine();\n    if (line != null && line.length() > 0)\n    {\n    entries.add(line);\n    }\n    }\n    filePointer = file.getFilePointer();\n    }\n    file.close();\n    return entries;\n    }\n\n    ```", "```java\n    public ArrayList getAllLogEntries()\n    {\n    return readLogFile();\n    }\n    public ArrayList getNextLogEntries()\n    {\n    try\n    {\n    Thread.sleep(1000);\n    }\n    catch (InterruptedException e)\n    {\n    e.printStackTrace();\n    }\n    return readLogFile();\n    }\n\n    ```", "```java\n    Public VerticalPanel workPanel = new VerticalPanel();\n    public ListBox logSpyList = new ListBox();\n    public TextBox monitoringInterval = new TextBox();\n    public Label monitoringLabel = new Label( \"Monitoring Interval :\");\n    public Button startMonitoring = new Button(\"Start\");\n    public Button stopMonitoring = new Button(\"Stop\");\n    private boolean isMonitoring = false;\n\n    ```", "```java\n    private HorizontalPanel intervalPanel = new HorizontalPanel();\n    private HorizontalPanel startStopPanel = new HorizontalPanel();\n    private Timer timer;\n\n    ```", "```java\n    public ListBox logSpyList = new ListBox();\n    ServiceDefTarget endpoint = (ServiceDefTarget) logSpyService;\n    endpoint.setServiceEntryPoint GWT.getModuleBaseURL()\n    + \"logspy\");\n\n    ```", "```java\n    monitoringInterval.setText(\"1000\");\n    stopMonitoring.setEnabled(false);\n\n    ```", "```java\n    intervalPanel.setStyleName(\"logSpyPanel\");\n    startStopPanel.setStyleName(\"logSpyStartStopPanel\");\n    monitoringLabel.setStyleName(\"logSpyLabel\");\n    monitoringInterval.setStyleName(\"logSpyTextbox\");\n\n    ```", "```java\n    startMonitoring.addClickListener(new ClickListener()\n    {\n    public void onClick(Widget sender)\n    {\n    if (!isMonitoring)\n    {\n    timer = new Timer()\n    {\n    public void run()\n    {\n    AsyncCallback callback = new AsyncCallback()\n    {\n    public void onSuccess(Object result)\n    {\n    ArrayList resultItems = (ArrayList) result;\n    for (Iterator iter = resultItems.iterator();\n    iter.hasNext();)\n    {\n    logSpyList.insertItem(((String)\n    iter.next()), 0);\n    logSpyList.setSelectedIndex(0);\n    }\n    }\n    public void onFailure(Throwable caught)\n    {\n    Window.alert(\"Error while invoking the logspy\n    service \" + caught.getMessage());\n    }\n    };\n    logSpyService.getNextLogEntries(callback);\n    }\n    };\n    timer.scheduleRepeating(Integer.parseInt\n    (monitoringInterval.getText()));\n    isMonitoring = true;\n    startMonitoring.setEnabled(false);\n    stopMonitoring.setEnabled(true);\n    }\n    }\n    });\n\n    ```", "```java\n    stopMonitoring.addClickListener(new ClickListener()\n    {\n    public void onClick(Widget sender)\n    {\n    if (isMonitoring)\n    {\n    timer.cancel();\n    isMonitoring = false;\n    startMonitoring.setEnabled(true);\n    stopMonitoring.setEnabled(false);\n    }\n    }\n    });\n\n    ```", "```java\n    logSpyList.setVisibleItemCount(8);\n\n    ```", "```java\n    HorizontalPanel infoPanel = new HorizontalPanel();\n    infoPanel.add(new HTML\n    (\"<div class='infoProse'>View a log file live as entries are\n    written to it. This is similar in concept to the unix\n    utility tail. The new entries are retrieved and added in\n    real time to the top of the list. You can start and stop\n    the monitoring, and set the interval in milliseconds for\n    how often you want to check the file for new entries.\n    </div>\"));\n    intervalPanel.add(monitoringLabel);\n    intervalPanel.add(monitoringInterval);\n    startStopPanel.add(startMonitoring);\n    startStopPanel.add(stopMonitoring);\n    workPanel.add(intervalPanel);\n    workPanel.add(startStopPanel);\n    workPanel.add(logSpyList);\n    DockPanel workPane = new DockPanel();\n    workPane.add(infoPanel, DockPanel.NORTH);\n    workPane.add(workPanel, DockPanel.CENTER);\n    workPane.setCellHeight(workPanel, \"100%\");\n    workPane.setCellWidth(workPanel, \"100%\");\n    initWidget(workPane);\n\n    ```", "```java\n    <servlet path=\"/Samples/logspy\"\n    class=\"com.packtpub.gwtbook.samples.server.LogSpyServiceImpl\"/>\n\n    ```", "```java\nRandomAccessFile file = new RandomAccessFile(logfile, \"r\");\nlong fileLength = logfile.length();\nif (fileLength > filePointer)\n{\nfile.seek(filePointer);\nString line = file.readLine();\nwhile (line != null)\n{\nline = file.readLine();\nif (line != null && line.length() > 0)\n{\nentries.add(line);\n}\n}\nfilePointer = file.getFilePointer();\n}\nfile.close();\n\n```", "```java\nlogSpyList.insertItem(((String) iter.next()), 0);\nlogSpyList.setSelectedIndex(0);\n\n```", "```java\n    private HorizontalPanel workPanel = new HorizontalPanel();\n    private Button createNote = new Button(\"Create Note\");\n    private TextBox noteTitle = new TextBox();\n    private int noteLeft = 300;\n    private int noteTop = 170;\n    private int increment = 10;\n\n    ```", "```java\n    public StickyNote(String title)\n    {\n    super();\n    if (title.length() == 0)\n    {\n    setText(\"New Note\");\n    }\n    else\n    {\n    setText(title);\n    }\n    TextArea text = new TextArea();\n    text.setText(\"Type your note here\");\n    text.setHeight(\"80px\");\n    setWidget(text);\n    setHeight(\"100px\");\n    setWidth(\"100px\");\n    setStyleName(text.getElement(), \"notesText\", true);\n    setStyleName(\"notesPanel\");\n    }\n\n    ```", "```java\n    public boolean onEventPreview(Event event)\n    {\n    int type = DOM.eventGetType(event);\n    switch (type)\n    {\n    case Event.ONKEYDOWN:\n    {\n    return onKeyDownPreview((char) DOM.eventGetKeyCode(event),\n    KeyboardListenerCollection.getKeyboardModifiers(event));\n    }\n    case Event.ONKEYUP:\n    {\n    return onKeyUpPreview((char) DOM.eventGetKeyCode(event),\n    KeyboardListenerCollection.getKeyboardModifiers(event));\n    }\n    case Event.ONKEYPRESS:\n    {\n    return onKeyPressPreview((char) DOM.eventGetKeyCode(event),\n    KeyboardListenerCollection.getKeyboardModifiers(event));\n    }\n    }\n    return true;\n    }\n\n    ```", "```java\n    HorizontalPanel infoPanel = new HorizontalPanel();\n    infoPanel.add(new HTML\n    (\"<div class='infoProse'>Create sticky notes and drag them\n    around to position any where in your browser window. Go\n    ahead and try it !\n    </div>\"));\n    createNote.addClickListener(this);\n    createNote.setStyleName(\"notesButton\");\n    workPanel.add(createNote);\n    noteTitle.setStyleName(\"notesTitle\");\n    workPanel.add(noteTitle);\n    DockPanel workPane = new DockPanel();\n    workPane.add(infoPanel, DockPanel.NORTH);\n    workPane.add(workPanel, DockPanel.CENTER);\n    workPane.setCellHeight(workPanel, \"100%\");\n    workPane.setCellWidth(workPanel, \"100%\");\n    initWidget(workPane);\n\n    ```", "```java\n    public void onClick(Widget sender)\n    {\n    StickyNote note = new StickyNote(noteTitle.getText());\n    note.setPopupPosition(noteLeft + increment, noteTop +\n    increment);\n    increment = increment + 40;\n    note.show();\n    }\n\n    ```", "```java\n    private AbsolutePanel workPanel = new AbsolutePanel();\n    private boolean inDrag;\n    private int xOffset;\n    private int yOffset;\n\n    ```", "```java\n    Image monalisa = new Image(\"images/monalisa_face1_8.jpg\");\n    monalisa.addMouseListener(this);\n    workPanel.add(monalisa, 60, 20);\n    monalisa = new Image(\"images/monalisa_face1_7.jpg\");\n    monalisa.addMouseListener(this);\n    workPanel.add(monalisa, 60, 125);\n    monalisa = new Image(\"images/monalisa_face1_2.jpg\");\n    monalisa.addMouseListener(this);\n    workPanel.add(monalisa, 60, 230);\n    monalisa = new Image(\"images/monalisa_face1_3.jpg\");\n    monalisa.addMouseListener(this);\n    workPanel.add(monalisa, 170, 20);\n    monalisa = new Image(\"images/monalisa_face1_4.jpg\");\n    monalisa.addMouseListener(this);\n    workPanel.add(monalisa, 170, 125);\n    monalisa = new Image(\"images/monalisa_face1_1.jpg\");\n    monalisa.addMouseListener(this);\n    workPanel.add(monalisa, 170, 230);\n    monalisa = new Image(\"images/monalisa_face1_6.jpg\");\n    monalisa.addMouseListener(this);\n    workPanel.add(monalisa, 280, 20);\n    monalisa = new Image(\"images/monalisa_face1_9.jpg\");\n    monalisa.addMouseListener(this);\n    workPanel.add(monalisa, 280, 125);\n    monalisa = new Image(\"images/monalisa_face1_5.jpg\");\n    monalisa.addMouseListener(this);\n    jigsaw puzzlecreatingworkPanel.add(monalisa, 280, 230);\n\n    ```", "```java\n    DOM.addEventPreview(new EventPreview()\n    {\n    public boolean onEventPreview(Event event)\n    {\n    switch (DOM.eventGetType(event))\n    {\n    case Event.ONMOUSEDOWN:\n    case Event.ONMOUSEMOVE:\n    case Event.ONMOUSEUP:\n    DOM.eventPreventDefault(event);\n    }\n    return true;\n    }\n    });\n\n    ```", "```java\n    public void onMouseDown(Widget source, int x, int y)\n    {\n    DOM.setCapture(source.getElement());\n    xOffset = x;\n    yOffset = y;\n    inDrag = true;\n    }\n\n    ```", "```java\n    public void onMouseMove(Widget source, int x, int y)\n    {\n    if (inDrag)\n    {\n    int xAbs = x + source.getAbsoluteLeft() - 135;\n    int yAbs = y + source.getAbsoluteTop() - 120;\n    ((AbsolutePanel)source.getParent()).\n    setWidgetPosition(source, xAbs- xOffset, yAbs - yOffset);\n    }\n    }\n\n    ```", "```java\n    public void onMouseUp(Widget source, int x, int y)\n    {\n    DOM.releaseCapture(source.getElement());\n    inDrag = false;\n    }\n\n    ```", "```java\n    HorizontalPanel infoPanel = new HorizontalPanel();\n    infoPanel.add(new HTML\n    (\"<div class='infoProse'>This example demonstrates the use\n    of dragging to move things around and place them anywhere\n    in the window. It is easy to forget that you are actually\n    doing this in a web browser !\n    </div>\"));\n    DockPanel workPane = new DockPanel();\n    workPane.add(infoPanel, DockPanel.NORTH);\n    workPane.add(workPanel, DockPanel.CENTER);\n    workPane.setCellHeight(workPanel, \"100%\");\n    workPane.setCellWidth(workPanel, \"100%\");\n    initWidget(workPane);\n\n    ```", "```java\nImage monalisa = new Image(\"images/monalisa_face1_8.jpg\");\nmonalisa.addMouseListener(this);\nworkPanel.add(monalisa, 60, 20);\nmonalisa = new Image(\"images/monalisa_face1_7.jpg\");\nmonalisa.addMouseListener(this);\nworkPanel.add(monalisa, 60, 125);\nmonalisa = new Image(\"images/monalisa_face1_2.jpg\");\nmonalisa.addMouseListener(this);\nworkPanel.add(monalisa, 60, 230);\n\n```"]