["```java\n<!-- Spring Data JPA -->\n<dependency>\n  <groupId>org.springframework.data</groupId>\n  <artifactId>spring-data-jpa</artifactId>\n  <version>1.2.0.RELEASE</version>\n</dependency>\n<!-- Hibernate -->\n<dependency>\n  <groupId>org.hibernate</groupId>\n  <artifactId>hibernate-core</artifactId>\n  <version>4.1.4.Final</version>\n</dependency>\n<dependency>\n  <groupId>org.hibernate</groupId>\n  <artifactId>hibernate-entitymanager</artifactId>\n  <version>4.1.4.Final</version>\n</dependency>\n<!-- H2 Database -->\n<dependency>\n  <groupId>com.h2database</groupId>\n  <artifactId>h2</artifactId>\n  <version>1.3.166</version>\n</dependency>\n<!-- BoneCP -->\n<dependency>\n  <groupId>com.jolbox</groupId>\n  <artifactId>bonecp</artifactId>\n  <version>0.7.1.RELEASE</version>\n</dependency>\n```", "```java\n#Database Configuration\ndb.driver=org.h2.Driver\ndb.url=jdbc:h2:mem:datajpa\ndb.username=sa\ndb.password=\n\n#Hibernate Configuration\nhibernate.dialect=org.hibernate.dialect.H2Dialect\nhibernate.format_sql=true\nhibernate.hbm2ddl.auto=create-drop\nhibernate.ejb.naming_strategy=org.hibernate.cfg.ImprovedNamingStrategy\nhibernate.show_sql=true\n\n#EntityManager\nentitymanager.packages.to.scan=com.packtpub.springdata.jpa.model\n\n#General Spring configuration is added here.\n```", "```java\n@Configuration\n@ComponentScan(basePackages = {\n        \"com.packtpub.springdata.jpa.controller\",\n        \"com.packtpub.springdata.jpa.service\"\n})\n@EnableJpaRepositories(\"com.packtpub.springdata.jpa.repository\")\n@EnableTransactionManagement\n@EnableWebMvc\n@PropertySource(\"classpath:application.properties\")\npublic class ApplicationContext extends WebMvcConfigurerAdapter {\n\n    @Resource\n    private Environment env;\n\n//Add configuration here\n}\n\n```", "```java\n@Bean\npublic DataSource dataSource() {\n  BoneCPDataSource ds = new BoneCPDataSource();   \n\n  ds.setDriverClass(env.getRequiredProperty(\"db.driver\")); \n  ds.setJdbcUrl(env.getRequiredProperty(\"db.url\")); \n  ds.setUsername(env.getRequiredProperty(\"db.username\"));  \n  ds.setPassword(env.getRequiredProperty(\"db.password\"));\n\n  return ds;\n}\n```", "```java\n@Bean\npublic LocalContainerEntityManagerFactoryBean entityManagerFactory() {\n    LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();\n\n    em.setDataSource(dataSource());\n    em.setJpaVendorAdapter(new HibernateJpaVendorAdapter());em.setPackagesToScan(env.getRequiredProperty(\"entitymanager.packages.to.scan\"));\n\n    Properties p = new Properties();\n    p.put(\"hibernate.dialect\", env.getRequiredProperty(\"hibernate.dialect\"));\n    p.put(\"hibernate.format_sql\", env.getRequiredProperty(\"hibernate.format_sql\"));\n    p.put(\"hibernate.hbm2ddl.auto\", env.getRequiredProperty(\"hibernate.hbm2ddl.auto\"));\n    p.put(\"hibernate.ejb.naming_strategy\", env.getRequiredProperty(\"hibernate.ejb.naming_strategy\"));\n    p.put(\"hibernate.show_sql\", env.getRequiredProperty(\"hibernate.show_sql\");\n    em.setJpaProperties(p);\n\n    return em;\n}\n```", "```java\n@Bean\npublic JpaTransactionManager transactionManager() {\n    JpaTransactionManager transactionManager = new JpaTransactionManager();\n    transactionManager.setEntityManagerFactory(entityManagerFactory().getObject());\n    return transactionManager;\n}\n```", "```java\npublic class DataJPAExampleInitializer implements WebApplicationInitializer {\n\n    @Override\n    public void onStartup(ServletContext servletContext) throws ServletException {\n        //Loading application context\n        AnnotationConfigWebApplicationContext rootContext = new AnnotationConfigWebApplicationContext();\n        rootContext.register(ApplicationContext.class);\n\n        //Dispatcher servlet\n        ServletRegistration.Dynamic dispatcher = servletContext.addServlet(\"dispatcher\", new DispatcherServlet(rootContext));\n        dispatcher.setLoadOnStartup(1);\n        dispatcher.addMapping(\"/\");\n\n        //Context loader listener\n        servletContext.addListener(new ContextLoaderListener(rootContext));\n    }\n}\n```", "```java\n@Entity\n@Table(name = \"contacts\")\npublic class Contact {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n\n    private Address address;\n\n    @Column(name = \"email_address\", length = 100)\n    private String emailAddress;\n\n    @Column(name = \"first_name\", nullable=false, length = 50)\n    private String firstName;\n\n    @Column(name = \"last_name\", nullable=false, length = 100)\n    private String lastName;\n\n    @Column(name = \"phone_number\", length = 30)\n    private String phoneNumber;\n\n    @Version\n    private long version;\n\n//Getters and other methods\n}\n```", "```java\npublic static class Builder {\n\n        private Contact built;\n\n        public Builder (String firstName, String lastName) {\n            built = new Contact();\n            built.firstName = firstName;\n            built.lastName = lastName;\n        }\n\n        public Builder address(String streetAddress, String postCode, String postOffice, String state, String country) {\n            Address address = Address.getBuilder(streetAddress, postCode, postOffice)\n                    .state(state)\n                    .country(country)\n                    .build();\n            built.address = address;\n            return this;\n        }\n\n        public Builder emailAddress(String emailAddress) {\n            built.emailAddress = emailAddress;\n            return this;\n        }\n\n        public Builder phoneNumber(String phoneNumber) {\n            built.phoneNumber = phoneNumber;\n            return this;\n        }\n\n        public Contact build() {\n            return built;\n        }\n    }\n}\n```", "```java\npublic static Builder getBuilder(String firstName, String lastName) {\n    return new Builder(firstName, lastName);\n}\n```", "```java\npublic void update(final String firstName, final String lastName, final String emailAddress, final String phoneNumber) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.emailAddress = emailAddress;\n    this.phoneNumber = phoneNumber;\n}\n\npublic void updateAddress(final String streetAddress, final String postCode, final String postOffice, final String state, final String country) {\n    if (address == null) {\n        address = new Address();\n    }\n    address.update(streetAddress, postCode, postOffice, state, country);\n}\n```", "```java\n@Embeddable\npublic class Address {\n\n    @Column(name = \"country\", length = 20)\n    private String country;\n\n    @Column(name = \"street_address\", length =150)\n    private String streetAddress;\n\n    @Column(name = \"post_code\", length = 10)\n    private String postCode;\n\n    @Column(name = \"post_office\", length = 40)\n    private String postOffice;\n\n    @Column(name = \"state\", length = 20)\n    private String state;\n\n  //The default constructor and other methods\n}\n```", "```java\npublic static class Builder {\n\n  private Address built;\n\n  public Builder(String streetAddress, String postCode, String postOffice) {\n    built = new Address();\n    built.streetAddress = streetAddress;\n    built.postCode = postCode;\n    built.postOffice = postOffice;\n  }\n\n  public Builder country(String country) {\n    built.country = country;\n    return this;\n  }\n\n  public Builder state(String state) {\n    built.state = state;\n    return this;\n  }\n\n  public Address build() {\n    return built;\n   }\n}\n```", "```java\npublic static Builder getBuilder(String streetAddress, String postCode, String postOffice) {\n    return new Builder(streetAddress, postCode, postOffice);\n}\n```", "```java\npublic void update(final String streetAddress, final String postCode, final String postOffice, final String state, final String country) {\n    this.streetAddress = streetAddress;\n    this.postCode = postCode;\n    this.postOffice = postOffice;\n    this.state = state;\n    this.country = country;\n}\n```", "```java\n@MappedSuperclass\npublic abstract class BaseEntity<ID> {\n\n    @Version\n    private Long version;\n\n    public abstract ID getId();\n}\n```", "```java\npublic interface BaseRepository<T extends BaseEntity, ID extends Serializable> {\n\n    public T deleteById(ID id);\n    public List<T> findAll();\n    public T findById(ID id);\n    public void persist(T entity);\n}\n```", "```java\npublic abstract class BaseRepositoryImpl<T extends BaseEntity, ID extends Serializable> implements BaseRepository<T, ID> {\n\n    private Class<T> entityClass;\n\n    @PersistenceContext(unitName = \"pu\")\n    private EntityManager em;\n\n    public BaseDAOImpl() {\n        this.entityClass = ((Class<T>) ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[0]);\n    }\n\n    @Override\n    @Transactional(propagation = Propagation.REQUIRED)\n    public T deleteById(ID id) {\n        T entity = findById(id);\n        if (entity != null) {\n            em.remove(entity);\n        }\n        return entity;\n    }\n\n    @Override\n    public List<T> findAll() {\n        CriteriaBuilder cb = em.getCriteriaBuilder();\n        CriteriaQuery<T> query = cb.createQuery(entityClass);\n        Root<T> root = query.from(entityClass);\n        return em.createQuery(query).getResultList();\n    }\n\n    @Override\n    public T findById(ID id) {\n        return em.find(getEntityClass(), id);\n    }\n\n    @Override\n    @Transactional(propagation = Propagation.REQUIRED)\n    public void persist(T entity) {\n        em.persist(entity);\n    }\n\n    protected Class<T> getEntityClass() {\n        return entityClass;\n    }\n\n    protected EntityManager getEntityManager() {\n        return em;\n    }\n}\n```", "```java\n@Entity\n@Table(name = \"contacts\")\npublic class Contact extends BaseEntity<Long> {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO) private Long id;\n\n    @Override\n    public Long getId() {\n        return id;\n    }\n}\n```", "```java\npublic interface ContactRepository extends BaseRepository<Contact, Long> {\n//Declare custom methods here.\n}\n```", "```java\n@Repository\npublic class ContactRepositoryImpl extends BaseRepositoryImpl<Contact, Long> implements ContactRepository {\n  //Add custom query methods here\n}\n```", "```java\npublic interface ContactRepository extends JpaRepository<Contact, Long> {\n}\n```", "```java\npublic interface ContactService {\n\n    public Contact add(ContactDTO added);\n    public Contact deleteById(Long id) throws NotFoundException;\n    public List<Contact> findAll();\n    public Contact findById(Long id) throws NotFoundException;\n    public Contact update(ContactDTO updated) throws NotFoundException;\n}\n```", "```java\n@Service\npublic class RepositoryContactService implements ContactService {\n\n    @Resource\n    private ContactRepository repository;\n\n    //Empty method skeletons\n}\n```", "```java\n@Transactional\n@Override\npublic Contact add(ContactDTO added) {\n    //Creates an instance of a Contact by using the builder pattern\n    Contact contact = Contact.getBuilder(added.getFirstName(), added.getLastName())\n            .address(added.getStreetAddress(), added.getPostCode(), added.getPostOffice(), added.getState(), added.getCountry())\n            .emailAddress(added.getEmailAddress())\n            .phoneNumber(added.getPhoneNumber())\n            .build();\n    return repository.save(contact);\n}\n```", "```java\n@Transactional(readOnly = true)\n@Override\npublic List<Contact> findAll() {\n    return repository.findAll();\n}\n```", "```java\n@Transactional(readOnly = true)\n@Override\npublic Contact findById(Long id) throws NotFoundException {\n    Contact found = repository.findOne(id);\n\n    if (found == null) {\n        throw new NotFoundException(\"No contact found with id: \" + id);\n    }\n\n    return found;\n}\n```", "```java\n@Transactional(rollbackFor = NotFoundException.class)\n@Override\npublic Contact update(ContactDTO updated) throws NotFoundException {\n    Contact found = findById(updated.getId());\n\n    found.update(updated.getFirstName(), updated.getLastName(), updated.getEmailAddress(), updated.getPhoneNumber());\n\n    found.updateAddress(updated.getStreetAddress(), updated.getPostCode(), updated.getPostOffice(), updated.getState(), updated.getCountry());\n\n    return found;\n}\n```", "```java\n@Transactional(rollbackFor = NotFoundException.class)\n@Override\npublic Contact deleteById(Long id) throws NotFoundException {\n    Contact deleted = findById(id);\n    repository.delete(deleted);\n    return deleted;\n}\n```"]