["```java\npublic interface ContactService {\n    public Contact add(Contact added);\n    public Contact deleteById(Long id) throws NotFoundException;\n    public List<Contact> findAll();\n    public Contact findById(Long id) throws NotFoundException;\n    public Contact update(Contact updated) throws NotFoundException;\n}\n```", "```java\n@Bean\npublic RedisTemplate redisTemplate() {\n  RedisTemplate<String, String> redis = new RedisTemplate<String, String>();\n\n  redis.setConnectionFactory(redisConnectionFactory());\n\n  return redis;\n}\n```", "```java\n@Bean\npublic RedisAtomicLong redisAtomicLong() {\n  return new RedisAtomicLong(\"contact\", redisConnectionFactory());\n}\n```", "```java\n@Service\npublic class RedisContactService implements ContactService {\n\n    @Resource\n    private RedisAtomicLong contactIdCounter;\n\n    @Resource\n    private RedisTemplate<String, String> redisTemplate;\n\n    //Add methods here.\n}\n```", "```java\nprivate String buildKey(Long contactId) {\n    return \"contact\" + contactId;\n}\n```", "```java\nprivate Contact buildContact(String key) {\n    Contact contact = new Contact();\n\n    BoundHashops ops = redisTemplate.boundHashOps(key);\n\n    contact.setId((Long) ops.get(\"id\"));\n    contact.setEmailAddress((String) ops.get(\"emailAddress\"));\n    contact.setFirstName((String) ops.get(\"firstName\"));\n    contact.setLastName((String) ops.get(\"lastName\"));\n    contact.setPhoneNumber((String) ops.get(\"phoneNumber\"));\n\n    Address address = new Address();\n    address.setStreetAddress((String) ops.get(\"streetAddress\"));\n    address.setPostCode((String) ops.get(\"postCode\"));\n    address.setPostOffice((String) ops.get(\"postOffice\"));\n    address.setState((String) ops.get(\"state\"));\n    address.setCountry((String) ops.get(\"country\"));\n    contact.setAddress(address);\n\n    return contact;\n}\n```", "```java\nprivate Contact buildContact(Long id) {\n    String key = buildKey(id);\n    return buildContact(key);\n}\n```", "```java\nprivate boolean contactDoesNotExist(Long id) {\n    String key = buildKey(id);\n    return !redisTemplate.opsForSet().isMember(\"contacts\", key);\n}\n```", "```java\nprivate String persist(Contact persisted) {\n    Long id = persisted.getId();\n    if (id == null) {\n        id = contactIdCounter.incrementAndGet();\n        persisted.setId(id);\n    }\n\n    String contactKey = buildKey(id);\n\n    BoundHashops ops = redisTemplate.boundHashOps(contactKey);\n\n    ops.put(\"id\", persisted.getId());\n    ops.put(\"emailAddress\", persisted.getEmailAddress());\n    ops.put(\"firstName\", persisted.getFirstName());\n    ops.put(\"lastName\", persisted.getLastName());\n    ops.put(\"phoneNumber\", persisted.getPhoneNumber());\n\n    Address address = persisted.getAddress();\n\n    ops.put(\"streetAddress\", address.getStreetAddress());\n    ops.put(\"postCode\", address.getPostCode());\n    ops.put(\"postOffice\", address.getPostOffice());\n    ops.put(\"state\", address.getState());\n    ops.put(\"country\", address.getCountry());\n\n    return contactKey;\n}\n```", "```java\n@Override\npublic Contact add(Contact added) {\n  String key = persist(added);\n  redisTemplate.opsForSet().add(\"contacts\", key);\n  return added;\n}\n```", "```java\n@Override\npublic List<Contact> findAll() {\n  List<Contact> contacts = new ArrayList<Contact>();\n\n  Collection<String> keys = redisTemplate.opsForSet().members(\"contacts\");\n\n  for (String key: keys) {\n    Contact contact = buildContact(key);\n    contacts.add(contact);\n  }\n\n  return contacts;\n}\n```", "```java\n@Override\npublic Contact findById(Long id) throws NotFoundException {\n  if (contactDoesNotExist(id)) {\n    throw new NotFoundException(\"No contact found with id: \" + id);\n    }\n  return buildContact(id);\n}\n```", "```java\n@Override\npublic Contact update(Contact updated) throws NotFoundException {\n  if (contactDoesNotExist(updated.getId())) {\n    throw new NotFoundException(\"No contact found with id: \" + updated.getId());\n  }\n  persist(updated);\n  return updated;\n}\n```", "```java\n@Override\npublic Contact deleteById(Long id) throws NotFoundException {\n  Contact deleted = findById(id);\n  String key = buildKey(id);\n\n  redisTemplate.opsForSet().remove(\"contacts\", key);\n\n  BoundHashOperations operations = redisTemplate.boundHashOps(key);\n\n  operations.delete(\"id\");\n  operations.delete(\"emailAddress\");\n  operations.delete(\"firstName\");\n  operations.delete(\"lastName\");\n  operations.delete(\"phoneNumber\");\n\n  operations.delete(\"streetAddress\");\n  operations.delete(\"postCode\");\n  operations.delete(\"postOffice\");\n  operations.delete(\"state\");\n  operations.delete(\"country\");\n\n  return deleted;\n}\n```", "```java\n@Bean\npublic RedisSerializer<Contact> valueSerializer() {\n    return new JacksonJsonRedisSerializer<Contact>(Contact.class);\n}\n```", "```java\n@Bean\npublic RedisTemplate redisTemplate() {\n    RedisTemplate<String, Contact> redisTemplate = new RedisTemplate<String, Contact>();\n    redisTemplate.setConnectionFactory(redisConnectionFactory());\n    redisTemplate.setValueSerializer(valueSerializer());\n\n    return redisTemplate;\n}\n```", "```java\n@Bean\npublic RedisAtomicLong redisAtomicLong() {\n    return new RedisAtomicLong(\"contact\", redisConnectionFactory());\n}\n```", "```java\n@Service\npublic class RedisContactService implements ContactService {\n\n    @Resource\n    private RedisAtomicLong contactIdCounter;\n\n    @Resource\n    private RedisTemplate<String, Contact> redisTemplate;\n\n    //Add methods here\n}\n```", "```java\nprivate String buildKey(Long contactId) {\n    return \"contact\" + contactId;\n}\n```", "```java\nprivate void persist(Contact persisted) {\n  Long id = persisted.getId();\n  if (id == null) {\n      id = contactIdCounter.incrementAndGet();\n      persisted.setId(id);\n    }\n  String key = buildKey(persisted.getId());\n  redisTemplate.opsForValue().set(key, persisted);\n}\n```", "```java\n@Override\npublic Contact add(Contact added) {\n    persist(added);\n    redisTemplate.opsForSet().add(\"contacts\", added);\n    return added;\n}\n```", "```java\n@Override\npublic List<Contact> findAll() {\n    Collection<Contact> contacts = redisTemplate.opsForSet().members(\"contacts\");\n    return new ArrayList<Contact>(contacts);\n}\n```", "```java\n@Override\npublic Contact findById(Long id) throws NotFoundException {\n    String key = buildKey(id);\n    Contact found = redisTemplate.opsForValue().get(key);\n\n    if (found == null) {\n        throw new NotFoundException(\"No contact found with id: {}\" + id);\n    }\n\n    return found;\n}\n```", "```java\n@Override\npublic Contact update(Contact updated) throws NotFoundException {\n    Contact old = findById(updated.getId());\n\n    persist(updated);\n    redisTemplate.opsForSet().remove(\"contacts\", old);\n    redisTemplate.opsForSet().add(\"contacts\", updated);\n\n    return updated;\n}\n```", "```java\n@Override\npublic Contact deleteById(Long id) throws NotFoundException {\n    Contact deleted = findById(id);\n\n    String key = buildKey(id);\n    redisTemplate.opsForSet().remove(\"contacts\", deleted);\n    redisTemplate.opsForValue().set(key, null);\n\n    return deleted;\n}\n```", "```java\npublic class ContactMessageListener implements MessageListener {\n\n    private final static Logger LOGGER = LoggerFactory.getLogger(ContactMessageListener.class);\n\n    private RedisSerializer<String> stringSerializer = new StringRedisSerializer();\n\n    @Override\n    public void onMessage(Message message, byte[] pattern) {\n        LOGGER.debug(\"MessageListener - received message: {} on channel: {}\", stringSerializer.deserialize(message.getBody()), stringSerializer.deserialize(message.getChannel()));\n    }\n}\n```", "```java\npublic class ContactPOJOMessageListener {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(ContactPOJOMessageListener.class);\n\n    public void handleMessage(Contact contact, String channel) {\n        LOGGER.debug(\"Received contact: {} on channel: {}\", contact, channel);\n    }\n}\n```", "```java\n@Bean\npublic ContactMessageListener contactMessageListener() {\n    return new ContactMessageListener();\n}\n\n@Bean\npublic ContactPOJOMessageListener contactPOJOMessageListener() {\n    return new ContactPOJOMessageListener();\n}\n```", "```java\n@Bean\npublic MessageListenerAdapter messageListenerAdapter() {\n    MessageListenerAdapter adapter = new MessageListenerAdapter(contactPOJOMessageListener());\n    adapter.setSerializer(contactSerializer());\n    return adapter;\n}\n```", "```java\n@Bean\npublic RedisMessageListenerContainer redisMessageListenerContainer() {\n    RedisMessageListenerContainer container = new RedisMessageListenerContainer();\n\n    container.setConnectionFactory(redisConnectionFactory());\n    container.addMessageListener(messageListenerAdapter(), \n    Arrays.asList(\n            new ChannelTopic(\"newContacts\"),\n            new ChannelTopic(\"updatedContacts\"),\n            new ChannelTopic(\"removedContacts\")\n    ));\n    container.addMessageListener(contactMessageListener(), \n    Arrays.asList(\n            new ChannelTopic(\"newContacts\"),\n            new ChannelTopic(\"updatedContacts\"),\n            new ChannelTopic(\"removedContacts\")\n    ));\n\n    return container;\n}\n```", "```java\n@Override\npublic Contact add(Contact added) {\n    persist(added);\n    redisTemplate.opsForSet().add(\"contacts\", added);\n redisTemplate.convertAndSend(\"newContacts\", added);\n\n    return added;\n}\n```", "```java\n@Override\npublic Contact update(Contact updated) throws NotFoundException {\n    Contact old = findById(updated.getId());\n\n    persist(updated);\n    redisTemplate.opsForSet().remove(\"contacts\", old);\n    redisTemplate.opsForSet().add(\"contacts\", updated);\n redisTemplate.convertAndSend(\"updatedContacts\", updated);\n\n    return updated;\n}\n```", "```java\n@Override\npublic Contact deleteById(Long id) throws NotFoundException {\n    Contact deleted = findById(id);\n\n    String key = buildKey(id);\n\n    redisTemplate.opsForSet().remove(\"contacts\", deleted);\n    redisTemplate.opsForValue().set(key, null);\n redisTemplate.convertAndSend(\"removedContacts\", deleted);\n\n    return deleted;\n}\n```", "```java\nDEBUG - ContactMessageListener     - Received message: {\"id\":9,\"address\":{\"country\":\"\",\"streetAddress\":\"\",\"postCode\":\"\",\"postOffice\":\"\",\"state\":\"\"},\"emailAddress\":\"\",\"firstName\":\"Foo\",\"lastName\":\"Bar\",\"phoneNumber\":\"\"} on channel: newContacts\nDEBUG - ContactPOJOMessageListener - Received contact: com.packtpub.springdata.redis.model.Contact@543d8ee8[id=9,address=com.packtpub.springdata.redis.model.Address@15714c8d[country=,streetAddress=,postCode=,postOffice=,state=],emailAddress=,firstName=Foo,lastName=Bar,phoneNumber=] on channel: null\n```", "```java\n@Configuration\n@ComponentScan(basePackages = {\n        \"com.packtpub.springdata.jpa.controller\",\n        \"com.packtpub.springdata.jpa.service\"\n})\n@EnableCaching\n@EnableTransactionManagement\n@EnableWebMvc\n@EnableJpaRepositories(\"com.packtpub.springdata.jpa.repository\")\n@PropertySource(\"classpath:application.properties\")\npublic class ApplicationContext extends WebMvcConfigurerAdapter {\n\n    @Resource\n    private Environment env;\n\n    //Bean declarations\n}\n```", "```java\nredis.host = localhost\nredis.port = 6379\n```", "```java\n@Bean\npublic RedisConnectionFactory redisConnectionFactory() {\n    JedisConnectionFactory cf = new JedisConnectionFactory();\n\n    cf.setHostName(env.getRequiredProperty(\"redis.host\")); cf.setPort(Integer.parseInt(env.getRequiredProperty(\"redis.port\")));\n\n    return cf;\n}\n```", "```java\n@Bean\npublic RedisTemplate redisTemplate() {\n    RedisTemplate<String, String> redisTemplate = new RedisTemplate<String, String>();\n    redisTemplate.setConnectionFactory(redisConnectionFactory());\n\n    return redisTemplate;\n}\n```", "```java\n@Bean\npublic RedisCacheManager cacheManager() {\n    return new RedisCacheManager(redisTemplate());\n}\n```", "```java\n@Cacheable(\"contacts\")\n@Transactional(readOnly = true)\n@Override\npublic Contact findById(Long id) throws NotFoundException {\n    //Implementation remains unchanged.\n}\n```", "```java\n@CachePut(value = \"contacts\", key=\"#p0.id\")\n@Transactional(rollbackFor = NotFoundException.class)\n@Override\npublic Contact update(ContactDTO updated) throws NotFoundException {\n    //Implementation remains unchanged.\n}\n```", "```java\n@CacheEvict(\"contacts\")\n@Transactional(rollbackFor = NotFoundException.class)\n@Override\npublic Contact deleteById(Long id) throws NotFoundException {\n  //Implementation remains unchanged\n}\n```", "```java\nDEBUG - RedisConnectionUtils       - Opening Redis Connection\nDEBUG - RedisConnectionUtils       - Closing Redis Connection\n```"]