["```java\n//Obtain an instance of the entity manager\nEntityManager em = ...\n\n//Build the SQL query string with a query parameter\nString getByFirstName=\"SELECT * FROM contacts c WHERE c.first_name = ?1\";\n\n//Create the Query instance\nQuery query = em.createNativeQuery(getByFirstName, Contact.class);\n\n//Set the value of the query parameter\nquery.setParameter(1, \"John\");\n\n//Get the list of results\nList contacts = query.getResultList();\n```", "```java\n//Obtain an instance of the entity manager\nEntityManager em = ...\n\n//Build the JPQL query string with named parameter\nString getByFirstName=\"SELECT c FROM Contact c WHERE c.firstName = :firstName\";\n\n//Create the Query instance\nTypedQuery<Contact> query = em.createQuery(getByFirstName, Contact.class);\n\n//Set the value of the named parameter\nquery.setParameter(\"firstName\", \"John\");\n\n//Get the list of results\nList<Contact> contacts = query.getResultList();\n```", "```java\n//Obtain an instance of entity manager\nEntityManager em = ...\n//Get criteria builder\nCriteriaBuilder cb = em.getCriteriaBuilder();\n\n//Create criteria query\nCriteriaQuery<Contact> query = cb.greateQuery(Contact.class);\n\n//Create query root\nRoot<Contact> root = query.from(Contact.class);\n\n//Create condition for the first name by using static meta\n//model. You can also use \"firstName\" here.\nPredicate firstNameIs = cb.equal(root.get(Contact_.firstName, \"John\");\n\n//Specify the where condition of query\nquery.where(firstNameIs);\n\n//Create typed query and get results\nTypedQuery<Contact> q = em.createQuery(query);\nList<Contact> contacts = q.getResultList();\n```"]