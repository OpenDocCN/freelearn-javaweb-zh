["```java\npublic interface PaginatingContactRepository {\n\n    public List<Contact> findAllForPage(int pageIndex, int pageSize);\n\n    public List<Contact> findContactsForPage(String searchTerm, int pageIndex, int pageSize);\n}\n```", "```java\npublic class ContactRepositoryImpl implements PaginatingContactRepository {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n    private QueryDslJpaRepository<Contact, Long> repository;\n\n    //Add methods here\n\n    @PostConstruct\n    public void init() {\n        JpaEntityInformation<Contact, Long> contactEntityInfo = new JpaMetamodelEntityInformation<Contact, Long>(Contact.class, entityManager.getMetamodel());\n        repository = new QueryDslJpaRepository<Contact, Long>(contactEntityInfo, entityManager);\n    }\n}\n```", "```java\nprivate Pageable buildPageSpecification(int pageIndex, int pageSize) {\n  return new PageRequest(pageIndex, pageSize, sortByLastNameAndFirstNameAsc());\n}\n\nprivate Sort sortByLastNameAndFirstNameAsc() {\n  return new Sort(new Sort.Order(Sort.Direction.ASC, \"lastName\"),\n        new Sort.Order(Sort.Direction.ASC, \"firstName\")\n  );\n}\n```", "```java\n@Override\npublic List<Contact> findAllForPage(int pageIndex, int pageSize) {\n    Pageable pageSpec = buildPageSpecification(pageIndex, pageSize);\n    Page wanted = repository.findAll(pageSpec);\n\n    return wanted.getContent();\n}\n```", "```java\n@Override\npublic List<Contact> findContactsForPage(String searchTerm, int pageIndex, int pageSize) {\n    Predicate searchCondition = firstOrLastNameStartsWith(searchTerm);\n    Pageable pageSpec = buildPageSpecification(pageIndex, pageSize);\n    Page wanted = repository.findAll(searchCondition, pageSpec);\n\n    return wanted.getContent();\n}\n```", "```java\npublic interface ContactRepository extends JpaRepository<Contact, Long>, PaginatingContactRepository {\n}\n```", "```java\n@Transactional(readOnly = true)\n@Override\npublic List<Contact> findAllForPage(int pageIndex, int pageSize) {\n    return repository.findAllForPage(pageIndex, pageSize);\n}\n\n@Transactional(readOnly = true)\n@Override\npublic List<Contact> search(SearchDTO dto) {\n    return repository.findContactsForPage(dto.getSearchTerm(), dto.getPageIndex(), dto.getPageSize());\n}\n\n```", "```java\n@NoRepositoryBean\npublic interface BaseRepository<T, ID extends Serializable> extends JpaRepository<T, ID>, QueryDslPredicateExecutor<T> {\n\n    public T deleteById(ID id) throws NotFoundException;\n}\n```", "```java\npublic class GenericBaseRepository<T, ID extends Serializable> extends QueryDslJpaRepository<T, ID> implements BaseRepository<T, ID> {\n\n    public GenericBaseRepository(JpaEntityInformation<T, ID> entityMetadata, EntityManager entityManager) {\n        super(entityMetadata, entityManager);\n    }\n\n    @Override\n    public T deleteById(ID id) throws NotFoundException {\n        T deleted = findOne(id);\n        if (deleted == null) {\n            throw new NotFoundException();\n        }\n\n        delete(deleted);\n        return deleted;\n    }\n}\n```", "```java\npublic class BaseRepositoryFactoryBean <R extends JpaRepository<T, I>, T, I extends Serializable> extends JpaRepositoryFactoryBean<R, T, I> {\n\n}\n```", "```java\nprotected static class BaseRepositoryFactory<T, I extends Serializable> extends JpaRepositoryFactory {\n\n  private EntityManager entityManager;\n\n    public BaseRepositoryFactory(EntityManager entityManager) {\n      super(entityManager);\n        this.entityManager = entityManager;\n  }\n\n    @Override\n    protected Object getTargetRepository(RepositoryMetadata metadata) {\n      return new GenericBaseRepository<T, I>((JpaEntityInformation<T,I>) getEntityInformation(metadata.getDomainType()), entityManager);\n  }\n\n    @Override\n    protected Class<?> getRepositoryBaseClass(RepositoryMetadata metadata) {\n        return GenericBaseRepository.class;\n  }\n}\n```", "```java\n@Override\nprotected RepositoryFactorySupport createRepositoryFactory(EntityManager entityManager) {\n    return new BaseRepositoryFactory(entityManager);\n}\n```", "```java\n@EnableJpaRepositories(basePackages = {\"com.packtpub.springdata.jpa.repository\"}, repositoryFactoryBeanClass = BaseRepositoryFactoryBean.class)\n```", "```java\npublic interface ContactRepository extends BaseRepository<Contact, Long> {\n}\n```", "```java\n@Transactional(rollbackFor = NotFoundException.class)\n@Override\npublic Contact deleteById(Long id) throws NotFoundException {\n    return repository.deleteById(id);\n}\n```"]