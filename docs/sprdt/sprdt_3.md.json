["```java\npublic List<Contact> search(String searchTerm);\n```", "```java\npublic List<Contact> findByFirstNameStartingWithOrLastNameStartingWith(String firstName, String lastName);\n```", "```java\n@Transactional(readOnly = true)\n@Override\npublic List<Contact> search(String searchTerm) {\n  return repository.findByFirstNameStartingWithOrLastNameStartingWith(searchTerm, searchTerm);\n}\n```", "```java\n@Entity\n@NamedQueries({\n@NamedQuery(name = \"Contact.findContacts\",\n        query = \"SELECT c FROM Contact c WHERE LOWER(c.firstName) LIKE LOWER(:searchTerm) OR LOWER(c.lastName) LIKE LOWER(:searchTerm)\")\n})\n@Table(name = \"contacts\")\npublic class Contact\n```", "```java\n@Entity\n@NamedNativeQueries({\n@NamedNativeQuery(name = \"Contact.findContacts\",\n        query = \"SELECT * FROM contacts c WHERE LOWER(c.first_name) LIKE LOWER(:searchTerm) OR LOWER(c.last_name) LIKE LOWER(:searchTerm)\",\n        resultClass = Contact.class)\n})\n@Table(name = \"contacts\")\npublic class Contact\n```", "```java\npublic List<Contact> findContacts(@Param(\"searchTerm\") String searchTerm);\n```", "```java\n@Transactional(readOnly = true)\n@Override\npublic List<Contact> search(String searchTerm) {\nString likePattern = buildLikePattern(searchTerm);\n   return repository.findContacts(likePattern);\n}\n\nprivate String buildLikePattern(String searchTerm) {\n   return searchTerm + \"%\";\n}\n```", "```java\n@Query(\"SELECT c FROM Contact c WHERE LOWER(c.firstName) LIKE LOWER(:searchTerm) OR LOWER(c.lastName) LIKE LOWER(:searchTerm)\")\npublic Page<Contact> findContacts(@Param(\"searchTerm\") String searchTerm);\n```", "```java\n@Query(value = \"SELECT * FROM contacts c WHERE LOWER(c.first_name) LIKE LOWER(:searchTerm) OR LOWER(c.last_name) LIKE LOWER(:searchTerm), nativeQuery = true)\npublic List<Contact> findContacts(@Param(\"searchTerm\") String searchTerm);\n```", "```java\n@Transactional(readOnly = true)\n@Override\npublic List<Contact> search(String searchTerm) {\n   String likePattern = buildLikePattern(searchTerm);\n   return repository.findContacts(likePattern);\n}\n\nprivate String buildLikePattern(String searchTerm) {\n   return searchTerm + \"%\";\n}\n```", "```java\npublic interface ContactRepository extends JpaRepository<Contact, Long>, JpaSpecificationExecutor<Contact> {\n\n}\n```", "```java\n@StaticMetamodel(Contact.class)\npublic class Contact_ {\n    public static volatile SingularAttribute<Contact, String> firstName;\n    public static volatile SingularAttribute<Contact, String> lastName;\n}\n```", "```java\npublic class ContactSpecifications {\n\n    public static Specification<Contact> firstOrLastNameStartsWith(final String searchTerm) {\n        return new Specification<Contact>() {\n        //Creates the search criteria\n        @Override\n        public Predicate toPredicate(Root<Contact> root, CriteriaQuery<?> criteriaQuery, cb cb) {\n            String likePattern = getLikePattern(searchTerm);\n            return cb.or(\n            //First name starts with given search term\n            cb.like(cb.lower(root.<String>get(Contact_.firstName)), likePattern),\n            //Last name starts with the given search term\n\n            cb.like(cb.lower(root.<String>get(Contact_.lastName)), likePattern)\n                );\n            }\n\n      private String getLikePattern(final String searchTerm) {\n          return searchTerm.toLowerCase() + \"%\";\n            }\n        };\n    }\n}\n```", "```java\n@Transactional(readOnly = true)\n@Override\npublic List<Contact> search(String searchTerm) {\nSpecification<Contact> contactSpec = firstOrLastNameStartsWith(searchTerm);\n    return repository.findAll(contactSpec);\n}\n```", "```java\n<dependency>\n  <groupId>com.mysema.querydsl</groupId>\n  <artifactId>querydsl-core</artifactId>\n  <version>2.8.0<version>\n</dependency>\n<dependency>\n  <groupId>com.mysema.querydsl</groupId>\n  <artifactId>querydsl-apt</artifactId>\n  <version>2.8.0</version>\n</dependency>\n<dependency>\n  <groupId>com.mysema.querydsl</groupId>\n  <artifactId>querydsl-jpa</artifactId>\n  <version>2.8.0</version>\n</dependency>\n```", "```java\n<plugin>\n  <groupId>com.mysema.maven</groupId>\n    <artifactId>maven-apt-plugin</artifactId>\n  <version>1.0.4</version>\n  <executions>\n      <execution>\n          <phase>generate-sources</phase>\n      <goals>\n        <goal>process</goal>\n      </goals>\n      <configuration>\n        <outputDirectory>target/generated-sources</outputDirectory>\n  <processor>com.mysema.query.apt.jpa.JPAAnnotationProcessor</processor>\n      </configuration>\n    </execution>\n  </executions>\n</plugin>\n```", "```java\npublic interface ContactRepository extends JpaRepository<Contact, Long>, QueryDslPredicateExecutor<Contact> {\n}\n```", "```java\npublic class ContactPredicates {\n\n    public static Predicate firstOrLastNameStartsWith(final String searchTerm) {\n        QContact contact = QContact.contact;\n        return contact.firstName.startsWithIgnoreCase(searchTerm)\n                .or(contact.lastName.startsWithIgnoreCase(searchTerm));\n    }\n}\n```", "```java\n@Transactional(readOnly = true)\n@Override\npublic List<Contact> search(String searchTerm) {\n  Predicate contactPredicate = firstOrLastNameStartsWith(searchTerm);\n\n  Iterable<Contact> contacts = repository.findAll(contactPredicate);\n  List<Contact> contactList = new ArrayList<Contact>();\n  CollectionUtils.addAll(contactList, contacts.iterator());\n\n  return contactList;\n}\n```", "```java\npublic List<Contact> findByFirstNameStartingWithOrLastNameStartingWithOrderByLastNameAscFirstNameAsc(String firstName, String lastName);\n```", "```java\n@Transactional(readOnly = true)\n@Override\npublic List<Contact> search(String searchTerm) {\n    return repository.findByFirstNameStartingWithOrLastNameStartingWithOrderByLastNameAscFirstNameAsc(searchTerm, searchTerm);\n}\n```", "```java\nSELECT c FROM Contact c WHERE LOWER(c.firstName) LIKE LOWER(:searchTerm) OR LOWER(c.lastName) LIKE LOWER(:searchTerm) ORDER BY c.lastName ASC, c.firstName ASC\n```", "```java\nSELECT * FROM contacts c WHERE LOWER(c.first_name) LIKE LOWER(:searchTerm) OR LOWER(c.last_name) LIKE LOWER(:searchTerm) ORDER BY c.last_name ASC, c.first_name ASC\n```", "```java\nprivate Sort sortByLastNameAndFirstNameAsc() {\n  return new Sort(new Sort.Order(Sort.Direction.ASC, \"lastName\"),\n        new Sort.Order(Sort.Direction.ASC, \"firstName\")\n    );\n}\n```", "```java\n@Transactional(readOnly = true)\n@Override\npublic List<Contact> findAll() {\n  Sort sortSpec = sortByLastNameAndFirstNameAsc();\n  return repository.findAll(sortSpec);\n}\n```", "```java\npublic Page<Contact> findByFirstNameStartingWithOrLastNameStartingWith(String firstName, String lastName, Sort sort);\n```", "```java\n@Transactional(readOnly = true)\n@Override\npublic List<Contact> search(String searchTerm) {\n  Sort sortSpec = sortByLastNameAndFirstNameAsc();\n  return repository.findByFirstNameStartingWithOrLastNameStartingWith(searchTerm, searchTerm, sortSpec);\n}\n```", "```java\n@Query(\"SELECT c FROM Contact c WHERE LOWER(c.firstName) LIKE LOWER(:searchTerm) OR LOWER(c.lastName) LIKE LOWER(:searchTerm)\")\npublic Page<Contact> findContacts(@Param(\"searchTerm\") String searchTerm, Sort sort);\n```", "```java\n@Transactional(readOnly = true)\n@Override\npublic List<Contact> search(String searchTerm) {\n    String likePattern = buildLikePattern(dto.getSearchTerm());\n    Sort sortSpec = sortByLastNameAndFirstNameAsc();\n    return repository.findContacts(likePattern, sortSpec);\n}\n```", "```java\n@Transactional(readOnly = true)\n@Override\npublic List<Contact> search(String searchTerm) {\n    Specification<Contact> contactSpec = firstOrLastNameStartsWith(searchTerm);\n    Sort sortSpec = sortByLastNameAndFirstNameAsc();\n    return repository.findAll(contactSpec, sortSpec);\n}\n```", "```java\nprivate OrderSpecifier[] sortByLastNameAndFirstNameAsc() {\n  OrderSpecifier[] orders = {QContact.contact.lastName.asc(), QContact.contact.firstName.asc()};\n  return orders;\n}\n```", "```java\n@Transactional(readOnly = true)\n@Override\npublic List<Contact> search(String searchTerm) {\n  Predicate contactPredicate = firstOrLastNameStartsWith(searchTerm);\n  OrderSpecifier[] orderSpecs = sortByLastNameAndFirstNameAsc();\n\n  Iterable<Contact> contacts = repository.findAll(contactPredicate, orderSpecs);\n  List<Contact> contactList = new ArrayList<Contact>();\n  CollectionUtils.addAll(contactList, contacts.iterator());\n\n  return contactList;\n}\n```", "```java\npublic class SearchDTO {\n\n    private int pageIndex;\n    private int pageSize;\n    private String searchTerm;\n\n   //Getters and Setters\n}\n```", "```java\npublic List<Contact> findAllForPage(int pageIndex, int pageSize);\n\npublic List<Contact> search(SearchDTO dto);\n```", "```java\nprivate Pageable buildPageSpecification(int pageIndex, int pageSize) {\n  Sort sortSpec = sortByLastNameAndFirstNameAsc();\n  return new PageRequest(pageIndex, pageSize, sortSpec);\n}\n\nprivate Sort sortByLastNameAndFirstNameAsc() {\n  return new Sort(new Sort.Order(Sort.Direction.ASC, \"lastName\"),\n        new Sort.Order(Sort.Direction.ASC, \"firstName\")\n    );\n}\n```", "```java\n@Transactional(readOnly = true)\n@Override\npublic List<Contact> findAllForPage(int pageIndex, int pageSize) {\n  Pageable pageSpecification = buildPageSpecification(pageIndex, pageSize); \n\n  Page<Contact> page = repository.findAll(pageSpecification);\n\n  return page.getContent();\n}\n```", "```java\npublic List<Contact> findByFirstNameStartingWithOrLastNameStartingWith(String firstName, String lastName, Pageable page);\n```", "```java\n@Transactional(readOnly = true)\n@Override\npublic List<Contact> search(SearchDTO dto) {\n    Pageable pageSpecification = buildPageSpecification(dto.getPageIndex(), dto.getPageSize());\n\n    return repository.findByFirstNameStartingWithOrLastNameStartingWith(dto.getSearchTerm(), dto.getSearchTerm(), pageSpecification);\n}\n```", "```java\npublic List<Contact> findContacts(@Param(\"searchTerm\") String searchTerm, Pageable page);\n```", "```java\n@Transactional(readOnly = true)\n@Override\npublic List<Contact> search(SearchDTO dto) {\n    String likePattern = buildLikePattern(dto.getSearchTerm());\n\n    Pageable pageSpecification = buildPageSpecification(dto.getPageIndex(), dto.getPageSize());\n\n    return repository.findContacts(likePattern, pageSpecification);\n}\n```", "```java\n@Query(\"SELECT c FROM Contact c WHERE LOWER(c.firstName) LIKE LOWER(:searchTerm) OR LOWER(c.lastName) LIKE LOWER(:searchTerm)\")\npublic List<Contact> findContacts(@Param(\"searchTerm\") String searchTerm, Pageable page);\n```", "```java\n@Transactional(readOnly = true)\n@Override\npublic List<Contact> search(SearchDTO dto) {\n    String likePattern = buildLikePattern(dto.getSearchTerm());\n\n    Pageable pageSpecification = buildPageSpecification(dto.getPageIndex(), dto.getPageSize());\n\n    return repository.findContacts(likePattern, pageSpecification);\n}\n```", "```java\n@Transactional(readOnly = true)\n@Override\npublic List<Contact> search(SearchDTO dto) {\n    Specification<Contact> contactSpec = firstOrLastNameStartsWith(dto.getSearchTerm());\n    Pageable pageSpecification = buildPageSpecification(dto.getPageIndex(), dto.getPageSize());\n\n    Page<Contact> page = repository.findAll(contactSpec, pageSpecification);\n\n    return page.getContent();\n}\n```", "```java\n@Transactional(readOnly = true)\n@Override\npublic List<Contact> search(SearchDTO dto) {\n    Predicate contactPredicate = firstOrLastNameStartsWith(dto.getSearchTerm());\n    Pageable pageSpecification = buildPageSpecification(dto.getPageIndex(), dto.getPageSize());\n\n    Page<Contact> page = repository.findAll(contactPredicate, pageSpecification);\n\n    return page.getContent();\n}\n```"]