["```java\n    public class BusinessServiceImpl { \n      public long calculateSum(User user) { \n        DataServiceImpl dataService = new DataServiceImpl(); \n        long sum = 0; \n        for (Data data : dataService.retrieveData(user)) { \n          sum += data.getValue(); \n        } \n        return sum; \n      }\n    }\n```", "```java\n    DataServiceImpl dataService = new DataServiceImpl();\n```", "```java\n    public interface DataService { \n     List<Data> retrieveData(User user); \n    }\n```", "```java\n    DataService dataService = new DataServiceImpl();\n```", "```java\n    public class BusinessServiceImpl { \n      private DataService dataService; \n      public long calculateSum(User user) { \n        long sum = 0; \n        for (Data data : dataService.retrieveData(user)) { \n          sum += data.getValue(); \n         } \n        return sum; \n       } \n      public void setDataService(DataService dataService) { \n        this.dataService = dataService; \n       } \n    }\n```", "```java\n    public interface BusinessService { \n      long calculateSum(User user); \n    } \n    public class BusinessServiceImpl implements BusinessService { \n      //.... Rest of code.. \n    }\n```", "```java\n    @Repository \n    public class DataServiceImpl implements DataService \n    @Service \n    public class BusinessServiceImpl implements BusinessService\n```", "```java\n    public class BusinessServiceImpl { \n      @Autowired \n      private DataService dataService;\n```", "```java\n    @Repository \n    public class DataServiceImpl implements DataService { \n      public List<Data> retrieveData(User user) { \n        return Arrays.asList(new Data(10), new Data(20)); \n      } \n    }\n```", "```java\n    @Configuration \n    class SpringContext { \n    }\n```", "```java\n    @Configuration \n    @ComponentScan(basePackages = { \"com.mastering.spring\" }) \n     class SpringContext { \n     }\n```", "```java\n    public class LaunchJavaContext { \n      private static final User DUMMY_USER = new User(\"dummy\"); \n      public static Logger logger =  \n      Logger.getLogger(LaunchJavaContext.class); \n      public static void main(String[] args) { \n        ApplicationContext context = new \n        AnnotationConfigApplicationContext( \n        SpringContext.class); \n        BusinessService service = \n        context.getBean(BusinessService.class); \n        logger.debug(service.calculateSum(DUMMY_USER)); \n      } \n     }\n```", "```java\n    ApplicationContext context = new \n    AnnotationConfigApplicationContext( \n      SpringContext.class);\n```", "```java\n    BusinessService service = context.getBean(BusinessService.class );\n```", "```java\nLooking for matching resources in directory tree [/target/classes/com/mastering/spring]\n\nIdentified candidate component class: file [/in28Minutes/Workspaces/SpringTutorial/mastering-spring-example-1/target/classes/com/mastering/spring/business/BusinessServiceImpl.class]\n\nIdentified candidate component class: file [/in28Minutes/Workspaces/SpringTutorial/mastering-spring-example-1/target/classes/com/mastering/spring/data/DataServiceImpl.class]\n\ndefining beans [******OTHERS*****,businessServiceImpl,dataServiceImpl];\n```", "```java\nCreating instance of bean 'businessServiceImpl'Registered injected element on class [com.mastering.spring.business.BusinessServiceImpl]: AutowiredFieldElement for private com.mastering.spring.data.DataService com.mastering.spring.business.BusinessServiceImpl.dataService \n\nProcessing injected element of bean 'businessServiceImpl': AutowiredFieldElement for private com.mastering.spring.data.DataService com.mastering.spring.business.BusinessServiceImpl.dataService\n```", "```java\nCreating instance of bean 'dataServiceImpl'\nFinished creating instance of bean 'dataServiceImpl'\n```", "```java\nAutowiring by type from bean name 'businessServiceImpl' to bean named 'dataServiceImpl'\nFinished creating instance of bean 'businessServiceImpl'\n```", "```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> \n    <beans>  <!-Namespace definitions removed--> \n      <context:component-scan base-package =\"com.mastering.spring\"/> \n    </beans>\n```", "```java\n    public class LaunchXmlContext { \n      private static final User DUMMY_USER = new User(\"dummy\"); \n      public static Logger logger = \n      Logger.getLogger(LaunchJavaContext.class); \n      public static void main(String[] args) { \n         ApplicationContext context = new\n         ClassPathXmlApplicationContext( \n         \"BusinessApplicationContext.xml\"); \n         BusinessService service =\n         context.getBean(BusinessService.class); \n         logger.debug(service.calculateSum(DUMMY_USER)); \n        } \n     }\n```", "```java\n    ApplicationContext context = new \n    ClassPathXmlApplicationContext (SpringContext.class);\n```", "```java\n    @RunWith(SpringJUnit4ClassRunner.class)\n```", "```java\n    @ContextConfiguration(locations = {  \n    \"/BusinessApplicationContext.xml\" })\n```", "```java\n    @Autowired \n    private BusinessService service;\n```", "```java\n    long sum = service.calculateSum(DUMMY_USER); \n    assertEquals(30, sum);\n```", "```java\n    @RunWith(SpringJUnit4ClassRunner.class) \n    @ContextConfiguration(locations = {\n      \"/BusinessApplicationContext.xml\" }) \n       public class BusinessServiceJavaContextTest { \n       private static final User DUMMY_USER = new User(\"dummy\"); \n       @Autowired \n       private BusinessService service; \n\n       @Test \n       public void testCalculateSum() { \n         long sum = service.calculateSum(DUMMY_USER); \n         assertEquals(30, sum); \n        } \n     }\n```", "```java\n    @Mock \n    private DataService dataService;\n```", "```java\n    @InjectMocks \n    private BusinessService service = \n    new BusinessServiceImpl();\n```", "```java\n    BDDMockito.given(dataService.retrieveData(\n      Matchers.any(User.class))) \n      .willReturn(Arrays.asList(new Data(10),  \n      new Data(15), new Data(25)));\n```", "```java\n    @RunWith(MockitoJUnitRunner.class)\n```", "```java\n    @RunWith(MockitoJUnitRunner.class) \n    public class BusinessServiceMockitoTest { \n      private static final User DUMMY_USER = new User(\"dummy\");\n       @Mock \n      private DataService dataService; \n      @InjectMocks \n      private BusinessService service =  \n      new BusinessServiceImpl(); \n      @Test \n      public void testCalculateSum() { \n        BDDMockito.given(dataService.retrieveData( \n        Matchers.any(User.class))) \n        .willReturn( \n           Arrays.asList(new Data(10),  \n           new Data(15), new Data(25))); \n           long sum = service.calculateSum(DUMMY_USER); \n           assertEquals(10 + 15 + 25, sum); \n       } \n     }\n```", "```java\n    public class BusinessServiceImpl { \n      private DataService dataService; \n      @Autowired \n      public void setDataService(DataService dataService) { \n        this.dataService = dataService; \n      } \n    }\n```", "```java\n    public class BusinessServiceImpl { \n      @Autowired \n      private DataService dataService; \n    }\n```", "```java\n    public class BusinessServiceImpl { \n      private DataService dataService; \n      @Autowired \n      public BusinessServiceImpl(DataService dataService) { \n        super(); \n        this.dataService = dataService; \n      } \n    }\n```", "```java\n    Autowiring by type from bean name 'businessServiceImpl' via \n    constructor to bean named 'dataServiceImpl'\n```", "```java\n    @Service \n    @Scope(\"singleton\") \n    public class BusinessServiceImpl implements BusinessService\n```", "```java\n    interface SortingAlgorithm { \n    } \n    @Component \n    class MergeSort implements SortingAlgorithm { \n      // Class code here \n    } \n   @Component \n   @Primary \n   class QuickSort implements SortingAlgorithm { \n     // Class code here \n   }\n```", "```java\n    @Component \n    @Qualifier(\"mergesort\") \n    class MergeSort implements SortingAlgorithm { \n      // Class code here \n    } \n    @Component \n    class QuickSort implements SortingAlgorithm { \n     // Class code here \n    } \n    @Component \n    class SomeService { \n      @Autowired \n      @Qualifier(\"mergesort\") \n      SortingAlgorithm algorithm; \n    }\n```", "```java\n    <dependency> \n      <groupId>javax.inject</groupId> \n      <artifactId>javax.inject</artifactId> \n      <version>1</version> \n    </dependency>\n```", "```java\n    @Named //Instead of @Repository \n    public class DataServiceImpl implements DataService \n    @Named //Instead of @Service \n    public class BusinessServiceImpl { \n       @Inject //Instead of @Autowired \n       private DataService dataService;\n```"]