["```java\n    <dependency> \n      <groupId>org.springframework</groupId> \n      <artifactId>spring-webmvc</artifactId> \n    </dependency>\n```", "```java\n    <servlet> \n      <servlet-name>spring-mvc-dispatcher-servlet</servlet-name>    \n      <servlet-class> \n        org.springframework.web.servlet.DispatcherServlet \n      </servlet-class> \n      <init-param> \n        <param-name>contextConfigLocation</param-name> \n        <param-value>/WEB-INF/user-web-context.xml</param-value> \n      </init-param> \n        <load-on-startup>1</load-on-startup> \n    </servlet> \n    <servlet-mapping> \n      <servlet-name>spring-mvc-dispatcher-servlet</servlet-name> \n      <url-pattern>/</url-pattern> \n    </servlet-mapping>\n```", "```java\n    <beans > <!-Schema Definition removed --> \n       <context:component-scan  \n       base-package=\"com.mastering.spring.springmvc\"  /> \n       <mvc:annotation-driven /> \n    </beans>\n```", "```java\n    @Controller \n    public class BasicController { \n      @RequestMapping(value = \"/welcome\") \n      @ResponseBody \n    public String welcome() { \n      return \"Welcome to Spring MVC\"; \n     } \n   }\n```", "```java\n    <dependency> \n      <groupId>org.springframework</groupId> \n      <artifactId>spring-test</artifactId> \n      <scope>test</scope> \n    </dependency>\n```", "```java\n    public class BasicControllerTest { \n      private MockMvc mockMvc; \n      @Before \n      public void setup() { \n        this.mockMvc = MockMvcBuilders.standaloneSetup( \n        new BasicController()) \n        .build(); \n      } \n     }\n```", "```java\n    @Test \n    public void basicTest() throws Exception { \n      this.mockMvc \n      .perform( \n      get(\"/welcome\") \n      .accept(MediaType.parseMediaType \n      (\"application/html;charset=UTF-8\"))) \n      .andExpect(status().isOk()) \n      .andExpect( content().contentType \n      (\"application/html;charset=UTF-8\")) \n      .andExpect(content(). \n       string(\"Welcome to Spring MVC\")); \n    }\n```", "```java\n    @Controller \n    public class BasicViewController { \n      @RequestMapping(value = \"/welcome-view\") \n      public String welcome() { \n        return \"welcome\"; \n       } \n    }\n```", "```java\n    <html> \n      <head> \n        <title>Welcome</title> \n      </head> \n      <body> \n        <p>Welcome! This is coming from a view - a JSP</p> \n      </body> \n    </html>\n```", "```java\n    <bean class=\"org.springframework.web.\n    servlet.view.InternalResourceViewResolver\"> \n     <property name=\"prefix\"> \n       <value>/WEB-INF/views/</value> \n     </property> \n     <property name=\"suffix\"> \n       <value>.jsp</value> \n     </property> \n    </bean>\n```", "```java\n    public class BasicViewControllerTest { \n      private MockMvc mockMvc; \n      @Before \n      public void setup() { \n        this.mockMvc = MockMvcBuilders.standaloneSetup \n        (new BasicViewController()) \n        .setViewResolvers(viewResolver()).build(); \n       } \n      private ViewResolver viewResolver() { \n        InternalResourceViewResolver viewResolver =  \n        new InternalResourceViewResolver(); \n        viewResolver.setViewClass(JstlView.class); \n        viewResolver.setPrefix(\"/WEB-INF/jsp/\"); \n        viewResolver.setSuffix(\".jsp\"); \n       return viewResolver; \n      } \n    }\n```", "```java\n    @Test \n    public void testWelcomeView() throws Exception { \n      this.mockMvc \n      .perform(get(\"/welcome-view\") \n      .accept(MediaType.parseMediaType( \n      \"application/html;charset=UTF-8\"))) \n      .andExpect(view().name(\"welcome\")); \n    }\n```", "```java\n    @Controller \n    public class BasicModelMapController { \n      @RequestMapping(value = \"/welcome-model-map\") \n      public String welcome(ModelMap model) { \n        model.put(\"name\", \"XYZ\"); \n      return \"welcome-model-map\"; \n     } \n   }\n```", "```java\n    Welcome ${name}! This is coming from a model-map - a JSP\n```", "```java\n    this.mockMvc = MockMvcBuilders.standaloneSetup \n      (new BasicModelMapController()) \n      .setViewResolvers(viewResolver()).build();\n```", "```java\n    @Test \n    public void basicTest() throws Exception { \n      this.mockMvc \n      .perform( \n      get(\"/welcome-model-map\") \n      .accept(MediaType.parseMediaType \n      (\"application/html;charset=UTF-8\"))) \n      .andExpect(model().attribute(\"name\", \"XYZ\")) \n      .andExpect(view().name(\"welcome-model-map\")); \n    }\n```", "```java\n    @Controller \n    public class BasicModelViewController { \n     @RequestMapping(value = \"/welcome-model-view\") \n      public ModelAndView welcome(ModelMap model) { \n        model.put(\"name\", \"XYZ\"); \n        return new ModelAndView(\"welcome-model-view\", model); \n      } \n   }\n```", "```java\n    Welcome ${name}! This is coming from a model-view - a JSP\n```", "```java\n    public class User { \n      private String guid; \n      private String name; \n      private String userId; \n      private String password; \n      private String password2; \n      //Constructor \n      //Getters and Setters   \n      //toString \n    }\n```", "```java\n    @Controller \n    public class UserController { \n      private Log logger = LogFactory.getLog \n      (UserController.class); \n     }\n```", "```java\n    @RequestMapping(value = \"/create-user\",  \n    method = RequestMethod.GET) \n    public String showCreateUserPage(ModelMap model) { \n      model.addAttribute(\"user\", new User()); \n      return \"user\"; \n   }\n```", "```java\n    <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> \n    <%@ taglib uri=\"http://java.sun.com/jsp/jstl/fmt\" prefix=\"fmt\"%> \n    <%@ taglib uri=\"http://www.springframework.org/tags/form\"  \n      prefix=\"form\"%> \n    <%@ taglib uri=\"http://www.springframework.org/tags\"\n      prefix=\"spring\"%>\n```", "```java\n    <form:form method=\"post\" modelAttribute=\"user\"> \n     <fieldset> \n       <form:label path=\"name\">Name</form:label> \n       <form:input path=\"name\"  \n       type=\"text\" required=\"required\" /> \n     </fieldset> \n   </form:form>\n```", "```java\n    <form:form method=\"post\" modelAttribute=\"user\"> \n    <form:hidden path=\"guid\" /> \n    <fieldset> \n      <form:label path=\"name\">Name</form:label> \n      <form:input path=\"name\"  \n       type=\"text\" required=\"required\" /> \n    </fieldset> \n    <fieldset> \n      <form:label path=\"userId\">User Id</form:label> \n      <form:input path=\"userId\"  \n       type=\"text\" required=\"required\" /> \n    </fieldset> \n    <!-password and password2 fields not shown for brewity--> \n    <input class=\"btn btn-success\" type=\"submit\" value=\"Submit\" /> \n    </form:form>\n```", "```java\n    @RequestMapping(value = \"/create-user\", method = \n    RequestMethod.POST) \n    public String addTodo(User user) { \n      logger.info(\"user details \" + user); \n      return \"redirect:list-users\"; \n    }\n```", "```java\n    @RequestMapping(value = \"/list-users\",  \n    method = RequestMethod.GET) \n    public String showAllUsers() { \n      return \"list-users\"; \n    }\n```", "```java\n    <dependency> \n      <groupId>org.hibernate</groupId> \n      <artifactId>hibernate-validator</artifactId> \n      <version>5.0.2.Final</version> \n    </dependency>\n```", "```java\n   @Size(min = 6, message = \"Enter at least 6 characters\") \n   private String name; \n   @Size(min = 6, message = \"Enter at least 6 characters\") \n   private String userId; \n   @Size(min = 8, message = \"Enter at least 8 characters\") \n   private String password; \n   @Size(min = 8, message = \"Enter at least 8 characters\") \n   private String password2;\n```", "```java\n    @RequestMapping(value = \"/create-user-with-validation\",  \n    method = RequestMethod.POST) \n    public String addTodo(@Valid User user, BindingResult result) { \n      if (result.hasErrors()) { \n        return \"user\"; \n       } \n      logger.info(\"user details \" + user); \n      return \"redirect:list-users\"; \n    }\n```", "```java\n    <fieldset> \n      <form:label path=\"name\">Name</form:label> \n      <form:input path=\"name\" type=\"text\" required=\"required\" /> \n      <form:errors path=\"name\" cssClass=\"text-warning\"/> \n    </fieldset>\n```", "```java\n    @AssertTrue(message = \"Password fields don't match\") \n    private boolean isValid() { \n      return this.password.equals(this.password2); \n    }\n```", "```java\n    this.mockMvc = MockMvcBuilders.standaloneSetup( \n    new UserValidationController()).build();\n```", "```java\n    @Test \n    public void basicTest_WithAllValidationErrors() throws Exception { \n      this.mockMvc \n        .perform( \n           post(\"/create-user-with-validation\") \n           .accept(MediaType.parseMediaType( \n           \"application/html;charset=UTF-8\"))) \n           .andExpect(status().isOk()) \n           .andExpect(model().errorCount(4)) \n           .andExpect(model().attributeHasFieldErrorCode \n           (\"user\", \"name\", \"Size\")); \n    }\n```", "```java\n    @Controller \n    public class UserController { \n      @RequestMapping(value = \"/show-page\") \n      public String showPage() { \n        /* Some code */ \n       } \n    }\n```", "```java\n    @Controller \n    public class UserController { \n      @RequestMapping(value = \"/show-page\" , method = \n      RequestMethod.GET) \n      public String showPage() { \n        /* Some code */ \n       } \n    }\n```", "```java\n    @Controller \n    @RequestMapping(\"/user\") \n    public class UserController { \n      @RequestMapping(value = \"/show-page\" , method =   \n       RequestMethod.GET) \n       public String showPage() { \n         /* Some code */ \n       } \n    }\n```", "```java\n    <bean id=\"jspViewResolver\" class=  \n      \"org.springframework.web.servlet.view.\n      InternalResourceViewResolver\"> \n      <property name=\"viewClass\"  \n        value=\"org.springframework.web.servlet.view.JstlView\"/> \n      <property name=\"prefix\" value=\"/WEB-INF/jsp/\"/> \n      <property name=\"suffix\" value=\".jsp\"/> \n    </bean>\n```", "```java\n    <bean id=\"freemarkerConfig\"\n      class=\"org.springframework.web.servlet.view.\n      freemarker.FreeMarkerConfigurer\"> \n      <property name=\"templateLoaderPath\" value=\"/WEB-\n      INF/freemarker/\"/> \n    </bean>\n```", "```java\n    <bean id=\"freemarkerViewResolver\"  \n     class=\"org.springframework.web.servlet.view.\n     freemarker.FreeMarkerViewResolver\"> \n       <property name=\"cache\" value=\"true\"/> \n       <property name=\"prefix\" value=\"\"/> \n       <property name=\"suffix\" value=\".ftl\"/> \n    </bean>\n```", "```java\n    public class HandlerTimeLoggingInterceptor extends \n    HandlerInterceptorAdapter {\n```", "```java\n    @Override \n    public boolean preHandle(HttpServletRequest request, \n      HttpServletResponse response, Object handler) throws Exception { \n      request.setAttribute( \n      \"startTime\", System.currentTimeMillis()); \n      return true; \n    }\n```", "```java\n    @Override \n    public void postHandle(HttpServletRequest request, \n    HttpServletResponse response, Object handler, \n    ModelAndView modelAndView) throws Exception { \n       request.setAttribute( \n       \"endTime\", System.currentTimeMillis()); \n     }\n```", "```java\n    @Override \n    public void afterCompletion(HttpServletRequest request, \n    HttpServletResponse response, Object handler, Exception ex) \n    throws Exception { \n      long startTime = (Long) request.getAttribute(\"startTime\"); \n      long endTime = (Long) request.getAttribute(\"endTime\"); \n      logger.info(\"Time Spent in Handler in ms : \"  \n      + (endTime - startTime)); \n    }\n```", "```java\n    <mvc:interceptors> \n      <bean class=\"com.mastering.spring.springmvc.\n      controller.interceptor.HandlerTimeLoggingInterceptor\" /> \n    </mvc:interceptors>\n```", "```java\n    <mvc:interceptors> \n      <mapping path=\"/**\"/> \n      <exclude-mapping path=\"/secure/**\"/> \n      <bean class=\"com.mastering.spring.springmvc.\n       controller.interceptor.HandlerTimeLoggingInterceptor\" /> \n    </mvc:interceptors>\n```", "```java\n    @ModelAttribute \n    public List<State> populateStateList() { \n      return stateService.findStates(); \n     }\n```", "```java\n    @ModelAttribute \n    public void populateStateAndCountryList() { \n      model.addAttribute(stateService.findStates()); \n      model.addAttribute(countryService.findCountries()); \n     }\n```", "```java\n    @Controller \n    @SessionAttributes(\"exampleSessionAttribute\") \n    public class LoginController {\n```", "```java\n    model.put(\"exampleSessionAttribute\", sessionValue);\n```", "```java\n    @Controller \n    @SessionAttributes(\"exampleSessionAttribute\") \n    public class SomeOtherController {\n```", "```java\n   Value sessionValue =(Value)model.get(\"exampleSessionAttribute\");\n```", "```java\n    @RequestMapping(value=\"/some-method\",method = RequestMethod.GET) \n    public String someMethod(/*Other Parameters*/  \n    WebRequest request, SessionStatus status) { \n      status.setComplete(); \n      request.removeAttribute(\"exampleSessionAttribute\",\n      WebRequest.SCOPE_SESSION); \n       //Other Logic\n    }\n```", "```java\n    @RequestMapping(value = \"/some-other-method\",  \n    method = RequestMethod.GET) \n    public String someOtherMethod(/*Other Parameters*/ \n    SessionAttributeStore store, SessionStatus status) { \n      status.setComplete(); \n      store.cleanupAttribute(request, \"exampleSessionAttribute\"); \n      //Other Logic \n    }\n```", "```java\n    @InitBinder \n    protected void initBinder(WebDataBinder binder) { \n      SimpleDateFormat dateFormat = new SimpleDateFormat(\"dd/MM/yyyy\"); \n      binder.registerCustomEditor(Date.class, new CustomDateEditor( \n      dateFormat, false)); \n    }\n```", "```java\n    @ControllerAdvice \n    public class DateBindingControllerAdvice { \n      @InitBinder \n      protected void initBinder(WebDataBinder binder) { \n        SimpleDateFormat dateFormat = new  \n        SimpleDateFormat(\"dd/MM/yyyy\"); \n        binder.registerCustomEditor(Date.class,  \n        new CustomDateEditor( \n          dateFormat, false)); \n        } \n     }\n```", "```java\n    @ControllerAdvice \n    public class ExceptionController { \n      private Log logger =  \n      LogFactory.getLog(ExceptionController.class); \n      @ExceptionHandler(value = Exception.class) \n      public ModelAndView handleException \n      (HttpServletRequest request, Exception ex) { \n         logger.error(\"Request \" + request.getRequestURL() \n         + \" Threw an Exception\", ex); \n         ModelAndView mav = new ModelAndView(); \n         mav.addObject(\"exception\", ex); \n         mav.addObject(\"url\", request.getRequestURL()); \n         mav.setViewName(\"common/spring-mvc-error\"); \n         return mav; \n        } \n     }\n```", "```java\n    <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%> \n    <%@page isErrorPage=\"true\"%> \n    <h1>Error Page</h1> \n     URL: ${url} \n    <BR /> \n    Exception: ${exception.message} \n   <c:forEach items=\"${exception.stackTrace}\"  \n      var=\"exceptionStackTrace\">     \n      ${exceptionStackTrace}  \n   </c:forEach>\n```", "```java\n    <bean id=\"messageSource\"  class=  \n      \"org.springframework.context.support.\n      ReloadableResourceBundleMessageSource\"> \n      <property name=\"basename\" value=\"classpath:messages\" /> \n      <property name=\"defaultEncoding\" value=\"UTF-8\" /> \n    </bean>\n```", "```java\n    message_en.properties \n    welcome.caption=Welcome in English \n    message_fr.properties \n    welcome.caption=Bienvenue - Welcome in French\n```", "```java\n    <spring:message code=\"welcome.caption\" />\n```", "```java\n    <bean id=\"springMVCLocaleResolver\" \n      class=\"org.springframework.web.servlet.i18n.\n      SessionLocaleResolver\"> \n      <property name=\"defaultLocale\" value=\"en\" /> \n    </bean> \n    <mvc:interceptors> \n      <bean id=\"springMVCLocaleChangeInterceptor\" \n      class=\"org.springframework.web.servlet.\n      i18n.LocaleChangeInterceptor\"> \n        <property name=\"paramName\" value=\"language\" /> \n      </bean> \n    </mvc:interceptors>\n```", "```java\n    <bean id=\"localeResolver\" \n     class=\"org.springframework.web.servlet.\n     i18n.CookieLocaleResolver\"> \n       <property name=\"defaultLocale\" value=\"en\" /> \n       <property name=\"cookieName\" value=\"userLocaleCookie\"/> \n       <property name=\"cookieMaxAge\" value=\"7200\"/> \n    </bean>\n```", "```java\n    @RunWith(SpringRunner.class) \n    @WebAppConfiguration \n    @ContextConfiguration(\"file:src/main/webapp/\n    WEB-INF/user-web-context.xml\") \n    public class BasicControllerSpringConfigurationIT { \n      private MockMvc mockMvc; \n      @Autowired \n      private WebApplicationContext wac; \n      @Before \n      public void setup() { \n        this.mockMvc =  \n        MockMvcBuilders.webAppContextSetup \n        (this.wac).build(); \n      } \n       @Test \n       public void basicTest() throws Exception { \n        this.mockMvc \n        .perform( \n           get(\"/welcome\") \n          .accept(MediaType.parseMediaType \n          (\"application/html;charset=UTF-8\"))) \n          .andExpect(status().isOk()) \n          .andExpect(content().string \n          (\"Welcome to Spring MVC\")); \n        } \n      }\n```", "```java\n    <mvc:resources  \n    mapping=\"/resources/**\"  \n    location=\"/static-resources/\"/>\n```", "```java\n    @Configuration \n    @EnableWebMvc \n    public class WebConfig extends WebMvcConfigurerAdapter { \n      @Override \n      public void addResourceHandlers \n     (ResourceHandlerRegistry registry) { \n        registry \n       .addResourceHandler(\"/static-resources/**\") \n       .addResourceLocations(\"/static-resources/\"); \n      } \n    }\n```", "```java\n    registry \n   .addResourceHandler(\"/resources/**\") \n   .addResourceLocations(\"/static-resources/\") \n   .setCachePeriod(365 * 24 * 60 * 60);\n```", "```java\n    <mvc:resources  \n     mapping=\"/resources/**\"  \n     location=\"/static-resources/\"  \n     cache-period=\"365 * 24 * 60 * 60\"/>\n```", "```java\nAccept-Encoding: gzip, deflate\n```", "```java\nContent-Encoding: gzip\n```", "```java\n    registry \n      .addResourceHandler(\"/resources/**\") \n      .addResourceLocations(\"/static-resources/\") \n      .setCachePeriod(365 * 24 * 60 * 60) \n      .resourceChain(true) \n      .addResolver(new GzipResourceResolver()) \n      .addResolver(new PathResourceResolver()); \n```", "```java\n    <dependency> \n      <groupId>org.webjars</groupId> \n      <artifactId>bootstrap</artifactId> \n      <version>3.3.6</version> \n    </dependency>\n```", "```java\n    <mvc:resources mapping=\"/webjars/**\" location=\"/webjars/\"/>\n```", "```java\n    <script src= \n     \"webjars/bootstrap/3.3.6/js/bootstrap.min.js\"> \n    </script> \n   <link  \n    href=\"webjars/bootstrap/3.3.6/css/bootstrap.min.css\" \n    rel=\"stylesheet\">\n```", "```java\n    <dependency> \n      <groupId>org.springframework.security</groupId> \n      <artifactId>spring-security-web</artifactId> \n    </dependency> \n    <dependency> \n      <groupId>org.springframework.security</groupId> \n      <artifactId>spring-security-config</artifactId> \n    </dependency>\n```", "```java\n    <filter> \n      <filter-name>springSecurityFilterChain</filter-name> \n      <filter-class> \n        org.springframework.web.filter.DelegatingFilterProxy \n      </filter-class> \n    </filter> \n    <filter-mapping> \n      <filter-name>springSecurityFilterChain</filter-name> \n      <url-pattern>/*</url-pattern> \n    </filter-mapping>\n```", "```java\n    @Configuration \n    @EnableWebSecurity \n    public class SecurityConfiguration extends  \n    WebSecurityConfigurerAdapter { \n      @Autowired \n      public void configureGlobalSecurity \n      (AuthenticationManagerBuilder auth) throws Exception { \n      auth \n      .inMemoryAuthentication() \n      .withUser(\"firstuser\").password(\"password1\") \n      .roles(\"USER\", \"ADMIN\"); \n     } \n     @Override \n     protected void configure(HttpSecurity http)  \n     throws Exception { \n       http \n      .authorizeRequests() \n      .antMatchers(\"/login\").permitAll() \n      .antMatchers(\"/*secure*/**\") \n      .access(\"hasRole('USER')\") \n      .and().formLogin(); \n      } \n    }\n```", "```java\n    @Controller \n    public class LogoutController { \n      @RequestMapping(value = \"/secure/logout\",  \n      method = RequestMethod.GET) \n      public String logout(HttpServletRequest request, \n      HttpServletResponse response) { \n        Authentication auth =  \n        SecurityContextHolder.getContext() \n        .getAuthentication(); \n        if (auth != null) { \n            new SecurityContextLogoutHandler() \n           .logout(request, response, auth); \n            request.getSession().invalidate(); \n          } \n        return \"redirect:/secure/welcome\"; \n       } \n     }\n```"]