["```java\n    @RestController\n    public class RandomNumberController {\n      private Log log =\n        LogFactory.getLog(RandomNumberController.class);\n      @RequestMapping(\"/random\")\n      public List<Integer> random() {\n        List<Integer> numbers = new ArrayList<Integer>();\n        for (int i = 1; i <= 5; i++) {\n          numbers.add(generateRandomNumber());\n        }\n        log.warn(\"Returning \" + numbers);\n        return numbers;\n      }\n      private int generateRandomNumber() {\n        return (int) (Math.random() * 1000);\n      }\n    }\n```", "```java\n    [666,257,306,204,992]\n```", "```java\n    @Component\n    @ConfigurationProperties(\"application\")\n    public class ApplicationConfiguration {\n      private String message;\n      public String getMessage() {\n        return message;\n      }\n      public void setMessage(String message) {\n        this.message = message;\n      }\n    }\n```", "```java\n    spring.application.name=microservice-a\n    application.message=Default Message\n```", "```java\n    @RestController\n    public class MessageController {\n      @Autowired\n      private ApplicationConfiguration configuration;\n      @RequestMapping(\"/message\")\n      public Map<String, String> welcome() {\n        Map<String, String> map = new HashMap<String, String>();\n        map.put(\"message\", configuration.getMessage());\n        return map;\n      }\n    }\n```", "```java\n    {\"message\":\"Default Message\"}\n```", "```java\n    @RestController\n    public class NumberAdderController {\n      private Log log = LogFactory.getLog(\n        NumberAdderController.class);\n      @Value(\"${number.service.url}\")\n      private String numberServiceUrl;\n      @RequestMapping(\"/add\")\n      public Long add() {\n        long sum = 0;\n        ResponseEntity<Integer[]> responseEntity =\n          new RestTemplate()\n          .getForEntity(numberServiceUrl, Integer[].class);\n        Integer[] numbers = responseEntity.getBody();\n        for (int number : numbers) {\n          sum += number;\n        }\n        log.warn(\"Returning \" + sum);\n        return sum;\n      }\n    }\n```", "```java\n    spring.application.name=service-consumer\n    server.port=8100\n    number.service.url=http://localhost:8080/random\n```", "```java\n    2890\n```", "```java\n    c.m.s.c.c.RandomNumberController : Returning [752,\n      119, 493, 871, 445]\n```", "```java\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-config-server</artifactId>\n    </dependency>\n```", "```java\n    @EnableConfigServer\n    @SpringBootApplication\n    public class ConfigServerApplication {\n```", "```java\nmkdir git-localconfig-repo\ncd git-localconfig-repo\ngit init\n```", "```java\n    management.security.enabled=false\n    application.message=Message From Default Local Git Repository\n```", "```java\ngit add -A\ngit commit -m \"default microservice a properties\"\n```", "```java\n    spring.application.name=config-server\n    server.port=8888\n    spring.cloud.config.server.git.uri=file:///in28Minutes\n    /Books/MasteringSpring/git-localconfig-repo\n```", "```java\n    {  \n      \"name\":\"microservice-a\",\n      \"profiles\":[  \n        \"default\"\n       ],\n       \"label\":null,\n       \"version\":null,\n       \"state\":null,\n       \"propertySources\":[  \n        {  \n          \"name\":\"file:///in28Minutes/Books/MasteringSpring\n          /git-localconfig-repo/microservice-a.properties\",\n          \"source\":{  \n            \"application.message\":\"Message From Default\n             Local Git Repository\"\n          }\n        }]\n    }\n```", "```java\napplication.message=Message From Dev Git Repository\n```", "```java\ngit add -A\ngit commit -m \"default microservice a properties\" \n```", "```java\n    {  \n      \"name\":\"microservice-a\",\n      \"profiles\":[  \n        \"dev\"\n      ],\n      \"label\":null,\n      \"version\":null,\n      \"state\":null,\n      \"propertySources\":[  \n      {  \n        \"name\":\"file:///in28Minutes/Books/MasteringSpring\n         /git-localconfig-repo/microservice-a-dev.properties\",\n        \"source\":{  \n          \"application.message\":\"Message From Dev Git Repository\"\n        }\n      },\n      {  \n      \"name\":\"file:///in28Minutes/Books/MasteringSpring\n        /git-localconfig-repo/microservice-a.properties\",\n      \"source\":{  \n        \"application.message\":\"Message From Default\n         Local Git Repository\"\n      }}]\n    }\n```", "```java\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-config</artifactId>\n    </dependency>\n```", "```java\n    <dependencyManagement>\n       <dependencies>\n          <dependency>\n             <groupId>org.springframework.cloud</groupId>\n             <artifactId>spring-cloud-dependencies</artifactId>\n             <version>Dalston.RC1</version>\n             <type>pom</type>\n             <scope>import</scope>\n          </dependency>\n       </dependencies>\n    </dependencyManagement>\n```", "```java\n    spring.application.name=microservice-a\n    spring.cloud.config.uri=http://localhost:8888\n```", "```java\n    Fetching config from server at: http://localhost:8888\n    Located environment: name=microservice-a, profiles=[default],\n    label=null, version=null, state=null\n    Located property source: CompositePropertySource \n    [name='configService', propertySources=[MapPropertySource\n    [name='file:///in28Minutes/Books/MasteringSpring/git-localconfig-\n    repo/microservice-a.properties']]]\n```", "```java\n    {\"message\":\"Message From Default Local Git Repository\"}\n```", "```java\n    spring.profiles.active=dev\n```", "```java\n    application.message=Message From Default Local \n      Git Repository Changed\n```", "```java\ncurl -X POST http://localhost:8080/refresh\n```", "```java\n    {\"message\":\"Message From Default Local Git Repository Changed\"}\n```", "```java\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-bus-amqp</artifactId>\n    </dependency>\n```", "```java\no.s.integration.channel.DirectChannel : Channel 'microservice-a.springCloudBusInput' has 1 subscriber(s).\nBean with name 'rabbitConnectionFactory' has been autodetected for JMX exposure\nBean with name 'refreshBusEndpoint' has been autodetected for JMX exposure\nCreated new connection: SimpleConnection@6d12ea7c [delegate=amqp://guest@127.0.0.1:5672/, localPort= 61741]\nChannel 'microservice-a.springCloudBusOutput' has 1 subscriber(s).\n declaring queue for inbound: springCloudBus.anonymous.HK-dFv8oRwGrhD4BvuhkFQ, bound to: springCloudBus\nAdding {message-handler:inbound.springCloudBus.default} as a subscriber to the 'bridge.springCloudBus' channel\n```", "```java\n    application.message=Message From Default Local\n      Git Repository Changed Again\n```", "```java\n    curl -X POST http://localhost:8080/bus/refresh\n```", "```java\nRefreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@510cb933: startup date [Mon Mar 27 21:39:37 IST 2017]; root of context hierarchy\nFetching config from server at: http://localhost:8888\nStarted application in 1.333 seconds (JVM running for 762.806)\nReceived remote refresh request. Keys refreshed [application.message]\n```", "```java\n    {\"message\":\"Message From Default Local \n      Git Repository Changed Again\"}\n```", "```java\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-feign</artifactId>\n    </dependency>\n```", "```java\n    <dependencyManagement>\n       <dependencies>\n         <dependency>\n           <groupId>org.springframework.cloud</groupId>\n           <artifactId>spring-cloud-dependencies</artifactId>\n           <version>Dalston.RC1</version>\n           <type>pom</type>\n           <scope>import</scope>\n         </dependency>\n       </dependencies>\n    </dependencyManagement>\n```", "```java\n    @EnableFeignClients(\"com.mastering.spring.consumer\")\n    public class ServiceConsumerApplication {\n```", "```java\n    @FeignClient(name =\"microservice-a\", url=\"localhost:8080\")\n    public interface RandomServiceProxy {\n      @RequestMapping(value = \"/random\", method = RequestMethod.GET)\n      public List<Integer> getRandomNumbers();\n    }\n```", "```java\n    @RestController\n    public class NumberAdderController {\n      @Autowired\n      private RandomServiceProxy randomServiceProxy;\n      @RequestMapping(\"/add\")\n      public Long add() {\n        long sum = 0;\n        List<Integer> numbers = randomServiceProxy.getRandomNumbers();\n        for (int number : numbers) {\n          sum += number;\n         }\n          return sum;\n        }\n    }\n```", "```java\n    2103\n```", "```java\n    feign.compression.request.enabled=true\n    feign.compression.response.enabled=true\n```", "```java\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-ribbon</artifactId>\n    </dependency>\n```", "```java\n    random-proxy.ribbon.listOfServers= \n      http://localhost:8080,http://localhost:8081\n```", "```java\n    @FeignClient(name =\"microservice-a\")\n    @RibbonClient(name=\"microservice-a\")\n    public interface RandomServiceProxy {\n```", "```java\n    2705\n```", "```java\n    c.m.s.c.c.RandomNumberController : Returning [487,\n      441, 407, 563, 807]\n```", "```java\n    3423\n```", "```java\n    c.m.s.c.c.RandomNumberController : Returning [661,\n      520, 256, 988, 998]\n```", "```java\n    microservice-a.ribbon.NFLoadBalancerRuleClassName = \n      com.netflix.loadbalancer.WeightedResponseTimeRule\n```", "```java\n    random-proxy.ribbon.listOfServers=\n      http://localhost:8080,http://localhost:8081\n```", "```java\n    @SpringBootApplication\n    @EnableEurekaServer\n    public class EurekaServerApplication {\n```", "```java\n    server.port = 8761\n    eureka.client.registerWithEureka=false\n    eureka.client.fetchRegistry=false\n```", "```java\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-eureka</artifactId>\n    </dependency>\n```", "```java\n    @SpringBootApplication\n    @EnableDiscoveryClient\n    public class MicroserviceAApplication {\n```", "```java\n    eureka.client.serviceUrl.defaultZone=\n      http://localhost:8761/eureka\n```", "```java\n    Registered instance MICROSERVICE-A/192.168.1.5:microservice-a\n      with status UP (replication=false)\n    Registered instance MICROSERVICE-A/192.168.1.5:microservice-a:\n      8081 with status UP (replication=false)\n```", "```java\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-eureka</artifactId>\n    </dependency>\n```", "```java\n    microservice-a.ribbon.listOfServers=\n      http://localhost:8080,http://localhost:8081\n```", "```java\n    #microservice-a.ribbon.listOfServers=\n      http://localhost:8080,http://localhost:8081\n    eureka.client.serviceUrl.defaultZone=\n      http://localhost:8761/eureka\n```", "```java\n    @SpringBootApplication\n    @EnableFeignClients(\"com.mastering.spring.consumer\")\n    @EnableDiscoveryClient\n    public class ServiceConsumerApplication {\n```", "```java\n    Registered instance SERVICE-CONSUMER/192.168.1.5:\n      service-consumer:8100 with status UP (replication=false)\n```", "```java\n    @FeignClient(name =\"microservice-a\")\n    @RibbonClient(name=\"microservice-a\")\n    public interface RandomServiceProxy {\n```", "```java\n    @EnableZuulProxy\n    @EnableDiscoveryClient\n    @SpringBootApplication\n    public class ZuulApiGatewayServerApplication {\n```", "```java\n    spring.application.name=zuul-api-gateway\n    server.port=8765\n    eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka\n```", "```java\n    @Component\n    public class SimpleLoggingFilter extends ZuulFilter {\n      private static Logger log = \n        LoggerFactory.getLogger(SimpleLoggingFilter.class);\n      @Override\n      public String filterType() {\n        return \"pre\";\n      }\n      @Override\n      public int filterOrder() {\n        return 1;\n      }\n      @Override\n      public boolean shouldFilter() {\n        return true;\n      }\n      @Override\n      public Object run() {\n        RequestContext context = RequestContext.getCurrentContext();\n        HttpServletRequest httpRequest = context.getRequest();\n        log.info(String.format(\"Request Method : %s n URL: %s\", \n        httpRequest.getMethod(),\n        httpRequest.getRequestURL().toString()));\n        return null;\n      }\n    }\n```", "```java\n    Registered instance ZUUL-API-GATEWAY/192.168.1.5:zuul-api-\n      gateway:8765 with status UP (replication=false)\n```", "```java\n    Mapped URL path [/microservice-a/**] onto handler of type [\n    class org.springframework.cloud.netflix.zuul.web.ZuulController]\n    Mapped URL path [/service-consumer/**] onto handler of type [\n    class org.springframework.cloud.netflix.zuul.web.ZuulController]\n```", "```java\n    [73,671,339,354,211]\n```", "```java\n    c.m.s.z.filters.pre.SimpleLoggingFilter : Request Method : GET\n    URL: http://localhost:8765/microservice-a/random\n```", "```java\n    2488\n```", "```java\n    2017-03-28 14:05:17.514 INFO 83147 --- [nio-8765-exec-1] \n    c.m.s.z.filters.pre.SimpleLoggingFilter : Request Method : GET\n    URL: http://localhost:8765/service-consumer/add\n```", "```java\n    @FeignClient(name =\"microservice-a\")\n    @RibbonClient(name=\"microservice-a\")\n    public interface RandomServiceProxy {\n    @RequestMapping(value = \"/random\", method = RequestMethod.GET)\n      public List<Integer> getRandomNumbers();\n    }\n```", "```java\n    @FeignClient(name=\"zuul-api-gateway\")\n    //@FeignClient(name =\"microservice-a\")\n    @RibbonClient(name=\"microservice-a\")\n    public interface RandomServiceProxy {\n      @RequestMapping(value = \"/microservice-a/random\", \n      method = RequestMethod.GET)\n      //@RequestMapping(value = \"/random\", method = RequestMethod.GET)\n      public List<Integer> getRandomNumbers();\n    }\n```", "```java\n    2254\n```", "```java\n2017-03-28 14:10:16.093 INFO 83147 --- [nio-8765-exec-4] c.m.s.z.filters.pre.SimpleLoggingFilter : Request Method : GET\nURL: http://localhost:8765/service-consumer/add\n2017-03-28 14:10:16.685 INFO 83147 --- [nio-8765-exec-5] c.m.s.z.filters.pre.SimpleLoggingFilter : Request Method : GET\nURL: http://192.168.1.5:8765/microservice-a/random\n```", "```java\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-sleuth</artifactId>\n    </dependency>\n```", "```java\n    @Bean\n    public AlwaysSampler defaultSampler() {\n      return new AlwaysSampler();\n    }\n```", "```java\n    1748\n```", "```java\n2017-03-28 20:53:45.582 INFO [service-consumer,d8866b38c3a4d69c,d8866b38c3a4d69c,true] 89416 --- [l-api-gateway-5] c.netflix.loadbalancer.BaseLoadBalancer : Client:zuul-api-gateway instantiated a LoadBalancer:DynamicServerListLoadBalancer:{NFLoadBalancer:name=zuul-api-gateway,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null\n```", "```java\n2017-03-28 20:53:45.593 INFO [service-consumer,d8866b38c3a4d69c,d8866b38c3a4d69c,true] 89416 --- [l-api-gateway-5] c.n.l.DynamicServerListLoadBalancer : Using serverListUpdater PollingServerListUpdater\n 2017-03-28 20:53:45.597 INFO [service-consumer,d8866b38c3a4d69c,d8866b38c3a4d69c,true] 89416 --- [l-api-gateway-5] c.netflix.config.ChainedDynamicProperty : Flipping property: zuul-api-gateway.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647\n2017-03-28 20:53:45.599 INFO [service-consumer,d8866b38c3a4d69c,d8866b38c3a4d69c,true] 89416 --- [l-api-gateway-5] c.n.l.DynamicServerListLoadBalancer : DynamicServerListLoadBalancer for client zuul-api-gateway initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=zuul-api-gateway,current list of Servers=[192.168.1.5:8765],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone; Instance count:1; Active connections count: 0; Circuit breaker tripped count: 0; Active connections per server: 0.0;]\n [service-consumer,d8866b38c3a4d69c,d8866b38c3a4d69c,true] 89416 --- [nio-8100-exec-1] c.m.s.c.service.NumberAdderController : Returning 1748\n```", "```java\n[microservice-a,d8866b38c3a4d69c,89d03889ebb02bee,true] 89404 --- [nio-8080-exec-8] c.m.s.c.c.RandomNumberController : Returning [425, 55, 51, 751, 466]\n```", "```java\n[zuul-api-gateway,d8866b38c3a4d69c,89d03889ebb02bee,true] 89397 --- [nio-8765-exec-8] c.m.s.z.filters.pre.SimpleLoggingFilter : Request Method : GET\nURL: http://192.168.1.5:8765/microservice-a/random\n```", "```java\n    @EnableZipkinServer\n    @SpringBootApplication\n    public class ZipkinDistributedTracingServerApplication {\n```", "```java\n    spring.application.name=zipkin-distributed-tracing-server\n    server.port=9411\n```", "```java\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-sleuth-zipkin</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-bus-amqp</artifactId>\n    </dependency>\n```", "```java\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-hystrix</artifactId>\n    </dependency>\n```", "```java\n    @SpringBootApplication\n    @EnableFeignClients(\"com.mastering.spring.consumer\")\n    @EnableHystrix\n    @EnableDiscoveryClient\n    public class ServiceConsumerApplication {\n```", "```java\n    @HystrixCommand(fallbackMethod = \"getDefaultResponse\")\n    @RequestMapping(\"/add\")\n    public Long add() {\n      //Logic of add() method \n    }\n```", "```java\n    public Long getDefaultResponse() {\n      return 10000L;\n     }\n```", "```java\n    10000\n```"]