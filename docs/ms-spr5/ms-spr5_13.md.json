["```java\n    //Type Inference\n    var intVariable = 10\n```", "```java\n    //intVariable = \"String\" \n    //If uncommented -> Type mismatch: \n    //inferred type is String but Int was expected\n```", "```java\n    var variable = 5\n    variable = 6 //You can change value\n```", "```java\n    val immutable = 6\n    //immutable = 7 //Val cannot be reassigned\n```", "```java\n    var char = 'c'\n    //Operator '==' cannot be applied to 'Char' and 'Int'\n    //if(char==1) print (char);\n    Null safety\n```", "```java\n    var string: String = \"abc\"\n    //string = null //Compilation Error\n```", "```java\n    var nullableString: String? = \"abc\"\n    nullableString = null\n```", "```java\n    //Compilation Error\n    //print(nullableString.length)\n    if (nullableString != null) {\n      print(nullableString.length)\n     }\n    print(nullableString?.length)\n```", "```java\n    fun helloBasic(name: String): String {\n      return \"Hello, $name!\"\n    }\n```", "```java\n    println(helloBasic(\"foo\")) // => Hello, foo!\n```", "```java\n    println(helloBasic(name = \"bar\"))\n```", "```java\n    fun helloWithDefaultValue(name: String = \"World\"): String {\n      return \"Hello, $name!\"\n    }\n```", "```java\n    println(helloWithDefaultValue()) //Hello, World\n```", "```java\n    fun helloWithOneExpression(name: String = \"world\") \n    = \"Hello, $name!\"\n```", "```java\n    fun printHello(name: String = \"world\") \n    = println(\"Hello, $name!\")\n```", "```java\n    class Array<T> private constructor() {\n      val size: Int\n      operator fun get(index: Int): T\n      operator fun set(index: Int, value: T): Unit\n      operator fun iterator(): Iterator<T>\n      // ...\n     }\n```", "```java\n    val intArray = intArrayOf(1, 2, 10)\n```", "```java\n    println(intArray[0])//1\n    println(intArray.get(0))//1\n    println(intArray.all { it > 5 }) //false\n    println(intArray.any { it > 5 }) //true\n    println(intArray.asList())//[1, 2, 10]\n    println(intArray.max())//10\n    println(intArray.min())//1\n```", "```java\n    val countries = listOf(\"India\", \"China\", \"USA\")\n```", "```java\n    println(countries.size)//3\n    println(countries.first())//India\n    println(countries.last())//USA\n    println(countries[2])//USA\n```", "```java\n    //countries.add(\"China\") //Not allowed\n    val mutableContries = mutableListOf(\"India\", \"China\", \"USA\")\n    mutableContries.add(\"China\")\n```", "```java\n    val characterOccurances = \n    mapOf(\"a\" to 1, \"h\" to 1, \"p\" to 2, \"y\" to 1)//happy\n    println(characterOccurances)//{a=1, h=1, p=2, y=1}\n```", "```java\n    println(characterOccurances[\"p\"])//2\n```", "```java\n    for ((key, value) in characterOccurances) {\n      println(\"$key -> $value\")\n    }\n```", "```java\n    public void openSomeFileInJava(){\n      try {\n            FileReader reader = new FileReader(\"pathToFile\");\n            int i=0;\n            while(i != -1){\n              i = reader.read();\n              //Do something with what was read\n            }\n      reader.close();\n      } catch (FileNotFoundException e) {\n           //Exception handling code\n        } catch (IOException e) {\n        //Exception handling code\n      }\n    }\n```", "```java\n    data class Address(val line1: String,\n    val line2: String,\n    val zipCode: Int,\n    val state: String,\n    val country: String)\n```", "```java\n    val myAddress = Address(\"234, Some Apartments\", \n    \"River Valley Street\", 54123, \"NJ\", \"USA\")\n```", "```java\n    println(myAddress)\n    //Address(line1=234, Some Apartments, line2=River Valley \n    //Street, zipCode=54123, state=NJ, country=USA)\n```", "```java\n    val myFriendsAddress = myAddress.copy(line1 = \"245, Some Apartments\")\n    println(myFriendsAddress)\n    //Address(line1=245, Some Apartments, line2=River Valley \n    //Street, zipCode=54123, state=NJ, country=USA)\n```", "```java\n    val (line1, line2, zipCode, state, country) = myAddress;\ntln(\"$line1 $line2 $zipCode $state $country\"); \n    //234, Some Apartments River Valley Street 54123 NJ USA\n```", "```java\n    fun main(args: Array<String>) {\n      println(\"Hello, world!\")\n    }\n```", "```java\n    <dependency>\n      <groupId>org.jetbrains.kotlin</groupId>\n      <artifactId>kotlin-stdlib-jre8</artifactId>\n      <version>${kotlin.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.jetbrains.kotlin</groupId>\n      <artifactId>kotlin-reflect</artifactId>\n      <version>${kotlin.version}</version>\n    </dependency>\n```", "```java\n    <plugin>\n     <artifactId>kotlin-maven-plugin</artifactId>\n     <groupId>org.jetbrains.kotlin</groupId>\n     <version>${kotlin.version}</version>\n     <configuration>\n       <compilerPlugins>\n         <plugin>spring</plugin>\n       </compilerPlugins>\n       <jvmTarget>1.8</jvmTarget>\n     </configuration>\n    <executions>\n    <execution>\n      <id>compile</id>\n      <phase>compile</phase>\n      <goals>\n        <goal>compile</goal>\n      </goals>\n    </execution>\n    <execution>\n      <id>test-compile</id>\n      <phase>test-compile</phase>\n      <goals>\n        <goal>test-compile</goal>\n      </goals>\n     </execution>\n    </executions>\n    <dependencies>\n      <dependency>\n        <groupId>org.jetbrains.kotlin</groupId>\n        <artifactId>kotlin-maven-allopen</artifactId>\n        <version>${kotlin.version}</version>\n       </dependency>\n    </dependencies>\n   </plugin>\n```", "```java\n    @SpringBootApplication\n    open class FirstWebServiceWithKotlinApplication\n    fun main(args: Array<String>) {\n      SpringApplication\n      .run(\n         FirstWebServiceWithKotlinApplication::class.java,\n         *args)\n    }\n```", "```java\n    @RunWith(SpringRunner::class)\n    @SpringBootTest\n    class FirstWebServiceWithKotlinApplicationTests {\n      @Test\n      fun contextLoads() {\n      }\n    }\n```", "```java\n    @RestController\n    class BasicController {\n      @GetMapping(\"/welcome\")\n      fun welcome() = \"Hello World\"\n    }\n```", "```java\n    @GetMapping(\"/welcome\")\n    public String welcome() {\n      return \"Hello World\";\n    }\n```", "```java\n    @RunWith(SpringRunner::class)\n    @WebMvcTest(BasicController::class)\n    class BasicControllerTest {\n      @Autowired\n      lateinit var mvc: MockMvc;\n      @Test\n      fun `GET welcome returns \"Hello World\"`() {\n        mvc.perform(\n           MockMvcRequestBuilders.get(\"/welcome\").accept(\n           MediaType.APPLICATION_JSON))\n           .andExpect(status().isOk())\n           .andExpect(content().string(equalTo(\"Hello World\")));\n       } \n     }\n```", "```java\n    @RunWith(SpringRunner::class)\n    @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n    class BasicControllerIT {\n      @Autowired\n      lateinit var restTemplate: TestRestTemplate\n      @Test\n      fun `GET welcome returns \"Hello World\"`() {\n        // When\n        val body = restTemplate.getForObject(\"/welcome\", \n        String::class.java)\n        // Then\n        assertThat(body).isEqualTo(\"Hello World\")\n      }\n    }\n```", "```java\n    data class WelcomeBean(val message: String = \"\")\n```", "```java\n    public class WelcomeBean {\n      private String message;\n      public WelcomeBean(String message) {\n        super();\n        this.message = message;\n      }\n      public String getMessage() {\n      return message;\n     }\n   }\n```", "```java\n    @GetMapping(\"/welcome-with-object\")\n    fun welcomeWithObject() = WelcomeBean(\"Hello World\")\n```", "```java\n    {\"message\":\"Hello World\"}\n```", "```java\n    @Test\n    fun `GET welcome-with-object returns \"Hello World\"`() {\n      mvc.perform(\n      MockMvcRequestBuilders.get(\"/welcome-with-object\")\n      .accept(MediaType.APPLICATION_JSON))\n      .andExpect(status().isOk())\n      .andExpect(content().string(\n      containsString(\"Hello World\")));\n    }\n```", "```java\n    @Test\n    fun `GET welcome-with-object returns \"Hello World\"`() {\n      // When\n      val body = restTemplate.getForObject(\"/welcome-with-object\",\n      WelcomeBean::class.java)\n      // Then\n     assertThat(body.message, containsString(\"Hello World\"));\n   }\n```", "```java\n    @GetMapping(\"/welcome-with-parameter/name/{name}\")\n    fun welcomeWithParameter(@PathVariable name: String) = \n    WelcomeBean(\"Hello World, $name\")\n```", "```java\n    {\"message\":\"Hello World, Buddy!\"}\n```", "```java\n    @Test\n    fun `GET welcome-with-parameter returns \"Hello World, Buddy\"`() {\n      mvc.perform(\n      MockMvcRequestBuilders.get(\n      \"/welcome-with-parameter/name/Buddy\")\n     .accept(MediaType.APPLICATION_JSON))\n     .andExpect(status().isOk())\n     .andExpect(content().string(\n     containsString(\"Hello World, Buddy\")));\n    }\n```", "```java\n   @Test\n   fun `GET welcome-with-parameter returns \"Hello World\"`() {\n     // When\n     val body = restTemplate.getForObject(\n     \"/welcome-with-parameter/name/Buddy\", \n     WelcomeBean::class.java)\n     // Then\n    assertThat(body.message, \n    containsString(\"Hello World, Buddy\"));\n   }\n```"]