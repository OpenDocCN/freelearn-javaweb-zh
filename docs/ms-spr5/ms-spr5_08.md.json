["```java\n    PreparedStatement st = null; \n    st = conn.prepareStatement(INSERT_TODO_QUERY); \n    st.setString(1, bean.getDescription()); \n    st.setBoolean(2, bean.isDone()); \n    st.execute();\n```", "```java\n   Repository<T, ID extends Serializable>\n   CrudRepository<T, ID extends Serializable> extends Repository<T, ID>\n   PagingAndSortingRepository<T, ID extends Serializable> extends   \n   CrudRepository<T, ID>\n```", "```java\n    public interface CrudRepository<T, ID extends Serializable>\n      extends Repository<T, ID> {\n      <S extends T> S save(S entity);\n      findOne(ID primaryKey);\n      Iterable<T> findAll();\n      Long count();\n      void delete(T entity);\n      boolean exists(ID primaryKey);\n      // \u2026 more functionality omitted.\n    }\n```", "```java\n   public interface PagingAndSortingRepository<T, ID extends\n     Serializable>\n     extends CrudRepository<T, ID> {\n       Iterable<T> findAll(Sort sort);\n       Page<T> findAll(Pageable pageable);\n    }\n```", "```java\n   public interface JpaRepository<T, ID extends Serializable>\n   extends PagingAndSortingRepository<T, ID>, \n   QueryByExampleExecutor<T>     {\n```", "```java\n   public class SimpleJpaRepository<T, ID extends Serializable>\n   implements JpaRepository<T, ID>, JpaSpecificationExecutor<T>\n```", "```java\n   <dependency>\n     <groupId>org.springframework.boot</groupId>\n     <artifactId>spring-boot-starter-data-jpa</artifactId>\n  </dependency>\n  <dependency>\n     <groupId>com.h2database</groupId>\n     <artifactId>h2</artifactId>\n     <scope>runtime</scope>\n  </dependency>\n  <dependency>\n     <groupId>org.springframework.boot</groupId>\n     <artifactId>spring-boot-starter-test</artifactId>\n     <scope>test</scope>\n  </dependency>\n```", "```java\n   @Entity\n   public class Todo {\n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     private Long id;\n     @ManyToOne(fetch = FetchType.LAZY)\n     @JoinColumn(name = \"userid\")\n     private User user;\n     private String title;\n     private String description;\n     private Date targetDate;\n     private boolean isDone;\n     public Todo() {// Make JPA Happy\n    }\n   }\n```", "```java\n   @Entity\n   public class User {\n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     private Long id;\n     private String userid;\n     private String name;\n     @OneToMany(mappedBy = \"user\")\n     private List<Todo> todos;\n     public User() {// Make JPA Happy\n    }\n   }\n```", "```java\n    @SpringBootApplication\n    public class SpringDataJpaFirstExampleApplication {\n      public static void main(String[] args) {\n        SpringApplication.run( \n        SpringDataJpaFirstExampleApplication.class, args);\n      }\n    }\n```", "```java\nLocalContainerEntityManagerFactoryBean : Building JPA container EntityManagerFactory for persistence unit 'default'\norg.hibernate.Version : HHH000412: Hibernate Core {5.0.11.Final}\norg.hibernate.dialect.Dialect : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect\norg.hibernate.tool.hbm2ddl.SchemaExport : HHH000227: Running hbm2ddl schema export\norg.hibernate.tool.hbm2ddl.SchemaExport : HHH000230: Schema export complete\nj.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'\n```", "```java\n    create table todo (\n      id bigint generated by default as identity,\n      description varchar(255),\n      is_done boolean not null,\n      target_date timestamp,\n      title varchar(255),\n      userid bigint,\n      primary key (id)\n     )\n    create table user (\n      id bigint generated by default as identity,\n      name varchar(255),\n      userid varchar(255),\n      primary key (id)\n     )\n    alter table todo\n    add constraint FK4wek61l9imiccm4ypjj5hfn2g\n   foreign key (userid)\n   references user\n```", "```java\ninsert into user (id, name, userid)\n values (1, 'User Name 1', 'UserId1');\ninsert into user (id, name, userid)\n values (2, 'User Name 2', 'UserId2');\ninsert into user (id, name, userid)\n values (3, 'User Name 3', 'UserId3');\ninsert into user (id, name, userid)\n values (4, 'User Name 4', 'UserId4');\ninsert into todo (id, title, description, is_done, target_date, userid)\n values (101, 'Todo Title 1', 'Todo Desc 1', false, CURRENT_DATE(), 1);\ninsert into todo (id, title, description, is_done, target_date, userid)\n values (102, 'Todo Title 2', 'Todo Desc 2', false, CURRENT_DATE(), 1);\ninsert into todo (id, title, description, is_done, target_date, userid)\n values (103, 'Todo Title 3', 'Todo Desc 3', false, CURRENT_DATE(), 2);\n```", "```java\nScriptUtils : Executing SQL script from URL [file:/in28Minutes/Workspaces/SpringDataJPA-Preparation/Spring-Data-JPA-Trial-Run/target/classes/data.sql]\n\nScriptUtils : Executed SQL script from URL [file:/in28Minutes/Workspaces/SpringDataJPA-Preparation/Spring-Data-JPA-Trial-Run/target/classes/data.sql] in 42 ms.\n```", "```java\n    import org.springframework.data.repository.Repository;\n    public interface TodoRepository extends Repository<Todo, Long> {\n      Iterable<Todo> findAll();\n      long count();\n    }\n```", "```java\n    @DataJpaTest\n    @RunWith(SpringRunner.class)\n    public class TodoRepositoryTest {\n      @Autowired\n      TodoRepository todoRepository;\n      @Test\n      public void check_todo_count() {\n        assertEquals(3, todoRepository.count());\n      }\n    }\n```", "```java\n    public interface TodoRepository extends CrudRepository<Todo, Long>\n     {\n    }\n```", "```java\n    @Test\n    public void findOne() {\n      Optional<Todo> todo = todoRepository.findById(101L);\n      assertEquals(\"Todo Desc 1\", todo.get().getDescription());\n    }\n```", "```java\n    @Test\n    public void exists() {\n      assertFalse(todoRepository.existsById(105L));\n      assertTrue(todoRepository.existsById(101L));\n    }\n```", "```java\n    @Test\n    public void delete() {\n      todoRepository.deleteById(101L);\n      assertEquals(2,todoRepository.count());\n    }\n```", "```java\n    @Test\n    public void deleteAll() {\n      todoRepository.deleteAll();\n      assertEquals(0,todoRepository.count());\n    }\n```", "```java\n    @Autowired\n    TestEntityManager entityManager;\n    @Test\n    public void save() {\n      Todo todo = todoRepository.findById(101L).get();\n      todo.setDescription(\"Todo Desc Updated\");\n      todoRepository.save(todo);\n      entityManager.flush();\n      Todo updatedTodo = todoRepository.findById(101L).get();\n      assertEquals(\"Todo Desc Updated\",updatedTodo.getDescription());\n     }\n```", "```java\n    public interface UserRepository \n    extends PagingAndSortingRepository<User, Long> {\n      }\n```", "```java\n    @DataJpaTest\n    @RunWith(SpringRunner.class)\n    public class UserRepositoryTest {\n      @Autowired\n      UserRepository userRepository;\n      @Autowired\n      TestEntityManager entityManager;\n    }\n```", "```java\n    @Test\n    public void testing_sort_stuff() {\n      Sort sort = new Sort(Sort.Direction.DESC, \"name\")\n      .and(new Sort(Sort.Direction.ASC, \"userid\"));\n    Iterable<User> users = userRepository.findAll(sort);\n    for (User user : users) {\n      System.out.println(user);\n     }\n   }\n```", "```java\nUser [id=4, userid=UserId4, name=User Name 4, todos=0]\nUser [id=3, userid=UserId3, name=User Name 3, todos=0]\nUser [id=2, userid=UserId2, name=User Name 2, todos=1]\nUser [id=1, userid=UserId1, name=User Name 1, todos=2]\n```", "```java\n    @Test\n    public void using_pageable_stuff() {\n      PageRequest pageable = new PageRequest(0, 2);\n      Page<User> userPage = userRepository.findAll(pageable);\n      System.out.println(userPage);\n      System.out.println(userPage.getContent());\n    }\n```", "```java\nPage 1 of 2 containing com.in28minutes.model.User instances\n[User [id=1, userid=UserId1, name=User Name 1, todos=2],\nUser [id=2, userid=UserId2, name=User Name 2, todos=1]]\n```", "```java\n    public interface UserRepository \n    extends PagingAndSortingRepository<User, Long> {\n      List<User> findByName(String name);\n      List<User> findByName(String name, Sort sort);\n      List<User> findByName(String name, Pageable pageable);\n      Long countByName(String name);\n      Long deleteByName(String name);\n      List<User> removeByName(String name);\n   }\n```", "```java\n    List<User> findByTodosTitle(String title);\n```", "```java\n    public interface TodoRepository extends CrudRepository<Todo, Long>  \n    {\n      List<Todo> findByTitleAndDescription\n      (String title, String description);\n      List<Todo> findDistinctTodoByTitleOrDescription\n      (String title,String description);\n      List<Todo> findByTitleIgnoreCase(String title, String\n      description);\n      List<Todo> findByTitleOrderByIdDesc(String lastname);\n      List<Todo> findByIsDoneTrue(String lastname);\n    }\n```", "```java\n    public interface UserRepository \n    extends PagingAndSortingRepository<User, Long> {\n      User findFirstByName(String name);\n      User findTopByName(String name);\n      List<User> findTop3ByName(String name);\n      List<User> findFirst3ByName(String name);\n   }\n```", "```java\n    @Query(\"select u from User u where u.name = ?1\")\n    List<User> findUsersByNameUsingQuery(String name);\n```", "```java\n    @Query(\"select u from User u where u.name = :name\")\n    List<User> findUsersByNameUsingNamedParameters\n    (@Param(\"name\") String name);\n```", "```java\n    @Entity\n    @NamedQuery(name = \"User.findUsersWithNameUsingNamedQuery\", \n    query = \"select u from User u where u.name = ?1\")\n    public class User {\n```", "```java\n    List<User> findUsersWithNameUsingNamedQuery(String name);\n```", "```java\n    @Query(value = \"SELECT * FROM USERS WHERE u.name = ?1\", \n     nativeQuery = true)\n    List<User> findUsersByNameNativeQuery(String name);\n```", "```java\n    <dependency>\n     <groupId>org.springframework.boot</groupId>\n     <artifactId>spring-boot-starter-data-rest</artifactId>\n    </dependency>\n```", "```java\n    @RepositoryRestResource(collectionResourceRel = \"users\", path =\n     \"users\")\n    public interface UserRepository \n    extends PagingAndSortingRepository<User, Long> {\n```", "```java\ns.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 8080 (http)\no.s.b.w.servlet.ServletRegistrationBean : Mapping servlet: 'dispatcherServlet' to [/]\no.s.b.w.servlet.FilterRegistrationBean : Mapping filter: 'characterEncodingFilter' to: [/*]\ns.w.s.m.m.a.RequestMappingHandlerMapping : Mapped \"{[/error]}\" onto ****\no.s.d.r.w.RepositoryRestHandlerMapping : Mapped \"{[/{repository}], methods=[OPTIONS]\no.s.d.r.w.RepositoryRestHandlerMapping : Mapped \"{[/{repository}], methods=[HEAD]\no.s.d.r.w.RepositoryRestHandlerMapping : Mapped \"{[/{repository}], methods=[GET]\no.s.d.r.w.RepositoryRestHandlerMapping : Mapped \"{[/{repository}], methods=[POST]\no.s.d.r.w.RepositoryRestHandlerMapping : Mapped \"{[/{repository}/{id}], methods=[OPTIONS]\no.s.d.r.w.RepositoryRestHandlerMapping : Mapped \"{[/{repository}/{id}/{property}]\no.s.d.r.w.RepositoryRestHandlerMapping : Mapped \"{[/{repository}/search], methods=[GET]\n```", "```java\n    {\n      \"_embedded\" : {\n      \"users\" : [ {\n                   \"userid\" : \"UserId1\",\n                   \"name\" : \"User Name 1\",\n                   \"_links\" : {\n                     \"self\" : {\n                        \"href\" : \"http://localhost:8080/users/1\"\n                        },\n                     \"user\" : {\n                        \"href\" : \"http://localhost:8080/users/1\"\n                       },\n                    \"todos\" : {\n                         \"href\" : \"http://localhost:8080/users/1/todos\"\n                        }\n                     }\n               } ]\n       },\n      \"_links\" : {\n\n         \"self\" : {\n                  \"href\" : \"http://localhost:8080/users\"\n                  },\n                \"profile\" : {\n                      \"href\" : \"http://localhost:8080/profile/users\"\n                       },\n                \"search\" : {\n                      \"href\" : \"http://localhost:8080/users/search\"\n             }\n     },\n     \"page\" : {\n             \"size\" : 20,\n             \"totalElements\" : 4,\n             \"totalPages\" : 1,\n             \"number\" : 0\n            }\n     }\n```", "```java\n    {\n      \"userid\": \"UserId5\",\n      \"name\": \"User Name 5\",\n      \"_links\": {\n       \"self\": {\n         \"href\": \"http://localhost:8080/users/5\"\n            },\n      \"user\": {\n         \"href\": \"http://localhost:8080/users/5\"\n          },\n      \"todos\": {\n         \"href\": \"http://localhost:8080/users/5/todos\"\n         }\n       }\n    }\n```", "```java\n    {\n      \"_embedded\": {\n          \"users\": [\n                     {\n                       \"userid\": \"UserId1\",\n                       \"name\": \"User Name 1\",\n                       \"_links\": {\n                         \"self\": {\n                                \"href\": \"http://localhost:8080/users/1\"\n                                },\n                          \"user\": {\n                                \"href\": \"http://localhost:8080/users/1\"\n                          },\n                         \"todos\": {\n                            \"href\":    \n     \"http://localhost:8080/users/1/todos\"\n                          }\n                        }\n                     }\n                  ]\n               },\n     \"_links\": {\n      \"self\": {\n          \"href\":\"http://localhost:8080/users/search/\n      findUsersByNameUsingNamedParameters?name=User%20Name%201\"\n        }\n     }\n    }\n```", "```java\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-data-mongodb</artifactId>\n    </dependency>\n```", "```java\n    public class Person {\n      @Id\n      private String id;\n      private String name;\n      public Person() {// Make JPA Happy\n      }\n    public Person(String name) {\n      super();\n      this.name = name;\n     }\n   }\n```", "```java\n    public interface PersonMongoDbRepository \n    extends MongoRepository<Person, String> {\n      List<Person> findByName(String name);\n      Long countByName(String name);\n    }\n```", "```java\n    @DataMongoTest\n    @RunWith(SpringRunner.class)\n    public class PersonMongoDbRepositoryTest {\n      @Autowired\n      PersonMongoDbRepository personRepository;\n      @Test\n      public void simpleTest(){\n        personRepository.deleteAll();\n        personRepository.save(new Person( \"name1\"));\n        personRepository.save(new Person( \"name2\"));\n        for (Person person : personRepository.findAll()) {\n          System.out.println(person);\n         }\n        System.out.println(personRepository.findByName(\"name1\"));\n        System.out.println(personRepository.count());\n       }\n     }\n```"]