["```java\n    <dependency>\n      <groupId>org.reactivestreams</groupId>\n      <artifactId>reactive-streams</artifactId>\n      <version>1.0.0</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.reactivestreams</groupId>\n      <artifactId>reactive-streams-tck</artifactId>\n      <version>1.0.0</version>\n      <scope>test</scope>\n    </dependency>\n```", "```java\n    public interface Subscriber<T> {\n      public void onSubscribe(Subscription s);\n      public void onNext(T t);\n      public void onError(Throwable t);\n      public void onComplete();\n    }\n   public interface Publisher<T> {\n     public void subscribe(Subscriber<? super T> s);\n   }\n   public interface Subscription {\n     public void request(long n);\n     public void cancel();\n  }\n```", "```java\n    <dependency>\n      <groupId>io.projectreactor</groupId>\n      <artifactId>reactor-core</artifactId>\n      <version>3.0.6.RELEASE</version>\n   </dependency>\n   <dependency>\n     <groupId>io.projectreactor.addons</groupId>\n     <artifactId>reactor-test</artifactId>\n     <version>3.0.6.RELEASE</version>\n  </dependency>\n```", "```java\n   Mono<String> stubMonoWithADelay = \n   Mono.just(\"Ranga\").delayElement(Duration.ofSeconds(5));\n```", "```java\n    stubMonoWithADelay.subscribe(System.out::println);\n```", "```java\n    @Test\n    public void monoExample() throws InterruptedException {\n      Mono<String> stubMonoWithADelay =   \n      Mono.just(\"Ranga\").delayElement(Duration.ofSeconds(5));\n      stubMonoWithADelay.subscribe(System.out::println);\n     }\n```", "```java\n    @Test\n    public void monoExample() throws InterruptedException {\n      Mono<String> stubMonoWithADelay = \n      Mono.just(\"Ranga\").delayElement(Duration.ofSeconds(5));\n      stubMonoWithADelay.subscribe(System.out::println);\n      Thread.sleep(10000);\n    }\n```", "```java\n     @FunctionalInterface\n     public interface Consumer<T> {\n       void accept(T t); \n     }\n```", "```java\n    class SystemOutConsumer implements Consumer<String> {\n      @Override\n      public void accept(String t) {\n        System.out.println(\"Received \" + t + \" at \" + new Date());\n      }\n    }\n    @Test\n    public void monoExample() throws InterruptedException {\n      Mono<String> stubMonoWithADelay = \n      Mono.just(\"Ranga\").delayElement(Duration.ofSeconds(5));\n      stubMonoWithADelay.subscribe(new SystemOutConsumer());\n      Thread.sleep(10000);\n     }\n```", "```java\n    class WelcomeConsumer implements Consumer<String> {\n      @Override\n      public void accept(String t) {\n        System.out.println(\"Welcome \" + t);\n      } \n    }\n    @Test\n    public void monoExample() throws InterruptedException {\n      Mono<String> stubMonoWithADelay = \n      Mono.just(\"Ranga\").delayElement(Duration.ofSeconds(5));\n      stubMonoWithADelay.subscribe(new SystemOutConsumer());\n      stubMonoWithADelay.subscribe(new WelcomeConsumer());\n      Thread.sleep(10000);\n    }\n```", "```java\n    @Test\n    public void simpleFluxStream() {\n      Flux<String> stubFluxStream = Flux.just(\"Jane\", \"Joe\");\n      stubFluxStream.subscribe(new SystemOutConsumer());  \n    }\n```", "```java\n    private static List<String> streamOfNames = \n    Arrays.asList(\"Ranga\", \"Adam\", \"Joe\", \"Doe\", \"Jane\");\n    @Test\n    public void fluxStreamWithDelay() throws InterruptedException {\n      Flux<String> stubFluxWithNames = \n      Flux.fromIterable(streamOfNames)\n     .delayElements(Duration.ofMillis(1000));\n      stubFluxWithNames.subscribe(new SystemOutConsumer());\n      stubFluxWithNames.subscribe(new WelcomeConsumer());\n      Thread.sleep(10000);\n    }\n```", "```java\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-devtools</artifactId>\n   </dependency>\n\n   <dependency>\n     <groupId>org.springframework.boot</groupId>\n     <artifactId>spring-boot-starter-webflux</artifactId>\n   </dependency>\n\n   <dependency>\n     <groupId>org.springframework.boot</groupId>\n     <artifactId>spring-boot-starter-test</artifactId>\n     <scope>test</scope>\n   </dependency>\n```", "```java\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-reactor-netty</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-databind</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.hibernate</groupId>\n      <artifactId>hibernate-validator</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-web</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-webflux</artifactId>\n    </dependency>\n```", "```java\n    @RestController\n    public class StockPriceEventController {\n      @GetMapping(\"/stocks/price/{stockCode}\")\n      Flux<String> retrieveStockPriceHardcoded\n      (@PathVariable(\"stockCode\") String stockCode) {\n        return Flux.interval(Duration.ofSeconds(5))\n        .map(l -> getCurrentDate() + \" : \" \n        + getRandomNumber(100, 125))\n        .log();\n      }\n     private String getCurrentDate() {\n       return (new Date()).toString();\n     }\n     private int getRandomNumber(int min, int max) {\n       return ThreadLocalRandom.current().nextInt(min, max + 1);\n     }\n    }\n```", "```java\n    <p>\n      <button id=\"subscribe-button\">Get Latest IBM Price</button>\n      <ul id=\"display\"></ul>\n    </p>\n```", "```java\n    function registerEventSourceAndAddResponseTo(uri, elementId) {\n      var stringEvents = document.getElementById(elementId); \n      var stringEventSource = new (uri);\n      stringEventSource.onmessage = function(e) {\n        var newElement = document.createElement(\"li\");\n        newElement.innerHTML = e.data;\n        stringEvents.appendChild(newElement);\n      }\n    }\n```", "```java\n    addEvent(\"click\", document.getElementById('subscribe-button'), \n    function() {\n            registerEventSourceAndAddResponseTo(\"/stocks/price/IBM\", \n            \"display\"); \n          }\n     );\n     function addEvent(evnt, elem, func) {\n       if (typeof(EventSource) !== \"undefined\") {\n         elem.addEventListener(evnt,func,false);\n       }\n       else { // No much to do\n         elem[evnt] = func;\n       }\n    }\n```", "```java\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-data-mongodb-\n        reactive</artifactId>\n    </dependency>\n```", "```java\n    <dependency>\n      <groupId>org.springframework.data</groupId>\n      <artifactId>spring-data-mongodb</artifactId>\n      <exclusions>\n       <exclusion>\n         <groupId>org.mongodb</groupId>\n         <artifactId>mongo-java-driver</artifactId>\n       </exclusion>\n      <exclusion>\n        <groupId>org.slf4j</groupId>\n        <artifactId>jcl-over-slf4j</artifactId>\n      </exclusion>\n     </exclusions>\n    </dependency>\n    <dependency>\n     <groupId>org.mongodb</groupId>\n     <artifactId>mongodb-driver</artifactId>\n    </dependency>\n    <dependency>\n     <groupId>org.mongodb</groupId>\n     <artifactId>mongodb-driver-async</artifactId>\n    </dependency>\n    <dependency>\n     <groupId>org.mongodb</groupId>\n     <artifactId>mongodb-driver-reactivestreams</artifactId>\n    </dependency>\n    <dependency>\n     <groupId>io.projectreactor</groupId>\n     <artifactId>reactor-core</artifactId>\n    </dependency>\n```", "```java\n    @SpringBootApplication\n    @EnableReactiveMongoRepositories\n    public class SpringReactiveExampleApplication {\n```", "```java\n    @Document\n    public class Stock {\n      private String code;\n      private String name;\n      private String description;\n        //Getters, Setters and Constructor  \n    }\n```", "```java\n    @NoRepositoryBean\n    public interface ReactiveCrudRepository<T, ID extends Serializable> \n    extends Repository<T, ID> {\n      <S extends T> Mono<S> save(S entity);\n      Mono<T> findById(ID id);\n      Mono<T> findById(Mono<ID> id);\n      Mono<Boolean> existsById(ID id);\n      Flux<T> findAll();\n      Mono<Long> count();\n      Mono<Void> deleteById(ID id);\n      Mono<Void> deleteAll();  \n     }\n```", "```java\n    public interface StockMongoReactiveCrudRepository \n    extends ReactiveCrudRepository<Stock, String> { \n     }\n```", "```java\n    @Bean\n    CommandLineRunner initData(\n    StockMongoReactiveCrudRepository mongoRepository) {\n      return (p) -> {\n      mongoRepository.deleteAll().block();\n      mongoRepository.save(\n      new Stock(\"IBM\", \"IBM Corporation\", \"Desc\")).block();\n      mongoRepository.save(\n      new Stock(\"GGL\", \"Google\", \"Desc\")).block();\n      mongoRepository.save(\n      new Stock(\"MST\", \"Microsoft\", \"Desc\")).block();\n     };\n    }\n```", "```java\n    @RestController\n    public class StockPriceEventController {\n      private final StockMongoReactiveCrudRepository repository;\n      public StockPriceEventController(\n      StockMongoReactiveCrudRepository repository) {\n        this.repository = repository;\n     }\n\n   @GetMapping(\"/stocks\")\n   Flux<Stock> list() {\n     return this.repository.findAll().log();\n   }\n\n   @GetMapping(\"/stocks/{code}\")\n   Mono<Stock> findById(@PathVariable(\"code\") String code) {\n     return this.repository.findById(code).log();\n   }\n  }\n```", "```java\n    <button id=\"list-stocks-button\">List All Stocks</button>\n    <button id=\"ibm-stock-details-button\">Show IBM Details</button>\n```", "```java\n    <script type=\"application/javascript\">\n    addEvent(\"click\", \n    document.getElementById('list-stocks-button'), \n    function() {\n      registerEventSourceAndAddResponseTo(\"/stocks\",\"display\"); \n     }\n    );\n    addEvent(\"click\", \n    document.getElementById('ibm-stock-details-button'), \n    function() {\n      registerEventSourceAndAddResponseTo(\"/stocks/IBM\",\"display\"); \n    }\n    );\n    </script>\n```"]