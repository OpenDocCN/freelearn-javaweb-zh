["```java\n    public class StockPriceChangeEvent {\n      private final String stockTicker;\n      private final BigDecimal oldPrice;\n      private final BigDecimal newPrice;\n      //Setter, Getters and toString()\n    }\n```", "```java\n    public class StockPriceChangeEventWithHoldings \n    extends StockPriceChangeEvent {\n      private Integer holdings;\n      //Setter, Getters and toString()\n    }\n```", "```java\n    public enum StockTicker {\n      GOOGLE, FACEBOOK, TWITTER, IBM, MICROSOFT\n    }\n```", "```java\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-stream-rabbit</artifactId>\n    </dependency>\n```", "```java\n    @EnableBinding(Source.class)\n    @SpringBootApplication\n    public class SignificantStockChangeSourceApplication {\n      private static Logger logger = LoggerFactory.getLogger \n     (SignificantStockChangeSourceApplication.class);\n     // psvm - main method\n     @Bean\n     @InboundChannelAdapter(value = Source.OUTPUT, \n     poller = @Poller(fixedDelay = \"60000\", maxMessagesPerPoll = \"1\"))\n     public MessageSource<StockPriceChangeEvent>\n     stockPriceChangeEvent()     {\n       StockTicker[] tickers = StockTicker.values();\n       String randomStockTicker = \n       tickers[ThreadLocalRandom.current().nextInt(tickers.length)] \n      .name();\n       return () - > {\n        StockPriceChangeEvent event = new         \n        StockPriceChangeEvent(randomStockTicker,\n        new BigDecimal(getRandomNumber(10, 20)), new   \n        BigDecimal(getRandomNumber(10, 20)));\n        logger.info(\"sending \" + event);\n        return MessageBuilder.withPayload(event).build();\n        };\n      }\n     private int getRandomNumber(int min, int max) {\n       return ThreadLocalRandom.current().nextInt(min, max + 1);\n     }\n    }\n```", "```java\n    public abstract interface \n    org.springframework.cloud.stream.messaging.Source {\n      public static final java.lang.String OUTPUT = \"output\";\n      @org.springframework.cloud.stream.\n      annotation.Output(value=\"output\")\n      public abstract org.springframework.\n      messaging.MessageChannel   output();\n     }\n```", "```java\n    @EnableBinding(Processor.class)@SpringBootApplication\n    public class StockIntelligenceProcessorApplication {\n      private static Logger logger = \n      LoggerFactory.getLogger\n      (StockIntelligenceProcessorApplication.class);\n      private static Map < StockTicker, Integer > holdings =\n        getHoldingsFromDatabase();\n        private static Map < StockTicker,\n        Integer > getHoldingsFromDatabase() {\n          final Map < StockTicker,\n          Integer > holdings = new HashMap < >();\n          holdings.put(StockTicker.FACEBOOK, 10);\n          holdings.put(StockTicker.GOOGLE, 0);\n          holdings.put(StockTicker.IBM, 15);\n          holdings.put(StockTicker.MICROSOFT, 30);\n          holdings.put(StockTicker.TWITTER, 50);\n          return holdings;\n        }\n        @Transformer(inputChannel = Processor.INPUT,\n        outputChannel = Processor.OUTPUT)\n        public Object addOurInventory(StockPriceChangeEvent event) {\n          logger.info(\"started processing event \" + event);\n          Integer holding =  holdings.get(\n            StockTicker.valueOf(event.getStockTicker()));\n          StockPriceChangeEventWithHoldings eventWithHoldings =\n            new StockPriceChangeEventWithHoldings(event, holding);\n          logger.info(\"ended processing eventWithHoldings \" \n            + eventWithHoldings);\n          return eventWithHoldings;\n        }\n        public static void main(String[] args) {\n          SpringApplication.run(\n            StockIntelligenceProcessorApplication.class,args);\n        }\n    }\n```", "```java\n   public abstract interface \n   org.springframework.cloud.stream.messaging.Processor extends \n   org.springframework.cloud.stream.messaging.Source, \n   org.springframework.cloud.stream.messaging.Sink {\n  }\n```", "```java\n    @EnableBinding(Sink.class)@SpringBootApplication\n    public class EventStoreSinkApplication {\n      private static Logger logger = \n      LoggerFactory.getLogger(EventStoreSinkApplication.class);\n      @StreamListener(Sink.INPUT)\n      public void loggerSink(StockPriceChangeEventWithHoldings event) {\n      logger.info(\"Received: \" + event);\n    }\n    public static void main(String[] args) {\n      SpringApplication.run(EventStoreSinkApplication.class, args);\n    }\n   }\n```", "```java\n    public abstract interface   \n    org.springframework.cloud.stream.messaging.Sink {\n      public static final java.lang.String INPUT = \"input\";\n      @org.springframework.cloud.stream.annotation.Input(value=\"input\")\n      public abstract org.springframework.messaging.SubscribableChannel \n      input();\n    }\n```", "```java\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-dataflow-server-\n      local</artifactId>\n    </dependency>\n```", "```java\n    @EnableDataFlowServer\n    @SpringBootApplication\n    public class LocalDataFlowServerApplication {\n      public static void main(String[] args) {\n        SpringApplication.run(LocalDataFlowServierApplication.class,\n        args);\n      }\n    }\n```", "```java\nTomcat initialized with port(s): 9393 (http)\nStarting H2 Server with URL: jdbc:h2:tcp://localhost:19092/mem:dataflow\nAdding dataflow schema classpath:schema-h2-common.sql for h2 database\nAdding dataflow schema classpath:schema-h2-streams.sql for h2 database\nAdding dataflow schema classpath:schema-h2-tasks.sql for h2 database\nAdding dataflow schema classpath:schema-h2-deployment.sql for h2 database\nExecuted SQL script from class path resource [schema-h2-common.sql] in 37 ms.\nExecuted SQL script from class path resource [schema-h2-streams.sql] in 2 ms.\nExecuted SQL script from class path resource [schema-h2-tasks.sql] in 3 ms.\nExecuting SQL script from class path resource [schema-h2-deployment.sql]\nExecuted SQL script from class path resource [schema-h2-deployment.sql] in 3 ms.\nMapped \"{[/runtime/apps/{appId}/instances]}\" onto public org.springframework.hateoas.PagedResources\nMapped \"{[/runtime/apps/{appId}/instances/{instanceId}]}\" onto public \nMapped \"{[/streams/definitions/{name}],methods=[DELETE]}\" onto public void org.springframework.cloud.dataflow.server.controller.StreamDefinitionController.delete(java.lang.String)\nMapped \"{[/streams/definitions],methods=[GET]}\" onto public org.springframework.hateoas.PagedResources\nMapped \"{[/streams/deployments/{name}],methods=[POST]}\" onto public void org.springframework.cloud.dataflow.server.controller.StreamDeploymentController.deploy(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)\nMapped \"{[/runtime/apps]}\" onto public org.springframework.hateoas.PagedResources<org.springframework.cloud.dataflow.rest.resource.AppStatusResource> org.springframework.cloud.dataflow.server.controller.RuntimeAppsController.list(org.springframework.data.domain.Pageable,org.springframework.data.web.PagedResourcesAssembler<org.springframework.cloud.deployer.spi.app.AppStatus>) throws java.util.concurrent.ExecutionException,java.lang.InterruptedException\nMapped \"{[/tasks/executions],methods=[GET]}\" onto public org.springframework.hateoas.PagedResources\n```", "```java\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-dataflow-shell</artifactId>\n    </dependency>\n```", "```java\n    @EnableDataFlowShell\n    @SpringBootApplication\n    public class DataFlowShellApplication {\n      public static void main(String[] args) {\n      SpringApplication.run(DataFlowShellApplication.class, args);\n     }\n    }\n```", "```java\napp register \u2014-name {{NAME_THAT_YOU_WANT_TO_GIVE_TO_APP}} --type source --uri maven://{{GROUP_ID}}:{{ARTIFACT_ID}}:jar:{{VERSION}}\n```", "```java\nmaven://com.mastering.spring.cloud.data.flow:significant-stock-change-source:jar:0.0.1-SNAPSHOT\nmaven://com.mastering.spring.cloud.data.flow:stock-intelligence-processor:jar:0.0.1-SNAPSHOT\nmaven://com.mastering.spring.cloud.data.flow:event-store-sink:jar:0.0.1-SNAPSHOT\n```", "```java\napp register --name significant-stock-change-source --type source --uri maven://com.mastering.spring.cloud.data.flow:significant-stock-change-source:jar:0.0.1-SNAPSHOT\n\napp register --name stock-intelligence-processor --type processor --uri maven://com.mastering.spring.cloud.data.flow:stock-intelligence-processor:jar:0.0.1-SNAPSHOT\n\napp register --name event-store-sink --type sink --uri maven://com.mastering.spring.cloud.data.flow:event-store-sink:jar:0.0.1-SNAPSHOT\n```", "```java\nSuccessfully registered application 'source:significant-stock-change-source'\n\nSuccessfully registered application 'processor:stock-intelligence-processor'\n\nSuccessfully registered application 'sink:event-store-sink'\n```", "```java\napp1 | app2\n```", "```java\n#source | processor | sink\n\nsignificant-stock-change-source|stock-intelligence-processor|event-store-sink\n```", "```java\nstream create --name process-stock-change-events --definition significant-stock-change-source|stock-intelligence-processor|event-store-sink\n```", "```java\nCreated new stream 'process-stock-change-events'\n```", "```java\nstream deploy --name process-stock-change-events\n```", "```java\nDeployment request has been sent for stream 'process-stock-change-events'\n```", "```java\no.s.c.d.spi.local.LocalAppDeployer : deploying app process-stock-change-events.event-store-sink instance 0\n\nLogs will be in /var/folders/y_/x4jdvdkx7w94q5qsh745gzz00000gn/T/spring-cloud-dataflow-3084432375250471462/process-stock-change-events-1492100265496/process-stock-change-events.event-store-sink\n\no.s.c.d.spi.local.LocalAppDeployer : deploying app process-stock-change-events.stock-intelligence-processor instance 0\n\nLogs will be in /var/folders/y_/x4jdvdkx7w94q5qsh745gzz00000gn/T/spring-cloud-dataflow-3084432375250471462/process-stock-change-events-1492100266448/process-stock-change-events.stock-intelligence-processor\n\no.s.c.d.spi.local.LocalAppDeployer : deploying app process-stock-change-events.significant-stock-change-source instance 0\n\nLogs will be in /var/folders/y_/x4jdvdkx7w94q5qsh745gzz00000gn/T/spring-cloud-dataflow-3084432375250471462/process-stock-change-events-1492100267242/process-stock-change-events.significant-stock-change-source\n```", "```java\n#Source Log\nCachingConnectionFactory : Created new connection: SimpleConnection@725b3815 [delegate=amqp://guest@127.0.0.1:5672/, localPort= 58373]\n\n#Transformer Log\no.s.i.endpoint.EventDrivenConsumer : Adding {transformer:stockIntelligenceProcessorApplication.addOurInventory.transformer} as a subscriber to the 'input' channel\n\no.s.integration.channel.DirectChannel : Channel 'application:0.input' has 1 subscriber(s).\n\no.s.i.endpoint.EventDrivenConsumer : started stockIntelligenceProcessorApplication.addOurInventory.transformer\n\no.s.i.endpoint.EventDrivenConsumer : Adding {message-handler:inbound.process-stock-change-events.significant-stock-change-source.process-stock-change-events} as a subscriber to the 'bridge.process-stock-change-events.significant-stock-change-source' channel\n\no.s.i.endpoint.EventDrivenConsumer : started inbound.process-stock-change-events.significant-stock-change-source.process-stock-change-events\n\n#Sink Log\n\nc.s.b.r.p.RabbitExchangeQueueProvisioner : declaring queue for inbound: process-stock-change-events.stock-intelligence-processor.process-stock-change-events, bound to: process-stock-change-events.stock-intelligence-processor\n\no.s.a.r.c.CachingConnectionFactory : Created new connection: SimpleConnection@3de6223a [delegate=amqp://guest@127.0.0.1:5672/, localPort= 58372]\n```", "```java\n#Source Log\nSignificantStockChangeSourceApplication : sending StockPriceChangeEvent [stockTicker=MICROSOFT, oldPrice=15, newPrice=12]\n\n#Transformer Log\n.f.StockIntelligenceProcessorApplication : started processing event StockPriceChangeEvent [stockTicker=MICROSOFT, oldPrice=18, newPrice=20]\n\n.f.StockIntelligenceProcessorApplication : ended processing eventWithHoldings StockPriceChangeEventWithHoldings [holdings=30, toString()=StockPriceChangeEvent [stockTicker=MICROSOFT, oldPrice=18, newPrice=20]]\n\n#Sink Log\nc.m.s.c.d.f.EventStoreSinkApplication : Received: StockPriceChangeEventWithHoldings [holdings=30, toString()=StockPriceChangeEvent [stockTicker=MICROSOFT, oldPrice=18, newPrice=20]]\n```", "```java\n{  \n  \"_embedded\":{  \n  \"streamDefinitionResourceList\":[  \n         {  \n            \"name\":\"process-stock-change-events\"\n            \"dslText\":\"significant-stock-change-source|stock-\n            intelligence-processor|event-store-sink\",\n            \"status\":\"deployed\",\n            \"statusDescription\":\"All apps have been successfully\n             deployed\",\n            \"_links\":{  \n               \"self\":{  \n                  \"href\":\"http://localhost:9393/streams/definitions/\n                   process-stock-change-events\"\n               }\n            }\n         }\n      ]\n   },\n   \"_links\":{  \n      \"self\":{  \n         \"href\":\"http://localhost:9393/streams/definitions\"\n      }\n   },\n   \"page\":{\n      \"size\":20,\n      \"totalElements\":1,\n      \"totalPages\":1,\n      \"number\":0\n   }\n}\n```", "```java\n@SpringBootApplication\n@EnableTask\n\npublic class SimpleLoggingTaskApplication {\n\n@Bean\npublic CommandLineRunner commandLineRunner() {\n  return strings -> System.out.println(\n  \"Task execution :\" + new SimpleDateFormat().format(new Date()));\n  }\npublic static void main(String[] args) {\n  SpringApplication.run(SimpleLoggingTaskApplication.class, args);\n  }\n}\n```", "```java\napp register --name simple-logging-task --type task --uri maven://com.mastering.spring.cloud.data.flow:simple-logging-task:jar:0.0.1-SNAPSHOT\ntask create --name simple-logging-task-definition --definition \"simple-logging-task\"\n```", "```java\ntask launch simple-logging-task-definition\n```"]