["```java\n    mvn clean package tomcat:run \n\n    ```", "```java\nmvn clean package. \n\n```", "```java\n.................\n-------------------------------------------------------\nT E S T S\n-------------------------------------------------------\nRunning com.packtpub.liverestaurant.client.OrderServiceClientTest\n............................\nTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.633 sec\nResults :\nTests run: 2, Failures: 0, Errors: 0, Skipped: 0 \n\n```", "```java\n<bean id=\"messageFactory\" class=\"org.springframework.ws.soap.saaj.SaajSoapMessageFactory\" />\n<bean id=\"webServiceTemplate\" class=\"org.springframework.ws.client.core.WebServiceTemplate\">\n<constructor-arg ref=\"messageFactory\" />\n<property name=\"defaultUri\" value=\"http://localhost:8080/LiveRestaurant/spring-ws/OrderService\" />\n</bean>\n\n```", "```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(\"/applicationContext.xml\")\npublic class OrderServiceClientTest {\n@Autowired\nprivate WebServiceTemplate webServiceTemplate;\n........\n\n```", "```java\n@After\npublic void setUpAfter() {\napplicationContext.close();\n}\n@Test\npublic final void testPlaceOrderRequest() throws Exception {\nResult result = invokeWS(placeOrderRequest);\nXMLAssert.assertXMLEqual(\"Invalid content received\", getStringFromInputStream(placeOrderResponse), result.toString());\n}\n@Test\npublic final void testCancelOrderRequest() throws Exception {\nResult result = invokeWS(cancelOrderRequest);\nXMLAssert.assertXMLEqual(\"Invalid content received\", getStringFromInputStream(cancelOrderResponse), result.toString());\n}\nprivate Result invokeWS(InputStream is) {\nStreamSource source = new StreamSource(is);\nStringResult result = new StringResult();\nwebServiceTemplate.sendSourceAndReceiveToResult(source, result);\nreturn result;\n}\npublic String getStringFromInputStream (InputStream is)\nthrows IOException {\nBufferedInputStream bis = new BufferedInputStream(is);\nByteArrayOutputStream buf = new ByteArrayOutputStream();\nint result = bis.read();\nwhile(result != -1) {\nbyte b = (byte)result;\nbuf.write(b);\nresult = bis.read();\n}\nreturn buf.toString();\n}\n\n```", "```java\n    <testResources>\n    <testResource>\n    <directory>src/main/webapp</directory>\n    </testResource>\n    </testResources>\n    </build>\n\n    ```", "```java\nmvn clean package \n\n```", "```java\n..................\n-------------------------------------------------------\nT E S T S\n-------------------------------------------------------\nRunning com.packtpub.liverestaurant.service.test.OrderServiceServerSideIntegrationTest\nl.........\nTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.047 sec\nResults :\nTests run: 2, Failures: 0, Errors: 0, Skipped: 0 \n\n```", "```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(\"/WEB-INF/spring-ws-servlet.xml\")\npublic class OrderServiceServerSideIntegrationTest {\n.......................\n\n```", "```java\n@Before\npublic void createClient() {\nwsMockClient = MockWebServiceClient.createClient(applicationContext);\nplaceOrderRequest = new OrderServiceServerSideIntegrationTest().getClass().getResourceAsStream(\"placeOrderRequest.xml\");\ncancelOrderRequest = new OrderServiceServerSideIntegrationTest().getClass().getResourceAsStream(\"cancelOrderRequest.xml\");\nplaceOrderResponse = new OrderServiceServerSideIntegrationTest().getClass().getResourceAsStream(\"placeOrderResponse.xml\");\ncancelOrderRsponse = new OrderServiceServerSideIntegrationTest().getClass().getResourceAsStream(\"cancelOrderResponse.xml\");\n}\n\n```", "```java\n@After\npublic void setUpAfterClass() {\napplicationContext.close();\n}\n@Test\npublic final void testPlaceOrderRequest() throws Exception {\nSource requestPayload = new StreamSource(placeOrderRequest);\nSource responsePayload = new StreamSource(placeOrderResponse);\nwsMockClient.sendRequest(withPayload(requestPayload)).\nandExpect(payload(responsePayload));\n}\n@Test\npublic final void testCancelOrderRequest() throws Exception {\nSource requestPayload = new StreamSource(cancelOrderRequest);\nSource responsePayload = new StreamSource(cancelOrderRsponse);\nwsMockClient.sendRequest(withPayload(requestPayload)).\nandExpect(payload(responsePayload));\n}\n\n```", "```java\nmvn clean package \n\n```", "```java\n**************************\n-------------------------------------------------------\nT E S T S\n-------------------------------------------------------\nRunning com.packtpub.liverestaurant.client.test.ClientSideIntegrationTest\n........\nTests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.945 sec\nResults :\nTests run: 3, Failures: 0, Errors: 0, Skipped: 0 \n\n```", "```java\n    <bean id=\"client\" class=\" com.packtpub.liverestaurant.client.test.OrderServiceClient\">\n    <property name=\"webServiceTemplate\" ref=\"webServiceTemplate\"/>\n    </bean>\n    <bean id=\"webServiceTemplate\" class=\"org.springframework.ws.client.core.WebServiceTemplate\">\n    <property name=\"defaultUri\" value=\"http://www.packtpub.com/liverestaurant/OrderService/schema\"/>\n    </bean>\n    </beans>\n\n    ```", "```java\npublic class OrderServiceClient extends WebServiceGatewaySupport {\npublic Result getStringResult(Source source) {\nStringResult result = new StringResult();\ngetWebServiceTemplate().sendSourceAndReceiveToResult(source, result);\nreturn result;\n}\n}\n\n```", "```java\n@Test\npublic void testExpectedRequestResponse() throws Exception {\nSource requestPayload = new StringSource(getStringFromInputStream(placeOrderRequest));\nSource responsePayload = new StringSource(getStringFromInputStream(placeOrderResponse));\nmockServer.expect(payload(requestPayload)).andRespond(withPayload(responsePayload));\nResult result = client.getStringResult(requestPayload);\nXMLAssert.assertXMLEqual(\"Invalid content received\", xmlToString(responsePayload), result.toString());\nmockServer.verify();\n}\n\n```", "```java\n. @Test\npublic void testSchema() throws Exception {\nResource schema=new FileSystemResource(\"orderService.xsd\");\nmockServer.expect(validPayload(schema));\nclient.getStringResult(new StreamSource(placeOrderRequest));\nmockServer.verify();\n}\n\n```", "```java\n@Test(expected = AssertionError.class)\npublic void testSchemaWithWrongRequest() throws Exception {\nResource schema=new FileSystemResource(\"orderService.xsd\");\nmockServer.expect(validPayload(schema));\nclient.getStringResult(new StringSource(getStringFromInputStream(cancelOrderRequestWrong)));\nmockServer.verify();\n}\n\n```", "```java\n    <bean id=\"messageFactory\" class=\"org.springframework.ws.soap.saaj.SaajSoapMessageFactory\" />\n    <bean id=\"webServiceTemplate\" class=\"org.springframework.ws.client.core.WebServiceTemplate\">\n    <constructor-arg ref=\"messageFactory\" />\n    <property name=\"defaultUri\" value=\"http://localhost:8081/LiveRestaurant/spring-ws/OrderService\" />\n    </bean>\n\n    ```", "```java\n    mvn clean package tomcat:run \n\n    ```", "```java\n    mvn clean package \n\n    ```", "```java\nmvn clean package tomcat:run \n\n```"]