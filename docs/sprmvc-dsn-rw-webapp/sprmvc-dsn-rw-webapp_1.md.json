["```java\n<dependencies>\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-context</artifactId>\n    <version>${spring-framework.version}</version>\n  </dependency>\n  ...\n</dependencies>\n```", "```java\n<repositories>\n    <repository>\n        <id>io.spring.repo.maven.milestone</id>\n        <url>http://repo.spring.io/milestone/</url>\n        <snapshots><enabled>false</enabled></snapshots>\n    </repository>\n</repositories>\n```", "```java\ndependencies {\n    compile('org.springframework:spring-context')\n    compile('org.springframework:spring-tx')\n    compile('org.hibernate:hibernate-entitymanager')\n    testCompile('junit:junit')\n}\n```", "```java\n<dependency org=\"org.springframework\"\n    name=\"spring-core\" rev=\"4.2.0.RC3\" conf=\"compile->runtime\"/>\n```", "```java\ninterface GreetingService {\n   void greet(String message);\n}\n\npublic class GreetingServiceImpl implements GreetingService {\n   Logger logger = LoggerFactory.getLogger(GreetingService.class);\n\n   public void greet(String message) {\n      logger.info(\"Greetings! \" + message);\n   }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans \n\n   xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n   <bean id=\"Greeter\"\n      class=\"com.springessentialsbook.chapter1.GreetingServiceImpl\">\n   </bean>\n</beans>\n```", "```java\npublic class Application {\n\n   public static void main(String[] args) {\n      ApplicationContext context = new ClassPathXmlApplicationContext(new String[] {\"application-context.xml\"});\n      GreetingService greeter = (GreetingService) context.getBean(\"Greeter\");\n     greeter.greet(\"I am your first Spring bean instance, configured purely with XML metadata. I am resolved by name.\");\n   }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans ...>\n\n   <import resource=\"/xml-data-access-objects.xml\"/>\n   <import resource=\"/xml-services.xml\"/>\n   <import resource=\"/web-beans.xml\"/>\n   <import resource=\"/rest-endpoints.xml\"/>\n...\n   <bean id=\"systemSettings\" class=\"com...SystemSettings\">\n</beans>\n```", "```java\n@Component(\"Greeter\")\npublic class GreetingServiceImpl implements GreetingService {\n\n   Logger logger = LoggerFactory.getLogger(GreetingService.class);\n\n   public void greet(String message) {\n      logger.info(\"Greetings! \" + message);\n   }\n}\n```", "```java\n<context:component-scan base-package=\"com.springessentialsbook\"/>\n```", "```java\n@Configuration\n@ComponentScan(basePackages = \"com.springessentialsbook\")\npublic class SpringJavaConfigurator {\n\n    @Autowired\n    private GreetingService greeter;\n\n    @Autowired\n    private BannerService banner;\n\n    @Bean\n    public BannerService createBanner() {\n        return new BannerService();\n    }\n\n    public BannerService getBanner() {\n        return this.banner;\n    }\n\n    public void run() {\n        this.banner.displayBanner();\n        this.greeter.greet(\"I am the Greeter Spring bean, configured with Java Configuration.\");\n    }\n}\n```", "```java\nApplicationContext ctx = new AnnotationConfigApplicationContext(\n  SpringJavaConfigurator.class);\nSpringJavaConfigurator app = ctx.getBean(SpringJavaConfigurator.class);\napp.run();\nBannerService banner = ctx.getBean(BannerService.class);\nbanner.displayBanner();\n```", "```java\n<alias name=\"fromName\" alias=\"toName\"/>\n```", "```java\n<bean id=\"xmlTaskService\" class=\"com...XmlDefinedTaskService\"\ninit-method=\"init\" destroy-method=\"cleanup\">\n   <constructor-arg ref=\"userService\"/>\n   <constructor-arg>\n      <bean class=\"com...TaskInMemoryDAO\"></bean>\n   </constructor-arg>\n</bean>\n```", "```java\n@Service\npublic class AnnotatedTaskService implements TaskService {\n\n...\n   @Autowired\n   private UserService userService;\n\n   @Autowired\n   private TaskDAO taskDAO;\n\n   @PostConstruct\n   public void init() {\n      logger.debug(this.getClass().getName() + \" started!\");\n   }\n\n   @PreDestroy\n   public void cleanup() {\n      logger.debug(this.getClass().getName() + \" is about to destroy!\");\n   }\n\n   public Task createTask(String name, int priority, int createdByuserId, int assigneeUserId) {\n      Task task = new Task(name, priority, \"Open\",\n         userService.findById(createdByuserId), null,\n         userService.findById(assigneeUserId));\n      taskDAO.createTask(task);\n      logger.info(\"Task created: \" + task);\n      return task;\n   }\n...\n}\n```", "```java\n<bean id=\"greeter\" class=\"com...GreetingBean\"></bean>\n```", "```java\n@Component(\"greeter\")\npublic class GreetingService {\n...\n}\n```", "```java\n<bean id=\"Greeter\" class=\"...GreetingBean\" factory-method=\"newInstance\"></bean>\n```", "```java\n@Configuration\n@ComponentScan(basePackages = \"com.springessentialsbook\")\npublic class SpringJavaConfigurator {\n...\n   @Bean\n   public BannerService createBanner() {\n      return new BannerServiceImpl();\n   }\n...\n}\n```", "```java\n<bean id=\"greeter\"  factory-bean=\"serviceFactory\" factory-method=\"createGreeter\"/>\n<bean id=\"serviceFactory\"  class=\"...ServiceFactory\">\n<!\u2014 ... Dependencies ... -->\n</bean>\n```", "```java\npublic class SimpleTaskService implements TaskService {\n...\n   private UserService userService;\n   private TaskDAO taskDAO;\n\n   public SimpleTaskService(UserService userService, TaskDAO taskDAO) {\n      this.userService = userService;\n      this.taskDAO = taskDAO;\n   }\n...\n}\n```", "```java\n<bean id=\"taskService\" class=\"com...SimpleTaskService\"\">\n   <constructor-arg ref=\"userService\" />\n   <constructor-arg ref=\"taskDAO\"/>\n</bean>\n```", "```java\n<bean id=\"systemSettings\" class=\"com...SystemSettings\">\n   <constructor-arg index=\"0\" type=\"int\" value=\"5\"/>\n   <constructor-arg index=\"1\" type=\"java.lang.String\" value=\"dd/mm/yyyy\"/>\n   <constructor-arg index=\"2\" type=\"java.lang.String\" value=\"Taskify!\"/>\n</bean>\n```", "```java\n<bean id=\"systemSettings\" class=\"com...SystemSettings\">\n   <property name=\"openUserTasksMaxLimit\" value=\"5\"/>\n   <property name=\"systemDateFormat\" value=\"dd/mm/yyyy\"/>\n   <property name=\"appDisplayName\" value=\"Taskify!\"/>\n</bean>\n```", "```java\n<beans     xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context/spring-context.xsd\">\n\n   <bean id=\"p-taskService\" class=\"com...SimpleTaskService\" c:userService-ref=\"userService\" c:taskDAO-ref=\"taskDAO\"/>\n\n   <bean id=\"p-systemSettings\" class=\"com...SystemSettings\"\n      p:openUserTasksMaxLimit=\"5\"\n      p:systemDateFormat\"dd/mm/yyyy\"\n      p:appDisplayName=\"Taskify!\"/>\n</beans>\n```", "```java\n<bean id=\"systemSettings\" class=\"com...SystemSettings\">\n. . .\n  <constructor-arg>\n    <list>\n      <value>admin@taskify.ae</value>\n      <value>it@taskify.ae</value>\n      <value>devops@taskify.ae</value>\n    </list>\n  </constructor-arg>\n</bean>\n```", "```java\n<bean id=\"systemSettings\" class=\"com...SystemSettings\">\n. . .\n  <property name=\"emails\">\n    <map>\n      <entry key=\"admin\" value=\"admin@taskify.ae\"></entry>\n      <entry key=\"it\" value=\"it@taskify.ae\"></entry>\n      <entry key=\"devops\" value=\"devops@taskify.ae\"></entry>\n    </map>\n  </property>\n</bean>\n```", "```java\n@Service\npublic class AnnotatedTaskService implements TaskService {\n...\n   @Autowired\n   public AnnotatedTaskService(UserService userService, TaskDAO taskDAO) {\n      this.userService = userService;\n      this.taskDAO = taskDAO;\n   }\n...\n}\n```", "```java\n@Service\npublic class AnnotatedTaskService implements TaskService {\n...\n   @Autowired\n   private UserService userService;\n   @Autowired\n   private TaskDAO taskDAO;\n...\n}\n```", "```java\n@Autowired(required = true)\n@Qualifier(\"taskDAO\")\nprivate UserService userService;\n```", "```java\n@Autowired\npublic AnnotatedTaskService(@Qualifier(\"userService\") UserService userService, @Qualifier(\"taskDAO\") TaskDAO taskDAO) {\n   this.userService = userService;\n   this.taskDAO = taskDAO;\n}\n```", "```java\n<bean id=\"userPreferences\" class=\"com...UserPreferences\" scope=\"session\">... </bean>\n```", "```java\n@Component\n@Scope(\"request\")\npublic class TaskSearch {...}\n```", "```java\n<bean id=\"userPreferences\" class=\"com...UserPreferences\" scope=\"session\">\n   <aop:scoped-proxy />\n</bean>\n<bean id=\"taskService\" class=\"com...TaskService\">\n   <constructor-arg ref=\"userPreferences\"/>\n</bean>\n```", "```java\n@Component\n@Scope(value = \"session\", proxyMode = ScopedProxyMode.TARGET_CLASS)\npublic class UserPreferences { ... }\n\npublic class AnnotatedTaskService implements TaskService {\n...\n   @Autowired\n   private UserPreferences userPreferences;\n...\n}\n```", "```java\npublic class UserServiceImpl implements UserService, InitializingBean, DisposableBean {\n...\n   @Override\n   public void afterPropertiesSet() throws Exception {\n      logger.debug(this + \".afterPropertiesSet() invoked!\");\n      // Your initialization code goes here..\n   }\n\n   @Override\n   public void destroy() throws Exception {\n      logger.debug(this + \".destroy() invoked!\");\n      // Your cleanup code goes here..\n   }\n...\n}\n```", "```java\n@Service\npublic class AnnotatedTaskService implements TaskService {\n...\n   @PostConstruct\n   public void init() {\n      logger.debug(this.getClass().getName() + \" started!\");\n   }\n\n   @PreDestroy\n   public void cleanup() {\n      logger.debug(this.getClass().getName() + \" is about to destroy!\");\n   }\n...\n}\n```", "```java\n<bean id=\"xmlTaskService\" class=\"com...XmlDefinedTaskService\" init-method=\"init\" destroy-method=\"cleanup\">\n...\n</bean>\n```", "```java\n<beans default-init-method=\"init\" default-destroy-method=\"cleanup\">\n...\n</beans>\n```", "```java\n@Configuration\n@ComponentScan(basePackages = \"com.springessentialsbook\")\npublic class ProfileConfigurator {\n\n   @Bean\n   @Profile(\"dev\")\n   public DataSource devDataSource() {\n      return new EmbeddedDatabaseBuilder()\n         .setType(EmbeddedDatabaseType.HSQL) .addScript(\"scripts/tasks-system-schema.sql\") .addScript(\"scripts/tasks-master-data.sql\") .build();\n   }\n   @Bean\n   @Profile(\"prod\")\n   public DataSource productionDataSource() throws Exception {\n      Context ctx = new InitialContext();\n      return (DataSource) ctx.lookup(\"java:comp/env/jdbc/datasource/tasks\");\n   }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans \n\n  xsi:schemaLocation=\"...\">\n  <!-- other bean definitions -->\n  <beans profile=\"dev\">\n    <jdbc:embedded-database id=\"dataSource\">\n      <jdbc:script location=\"classpath:scripts/tasks-system-schema.sql\"/>\n      <jdbc:script location=\"classpath:scripts/tasks-master-data.sql\"/>\n    </jdbc:embedded-database>\n  </beans>\n\n  <beans profile=\"production\">\n    <jee:jndi-lookup id=\"dataSource\" jndi-name=\"java:comp/env/jdbc/datasource\"/>\n  </beans>\n</beans>\n```", "```java\n@Configuration\n@PropertySource(\"classpath:application.properties\")\n@ComponentScan(basePackages = \"com.springessentialsbook\")\npublic class SpringJavaConfigurator {\n...\n   @Autowired\n   @Lazy\n   private SystemSettings systemSettings;\n\n   @Autowired\n   private Environment env;\n\n   @Bean\n   public SystemSettings getSystemSettings() {\n      String dateFormat = env.getProperty(\"system.date-format\");\n      String appDisplayName = env.getProperty(\"app.displayname\");\n\n      return new SystemSettings(dateFormat, appDisplayName);\n   }\n\u2026\n}\n```", "```java\n<bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n    <property name=\"locations\" value=\"classpath:datasource.properties\"/>\n</bean>\n\n<bean id=\"dataSource\" destroy-method=\"close\"\n        class=\"org.apache.commons.dbcp.BasicDataSource\">\n    <property name=\"driverClassName\" value=\"${jdbc.driverClassName}\"/>\n    <property name=\"url\" value=\"${jdbc.url}\"/>\n    <property name=\"username\" value=\"${jdbc.username}\"/>\n    <property name=\"password\" value=\"${jdbc.password}\"/>\n</bean>\n```", "```java\n<context:property-placeholder location=\"classpath:datasource.properties\"/>\n```", "```java\nApplicationContext context = new ClassPathXmlApplicationContext(new String[] {\"application-context.xml\"});\nResource classPathResource = ctx.getResource(\"classpath:scripts/tasks-schema.sql\");\n\nResource fileResource = ctx.getResource(\"file:///scripts/master-data.sql\");\n\nResource urlResource = ctx.getResource(\"http://country.io/names.json\");\n```", "```java\n@Value(\"http://country.io/names.json\")\nprivate Resource countriesResource;\n```", "```java\n<property name=\"countriesResource\" value=\"http://country.io/names.json\"/>\n```", "```java\n@Component\n@Scope(\"prototype\")\npublic class TaskSnapShot {\n\n   Value(\"#{taskService.findAllTasks().size()}\")\n   private String totalTasks;\n\n   @Value(\"#{taskService.findAllTasks()}\")\n   private List<Task> taskList;\n\n   @Value(\"#{ new java.util.Date()}\")\n   private Date reportTime;\n\n   @Value(\"#{taskService.findAllTasks().?[status == 'Open']}\")\n   private List<Task> openTasks;\n...\n\n}\n```", "```java\n@Component\npublic class TaskSnapshotBuilder {\n\n   @Autowired\n   private TaskService taskService;\n\n   public TaskSnapShot buildTaskSnapShot() {\n      TaskSnapShot snapshot = new TaskSnapShot();\n\n      ExpressionParser parser = new SpelExpressionParser();\n      EvaluationContext context = new StandardEvaluationContext(taskService);\n      Expression exp = parser.parseExpression(\"findAllTasks().size()\");\n      snapshot.setTotalTasks(exp.getValue(context).toString());\n\n      exp = parser.parseExpression(\"findAllTasks()\");\n      snapshot.setTaskList((List<Task>)exp.getValue(context));\n\n      exp = parser.parseExpression(\"new java.util.Date()\");\n      snapshot.setReportTime((Date)exp.getValue(context));\n\n      exp = parser.parseExpression(\"findAllTasks().?[status == 'Open']\");\n      snapshot.setOpenTasks((List<Task>)exp.getValue(context));\n\n      return snapshot;\n   }\n\n}\n```", "```java\n<beans \n\n    xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd\">\n<!-- bean definitions here -->\n</beans>\n```", "```java\n@Configuration\n@ComponentScan(basePackages = \"com.springessentialsbook\")\n@EnableAspectJAutoProxy\npublic class AOPJavaConfigurator {\n...\n}\n```", "```java\n@Component(\"auditLoggerAspect\")\n@Aspect\npublic class AuditLoggerAspect {\n...\n}\n```", "```java\n<aop:config>\n   <aop:aspect id=\"audLogAspect\" ref=\"auditLoggerAspect\">\n</aop:config>\n<bean id=\"auditLoggerAspect\" class=\"com...AuditLoggerAspect\"/>\n```", "```java\n@Pointcut(\"execution(* com.springessentialsbook.service.TaskService.createTask(..))\") //Pointcut expression\nprivate void createTaskPointCut() {} //Signature\n```", "```java\n@Pointcut(\"execution(* com.taskify.service.*.*(..))\")\nprivate void allServiceMethods() {}\n\n@Pointcut(\"execution(public * *(..))\")\nprivate void anyPublicOperation() {}\n\n@Pointcut(\"anyPublicOperation() && allServiceMethods()\")\nprivate void allPublicServiceMethods() {}\n\n@Pointcut(\"within(com.taskify.service..*)\")\nprivate void allServiceClasses() {}\n\n@Pointcut(\"execution(* set*(..))\")\nprivate void allSetMethods() {}\n\n@Pointcut(\"execution(* com.taskify.service.TaskService.*(..))\")\nprivate void allTaskServiceMethods() {}\n\n@Pointcut(\"target(com.taskify.service.TaskService)\")\nprivate void allTaskServiceImplMethods() {}\u2029\n\n@Pointcut(\"@within(org.springframework.transaction.annotation.Transactional)\")\nprivate void allTransactionalObjectMethods() {}\n\n@Pointcut(\"@annotation(org.springframework.transaction.annotation.Transactional)\")\nprivate void allTransactionalAnnotatedMethods() {}\n\n@Pointcut(\"bean(simpleTaskService)\")\nprivate void allSimpleTaskServiceBeanMethods() {}\n```", "```java\n<aop:config>\n  ...\n   <aop:pointcut id=\"allTaskServicePointCut\"\n         expression=\"execution(*com.taskify.service..TaskService.*(..))\"/>\n</aop:config>\n```", "```java\n@Pointcut(\"execution(* com.taskify.service.TaskService.*(..))\")\nprivate void allTaskServiceMethods() {}\n\n@Before(\"allTaskServiceMethods()\")\nprivate void logBeforeAllTaskServiceMethods() {\n  logger.info(\"*** logBeforeAllTaskServiceMethods invoked ! ***\");\n}\n```", "```java\n@After(\"execution(* com.taskigy.service.TaskService.*(..))\")\nprivate void logAfterAllTaskServiceMethods() {\n  logger.info(\"***logAfterAllTaskServiceMethods invoked ! ***\");\n}\n```", "```java\n@Around(\"execution(* com.taskify.service.**.find*(..))\")\nprivate Object profileServiceFindAdvice(ProceedingJoinPoint jPoint) throws Throwable {\n    Date startTime = new Date();\n    Object result = jPoint.proceed(jPoint.getArgs());\n    Date endTime = new Date();\n    logger.info(\"Time taken to execute operation: \" + jPoint.getSignature() + \" is \" + (endTime.getTime() - startTime.getTime()) + \" ms\");\n    return result;\n}\n```", "```java\n@Before(\"execution(* com.taskify.service.TaskService.createTask(..)\")\nprivate void logBeforeCreateTaskAdvice(JoinPoint joinpoint) {\n   logger.info(\"***logBeforeCreateTaskAdvice invoked ! ***\");\n   logger.info(\"args = \" + Arrays.asList(joinpoint.getArgs()));\n}\n```", "```java\n@Before(\"createTaskPointCut() and args(name, priority, createdByuserId, assigneeUserId)\")\nprivate void logBeforeCreateTaskAdvice(String name, int priority, int createdByuserId, int assigneeUserId) {\n\n  logger.info(\"name = \" + name + \"; priority = \" + priority + \";\n  createdByuserId = \" + createdByuserId);\n}\n```", "```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <web-app \n\n      xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee\n      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\">\n    <!-- \\ Root Container shared by Servlets and Filters -->\n      <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>/WEB-INF/spring/root-context.xml</param-value>\n      </context-param>\n\n    <!-- Loads Spring Container shared by all Servlets and Filters -->\n      <listener>\n        <listener-class>\n          org.springframework.web.context.ContextLoaderListener\n        </listener-class>\n      </listener>\n\n      <!-- Processes application requests -->\n      <servlet>\n        <servlet-name>appServlet</servlet-name>\n        <servlet-class>\n          org.springframework.web.servlet.DispatcherServlet\n        </servlet-class>\n        <init-param>\n          <param-name>contextConfigLocation</param-name>\n          <param-value>/WEB-INF/spring/servlet-context.xml</param-value>\n        </init-param>\n        <load-on-startup>1</load-on-startup>\n      </servlet>\n\n      <servlet-mapping>\n        <servlet-name>appServlet</servlet-name>\n        <url-pattern>/</url-pattern>\n      </servlet-mapping>\n    </web-app>\n    ```", "```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <beans \n\n      xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n      <!-- Root Context: defines all shared beans go here -->\n    </beans>\n    ```", "```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <beans:beans  ...>\n\n      <!-- Enables the Spring MVC @Controller programming model -->\n      <annotation-driven />\n      <context:component-scan base package=\"com.taskify\"/>\n\n      <!-- Handles HTTP GET requests for /resources/** by serving up static resources in ${webappRoot}/resources directory -->\n      <resources mapping=\"/resources/**\" location=\"/resources/\" />\n\n      <!-- Resolves views selected for rendering by @Controllers to\n          .jsp resources in the /WEB-INF/views directory -->\n      <beans:bean class=\n      \"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n        <beans:property name=\"prefix\" value=\"/WEB-INF/views/\" />\n        <beans:property name=\"suffix\" value=\".jsp\" />\n      </beans:bean>\n    </beans:beans>\n    ```", "```java\n    @Controller\n    public class HomeController {\n      private static final Logger logger = LoggerFactory.getLogger(HomeController.class);\n      @Autowired\n      private TaskService taskService;\n      // Simply selects the home view to render by returning // name.\n      @RequestMapping(value = \"/\", method = RequestMethod.GET)\n      public String home(Locale locale, Model model) {\n        logger.info(\"Welcome to Taskify! Locale is {}.\", locale);\n        model.addAttribute(\"totalTasks\",\n        taskService.findAllTasksCount() );\n        model.addAttribute(\"totalOpenTasks\", taskService.findAllOpenTasksCount() );\n        return \"home\";\n      }\n    }\n    ```", "```java\n    <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>\n    <%@ page session=\"false\"%>\n    <html>\n      <head>\n        <jsp:include page=\"/WEB-INF/views/theme.jsp\"></jsp:include>\n        <title>Taskify :: Home</title>\n      </head>\n      <body>\n        <jsp:include page=\"/WEB-INF/views/navbar.jsp\"></jsp:include>\n        <div class=\"container\">\n          <h1>Welcome to Taskify!</h1><hr />\n          <P>There are ${totalOpenTasks}(${totalTasks}) open tasks.</P>\n        </div>\n      </body>\n    </html>\n    ```", "```java\n   <listener>\n      <listener-class>\n         org.springframework.web.context.ContextLoaderListener\n      </listener-class>\n   </listener>\n```", "```java\n<context-param>\n   <param-name>contextConfigLocation</param-name>\n   <param-value>/WEB-INF/spring/root-context.xml</param-value>\n</context-param>\n```", "```java\n<servlet>\n   <servlet-name>appServlet</servlet-name>\n   <servlet-class>\n      org.springframework.web.servlet.DispatcherServlet\n   </servlet-class>\n   <init-param>\n      <param-name>contextConfigLocation</param-name>\n      <param-value>\n         /WEB-INF/spring/appServlet/servlet-context.xml\n      </param-value>\n   </init-param>\n   <load-on-startup>1</load-on-startup>\n</servlet>\n\n<servlet-mapping>\n   <servlet-name>appServlet</servlet-name>\n   <url-pattern>/</url-pattern>\n</servlet-mapping>\n```", "```java\n<P>There are ${totalOpenTasks}(${totalTasks}) open tasks.</P>\n```", "```java\npublic class ApplicationInitializer implements WebApplicationInitializer {\n\n  private static final Logger logger = LoggerFactory.getLogger(ApplicationInitializer.class);\n\n  @Override\n  public void onStartup(ServletContext servletContext) throws ServletException {\n\n    logger.info(\"===== Application is starting up! ========\");\n    XmlWebApplicationContext appContext = new XmlWebApplicationContext();\n    appContext.setConfigLocation(\"/WEB- INF/spring/appServlet/servlet- context.xml\");\n\n    ServletRegistration.Dynamic registration = servletContext.addServlet(\"rootDispatcher\", new DispatcherServlet(appContext));\n    registration.setLoadOnStartup(1);\n    registration.addMapping(\"/\");\n  }\n```", "```java\npublic interface Controller {\n\n   ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception;\n}\n```", "```java\n@Controller\npublic class HomeController {\n\n   @RequestMapping(value = \"/\", method = RequestMethod.GET)\n   public String home(Model model) {\n      logger.info(\"Welcome to Taskify\", locale);\n      return \"home\";\n   }\n}\n```", "```java\n<context:component-scan base-package=\"com.taskify\" />\n```", "```java\n@Controller\n@RequestMapping(\"/users\")\npublic class UserController {\n\n   @Autowired\n   private UserService userService;\n\n   @RequestMapping(method = RequestMethod.GET)\n   public String listAllUsers(Locale locale, Model model) {\n      model.addAttribute(\"users\", userService.findAllUsers());\n      return \"user/list\";\n   }\n\n   @RequestMapping(path = \"/new\", method = RequestMethod.GET)\n   public String newUserForm(Model model) {\n      User user = new User();\n      user.setDateOfBirth(new Date());\n      model.addAttribute(\"user\", user);\n      return \"user/new\";\n   }\n\n   @RequestMapping(path = \"/new\", method = RequestMethod.POST)\n   public String saveNewUser(@ModelAttribute(\"user\") User user, Model model) {\n      userService.createNewUser(user);\n      return \"redirect:/user\";\n   }\n   @RequestMapping(path = \"/{id}\", method = RequestMethod.GET)\n   public ModelAndView viewUser(@PathVariable(\"id\") Long id) {\n      return new ModelAndView(\"user/view\").addObject(\"user\", userService.findById(id));\n   }\n\n   @RequestMapping(path = \"/{id}/edit\", method = RequestMethod.GET)\n   public String editUser(@PathVariable(\"id\") Long id, Model model) {\n      model.addAttribute(\"user\", userService.findById(id));\n      return \"user/edit\";\n   }\n\n   @RequestMapping(path = \"/{id}\", method = RequestMethod.PUT)\n   public String updateUser(@PathVariable(\"id\") Long id, @ModelAttribute(\"user\") User user, Model model) {\n      userService.updateUser(user);\n      model.addAttribute(\"user\", userService.findById(user.getId()));\n      return \"redirect:/user/\" + id;\n   }\n\n   @RequestMapping(path = \"/{id}\", method = RequestMethod.DELETE)\n   public String deleteUser(@PathVariable(\"id\") Long id, Model model) {\n      User existingUser = userService.findById(id);\n      userService.deleteUser(existingUser);\n      return \"redirect:/user\";\n   }\n}\n```", "```java\n<filter>\n   <filter-name>httpMethodFilter</filter-name>\n   <filter-class>org.springframework.web.filter. HiddenHttpMethodFilter</filter-class>\n</filter>\n\n<filter-mapping>\n   <filter-name>httpMethodFilter</filter-name>\n   <servlet-name>rootDispatcher</servlet-name>\n</filter-mapping>\n```", "```java\n@RequestMapping(path = \"/{id}/edit\", method = RequestMethod.GET)\npublic String editUser(@PathVariable(\"id\") Long id, Model mdl) { \u2026 }\n```", "```java\n@Controller\npublic class TaskController {\n...\n   @RequestMapping(path = \"/tasks\", method = RequestMethod.GET)\n   public String list(@RequestParam(name = \"status\", required = false) String status, Model model) {\n      model.addAttribute(\"status\", status);\n      model.addAttribute(\"tasks\", taskService.findAllTasks(status));\n      return \"task/list\";\n   }\n...\n}\n```", "```java\n@ModelAttribute(value = \"users\")\npublic List<User> getUsersList() {\n   return userService.findAllUsers();\n}\n```", "```java\n@RequestMapping(path = \"/tasks/new\", method = RequestMethod.GET)\npublic String newTaskForm(Model model) {\n   model.addAttribute(\"task\", new Task());\n   return \"task/new\";\n}\n```", "```java\n<dependency>\n   <groupId>com.fasterxml.jackson.core</groupId>\n   <artifactId>jackson-databind</artifactId>\n   <version>2.6.2</version>\n</dependency>\n```", "```java\n@RequestMapping(path = \"/tasks/new.json\", method=RequestMethod.POST, consumes = \"application/json\", produces = \"application/json\")\n@ResponseBody\npublic CreateTaskResponse createNewTaskJSON(@RequestBody CreateTaskRequest createRequest) {\n   Task task = new Task();\n   task.setName(createRequest.getTaskName());\n   ...\n   return new CreateTaskResponse(taskService.createTask(task));\n}\n```", "```java\n{\n   \"taskName\":\"Project estimation\",\n   \"priority\": 2,\n   \"creatorId\": 1,\n   \"assigneeId\": 2,\n   \"comments\": \"Involve the team in the process\"\n}\n```", "```java\n@RequestMapping(path = \"/tasks/new.xml\", method = RequestMethod.POST, consumes = \"application/xml\", produces = \"application/xml\")\n@ResponseBody\npublic CreateTaskResponse createNewTaskXML(@RequestBody CreateTaskRequest createRequest) {\n   Task task = new Task()\n   task.setName(createRequest.getTaskName());\n   . . .\n   return new CreateTaskResponse(taskService.createTask(task));\n}\n```", "```java\n<CreateTaskRequest>\n   <taskName>Estimate the project</taskName>\n   <priority>2</priority>\n   <creatorId>1</creatorId>\n   <assigneeId>2</assigneeId>\n   <comments>Involve the team in the process</comments>\n</CreateTaskRequest>\n```", "```java\n@RestController\npublic class TaskRestController {\n   . . .\n  @RequestMapping(path=\"/api/tasks/new.json\", method=RequestMethod.POST, consumes=\"application/json\",produces= \"application/json\")\n  public CreateTaskResponse createNewTaskJSON(@RequestBody CreateTaskRequest createRequest) {\n    Task task = new Task();\n    task.setName(createRequest.getTaskName());\n    . . .\n    return new CreateTaskResponse(taskService.createTask(task));\n  }}\n}\n```", "```java\n@RequestMapping(path=\"/tasks/new.xml\",method= RequestMethod.POST, consumes = \"application/xml\", produces = \"application/xml\")\n@ResponseBody\npublic Callable<CreateTaskResponse> createNewTaskXMLAsyncCallable( @RequestBody CreateTaskRequest createRequest) {\n   return new Callable<CreateTaskResponse>() {\n\n      @Override\n      public CreateTaskResponse call() throws Exception {\n         Task task = new Task();\n         task.setName(createRequest.getTaskName());\n         . . .\n         Task persistedTask = taskService.createTask(task);\n         // Send an email here...\n         // Send some push notifications here...\n         . . .\n         return new CreateTaskResponse(persistedTask);\n      }\n   };\n}\n```", "```java\n@RequestMapping(path = \"/tasks/new-async-deferred.json\", method = RequestMethod.POST, consumes = \"application/json\", produces = \"application/json\")\n@ResponseBody\npublic DeferredResult<CreateTaskResponse> createNewTaskJSONAsyncDeferredResult( @RequestBody CreateTaskRequest createRequest) {\n\n   DeferredResult<CreateTaskResponse> defResult = new DeferredResult<>();\n   CompletableFuture.runAsync(new Runnable() {\n      @Override\n      public void run() {\n         Task task = new Task();\n         task.setName(createRequest.getTaskName());\n         . . .\n         Task persistedTask = taskService.createTask(task);\n         // Send an email here...\n         // Send some push notifications here...\n         defResult.setResult(newCreateTaskResponse(persistedTask));\n      }\n   });\n   return deferredResult;\n}\n```", "```java\n<servlet>\n   <servlet-name>appServlet</servlet-name>\n   <servlet-class>\n      org.springframework.web.servlet.DispatcherServlet</servlet-class>\n   . . .\n   <async-supported>true</async-supported>\n</servlet>\n```", "```java\n<beans:bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n  <beans:property name=\"prefix\" value=\"/WEB-INF/views/\" />\n  <beans:property name=\"suffix\" value=\".jsp\" />\n</beans:bean>\n```", "```java\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>\n...\n<table class=\"table table-hover\">\n  <thead>\n    <tr>\n      <th>ID</th>\n      <th>Task</th>\n      <th>Status</th>\n      <th>Priority</th>\n      <th>Created By</th>\n      <th>Assigned To</th>\n    </tr>\n  </thead>\n  <tbody>\n    <c:if test=\"${not empty tasks}\">\n      <c:forEach var=\"task\" items=\"${tasks}\">\n        <tr>\n          <td>\n            <a href='<c:url value=\"/tasks/${task.id}\"/>'>${task.id}</a>\n          </td>\n          <td>${task.name}</td>\n          <td>${task.status}</td>\n          <td>${task.priority}</td>\n          <td>${task.createdBy.name}</td>\n          <td>${task.assignee.name}</td>\n        </tr>\n      </c:forEach>\n    </c:if>\n  </tbody>\n</table>\n...\n```", "```java\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>\n<%@ taglib prefix=\"spring\" uri=\"http://www.springframework.org/tags\"%>\n<%@ taglib prefix=\"form\" uri=\"http://www.springframework.org/tags/form\"%>\n...\n<form:form action=\"new\" method=\"post\" commandName=\"task\">\n  <spring:bind path=\"name\">\n    <div class=\"form-group${status.error ? ' has-error' : ''}\">\n      <label for=\"txtTaskName\">Task-name</label>\n      <form:input path=\"name\" class=\"form-control\" id=\"txtTaskName\" placeholder=\"Task Name\" />\n      <form:errors path=\"name\" cssClass=\"control-label\" />\n    </div>\n  </spring:bind>\n  <div class=\"form-group\">\n    <label for=\"txtComments\">Comments</label>\n    <form:textarea path=\"comments\" class=\"form-control\" id=\"txtComments\" placeholder=\"Comments\" rows=\"5\" cols=\"30\" />\n  </div>\n  <spring:bind path=\"createdBy.id\">\n    <div class=\"form-group${status.error ? ' has-error' : ''}\">\n      <label for=\" slCrtBy \">Created By</label>\n      <form:select path=\"createdBy\" id=\"slCrtBy\" class=\"form-control\">\n        <form:option value=\"-1\" label=\"-- Select --\">\n        </form:option>\n        <form:options items=\"${users}\" itemValue=\"id\" itemLabel=\"name\" />\n      </form:select>\n      <form:errors path=\"createdBy.id\" cssClass=\"control-label\" />\n    </div>\n  </spring:bind>\n  <button type=\"submit\" class=\"btn btn-success\">Save</button>\n  <a href='<c:url value=\"/tasks\"/>' class=\"btn btn-primary\">Cancel</a>\n</form:form>\n```", "```java\n@RequestMapping(path = \"/tasks/new\", method = RequestMethod.GET)\npublic String newTaskForm(Model model) {\n   model.addAttribute(\"task\", new Task());\n   model.addAttribute(\"priorities\", priorities); // This is a collection\n   model.addAttribute(\"users\", userService.findAllUsers());\n   return \"task/new\";\n}\n```", "```java\n@RequestMapping(path = \"/tasks/new\", method = RequestMethod.POST)\npublic String createNewTask(@ModelAttribute(\"task\") @Valid Task task, BindingResult result, Model model) {\n   if(result.hasErrors()) {\n      return \"task/new\";\n   } else {\n      taskService.createTask(task);\n      return \"redirect:/tasks\";\n   }\n}\n```", "```java\n    <beans:bean id=\"messageSource\" class=\"org.springframework.context.\n    support.ReloadableResourceBundleMessageSource\">\n       <beans:property name=\"defaultEncoding\" value=\"UTF-8\" />\n       <beans:property name=\"basenames\" value=\"classpath:validation-errors\" />\n    </beans:bean>\n    ```", "```java\n    error.invalid={0} is in invalid format.\n    error.required={0} is required.\n    ```", "```java\n    public class TaskValidator implements Validator {\n\n       @Override\n       public boolean supports(Class<?> clazz) {\n          return clazz.isAssignableFrom(Task.class);\n       }\n\n       @Override\n       public void validate(Object target, Errors errors) {\n          Task task = (Task) target;\n          ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"name\", \"error.required\", new Object[] { \"Task name\" });\n          ValidationUtils.rejectIfEmpty(errors, \"createdBy.id\", \"error.required\", new Object[] { \"Created user\" });\n       }\n    }\n    ```", "```java\n    @InitBinder(\"task\")\n    public void initBinder(WebDataBinder binder) {\n       binder.addValidators(new TaskValidator());\n    }\n    ```", "```java\n    <beans:bean id=\"multipartResolver\" class=\"org.springframework.web.multipart.support.StandardServletMultipartResolver\">\n    </beans:bean>\n    ```", "```java\n    <servlet>\n      <servlet-name>appServlet</servlet-name>\n    ...\n      <multipart-config>\n        <location>/tmp/servlet-uploads</location>\n        <max-file-size>20848820</max-file-size>\n        <max-request-size>418018841</max-request-size>\n        <file-size-threshold>1048576</file-size-threshold>\n      </multipart-config>\n    </servlet>\n    ```", "```java\n    <form:form action=\"../${user.id}/profileForm\" method=\"post\" enctype=\"multipart/form-data\">\n       <div class=\"form-group\">\n          <label for=\"txtUserName\">Choose File</label>\n          <input type=\"file\" name=\"profileImage\"/>\n       </div>\n       <button type=\"submit\" class=\"btn btn-success\">Upload</button>\n       <a href=\"../${user.id}\" class=\"btn btn-primary\">Cancel</a>\n    </form:form>\n    ```", "```java\n    @RequestMapping(path = \"/{userId}/profileForm\", method = RequestMethod.POST)\n    public String uploadProfileImage(@PathVariable(\"userId\") Long userId, @RequestParam(\"profileImage\") MultipartFile file) throws IOException {\n\n       User user = userService.findById(userId);\n       String rootDir = FILE_ROOT_DIR + \"/\" + user.getId();\n\n       if (!file.isEmpty()) {\n          java.io.File fileDir = new java.io.File(fileSaveDirectory);\n          if (!fileDir.exists()) {\n             fileDir.mkdirs();\n          }\n          FileCopyUtils.copy(file.getBytes(), new java.io.File(rootDir  + \"/\" + file.getOriginalFilename()));\n\n          File profileImageFile = this.userService.addProfileImage(userId, file.getOriginalFilename());\n       }\n       return \"redirect:/users/\" + userId;\n    }\n    ```", "```java\n<beans:bean class=\"org.thymeleaf.spring4.view.ThymeleafViewResolver\">\n   <beans:property name=\"templateEngine\" ref=\"templateEngine\" />\n   <beans:property name=\"order\" value=\"1\" />\n   <beans:property name=\"viewNames\" value=\"*.html,*.xhtml\" />\n</beans:bean>\n\n<beans:bean id=\"templateResolver\" class= \"org.thymeleaf.templateresolver.ServletContextTemplateResolver\">\n   <beans:property name=\"prefix\" value=\"/WEB-INF/templates/\" />\n   <beans:property name=\"suffix\" value=\".html\" />\n   <beans:property name=\"templateMode\" value=\"HTML5\" />\n</beans:bean>\n\n<beans:bean id=\"templateEngine\" class=\"org.thymeleaf.spring4.SpringTemplateEngine\">\n   <beans:property name=\"templateResolver\" ref=\"templateResolver\" />\n</beans:bean>\n```", "```java\n<jee:jndi-lookup id=\"taskifyDS\" jndi-name=\"java:jboss/datasources/taskify\"/>\n```", "```java\n<bean id=\"taskifyDS\" class=\"org.apache.commons.dbcp2.BasicDataSource\" destroy-method=\"close\">\n    <property name=\"driverClassName\" value=\"${driverClassName}\" />\n    <property name=\"url\" value=\"${url}\" />\n    <property name=\"username\" value=\"${username}\" />\n    <property name=\"password\" value=\"${password}\" />\n    <property name=\"initialSize\" value=\"3\" />\n    <property name=\"maxTotal\" value=\"50\" />\n    ...\n</bean>\n```", "```java\n<dependency>\n    <groupId>org.apache.commons</groupId>\n    <artifactId>commons-dbcp2</artifactId>\n    <version>2.1.1</version>\n</dependency>\n```", "```java\n<bean id=\"taskifyDS\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n    <property name=\"driverClassName\" value=\"${driverClassName}\" />\n    <property name=\"url\" value=\"${url}\" />\n    <property name=\"username\" value=\"${username}\" />\n    <property name=\"password\" value=\"${password}\" />\n</bean>\n```", "```java\n@Bean\nDataSource getDatasource() {\n    DriverManagerDataSource dataSource = new DriverManagerDataSource(pgDsProps.getProperty(\"url\"));\n    dataSource.setDriverClassName( pgDsProps.getProperty(\"driverClassName\"));\n    dataSource.setUsername(pgDsProps.getProperty(\"username\"));\n    dataSource.setPassword(pgDsProps.getProperty(\"password\"));\n    return dataSource;\n}\n```", "```java\n@Bean\nDataSource getHsqlDatasource() {\n    return new \n        EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.HSQL)\n         .addScript(\"db-scripts/hsql/db-schema.sql\")\n         .addScript(\"db-scripts/hsql/data.sql\")\n         .addScript(\"db-scripts/hsql/storedprocs.sql\")\n         .addScript(\"db-scripts/hsql/functions.sql\")\n         .setSeparator(\"/\").build();\n}\n```", "```java\n<jdbc:embedded-database id=\"dataSource\" type=\"HSQL\">\n  <jdbc:script location=\"classpath:db-scripts/hsql/ db-schema.sql\" />\n    . . . \n</jdbc:embedded-database>\n```", "```java\nString userQuery = \"select * from TBL_NONE where name = ?\";\nSQLExceptionTranslator excTranslator = new SQLExceptionTranslator() {\n\n  @Override\n  public DataAccessException translate(String task, String sql, SQLException ex) {\n    logger.info(\"SUCCESS --- SQLExceptionTranslator.translate invoked !!\");\n    return new BadSqlGrammarException(\"Invalid Query\", userQuery, ex){};\n  }\n};\n```", "```java\nJdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\njdbcTemplate.setExceptionTranslator(excTranslator);\nMap<String, Object> result = jdbcTemplate.queryForMap(userQuery, new Object[] {\"abc\"});\n```", "```java\n<bean id=\"jdbcTemplate\" class=\"org.springframework.jdbc.core.JdbcTemplate\">\n  <constructor-arg ref=\"dataSource\"/>\n</bean>\n<bean id=\"userDAO\" class=\"com.springessentials.chapter3.dao.impl.UserJdbcDAO\">\n  <constructor-arg ref=\"jdbctemplate\"/>\n</bean>\n```", "```java\n@Override\npublic int findAllOpenTasksCount() {\n  return jdbcTemplate.queryForObject(\"select count(id) from tbl_user where status = ?\", new Object[]{\"Open\"}, Integer.class);\n}\n```", "```java\npublic User findByUserName(String userName) {\n  return jdbcTemplate.queryForObject(\"SELECT ID, NAME, USER_NAME, PASSWORD, DOB, PROFILE_IMAGE_ID, PROFILE_IMAGE_NAME FROM TBL_USER WHERE USER_NAME = ?\", new Object[] { userName }, \n    new RowMapper<User>() {\n      @Override\n      public User mapRow(ResultSet rs, int rowNum) throws SQLException {\n        return new User(rs.getLong(\"ID\"), \n        rs.getString(\"NAME\"), \n        userName, \n        rs.getString(\"PASSWORD\"), \n        rs.getDate(\"DOB\"));\n    }\n  });\n}\n```", "```java\n@Override\npublic List<Task> findCompletedTasksByAssignee(Long assigneeId) {\n  String query = \"SELECT * FROM TBL_TASK WHERE STATUS = ? AND \n  ASSIGNEE_USER_ID = ? \";\n\n  return this.jdbcTemplate.query(query, new Object[] {\"Complete\", \n    assigneeId }, new RowMapper<Task>() {\n    @Override\n    public Task mapRow(ResultSet rs, int rowNum) throws SQLException{\n      Task task = new Task();\n      task.setId(rs.getLong(\"id\"));\n      Long assigneeId = rs.getLong(\"assignee_user_id\");\n\n      if (assigneeId != null)\n        task.setAssignee(userDAO.findById(assigneeId));\n      task.setComments(rs.getString(\"comments\"));\n      task.setName(rs.getString(\"name\"));\n      ...\n      return task;\n    }\n  });\n}\n```", "```java\n@Transactional(readOnly = true)\npublic User findUserById(Long userId) {\n  return jdbcTemplate.query(\"SELECT NAME, USER_NAME, PASSWORD, DOB, PROFILE_IMAGE_ID, PROFILE_IMAGE_NAME FROM TBL_USER WHERE ID = ?\",\n    new Object[] { userId }, new ResultSetExtractor<User>() {\n    @Override\n    public User extractData(ResultSet rs) throws SQLException, DataAccessException {\n      if (rs.next()) {\n        return new User(userId, rs.getString(\"NAME\"), rs.getString(\"USER_NAME\"), rs.getString(\"PASSWORD\"), rs.getDate(\"DOB\"));\n      } else {\n        return null;\n      }\n    }\n  });\n}\n```", "```java\n@Override\npublic void createUser(User user) {\n  jdbcTemplate.update(\"INSERT INTO TBL_USER(NAME, USER_NAME, PASSWORD, DOB) VALUES(?,?,?,?)\", new Object[] { user.getName(), user.getUserName(), user.getPassword(), user.getDateOfBirth()});\n}\n```", "```java\npublic void createUser(User user) {\n  KeyHolder keyHolder = new GeneratedKeyHolder();\n  jdbcTemplate.update( new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {\n      PreparedStatement ps = connection.prepareStatement(\n      \"INSERT INTO TBL_USER(NAME,USER_NAME,PASSWORD,DOB) VALUES(?,?,?,?)\", new String[]{\"ID\"});\n\n        ps.setString(1, user.getName());\n        ps.setString(2, user.getUserName());\n        ps.setString(3, user.getPassword());\n        ps.setDate(4, new java.sql.Date(user.getDateOfBirth().getTime()));\n        return ps;\n    }\n  }, keyHolder);\n\n  user.setId(keyHolder.getKey().longValue());\n}\n```", "```java\n@Override\npublic void createUsers(List<User> users) {\n    int[] updateCounts = jdbcTemplate.batchUpdate(\"INSERT INTO TBL_USER(NAME, USER_NAME, PASSWORD, DOB) VALUES(?,?,?,?)\", new BatchPreparedStatementSetter() {\n        public void setValues(PreparedStatement ps, int idx) throws SQLException {\n            ps.setString(1, users.get(idx).getName());\n            ps.setString(2, users.get(idx).getUserName());\n            ps.setString(3, users.get(idx).getPassword());\n            ps.setDate(4, new java.sql.Date(users.get(idx) .getDateOfBirth().getTime()));\n        }\n\n        public int getBatchSize() {\n            return users.size();\n        }\n    });\n}\n```", "```java\npublic User findByUserName(String userName, DataSource dataSource) {\n\n  NamedParameterJdbcTemplate jdbcTemplate = new NamedParameterJdbcTemplate(dataSource);\n  SqlParameterSource namedParameters = new MapSqlParameterSource(\"USER_NAME\", userName);\n\n  return jdbcTemplate.queryForObject(\"SELECT ID, NAME, USER_NAME, PASSWORD, DOB, PROFILE_IMAGE_ID, PROFILE_IMAGE_NAME FROM TBL_USER WHERE USER_NAME = :USER_NAME\", namedParameters, new RowMapper<User>() {\n\n    @Override\n    public User mapRow(ResultSet rs, int rowNum) throws SQLException {\n      return new User(rs.getLong(\"ID\"), rs.getString(\"NAME\"), userName, rs.getString(\"PASSWORD\"), rs.getDate(\"DOB\"));\n    }\n  });\n}\n```", "```java\nSimpleJdbcCall createTaskStoredProc = new SimpleJdbcCall(dataSource)\n    .withFunctionName(\"CREATE_TASK\")\n    .withSchemaName(\"springessentials\")\n    .declareParameters(new SqlOutParameter(\"v_newID\", Types.INTEGER),\n        new SqlParameter(\"v_name\", Types.VARCHAR), \n        new SqlParameter(\"v_STATUS\", Types.VARCHAR),\n        new SqlParameter(\"v_priority\", Types.INTEGER),\n        new SqlParameter(\"v_createdUserId\", Types.INTEGER),\n        new SqlParameter(\"v_createdDate\", Types.DATE),\n        new SqlParameter(\"v_assignedUserId\", Types.INTEGER),\n        new SqlParameter(\"v_comment\", Types.VARCHAR));\n```", "```java\n@Override\npublic void createTask(Task task) {\n    SqlParameterSource inParams = new \n        MapSqlParameterSource().addValue(\"v_name\", task.getName())\n        .addValue(\"v_STATUS\", task.getStatus())\n        .addValue(\"v_priority\", task.getPriority())\n        .addValue(\"v_createdUserId\", task.getCreatedBy().getId())\n        .addValue(\"v_createdDate\", task.getCreatedDate())\n        .addValue(\"v_assignedUserId\", task.getAssignee() == null ?         null : task.getAssignee().getId())\n        .addValue(\"v_comment\", task.getComments());\n\n    Map<String, Object> out = createTaskStoredProc.execute(inParams);\n    task.setId(Long.valueOf(out.get(\"v_newID\").toString()));\n}\n```", "```java\nSimpleJdbcInsert simpleInsert = new SimpleJdbcInsert(dataSource)\n  .withTableName(\"tbl_user\")\n  .usingGeneratedKeyColumns(\"id\");\n```", "```java\npublic void createUser(User user) {\n   Map<String, Object> parameters = new HashMap<>(4);\n   parameters.put(\"name\", user.getName());\n   parameters.put(\"user_name\", user.getUserName());\n   parameters.put(\"password\", user.getPassword());\n   parameters.put(\"dob\", user.getDateOfBirth());\n\n   Number newId = simpleInsert.executeAndReturnKey(parameters);\n   user.setId(newId.longValue());\n}\n```", "```java\npublic Task findById(Long taskId) {\n   MappingSqlQuery<Task> query = new MappingSqlQuery<Task>() {\n\n      @Override\n      protected Task mapRow(ResultSet rs, int rowNum) throws SQLException {\n         return new RowMapper<Task>() {\n            @Override\n            public Task mapRow(ResultSet rs, int rowNum) throws SQLException {\n               Task task = new Task();\n               task.setId(rs.getLong(\"id\"));\n               ...\n               return task;\n            }\n         }.mapRow(rs, rowNum);\n      }\n   };\n\n   query.setJdbcTemplate(jdbcTemplate);\n   query.setSql(\"select id, name, status, priority, created_user_id,\" + \" created_date, assignee_user_id, completed_date, comments \" + \"from tbl_task where id = ?\");\n   query.declareParameter(new SqlParameter(\"id\", Types.INTEGER));\n\n   return query.findObject(taskId);\n}\n```", "```java\n@Override\npublic void deleteTask(Task task) {\n   SqlUpdate sqlUpdate = new SqlUpdate(this.jdbcTemplate.getDataSource(), \"DELETE FROM TBL_TASK WHERE ID = ?\");\n   sqlUpdate.declareParameter(new SqlParameter(\"ID\", Types.NUMERIC));\n   sqlUpdate.compile();\n   sqlUpdate.update(task.getId());\n}\n```", "```java\npublic interface CrudRepository<T, ID extends Serializable>\n    extends Repository<T, ID> {\n    ...\n}\n```", "```java\n<dependency>\n  <groupId>org.springframework.data</groupId>\n  <artifactId>spring-data-jpa</artifactId>\n  <version>${spring-data-jpa.version}</version>\n</dependency>\n```", "```java\n  <jpa:repositories base-package=\"com.taskify.dao\" />\n```", "```java\n@Configuration\n@ComponentScan(basePackages = {\"com.taskify\"})\n@EnableJpaRepositories(basePackages = \"com.taskify.dao\")\npublic class JpaConfiguration {\n  ...\n}\n```", "```java\npublic interface TaskDAO extends JpaRepository<Task, Long>{\n\n  List<Task> findByAssigneeId(Long assigneeId);\n\n  List<Task> findByAssigneeUserName(String userName);\n}\n```", "```java\n<dependency>\n  <groupId>org.springframework</groupId>\n  <artifactId>spring-aop</artifactId>\n  <version>${spring.framework.version}</version>\n</dependency>\n```", "```java\n<mongo:mongo host=\"192.168.36.10\" port=\"27017\" />\n```", "```java\n<bean id=\"mongoTemplate\" class=\"org.springframework.data.mongodb.core.MongoTemplate\">\n  <constructor-arg ref=\"mongo\" />\n  <constructor-arg name=\"databaseName\" value=\"Taskify\" />\n</bean>\n```", "```java\npublic interface TaskDAO extends MongoRepository<Task, String>{\n\n  List<Task> findByAssigneeId(String assigneeId);\n\n  @Query(\"{ 'status' : 'Complete' }\")\n  List<Task> findCompletedTasks();\n\n  @Query(value = \"{ 'status' : 'Open', assignee.id: ?0 }\")\n  List<Task> findOpenTasksByAssigneeId(String assigneeId);\n  ...\n}\n```", "```java\n@Entity\n@Table(name = \"TBL_USER\", uniqueConstraints = @UniqueConstraint(name = \"UK_USER_USERNAME\", columnNames = {\"USER_NAME\" }) )\npublic class User {\n\n  @Id\n  @SequenceGenerator(name = \"SEQ_USER\", sequenceName = \"SEQ_USER\", allocationSize = 1, initialValue=1001)\n  @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"SEQ_USER\")\n  private Long id;\n\n  @Column(name = \"NAME\", length = 200)\n  private String name;\n\n  @Column(name = \"USER_NAME\", length = 25)\n  private String userName;\n\n  @Column(name = \"PASSWORD\", length = 20)\n  private String password;\n\n  @Column(name = \"DOB\")\n  @Temporal(TemporalType.TIMESTAMP)\n  private Date dateOfBirth;\n\n  @ManyToOne(optional = true)\n  @JoinColumn(name = \"FILE_ID\", referencedColumnName = \"ID\")\n  private File profileImage;\n\n  public User() {}\n\n  public User(Long id, String name, String userName, String password, Date dateOfBirth) {\n    super();\n    this.id = id;\n    this.name = name;\n    this.userName = userName;\n    this.password = password;\n    this.dateOfBirth = dateOfBirth;\n  }\n\n  public Long getId() {\n    return id;\n  }\n  ...\n}\n```", "```java\n@Document(collection = \"tasks\")\npublic class Task {\n\n  @Idprivate String id;\n  private String name;\n  private int priority;\n  private String status;\n  private User createdBy;\n  private Date createdDate;\n  private User assignee;\n  private Date completedDate;\n  private String comments;\n\n  public Task() {}\n  ...\n}\n```", "```java\n@Entity\n@Table(name = \"TBL_FILE\")\npublic class File {\n\n  @Id\n  @SequenceGenerator(name = \"SEQ_FILE\", sequenceName = \"SEQ_FILE\", allocationSize = 1)\n  @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"SEQ_FILE\")\n  private Long id;\n\n  @Column(name = \"FILE_NAME\", length = 200)\n  private String fileName;\n  ...\n}\n```", "```java\n<jpa:repositories base-package=\"com.taskify.dao\" query-lookup-strategy=\"create-if-not-found\"/>\n```", "```java\npublic interface UserDAO extends JpaRepository<User, Long> {\n\n  // Returns unique user with given user-name\n  User findByUserName(String userName);\n\n  // Returns a paginated list of users whose name starts with // given value\n  Page<User> findByNameStartsWith(String name, Pageable pageable);\n\n  // Returns first 5 users whose name starts with given value, \n  // order by name descending\n  List<User> findTop5ByNameStartsWithOrderByNameDesc(String name);\n\n  // Returns number of users whose birth date is before the given // value\n  Long countUsersDateOfBirthLessThan(Date dob);\n\n  // Deletes the User of given id\n  void deleteById(Long userId);\n\n  // Asynchronously returns a list of users whose name contains // the given value\n  @Async\n  Future<List<User>> findByNameContains(String name);\n}\n```", "```java\npublic interface TaskDAO extends MongoRepository<Task, String>{\n\n  List<Task> findByAssigneeId(Long assigneeId);\n\n  List<Task> findByAssigneeUserName(String userName);\n}\n```", "```java\npublic interface TaskDAO extends JpaRepository<Task, Long>{\t\n\n  @Query(\"select t from Task t where status = 'Open'\")\n  List<Task> findOpenTasks();\n\n  @Query(\"select t from Task t where status = 'Complete'\")\n  List<Task> findCompletedTasks();\n\n  @Query(\"select count(t) from Task t where status = 'Open'\")\n  int findAllOpenTasksCount();\n\n  @Query(\"select count(t) from Task t where status = 'Complete'\")\n  int findAllCompletedTasksCount();\n\n  @Query(\"select t from Task t where status = 'Open' and assignee.id = ?1\")\n  List<Task> findOpenTasksByAssigneeId(Long assigneeId);\n\n  @Query(\"select t from Task t where status = 'Open' and assignee.userName = ?1\")\n  List<Task> findOpenTasksByAssigneeUserName(String userName);\n\n  @Query(\"select t from Task t where status = 'Complete' and assignee.id = ?1\")\n  List<Task> findCompletedTasksByAssigneeId(Long assigneeId);\n\n  @Query(\"select t from Task t where status = 'Complete' and assignee.userName = ?1\")\n  List<Task> findCompletedTasksByAssigneeUserName(String userName);\n}\n```", "```java\npublic interface TaskDAO extends MongoRepository<Task, String>{\n\n  @Query(\"{ 'status' : 'Open' }\")\n  List<Task> findOpenTasks();\n\n  @Query(\"{ 'status' : 'Complete' }\")\n  List<Task> findCompletedTasks();\n\n  @Query(value = \"{ 'status' : 'Open' }\", count = true)\n  int findAllOpenTasksCount();\n\n  @Query(value = \"{ 'status' : 'Complete' }\", count = true)\n  int findAllCompletedTasksCount();\n\n  @Query(value = \"{ 'status' : 'Open', assignee.id: ?0 }\")\n  List<Task> findOpenTasksByAssigneeId(String assigneeId);\n\n  @Query(value = \"{ 'status' : 'Open', assignee.userName: ?0 }\")\n  List<Task> findOpenTasksByAssigneeUserName(String userName);\n\n  @Query(value = \"{ 'status' : 'Complete', assignee.id: ?0 }\")\n  List<Task> findCompletedTasksByAssigneeId(String assigneeId);\n\n  @Query(value = \"{ 'status' : 'Open', assignee.userName: ?0 }\")\n  List<Task> findCompletedTasksByAssigneeUserName(String userName);\n}\n```", "```java\n@Configuration\n@EnableWebMvc\n@ComponentScan(basePackages = {\"com.taskify\"})\n@EnableSpringDataWebSupport\n@EnableJpaRepositories(basePackages = \"com.taskify.dao\")\npublic class ApplicationConfiguration {\n ...\n}\n```", "```java\n<bean class=\"org.springframework.data.web.config.SpringDataWebConfiguration\" />\n```", "```java\n@RestController\n@RequestMapping(\"/api/v1/user\")\n@CrossOrigin\npublic class UserController {\n\n  @RequestMapping(path = \"/{id}\", method = RequestMethod.GET)\n  public User getUser(@PathVariable(\"id\") User user) {\n    return user;\n  }\n  ...\n}\n```", "```java\n@Entity\n@Table(name = \"tbl_task\")\npublic class Task {\n\n  @Id\n  private Long id;\n  ...\n  @ManyToOne(optional = true)\n  @JoinColumn(name = \"CREATED_USER_ID\", referencedColumnName = \"ID\")\n  @CreatedBy\n  private User createdBy;\n\n  @Column(name = \"CREATED_DATE\")\n  @Temporal(TemporalType.TIMESTAMP)\n  @CreatedDate\n  private Date createdDate;\n\n  @ManyToOne(optional = true)\n  @JoinColumn(name = \"MODIFIED_USER_ID\", referencedColumnName = \"ID\")\n  @LastModifiedBy\n  private User modifiedBy;\n\n  @Column(name = \"MODIFIED_DATE\")\n  @Temporal(TemporalType.TIMESTAMP)\n  @LastModifiedDate\n  private Date modifiedDate;\n  ...\n}\n```", "```java\n@Component\npublic class SpringDataAuditHelper implements AuditorAware<User> {\n\n  ...\n  @Override\n  public User getCurrentAuditor() {\n    // Return the current user from the context somehow.\n  }\n\n}\n```", "```java\n@Component\npublic class SpringDataAuditHelper implements AuditorAware<User> {\n\n  ...\n  @Override\n  public User getCurrentAuditor() {\n    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n\n    if (authentication == null || !authentication.isAuthenticated()) {\n      return null;\n    }\n    return ((User) authentication.getPrincipal()).getUser();\n  }\n}\n```", "```java\n<bean id=\"txManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n  <property name=\"dataSource\" ref=\"taskifyDS\" />\n</bean>\n```", "```java\n<bean id=\"txManager\" class=\"org.springframework.transaction.jta.JtaTransactionManager\" />\n</bean>\n<jee:jndi-lookup id=\"taskifyDS\" jndi-name=\"java:jboss/datasources/taskify\" expected-type=\"javax.sql.DataSource/>\n```", "```java\n<!-- transactional advices --> \n<tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n  <!-- the transactional semantics... -->\n  <tx:attributes>\n    <!-- all methods starting with 'get' are read-only -->\n    <tx:method name=\"find*\" read-only=\"true\" />\n    <!-- other methods use the default transaction settings (see below) -->\n    <tx:method name=\"*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" />\n  </tx:attributes>\n</tx:advice>\n\n<!-- Applying the above advices to the service layer methods -->\n<aop:config>\n  <aop:pointcut id=\"allServiceMethods\"\n  expression=\"execution(* com.taskify.service.*.*(..))\" />\n  <aop:advisor advice-ref=\"txAdvice\" pointcut- ref=\"allServiceMethods\" />\n</aop:config>\n```", "```java\n<tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n  <tx:attributes>\n    ...\n    <tx:method name=\"completeTask\" propagation=\"REQUIRED\" rollback-for=\"NoTaskFoundException\"/>\n    <tx:method name=\"findOpenTasksByAssignee\" read-only=\"true\" no-rollback-for=\"InvalidUserException\"/>\n    <tx:method name=\"*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" />\n  </tx:attributes>\n</tx:advice>\n```", "```java\n@Service\n@Transactional\npublic class TaskServiceImpl implements TaskService {\n  ...\n  public Task createTask(Task task) {\n    if (StringUtils.isEmpty(task.getStatus()))\n      task.setStatus(\"Open\");\n    taskDAO.save(task);\n    return task;\n  }\n\n  @Transactional(propagation = Propagation.REQUIRED, rollbackFor = NoUserFoundException)\n  public Task createTask(String name, int priority, Long createdByuserId, Long assigneeUserId, String comments) {\n    Task task = new Task(name, priority, \"Open\", userService.findById(createdByuserId), null, userService.findById(assigneeUserId), comments);\n    taskDAO.save(task);\n    logger.info(\"Task created: \" + task);\n    return task;\n  }\n\n  @Transactional(readOnly = true)\n  public Task findTaskById(Long taskId) {\n    return taskDAO.findOne(taskId);\n  }\n  ...\n}\n```", "```java\n<tx:annotation-driven transaction-manager=\"transactionManager\" />\n```", "```java\n@Configuration\n@EnableTransactionManagement\npublic class JpaConfiguration {\n}\n```", "```java\n<tx:annotation-driven transaction-manager=\"transactionManager\" mode=\"aspectj\"/>\n```", "```java\n@Service\npublic class TaskServiceImpl implements TaskService {\n  @Autowired\n  private TransactionTemplate trxTemplate;\n  ...\n  public Task createTask(String name, int priority, Long createdByuserId, Long assigneeUserId, String comments) {\n\n    return trxTemplate.execute(new TransactionCallback<Task>() {\n      @Override\n      public Task doInTransaction(TransactionStatus status) {\n        User createdUser = userService.findById(createdByuserId);\n        User assignee = userService.findById(assigneeUserId);\n        Task task = new Task(name, priority, \"Open\", createdUser, null, assignee, comments);\n        taskDAO.save(task);\n        logger.info(\"Task created: \" + task);\n        return task;\n      }\n    });\n  }\n}\n```", "```java\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.2.5.RELEASE</version>\n</parent>\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-websocket</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-messaging</artifactId>\n    </dependency>\n            <dependency>\n        <groupId>org.json</groupId>\n        <artifactId>json</artifactId>\n        <version>20140107</version>\n    </dependency>\n</dependencies>\n<properties>\n    <java.version>1.8</java.version>\n</properties>\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n        </plugin>\n    </plugins>\n</build>\n```", "```java\npublic class SampleTextWebSocketHandler extends TextWebSocketHandler {\n   @Override\n    protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {\n        String payload = message.getPayload();\n        JSONObject jsonObject = new JSONObject(payload);\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"From Myserver-\").append(\"Your Message:\").append(jsonObject.get(\"clientMessage\"));\n        session.sendMessage(new TextMessage(builder.toString()));\n   }\n}\n```", "```java\n@Configuration\n@EnableWebSocket\npublic class SampleEhoWebSocketConfigurer {\n    @Bean\n    WebSocketConfigurer webSocketConfigurer(final WebSocketHandler webSocketHandler) {\n        return new WebSocketConfigurer() {\n            @Override\n            public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {\n                registry.addHandler(new SampleTextWebSocketHandler(), \"/path/wsAddress\");\n            }\n        };\n    }\n    @Bean\n    WebSocketHandler myWebsocketHandler() {\n        return new SampleTextWebSocketHandler();\n    }\n```", "```java\npackage com.springessentialsbook.chapter4;\n...\n@SpringBootApplication\npublic class EchoWebSocketBootApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(EchoWebSocketBootApplication\n        .class, args);\n    }\n}\n```", "```java\n    function openWebSocket(){\n        ws = new WebSocket( 'ws://localhost:8090/path/wsAddress');\n        ws.onmessage = function(event){\n            renderServerReturnedData(event.data);\n        };\n\n        ws.onerror = function(event){\n            $('#errDiv').html(event);\n        };\n    }\n\n    function sendMyClientMessage() {\n        var myText = document.getElementById('myText').value;\n        var message=JSON.stringify({ 'clientName': 'Client-'+randomnumber, 'clientMessage':myText});\n        ws.send(message);\n        document.getElementById('myText').value='';\n    }\n```", "```java\n\nmvn spring-boot:run -Dserver.port=8090\n\n```", "```java\npackage com.springessentialsbook.chapter4;\n\u2026..\n@Configuration\n@EnableWebSocketMessageBroker\npublic class ChatroomWebSocketMessageBrokerConfigurer extends AbstractWebSocketMessageBrokerConfigurer {\n   @Override\n   public void configureMessageBroker(MessageBrokerRegistry config) {\n      config.enableSimpleBroker(\"/chatroomTopic\");\n      config.setApplicationDestinationPrefixes(\"/myApp\");\n   }\n   @Override\n   public void registerStompEndpoints(StompEndpointRegistry registry) {\n      registry.addEndpoint(\"/broadcastMyMessage\").withSockJS();\n   }\n}\n```", "```java\n    package com.springessentialsbook.chapter4;\n      ...\n@Controller\npublic class ChatroomController {\n\n    @MessageMapping(\"/broadcastMyMessage\")\n    @SendTo(\"/chatroomTopic/broadcastClientsMessages\")\n    public ReturnedDataModelBean broadCastClientMessage(ClientInfoBean message) throws Exception {\n        String returnedMessage=message.getClientName() + \":\"+message.getClientMessage();\n        return new ReturnedDataModelBean(returnedMessage );\n    }\n}\n```", "```java\npackage com.springessentialsbook.chapter4;\npublic class ClientInfoBean {\n    private String clientName;\n    private String clientMessage;\n    public String getClientMessage() {\n    return clientMessage;\n  }\n    public String getClientName() {\n        return clientName;\n    }\n}\n\npackage com.springessentialsbook.chapter4;\npublic class ReturnedDataModelBean {\n\n    private String returnedMessage;\n    public ReturnedDataModelBean(String returnedMessage) {\n        this.returnedMessage = returnedMessage; }\n    public String getReturnedMessage() {\n        return returnedMessage;\n    }\n}\n```", "```java\n@Configuration\n@EnableGlobalMethodSecurity(prePostEnabled = true)\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.httpBasic();\n        http.authorizeRequests().anyRequest().authenticated();\n    }\n    @Autowired\n    void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\n        auth.inMemoryAuthentication()\n        .withUser(\"user\").password(\"password\").roles(\"USER\");\n    }\n}\n```", "```java\n<dependency>\n    <groupId>org.springframework.security</groupId>\n    <artifactId>spring-security-web</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.security</groupId>\n    <artifactId>spring-security-messaging</artifactId>\n    <version>4.0.1.RELEASE</version>\n</dependency>\n<dependency>\n    <groupId>org.springframework.security</groupId>\n    <artifactId>spring-security-config</artifactId>\n</dependency>\n```", "```java\npackage com.springessentialsbook.chapter4;\n...\n@SpringBootApplication\npublic class ChatroomBootApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(ChatroomBootApplication.class, args);\n    }\n}\n```", "```java\n\nmvn spring-boot:run -Dserver.port=8090\n\n```", "```java\n    <script src=\"img/sockjs-0.3.4.js\"></script>\n    <script src=\"img/stomp.js\"></script>\n    <script type=\"text/javascript\">\n...\nfunction joinChatroom() {\n    var topic='/chatroomTopic/broadcastClientsMessages';\n    var servicePath='/broadcastMyMessage';\n    var socket = new SockJS(servicePath);\n    stompClient = Stomp.over(socket);\n    stompClient.connect('user','password', function(frame) {\n        setIsJoined(true);\n        console.log('Joined Chatroom: ' + frame);\n        stompClient.subscribe(topic, function(serverReturnedData){\n            renderServerReturnedData(JSON.parse(serverReturnedData.body).returnedMessage);\n        });\n    });\n}\n...\nfunction sendMyClientMessage() {\n    var serviceFullPath='/myApp/broadcastMyMessage';\n    var myText = document.getElementById('myText').value;\n    stompClient.send(serviceFullPath, {}, JSON.stringify({ 'clientName': 'Client-'+randomnumber, 'clientMessage':myText}));\n    document.getElementById('myText').value='';\n}\n```", "```java\n@Configuration\n@EnableWebSocketMessageBroker\npublic class AutoAnsweringWebSocketMessageBrokerConfigurer extends AbstractWebSocketMessageBrokerConfigurer {\n   @Override\n   public void configureMessageBroker(MessageBrokerRegistry config) {\n      config.setApplicationDestinationPrefixes(\"/app\");\n      config.enableSimpleBroker(\"/queue\");\n      config.setUserDestinationPrefix(\"/user\");\n   }\n   @Override\n   public void registerStompEndpoints(StompEndpointRegistry registry) {\n      registry.addEndpoint(\"/message\").withSockJS();\n   }\n}\n```", "```java\n@Controller\npublic class AutoAnsweringController {\n    @Autowired\n    AutoAnsweringService autoAnsweringService;\n    @MessageMapping(\"/message\")\n    @SendToUser\n    public String sendMessage(ClientInfoBean message) {\n        return autoAnsweringService.answer(message);\n    }\n    @MessageExceptionHandler\n    @SendToUser(value = \"/queue/errors\", broadcast = false)\n    String handleException(Exception e) {\n        return \"caught ${e.message}\";\n    }\n}\n\n@Service\npublic class AutoAnsweringServiceImpl implements AutoAnsweringService {\n    @Override\n    public String answer(ClientInfoBean bean) {\n        StringBuilder mockBuffer=new StringBuilder();\n        mockBuffer.append(bean.getClientName())\n                .append(\", we have received the message:\")\n                .append(bean.getClientMessage());\n        return mockBuffer.toString();\n    }\n}\n```", "```java\nfunction connectService() {\n    var servicePath='/message';\n    var socket = new SockJS(servicePath);\n    stompClient = Stomp.over(socket);\n    stompClient.connect({}, function(frame) {\n\n        setIsJoined(true);\n        stompClient.subscribe('/user/queue/message', function(message) {\n            renderServerReturnedData(message.body);\n        });\n        stompClient.subscribe('/user/queue/error', function(message) {\n            renderReturnedError(message.body);\n        });\n    });\n}\nfunction sendMyClientMessage() {\n    var serviceFullPath='/app/message';\n    var myText = document.getElementById('myText').value;\n    stompClient.send(serviceFullPath, {}, JSON.stringify({ 'clientName': 'Client-'+randomnumber, 'clientMessage':myText}));\n    document.getElementById('myText').value='';\n}\n```", "```java\n<dependency>\n   <groupId>org.springframework.security</groupId>\n   <artifactId>spring-security-web</artifactId>\n   <version>4.0.2.RELEASE</version>\n</dependency>\n<dependency>\n   <groupId>org.springframework.security</groupId>\n   <artifactId>spring-security-config</artifactId>\n   <version>4.0.2.RELEASE</version>\n</dependency>\n```", "```java\n@Configuration\n@EnableWebSecurity\n@ComponentScan(basePackages = \"com.springessentialsbook.chapter5\")\npublic class WebSecurityConfigurator extends WebSecurityConfigurerAdapter {\n    @Autowired\n    private AuthenticationSuccessHandler authenticationSuccessHandler;\n\n    @Autowired\n    public void configureGlobalSecurity(AuthenticationManagerBuilder auth) throws Exception {\n        auth.inMemoryAuthentication().withUser(\"operator\").password(\"password\").roles(\"USER\");\n        auth.inMemoryAuthentication().withUser(\"admin\").password(\"password\").roles(\"ADMIN\");\n        auth.inMemoryAuthentication().withUser(\"accountant\").password(\"password\").roles(\"ACCOUNTANT\");\n\n    }\n```", "```java\n@Component\npublic class MyCustomizedAuthenticationProvider implements AuthenticationProvider {\n  @Autowired\n  UserDetailsService userService;\n  public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n    User user=null;\n    Authentication auth=null;\n    String username=authentication.getName();\n    String password=authentication.getCredentials().toString();\n    user= (User) userService.loadUserByUsername(username);\n    if(password ==null ||   ! password.equals(user.getPassword())) throw new UsernameNotFoundException(\"wrong user/password\");\n    if(user !=null){\n      auth = new UsernamePasswordAuthenticationToken(user.getUsername(), user.getPassword(), user.getAuthorities());\n    } else throw new UsernameNotFoundException(\"wrong user/password\");\n    return auth;\n\n  }\n  public boolean supports(Class<?> aClass) {\n    return true;\n  }\n}\n```", "```java\n@Service\npublic class UserServiceImpl implements UserDetailsService {\n    public UserDetails loadUserByUsername(String userName) throws UsernameNotFoundException {\n        // suppose we fetch user data from DB and populate it into // User object\n        // here we just mock the service\n        String role=null;\n        if(userName.equalsIgnoreCase(\"admin\")){\n            role =\"ROLE_ADMIN\";\n        }else if(userName.equalsIgnoreCase(\"accountant\") ){\n            role=\"ROLE_ACCOUNTANT\";\n        }else if(userName.equalsIgnoreCase(\"operator\")){\n            role=\"ROLE_USER\";\n        }else{\n            throw new UsernameNotFoundException(\"user not found in DB\");\n        }\n        List<GrantedAuthority> authorities=new ArrayList<GrantedAuthority>();\n        authorities.add(new GrantedAuthorityImpl(role));\n        return new User(userName, \"password\", true, true, true, true, authorities);\n    }\n}\n```", "```java\n@EnableWebSecurity\n@EnableGlobalMethodSecurity(prePostEnabled=true)\n@ComponentScan(basePackages = \"com.springessentialsbook.chapter5\")\npublic class MultiWebSecurityConfigurator   {\n\n    @Autowired\n    private AuthenticationProvider authenticationProvider;\n\n    @Autowired\n    public void configureGlobalSecurity(AuthenticationManagerBuilder auth) throws Exception {\n        auth.authenticationProvider(authenticationProvider);\n    }\n```", "```java\nimport org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer;\npublic class SecurityWebApplicationInitializer extends AbstractSecurityWebApplicationInitializer { }\n```", "```java\nsuper(WebSecurityConfigurator);\n```", "```java\npublic class AnnotatedConfigDispatcherServletInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {\n   @Override\n   protected Class<?>[] getRootConfigClasses() {\n      return new Class[] { MultiWebSecurityConfigurator.class };\n   }\n\n   @Override\n   protected Class<?>[] getServletConfigClasses() {\n      return null;\n   }\n\n   @Override\n   protected String[] getServletMappings() {\n      return new String[] { \"/\" };\n   }\n}\n```", "```java\n@Configuration\n@EnableWebSecurity\npublic class WebSecurityConfigurator extends WebSecurityConfigurerAdapter {\n@Autowired\nprivate AuthenticationSuccessHandler authenticationSuccessHandler;\n\n   ...\n   @Override\n   public void configure(HttpSecurity http) throws Exception {\n   ...\n\n   .and().formLogin()\n   .loginPage(\"/login\").successHandler(authenticationSuccessHandler)\n   .failureUrl(\"/nonAuthorized\")\n   .usernameParameter(\"username\").passwordParameter(\"password\").loginProcessingUrl(\"/login\")\n\n...\n```", "```java\n<form role=\"form\" action=\"/login\" method=\"post\">\n  <input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\"/>\n  <div>\n    <label for=\"username\">Username</label>\n    <input type=\"text\" name=\"username\" id=\"username\" required autofocus>\n  </div>\n  <div>\n    <label for=\"password\">Password</label>\n    <input type=\"password\" name=\"password\" id=\"password\" required>\n  </div>\n  <button type=\"submit\">Sign in</button>\n</form>\n```", "```java\n@Override\npublic void configure(HttpSecurity http) throws Exception {\n   ...\n         .and().formLogin()\n         .successHandler(authenticationSuccessHandler)\n         .failureUrl(\"/nonAuthorized\")\n         ...\n\n}\n```", "```java\nprotected void configure(HttpSecurity http) throws Exception {\n    http.antMatcher(\"/adResources*/**\").authorizeRequests().anyRequest().hasRole(\"ADMIN\")\n        .and()\n        .httpBasic();\n}\n```", "```java\n@Override\npublic void configure(HttpSecurity http) throws Exception {\n    ...\n    .loginPage(\"/login\").successHandler(authenticationSuccessHandler)\n      ....\n}\n```", "```java\n@Component\npublic class MyCustomizedAuthenticationSuccessHandler implements AuthenticationSuccessHandler {\n    private RedirectStrategy redirectStrategy = new DefaultRedirectStrategy();\n\n    public void onAuthenticationSuccess(final HttpServletRequest request, final HttpServletResponse \n    response, final Authentication authentication) throws IOException {\n        handle(request, response, authentication);\n        final HttpSession session = request.getSession(false);\n        if (session != null) {\n            session.setMaxInactiveInterval(3600);//1 hour\n        }\n        clearAttributes(request);\n    }\n\n    protected void handle(final HttpServletRequest request, final HttpServletResponse response, final \n    Authentication authentication) throws IOException {\n        final String url = getUrl(authentication);\n        if (response.isCommitted()) {\n           return;\n        }\n        redirectStrategy.sendRedirect(request, response, url);\n    }\n\n    private String getUrl(final Authentication authentication) {\n        String url=null;\n        final Collection<? extends GrantedAuthority> authorities = authentication.getAuthorities();\n        for (final GrantedAuthority grantedAuthority : authorities) {\n            if (grantedAuthority.getAuthority().equals(\"ROLE_USER\")) {\n                url= \"/user\" ;\n                break;\n            } else if (grantedAuthority.getAuthority().equals(\"ROLE_ADMIN\")) {\n                url= \"/admin\" ;\n                break;\n             } else if (grantedAuthority.getAuthority().equals(\"ROLE_ACCOUNTANT\")) {\n                url= \"/accountant\" ;\n                break;\n            }else {\n                throw new IllegalStateException();\n            }\n        }\n        return url;\n    }\n\n    protected void clearAttributes(final HttpServletRequest request) {\n        final HttpSession session = request.getSession(false);\n        if (session == null) {\n            return;\n        }\n        session.removeAttribute(WebAttributes.AUTHENTICATION_EXCEPTION);\n    }\n\n    public void setRedirectStrategy(final RedirectStrategy redirectStrategy) {\n        this.redirectStrategy = redirectStrategy;\n    }\n\n    protected RedirectStrategy getRedirectStrategy() {\n        return redirectStrategy;\n    }\n}\n```", "```java\n@EnableWebSecurity\n@ComponentScan(basePackages = \"com.springessentialsbook.chapter5\")\npublic class MultiWebSecurityConfigurator {\n   @Autowired\n   private AuthenticationProvider authenticationProvider;\n   @Autowired\n   public void configureGlobalSecurity(AuthenticationManagerBuilder auth) throws Exception {\n\n      auth.authenticationProvider(authenticationProvider);\n   }\n   @Configuration\n   protected static class LoginFormBasedWebSecurityConfigurerAdapter extends WebSecurityConfigurerAdapter {\n      @Autowired\n      private AuthenticationSuccessHandler authenticationSuccessHandler;\n      @Override\n      public void configure(HttpSecurity http) throws Exception {\n         http.authorizeRequests()\n               ...\n               .permitAll();\n      }\n   }\n   @Configuration\n   @Order(1)\n   public static class HttpBasicWebSecurityConfigurationAdapter extends WebSecurityConfigurerAdapter {\n      @Override\n      protected void configure(HttpSecurity http) throws Exception {\n         http.antMatcher(\"/adResources*/**\").authorizeRequests().anyRequest().hasRole(\"ADMIN\")\n         .and()\n         .httpBasic();\n      }\n\n}}\n```", "```java\npublic void configure(HttpSecurity http) throws Exception {\n   http.authorizeRequests()\n      .antMatchers(\"*.jsp\").denyAll()\n      .antMatchers(\"/\", \"/login\").permitAll()\n      .antMatchers(\"/user*//**\").access(\"hasRole('USER') or hasRole('ADMIN')\")\n      .antMatchers(\"/admin*//**\").access(\"hasRole('ADMIN')\")\n      .antMatchers(\"/accountant*//**\").access(\"hasRole('ADMIN') or hasRole('ACCOUNTANT')\")\n      .failureUrl(\"/nonAuthorized\")\n      ...\n      .permitAll();\n}\n```", "```java\n@EnableWebSecurity\n@EnableGlobalMethodSecurity(prePostEnabled=true)\n@ComponentScan(basePackages = \"com.springessentialsbook.chapter5\")\npublic class MultiWebSecurityConfigurator {\n```", "```java\n@PreAuthorize(\"hasRole('ADMIN') or hasRole('ACCOUNTANT')\"\n@RequestMapping(value = \"/accountant\", method = RequestMethod.GET)\npublic String dbaPage(ModelMap model) {\n...\n}\n```", "```java\n@PreAuthorize(\"hasRole('ADMIN') or hasRole('ACCOUNTANT')\"\n)\npublic void migrateUsers(id){...};\n```", "```java\n@PreAuthorize(\"@businessServiceImpl.isEligibleToSeeUserData(principal, #username)\")\n@RequestMapping(\"/userdata/{username}\")\npublic String getUserPage(@PathVariable String username,ModelMap model) {\n  {...}\n```", "```java\n<dependency>\n   <groupId>org.springframework.security.oauth</groupId>\n   <artifactId>spring-security-oauth2</artifactId>\n   <version>2.0.8.RELEASE</version>\n</dependency>\n```", "```java\n@Configuration\npublic class MultiOAuth2ResourceAndAuthorizationConfigurator {\n    @Configuration\n    @EnableResourceServer\n    protected static class ResourceServerConfiguration extends ResourceServerConfigurerAdapter {\n        @Override\n        public void configure(HttpSecurity http) throws Exception {\n            http\n                .headers()\n                .frameOptions().disable()\n                .authorizeRequests()\n                .antMatchers(\"/public/\").permitAll()\n                .antMatchers(\"/protected/**\").authenticated();\n        }\n    }\n    @Configuration\n    @EnableAuthorizationServer\n    protected static class AuthorizationServerConfiguration extends AuthorizationServerConfigurerAdapter implements EnvironmentAware {\n        private static final String  CLIENT_ID = \"myClientId\";\n        private static final String  CLIENT_PASSWORD = \"myClientPassword\";\n        private static final int  TOKEN_TIME_TO_LIVE = 1800;\n        private static final String  ROLE_USER = \"ROLE_USER\";\n        private static final String  ROLE_ACCOUNTANT = \"ROLE_ACCOUNTANT\";\n        private static final String  READ_ACCESS = \"read\";\n        private static final String  WRITE_ACCESS = \"write\";\n        private static final String  GRANT_TYPE_PASSWORD = \"password\";\n        private static final String  GRANT_TYPE_REFRESH_TOKEN = \"refresh_token\";\n        @Bean\n        public TokenStore tokenStore() {\n            return new InMemoryTokenStore();\n        }\n        @Autowired\n        private AuthenticationManager authenticationManager;\n        @Override\n        public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {\n            endpoints\n                .tokenStore(tokenStore())\n                .authenticationManager(authenticationManager);\n        }\n        @Override\n        public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n            clients\n                .inMemory()\n                .withClient(CLIENT_ID)\n                .secret(CLIENT_PASSWORD)\n                .scopes(READ_ACCESS, WRITE_ACCESS)\n                .authorities(ROLE_USER, ROLE_ACCOUNTANT)\n                .authorizedGrantTypes(GRANT_TYPE_PASSWORD, GRANT_TYPE_REFRESH_TOKEN)\n                .accessTokenValiditySeconds( TOKEN_TIME_TO_LIVE);\n        }\n        @Override\n        public void setEnvironment(Environment environment) {\n        }\n    }\n}\n```", "```java\n@RequestMapping(value = \"/protected\", method = RequestMethod.GET)\n@ResponseBody\npublic String getProtectedResources(ModelMap model) {\n   return \"this is from getProtectedResources\";\n}\n@RequestMapping(value = \"/public\", method = RequestMethod.GET)\n@ResponseBody\npublic String getPublicResources(ModelMap model) {\n   return  \"this is from getPublicResources\";\n}\n```", "```java\n\nmvn clean package spring-boot:run -Dserver.contextPath=/myapp -Dserver.port=9090\n\n```", "```java\n\ncurl -i http://localhost:9090/myapp/public\n\n```", "```java\n\ncurl -i http://localhost:9090/myapp/protected\n\n```", "```java\n\ncurl -X POST -vu myClientId:myClientPassword  'http://localhost:9090/myapp/oauth/token?username=operator&password=password&grant_type=password'\n\n```", "```java\n\ncurl -i -H \"Authorization: Bearer [access_token]\" http://localhost:9090/myapp/protected\n\n```", "```java\n\ncurl  -X POST  -vu  myClientId:myClientPassword  'http://localhost:9090/myapp/oauth/token?grant_type=refresh_token&refresh_token=[refresh_token]'\n\n```", "```java\nnpm install -g ember-cli\n\n```", "```java\nnpm install -g bower\n\n```", "```java\nmodule.exports = function(environment) {\n  var ENV = {\n    ...\n    podModulePrefix: 'my-ember-app/pod-modules',\n    ...\n    },\n    ...\n  return ENV;\n};\n```", "```java\nember generate route user --pod\n\n```", "```java\nvar User = Ember.Object.extend({\n   ...\n});\n```", "```java\nvar User = Ember.Object.create();\n```", "```java\nvar myUser = User.create({\n    firstName: \"John\", \n    lastName: \"Smith\", \n    userName: \"jsmith\",\n    password: \"secretp@ss\", \n    dateOfBirth: new Date(1980, 10, 24);\n});\n```", "```java\nvar name = myUser.get(\"name\");\n```", "```java\nmyUser.set('firstName', \"Shameer\");\n```", "```java\nvar User = Ember.Object.extend({\n   ...\n\n   fullName: Ember.computed('firstName', 'lastName', function() {\n      return `${this.get('firstName')} ${this.get('lastName')}`;\n   }),\n   ...\n});\n```", "```java\nfullName: Ember.computed('firstName', 'lastName', {\n    get(key) {\n        return `${this.get('firstName')} ${this.get('lastName')}`;\n    },\n    set(key, value) {\n        var [firstName, lastName] = value.split(/\\s+/);\n        this.set('firstName', firstName);\n        this.set('lastName',  lastName);\n        return value;\n    }\n})\n```", "```java\nvar User = Ember.Object.extend({\n   ...\n\n   dateOfBirth: new Date(),\n   dobChanged: Ember.observer('dateOfBirth', function() {\n      // deal with the change\n      console.log(`Date of birth updated. New value is: ${this.get('dateOfBirth')}`);\n   })\n});\n```", "```java\n<h3>Welcome <strong>{{loggedInUser.fullName}}.</strong></h3>\n```", "```java\n{{action 'editUser' user}}\n```", "```java\n{{action 'editUser' user (format-date today format='MMM DD, YYYY')}}\n```", "```java\n{{#if isLoggedIn}}\n    Welcome <strong>{{loggedInUser.fullName}}</strong>\n{{/if}}\n```", "```java\n{{input placeholder=\"User Name\" value=editingUser.userName}}\n```", "```java\n<div class=\"container\">\n{{#if isIdle}}\n    You are idle for {{SessionService.idleMinutes}} minutes.\n{{else if isLoggedIn}}\n    Welcome <strong>{{loggedInUser.fullName}}</strong>\n{{else}}\n    <a {{action showLoginPopup}}>Please login</a>\n{{/if}}\n</div>\n```", "```java\n{{#each model as |user|}}\n<tr>\n<td><a {{action 'showUser' user }}>{{user.id}}</a></td>\n<td>{{user.userName}}</td>\n    ...\n</tr>\n{{/each}}\n```", "```java\n{{link-to \"Login here\" \"login\" class=\"btn btn-primary\"}}\n```", "```java\n<a {{action \"editTask\" _task}} class=\"btn btn-success\">Edit</a>\n```", "```java\nember generate route user --pod\n\n```", "```java\nimport Ember from 'ember';\n\nexport default Ember.Route.extend({\n\n  model: function(args) {\n    return this.store.findAll('task');\n  }\n});\n```", "```java\nember generate component <component-name> --pod\n\n```", "```java\nember generate component toggle-button --pod\n\n```", "```java\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n});\n```", "```java\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n  tagName: \"button\",\n  attributeBindings: ['type'],\n  type: \"button\",\n  classNames: [\"btn\"],\n  classNameBindings: [\"isActive:btn-primary:btn-default\"],\n  activeLabel: \"On\",\n  inactiveLabel: \"Off\",\n  isActive: false,\n\n  currentLabel: Ember.computed('isActive', 'activeLabel', 'inactiveLabel', function() {\n    return this.get(this.get(\"isActive\") ? \"activeLabel\" : \"inactiveLabel\");\n  }),\n\n  click: function() {\n    var active = this.get(\"isActive\")\n    this.set(\"isActive\", !active);\n  }\n});\n```", "```java\n{{currentLabel}}\n```", "```java\n{{toggle-button}}\n```", "```java\n{{toggle-button activeLabel=\"Turn me off now :)\" inactiveLabel=\"Turn me On please..\"}}\n```", "```java\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n\n  name: DS.attr('string'),\n  userName: DS.attr('string'),\n  password: DS.attr('string'),\n  dateOfBirth: DS.attr('date'),\n  profileImage: DS.belongsTo('file')\n});\n```", "```java\ndateOfBirth: DS.attr('date', { defaultValue: new Date() }),\n```", "```java\n    @EnableJpaRepositories(basePackages = \"com.taskify.dao\")\n    ```", "```java\npackage com.taskify.domain;\n\nimport java.util.Date;\n...\n@Entity\n@Table(name = \"TBL_USER\", uniqueConstraints = @UniqueConstraint(name = \"UK_USER_USERNAME\", columnNames = {\"USER_NAME\" }) )\npublic class User {\n\n  @Id\n  @GeneratedValue\n  private Long id;\n\n  @Column(name = \"NAME\", length = 200)\n  private String name;\n\n  @Column(name = \"USER_NAME\", length = 25)\n  private String userName;\n\n  @Column(name = \"PASSWORD\", length = 20)\n  private String password;\n\n  @Column(name = \"DOB\")\n  @Temporal(TemporalType.TIMESTAMP)\n  private Date dateOfBirth;\n  ...\n  //Getters and setters go here..\n\n}\n```", "```java\npackage com.taskify.domain;\n\nimport java.util.Date;\n...\n@Entity\n@Table(name = \"tbl_task\")\npublic class Task {\n  @Id\n  @GeneratedValue\n  private Long id;\n\n  @Column(name = \"NAME\", length = 500)\n  private String name;\n\n  @Column(name = \"PRIORITY\")\n  private int priority;\n\n  @Column(name = \"STATUS\")\n  private String status;\n\n  @ManyToOne(optional = true)\n  @JoinColumn(name = \"CREATED_USER_ID\", referencedColumnName = \"ID\")\n  private User createdBy;\n\n  @Column(name = \"CREATED_DATE\")\n  @Temporal(TemporalType.TIMESTAMP)\n  private Date createdDate;\n\n  @ManyToOne(optional = true)\n  @JoinColumn(name = \"ASSIGNEE_USER_ID\", referencedColumnName = \"ID\")\n  private User assignee;\n\n  @Column(name = \"COMPLETED_DATE\")\n  @Temporal(TemporalType.TIMESTAMP)\n  private Date completedDate;\n\n  @Column(name = \"COMMENTS\")\n  private String comments;\n  ...\n  //Getters and setters go here..\n}\n```", "```java\npackage com.taskify.web.controller;\n\nimport java.util.List;\n...\n\n/**\n * Handles requests for user related pages.\n */\n@RestController\n@RequestMapping(\"/api/v1/user\")\n@CrossOrigin\npublic class UserController {\n\n  private static final Logger = LoggerFactory.getLogger(UserController.class);\n  @Autowired\n  private UserService;\n\n  @RequestMapping(method = RequestMethod.GET)\n  @ResponseBody\n  public Callable<List<User>> listAllUsers() {\n    return new Callable<List<User>>() {\n\n      @Override\n      public List<User> call() throws Exception {\n        return userService.findAllUsers();\n      }\n    };\n  }\n\n  @RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n  @ResponseBody\n  public Callable<User> createNewUser( @RequestBody CreateUserRequest request) {\n    logger.info(\">>>>>>>> Creating User, request - \" + request);\n    return new Callable<User>() {\n      @Override\n      public User call() throws Exception {\n        return userService.createNewUser(request.getUser());\n      }\n    };\n  }\n\n  @RequestMapping(path = \"/{id}\", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n  @ResponseBody\n  public Callable<User> updateUser(@PathVariable(\"id\") Long id, @RequestBody UpdateUserRequest request) {\n    logger.info(\">>>>>>>> updateUser, request - \" + request);\n    return new Callable<User>() {\n      @Override\n      public User call() throws Exception {\n        User existingUser = userService.findById(id);\n        existingUser.setName(request.getUser().getName());\n        existingUser.setPassword(request.getUser().getPassword());\n        existingUser.setUserName(request.getUser().getUserName());\n        userService.updateUser(existingUser);\n        return existingUser;\n      }\n    };\n  }\n\n  @RequestMapping(path = \"/{id}\", method = RequestMethod.GET)\n  public Callable<User> getUser(@PathVariable(\"id\") Long id) {\n    return new Callable<User>() {\n      @Override\n      public User call() throws Exception {\n        return userService.findById(id);\n      }\n    };\n  }\n\n  @RequestMapping(path = \"/{id}\", method = RequestMethod.DELETE)\n  @ResponseStatus(value = HttpStatus.NO_CONTENT)\n  public Callable<Void> deleteUser(@PathVariable(\"id\") Long id) {\n    return new Callable<Void>() {\n      @Override\n      public Void call() throws Exception {\n        userService.deleteUser(userService.findById(id));\n        return null;\n      }\n    };\n  }\n}\n```", "```java\npackage com.taskify.web.controller;\n\nimport java.util.List;\n...\n\n@RestController\n@RequestMapping(\"/api/v1/task\")\n@CrossOrigin\npublic class TaskController {\n\n  private static final Logger = LoggerFactory.getLogger(TaskController.class);\n\n  @Autowired\n  private UserService;\n\n  @Autowired\n  private TaskService;\n\n  private static final int[] priorities = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n\n  @RequestMapping(method = RequestMethod.GET)\n  @ResponseBody\n  public Callable<List<Task>> listAllTask() {\n    return new Callable<List<Task>>() {\n      @Override\n      public List<Task> call() throws Exception {\n        return taskService.findAllTasks();\n      }\n    };\n  }\n\n  @RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n  @ResponseBody\n  public Callable<Task> createNewTask( @RequestBody CreateTaskRequest request) {\n    logger.info(\">>>>>>>> Creating Task, request - \" + request);\n    return new Callable<Task>() {\n      @Override\n      public Task call() throws Exception {\n        return taskService.createTask(request.getTask());\n      }\n    };\n  }\n\n  @RequestMapping(path = \"/{id}\", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n  @ResponseBody\n  public Callable<Task> updateTask(@PathVariable(\"id\") Long id, @RequestBody UpdateTaskRequest request) {\n    logger.info(\">>>>>>>> updateTask, request - \" + request);\n    return new Callable<Task>() {\n      @Override\n      public Task call() throws Exception {\n        Task existingTask = taskService.findTaskById(id);\n        existingTask.setName(request.getTask().getName());\n        existingTask.setPriority(request.getTask().getPriority());\n        existingTask.setStatus(request.getTask().getStatus());\n        existingTask.setCreatedBy(userService.findById( request.getTask().getCreatedBy().getId()));\n\n        if(request.getTask().getAssignee() != null &&\n           request.getTask().getAssignee().getId() != null) {\n             existingTask.setAssignee(userService.findById(\n             request.getTask().getAssignee().getId()));\n        } else {\n          existingTask.setAssignee(null);\n        }\n        taskService.updateTask(existingTask);\n        return existingTask;\n      }\n    };\n  }\n\n  @RequestMapping(path = \"/{id}\", method = RequestMethod.GET)\n  public Callable<Task> getTask(@PathVariable(\"id\") Long id) {\n    return new Callable<Task>() {\n      @Override\n      public Task call() throws Exception {\n        return taskService.findTaskById(id);\n      }\n    };\n  }\n\n  @RequestMapping(path = \"/{id}\", method = RequestMethod.DELETE)\n  @ResponseStatus(value = HttpStatus.NO_CONTENT)\n  public Callable<Void> deleteTask(@PathVariable(\"id\") Long id) {\n    return new Callable<Void>() {\n      @Override\n      public Void call() throws Exception {\n        taskService.deleteTask(id);\n        return null;\n      }\n    };\n  }\n}\n```", "```java\n\n    ember new taskify\n\n    ```", "```java\n\n    npm install --save-dev broccoli-merge-trees\n    npm install --save-dev broccoli-static-compiler\n\n    ```", "```java\n\n    bower install bootstrap\n\n    ```", "```java\n      var mergeTrees = require('broccoli-merge-trees');\n      var pickFiles = require('broccoli-static-compiler');\n      var extraAssets = pickFiles('bower_components/bootstrap/dist/fonts',{ srcDir: '/', files: ['**/*'], destDir: '/fonts' });\n\n      app.import('bower_components/bootstrap/dist/css/bootstrap.css');\n      app.import('bower_components/bootstrap/dist/js/bootstrap.js');\n\n      return mergeTrees([app.toTree(), extraAssets]);\n    ```", "```java\n\n    ember install ember-bootstrap-datetimepicker\n\n    ```", "```java\n\n    npm install\n    bower install\n\n    ```", "```java\n      var ENV = {\n        modulePrefix: 'ember-webapp-forspring',\n        podModulePrefix: 'ember-webapp-forspring/modules',\n        ...\n      }\n    ```", "```java\n\nember generate model user\nember generate model task\n\n```", "```java\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  name: DS.attr('string'),\n  userName: DS.attr('string'),\n  password: DS.attr('string'),\n  dateOfBirth: DS.attr('date')\n});\n```", "```java\nimport DS from 'ember-data';\n\nexport default DS.Model.extend({\n  name: DS.attr('string'),\n  priority: DS.attr('number'),\n  status: DS.attr('string'),\n  createdBy: DS.belongsTo('user'),\n  createdDate: DS.attr('date'),\n  assignee: DS.belongsTo('user'),\n  completedDate: DS.attr('date'),\n  comments: DS.attr('string'),\n});\n```", "```java\n\nember generate adapter application\n\n```", "```java\nimport Ember from 'ember';\nimport DS from 'ember-data';\n\nexport default DS.RESTAdapter.extend({\n  host: 'http://<apiserver-context-root>',\n  namespace: 'api/v1'\n});\n```", "```java\n\nember generate serializer user\nember generate serializer task\n\n```", "```java\nimport DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n    attrs: {\n        profileImage: {embedded: 'always'},\n    },\n});\n```", "```java\nimport DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n    attrs: {\n        createdBy: {embedded: 'always'},\n        assignee: {embedded: 'always'},\n    },\n});\n```", "```java\n\nember generate route index --pod\nember generate route user --pod\nember generate route task --pod\n\n```", "```java\n<div class=\"container\">\n  <h1>Welcome to Taskify!</h1>\n  <hr />\n  <P>There are <strong>{{model.openTasks.length}}</strong> open\n    {{#link-to \"task\"}}tasks{{/link-to}} out of total\n    <strong>{{model.tasks.length}}</strong> in the system</P>\n</div>\n```", "```java\nimport Ember from 'ember';\n\nexport default Ember.Route.extend({\n  model: function() {\n    var _model = Ember.Object.extend({\n      tasks: null,\n      openTasks: Ember.computed(\"tasks\", function() {\n        var _tasks = this.get(\"tasks\");\n        return Ember.isEmpty(_tasks) ? Ember.A([]): _tasks.filterBy(\"status\", \"Open\");\n      }),\n    }).create();\n\n    this.store.findAll('task').then(function(_tasks) {\n    _model.set(\"tasks\", _tasks);\n    return _model;\n  });\n    return _model;\n});\n```", "```java\nmodel: function() {\n  return this.store.findAll('user');\n},\n```", "```java\n<div class=\"container\">\n  <h1>List of users</h1><hr />\n  <p class=\"text-right\">\n    <a {{action 'createNewUser'}} class=\"btn btn-primary\" role=\"button\">Create New User</a></p>\n\n  <table class=\"table table-hover\">\n    <thead><tr>\n      <th>ID</th>\n      <th>User name</th>\n      <th>Name</th>\n      <th>Date Of Birth</th>\n      <th>Edit</th>\n      <th>Delete</th>\n    </tr></thead>\n  <tbody>\n  {{#each model as |user|}}\n  <tr>\n    <td><a {{action 'showUser' user }}>{{user.id}}</a></td>\n    <td>{{user.userName}}</td>\n    <td>{{user.name}}</td>\n    <td>{{format-date user.dateOfBirth format='MMM DD, YYYY'}}</td>\n    <td><button type=\"button\" class=\"btn btn-default\" aria-label=\"Edit user\" {{action 'editUser' user}}>\n        <span class=\"glyphicon glyphicon-pencil\" aria-hidden=\"true\"></span></button></td>\n    <td><button type=\"button\" class=\"btn btn-default\" aria-label=\"Delete user\" {{action 'deleteUser' user}}>\n        <span class=\"glyphicon glyphicon-trash\" aria-hidden=\"true\"></span></button></td>\n  </tr>\n  {{/each}}\n  </tbody>\n  </table>\n</div>\n```", "```java\n{{format-date user.dateOfBirth format='MMM DD, YYYY'}}\n```", "```java\n\nember generate helper format-date\n\n```", "```java\nimport Ember from 'ember';\n\nexport function formatDate(params, hash) {\n  if(!Ember.isEmpty(hash.format)) {\n    return moment(new Date(params)).format(hash.format);\n  }\n  return params;\n}\n\nexport default Ember.Helper.helper(formatDate);\n```", "```java\nactions: {\n  createNewUser: function() {\n    this.controller.set(\"_editingUser\", null);\n    this.controller.set(\"editingUser\", Ember.Object.create({\n      name: null,\n      userName: null,\n      password: null,\n      dateOfBirth: new Date()\n    }));\n\n  Ember.$(\"#userEditModal\").modal(\"show\");\n  },\n  showUser: function(_user) {\n    this.controller.set(\"_editingUser\", _user);\n    this.controller.set(\"editingUser\", Ember.Object.create(\n    _user.getProperties(\"id\", \"name\", \"userName\", \"password\", \"dateOfBirth\", \"profileImage\")));\n    Ember.$(\"#userViewModal\").modal(\"show\");\n  },\n  editUser: function(_user) {\n    this.actions.closeViewModal.call(this);\n    this.controller.set(\"_editingUser\", _user);\n    this.controller.set(\"editingUser\", Ember.Object.create(\n    _user.getProperties(\"id\", \"name\", \"userName\", \"password\", \"dateOfBirth\", \"profileImage\")));\n    Ember.$(\"#userEditModal\").modal(\"show\");\n  },\n  deleteUser: function(_user) {\n    if(confirm(\"Delete User, \" + _user.get(\"name\") + \" ?\")) {\n      var _this = this.controller;\n      _user.destroyRecord().then(function() {\n        _this.set(\"editingUser\", null);\n        _this.set(\"_editingUser\", null);\n        _this.set(\"model\", _this.store.findAll('user'));\n      });\n    }\n  }\n}\n```", "```java\n\nember generate component modal-window --pod\nember generate component modal-header --pod\nember generate component modal-body --pod\nember generate component modal-footer --pod\n\n```", "```java\n<div class=\"modal-dialog\" role=\"document\">\n<div class=\"modal-content\">{{yield}}</div>\n</div>\n```", "```java\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n  classNames: [\"modal\", \"fade\"],\n  attributeBindings: ['label:aria-label', 'tabindex', 'labelId:aria-labelledby'], ariaRole: \"dialog\", tabindex: -1, labelId: Ember.computed('id', function() {\n    if(Ember.isEmpty(this.get(\"id\"))) {\n      this.set(\"id\", this.get(\"parentView.elementId\") + \"_Modal\");\n    }\n  return this.get('id') + \"Label\";\n  })\n});\n```", "```java\n{{yield}}\n```", "```java\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n  classNames: [\"modal-header\"],\n});\n```", "```java\n{{yield}}\n```", "```java\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n  classNames: [\"modal-body\"],\n});\n```", "```java\n{{yield}}\n```", "```java\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n  classNames: [\"modal-footer\"],\n});\n```", "```java\n{{#modal-window id=\"userEditModal\"}}\n\n  {{#modal-header}}\n  <button type=\"button\" class=\"close\" {{action \"closeEditModal\"}} aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n  <h4 class=\"modal-title\" id=labelId>{{modalTitle}}</h4>\n  {{/modal-header}}\n\n  {{#modal-body}}\n  <form> <div class=\"form-group\">\n  <label for=\"txtName\">Full Name:</label>\n  {{input class=\"form-control\" id=\"txtName\" placeholder=\"Full Name\" value=editingUser.name}} </div>\n  <div class=\"form-group\"> <label for=\"txtUserName\">Username:</label>\n  {{input class=\"form-control\" id=\"txtUserName\" placeholder=\"User Name\" value=editingUser.userName}}</div>\n  <div class=\"form-group\"> <label for=\"txtPassword\">Password:</label>\n  {{input type=\"password\" class=\"form-control\" id=\"txtPassword\" placeholder=\"Your secret password\" value=editingUser.password}}</div>\n  <div class=\"form-group\"><label for=\"calDob\">Date of Birth:</label>\n  {{bs-datetimepicker id=\"calDob\" date=editingUser.dateOfBirth\n       updateDate=(action (mut editingUser.dateOfBirth))\n       forceDateOutput=true}} </div> </form>\n  {{/modal-body}}\n\n  {{#modal-footer}}\n  <a {{action \"saveUser\"}} class=\"btn btn-success\">Save</a>\n  <a {{action \"closeEditModal\"}} class=\"btn btn-primary\">Cancel</a>\n  <a {{action 'deleteUser' _editingUser}} class=\"btn btn-danger\"> Delete </a>\n  {{/modal-footer}}\n{{/modal-window}}\n```", "```java\n...\ncloseEditModal: function() {\n  Ember.$(\"#userEditModal\").modal(\"hide\");\n  this.controller.set(\"editingUser\", null);\n  this.controller.set(\"_editingUser\", null);\n},\ncloseViewModal: function() {\n  Ember.$(\"#userViewModal\").modal(\"hide\");\n  this.controller.set(\"editingUser\", null);\n  this.controller.set(\"_editingUser\", null);\n},\n\nsaveUser: function() {\n  if(this.controller.get(\"_editingUser\") === null) {\n  this.controller.set(\"_editingUser\",this.store.createRecord(\"user\",\n    this.controller.get(\"editingUser\").getProperties(\"id\", \"name\", \"userName\", \"password\", \"dateOfBirth\")));\n  } else {\n    this.controller.get(\"_editingUser\").setProperties(\n         this.controller.get(\"editingUser\").getProperties(\"name\", \"userName\", \"password\", \"dateOfBirth\"));\n  }\n  this.controller.get(\"_editingUser\").save();\n  this.actions.closeEditModal.call(this);\n}\n```", "```java\n\nember generate controller task --pod\n\n```", "```java\nloadUsers: function() {\n  this.set(\"allUsers\", this.store.findAll('user'));\n}.on(\"init\"),\n```", "```java\n<div class=\"form-group\">\n  <label for=\"calDob\">Created By:</label>\n  <select onchange={{action \"changeCreatedBy\" value=\"target.value\"}} class=\"form-control\">\n  {{#each allUsers as |user|}}\n    <option value={{user.id}} selected={{eq editingTask.createdBy.id user.id}}>{{user.name}}</option>\n  {{/each}}\n  </select>\n</div>\n```", "```java\nchangeCreatedBy: function(_userId) {\n  this.get(\"editingTask\").set(\"createdBy\", this.get(\"allUsers\").findBy(\"id\", _userId));\n},\n```", "```java\ntaskPriorities: [],\n  loadTaskPriorities: function() {\n  for(var _idx=1; _idx<11; _idx++) {\n    this.taskPriorities.pushObject(_idx);\n  }\n}.on(\"init\"),\n```", "```java\n<div class=\"form-group\">\n  <label for=\"selectPriority\">Priority:</label>\n  <select onchange={{action (mut editingTask.priority) value=\"target.value\"}} class=\"form-control\">\n  {{#each taskPriorities as |priority|}}\n   <option value={{priority}} selected={{eq editingTask.priority priority}}>{{priority}}</option>\n  {{/each}}\n  </select>\n</div>\n```", "```java\n<properties>\n  <spring-framework-version>4.1.6.RELEASE</spring-framework-version>\n  <mojarra-version>2.2.12</mojarra-version>\n</properties>\n  ...\n<dependency>\n  <groupId>com.sun.faces</groupId>\n  <artifactId>jsf-api</artifactId>\n  <version>${mojarra-version}</version>\n</dependency>\n<dependency>\n  <groupId>com.sun.faces</groupId>\n  <artifactId>jsf-impl</artifactId>\n  <version>${mojarra-version}</version>\n</dependency>\n...\n```", "```java\n@Configuration\n@Order(2)\npublic class AnnotationConfigDispchServletInit extends AbstractAnnotationConfigDispatcherServletInitializer {\n  @Override\n  protected Class<?>[] getRootConfigClasses() {\n    return new Class<?>[] { AppConfig.class };\n  }\n  @Override\n  protected Class<?>[] getServletConfigClasses() {\n    return null;\n  }\n  @Override\n  protected String[] getServletMappings() {\n    return new String[] { \"*.xhtml\" };\n  }\n  @Override\n  protected Filter[] getServletFilters() {\n    return new Filter[] { new CharacterEncodingFilter() };\n  }\n  @Override\n  public void onStartup(ServletContext servletContext) throws ServletException {\n    // Use JSF view templates saved as *.xhtml, for use with // Facelets\n    servletContext.setInitParameter(\"javax.faces.DEFAULT_SUFFIX\", \".xhtml\");\n    // Enable special Facelets debug output during development\n    servletContext.setInitParameter(\"javax.faces.PROJECT_STAGE\", \"Development\");\n    // Causes Facelets to refresh templates during development\n    servletContext.setInitParameter(\"javax.faces.FACELETS_REFRESH_PERIOD\", \"1\");\n    servletContext.setInitParameter(\"facelets.DEVELOPMENT\", \"true\");\n    servletContext.setInitParameter(\"javax.faces.STATE_SAVING_METHOD\", \"server\");\n    servletContext.setInitParameter(\n      \"javax.faces.PARTIAL_STATE_SAVING_METHOD\", \"true\");\n      servletContext.addListener(com.sun.faces.config.ConfigureListener.class);\n    ServletRegistration.Dynamic facesServlet = servletContext.addServlet(\"Faces Servlet\", FacesServlet.class);\n    facesServlet.setLoadOnStartup(1);\n    facesServlet.addMapping(\"*.xhtml\");\n    // Let the DispatcherServlet be registered\n    super.onStartup(servletContext);\n  }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<faces-config \n\nxsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd\"\nversion=\"2.2\">\n  <application>\n    <el-resolver>org.springframework.web.jsf.el.SpringBeanFacesELResolver</el-resolver>\n  </application>\n  <lifecycle>\n    <phase-listener>org.springframework.web.jsf.DelegatingPhaseListenerMulticaster</phase-listener>\n  </lifecycle>\n</faces-config>\n```", "```java\n@ManagedBean(name = \"orderBean\", eager = true)\n@RequestScoped\n@Component\npublic class OrderBean {\n  private String orderName;\n  private Integer orderId;\n\n  @Autowired\n  public OrderServiceorder Service;\n  public String placeAnOrder(){\n    orderName=orderService.placeAnOrder(orderId);\n    return \"confirmation\";\n  }\n\n  public String getOrderName() {\n    return orderName;\n  }\n  public void setOrderName(String orderName) {\n    this.orderName = orderName;\n  }\n  public Integer getOrderId() {\n    return orderId;\n  }\n  public void setOrderId(Integer orderId) {\n    this.orderId = orderId;\n  }\n\n}\n```", "```java\n<html lang=\"en\"\n\n>\n  <h:body>\n  <h3>input: JSF 2 and Spring Integration</h3>\n    <h:form id=\"orderForm\">\n      <h:outputLabel value=\"Enter order id:\" />\n      <h:inputText value=\"#{orderBean.orderId}\" /> <br/>\n      <h:commandButton value=\"Submit\" action=\"#{orderBean.placeAnOrder}\"/>\n    </h:form>\n  </h:body>\n</html>\n```", "```java\n<html lang=\"en\"\n\n>\n  <h:body>\n  <h3>Confirmation of an order</h3>\n  Product Name: #{orderBean.orderName}\n  </h:body>\n</html>\n```", "```java\n<dependency>\n  <groupId>org.apache.struts</groupId>\n  <artifactId>struts2-core</artifactId>\n  <version>2.3.20</version>\n</dependency>\n<dependency>\n  <groupId>org.apache.struts</groupId>\n  <artifactId>struts2-spring-plugin</artifactId>\n  <version>2.3.20</version>\n</dependency>\n<dependency>\n  <groupId>org.apache.struts</groupId>\n  <artifactId>struts2-convention-plugin</artifactId>\n  <version>2.3.20</version>\n</dependency>\n```", "```java\npackage com.springessentialsbook.chapter7.struts;\n...\n@Action(\"/order\")\n@ResultPath(\"/WEB-INF/pages\")\n@Result(name = \"success\", location = \"orderEntryForm.jsp\")\npublic class ViewOrderAction extends ActionSupport {\n  @Override\n  public String execute() throws Exception {\n    return super.execute();\n  }\n}\n```", "```java\npackage com.springessentialsbook.chapter7.struts;\n\u2026...\n@Action(\"/doOrder\")\n@ResultPath(\"/WEB-INF/pages\")\n@Results({\n  @Result(name = \"success\", location = \"orderProceed.jsp\"),\n  @Result(name = \"error\", location = \"failedOrder.jsp\")\n})\npublic class DoOrderAction extends ActionSupport {\n  @Autowired\n  private OrderService orderService;\n  private OrderVO order;\n\n  public void setOrder(OrderVO order) {\n    this.order = order;\n  }\n\n  public OrderVO getOrder() {\n    return order;\n  }\n\n  @Override\n  public String execute( ) throws Exception {\n    if ( orderService.isValidOrder(order.getOrderId())) {\n      order.setOrderName(orderService.placeAnOrder(order.getOrderId()));\n      return SUCCESS;\n    }\n    return ERROR;\n  }\n```", "```java\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\npageEncoding=\"UTF-8\"%>\n<%@ taglib prefix=\"s\" uri=\"/struts-tags\" %>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \n\"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n  </head>\n  <body>\n    <div align=\"center\">\n      <h1>Spring and Struts Integration</h1>\n      <h2>Place an order</h2>\n      <s:form action=\"doOrder\" method=\"post\">\n        <s:textfield label=\"OrderId\" name=\"order.orderId\" />\n        <s:submit value=\"Order\" />\n      </s:form>\n    </div>\n  </body>\n</html>\n```", "```java\npublic class OrderVO {\n  private String orderName;\n  private String orderId;\n\n  public String getOrderName() {\n    return orderName;\n  }\n  public void setOrderName(String orderName) {\n    this.orderName = orderName;\n  }\n  public String getOrderId() {\n    return orderId;\n  }\n  public void setOrderId(String orderId) {\n    this.orderId = orderId;\n  }\n```", "```java\n<%@ taglib prefix=\"s\" uri=\"/struts-tags\" %>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n  </head>\n  <body>\n    <div align=\"center\">\n      <h1>Order confirmation</h1>\n      <s:label label=\"OrderId\" name=\"order.orderId\" />, <s:label label=\"OrderName\" name=\"order.orderName\" /> <br/>\n      has been successfully placed.\n    </div>\n  </body>\n</html>\n```"]