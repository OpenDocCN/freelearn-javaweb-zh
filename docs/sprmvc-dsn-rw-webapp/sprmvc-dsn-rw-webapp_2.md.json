["```java\n\n    -vm \n    C:\\java\\jdk1.8.0_25\\jre\\bin\\server\\jvm.dll\n\n    ```", "```java\n\n    -vm \n    /usr/java/jdk1.8.0_25/jre/lib/{your.architecture}/server/libjvm.so\n\n    ```", "```java\n\n        -vmargs\n        -Xms128m\n        -Xmx512m\n        -Xverify:none\n        -Dosgi.requiredJavaVersion=1.6\n        -XX:MaxGCPauseMillis=10\n        -XX:MaxHeapFreeRatio=70\n        -XX:+UseConcMarkSweepGC\n        -XX:+CMSIncrementalMode\n        -XX:+CMSIncrementalPacing\n\n        ```", "```java\n        <settings  \n          xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd\">\n          <profiles>\n            <profile>\n              <id>compiler</id>\n                <properties>\n                  <JAVA_HOME>C:\\java\\jdk1.8.0_25</JAVA_HOME>\n                </properties>\n            </profile>\n          </profiles>\n          <activeProfiles>\n          <activeProfile>compiler</activeProfile>\n          </activeProfiles>\n        </settings>\n        ```", "```java\n        <build>\n          <plugins>\n            <plugin>\n              <groupId>org.apache.maven.plugins</groupId>\n              <artifactId>maven-compiler-plugin</artifactId>\n              <version>3.1</version>\n              <configuration>\n                  <source>1.8</source>\n                  <target>1.8</target>\n                  <verbose>true</verbose>\n                  <fork>true</fork>\n                  <executable>${JAVA_HOME}/bin/javac</executable>\n                  <compilerVersion>1.8</compilerVersion>\n              </configuration>\n            </plugin>\n            <plugin>\n              <groupId>org.apache.maven.plugins</groupId>\n              <artifactId>maven-surefire-plugin</artifactId>\n              <version>2.4.2</version>\n              <configuration>\n                <jvm>${JAVA_HOME}/bin/java</jvm>\n                <forkMode>once</forkMode>\n               </configuration>\n            </plugin>\n          </plugins>\n        </build>\n        ```", "```java\n    <build>\n      <plugins>\n        <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <version>3.1</version>\n          <configuration>\n            <source>1.8</source>\n            <target>1.8</target>\n              <verbose>true</verbose>\n              <fork>true</fork>\n            <executable>${JAVA_HOME}/bin/javac</executable>\n          <compilerVersion>1.8</compilerVersion>\n          </configuration>\n        </plugin>\n        <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-surefire-plugin</artifactId>\n            <version>2.4.2</version>\n            <configuration>\n            <jvm>${JAVA_HOME}/bin/java</jvm>\n            <forkMode>once</forkMode>\n          </configuration>\n        </plugin>\n      </plugins>\n    </build>\n    ```", "```java\n\n    mvn clean install\n\n    ```", "```java\n\n    [INFO] ZipCloud Parent .......................SUCCESS [  0.313 s]\n    [INFO] ZipCloud Core .........................SUCCESS [  1.100 s]\n    [INFO] ----------------------------------------------------------\n    [INFO] BUILD SUCCESS\n    [INFO] ----------------------------------------------------------\n\n    ```", "```java\n\n    [INFO] BUILD SUCCESS\n\n    ```", "```java\n\n    [INFO] CloudStreetMarket Parent ..............SUCCESS [  0.313 s]\n    [INFO] CloudStreetMarket Webapp ..............SUCCESS [  6.129 s]\n    [INFO] CloudStreetMarket Core ................SUCCESS [  0.922 s]\n    [INFO] CloudStreetMarket API .................SUCCESS [  7.163 s]\n    [INFO] ----------------------------------------------------------\n    [INFO] BUILD SUCCESS\n    [INFO] ----------------------------------------------------------\n\n    ```", "```java\n\n    -------------------------------------------------------\n     T E S T S\n    -------------------------------------------------------\n    There are no tests to run.\n    Results :\n    Tests run: 0, Failures: 0, Errors: 0, Skipped: 0\n\n    ```", "```java\n<verbose>true</verbose>\n<fork>true</fork>\n<executable>${JAVA_HOME}/bin/javac</executable>\n<compilerVersion>1.8</compilerVersion>\n```", "```java\n<source>1.8</source>\n<target>1.8</target>\n```", "```java\n\n        INFO: Starting ProtocolHandler [\"http-nio-8080\"]\n        Oct 20, 2014 11:43:44 AM org.apache.coyote.AbstractProtocol start\n        INFO: Starting ProtocolHandler [\"ajp-nio-8009\"]\n        Oct 20, 2014 11:43:44 AM org.apache.catalina.startup.Cata.. start\n        INFO: Server startup in 6898 ms\n\n        ```", "```java\n<context-param>\n  <param-name>contextConfigLocation</param-name>\n  <param-value>classpath*:/META-INF/spring/*-config.xml</param-value>\n</context-param>\n```", "```java\n\ngit \u2013version\n\n```", "```java\n\n    git init\n\n    ```", "```java\n\n    git remote add origin https://github.com/alex-bretet/cloudstreetmarket.com\n\n    ```", "```java\n\n     cd <home-directory>/workspace \n\n    ```", "```java\n\n     git pull origin v2.2.1\n\n    ```", "```java\n\n     edu.zipcloud.cloudstreetmarket.portal.controllers.\n\n    ```", "```java\n    @Controller\n    @RequestMapping(\"/info\")\n    public class InfoTagController {\n      @RequestMapping(\"/helloHandler\")\n      @ResponseBody\n      public String helloController(){\n        return \"hello\";\n      }\n    }\n    ```", "```java\n    <bean id=\"webAppVersion\" class=\"java.lang.String\">\n      <constructor-arg value=\"1.0.0\"/>\n    </bean>\n    ```", "```java\n    @Autowired\n    private WebApplicationContext webAppContext;\n    private final static LocalDateTime startDateTime = LocalDateTime.now();\n    private final static DateTimeFormatter DT_FORMATTER =  DateTimeFormatter.ofPattern(\"EEE, d MMM yyyy h:mm a\");\n    @RequestMapping(\"/server\")\n    @ResponseBody\n    public String infoTagServer(){\n      return new StringJoiner(\"<br>\")\n        .add(\"-------------------------------------\")\n        .add(\" Server: \"+ \n        webAppContext.getServletContext().getServerInfo())\n        .add(\" Start date: \"+ \n        startDateTime.format(DT_FORMATTER))\n        .add(\" Version: \" + \n        webAppContext.getBean(\"webAppVersion\"))\n        .add(\"--------------------------------------\")\n        .toString();\n    }\n    ```", "```java\n\n    --------------------------------------------------\n    Server: Apache Tomcat/8.0.14\n    Start date: Sun, 16 Nov 2014 12:10 AM\n    Version: 1.0.0\n    ---------------------------------------------------\n\n    ```", "```java\n<servlet>\n  <servlet-name>spring</servlet-name>\n   <servlet-class>\n      org.springframework.web.servlet.DispatcherServlet\n  </servlet-class>\n  <load-on-startup>1</load-on-startup>\n</servlet>\n<servlet-mapping>\n   <servlet-name>spring</servlet-name>\n   \t<url-pattern>/*</url-pattern>\n</servlet-mapping>\n```", "```java\n<servlet>\n <servlet-name>spring</servlet-name>\n   <servlet-class>\n    org.springframework.web.servlet.DispatcherServlet\n  </servlet-class>\n   <init-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>/WEB-INF/dispatcher-context.xml</param-value>\n   </init-param>\n   <load-on-startup>1</load-on-startup>\n</servlet>\n<servlet-mapping>\n    <servlet-name>spring</servlet-name>\n    <url-pattern>/*</url-pattern>\n</servlet-mapping>\n```", "```java\n<listener>\n  <listener-class>\n    org.springframework.web.context.ContextLoaderListener\n  </listener-class>\n</listener>\n```", "```java\n<context:component-scan base-package=\"edu.zipcloud.cloudstreetmarket.portal\"/>\n```", "```java\n@RequestMapping(value=\"/server\", method=RequestMethod.GET)\n```", "```java\n@RequestMapping(value=\"/index\")\npublic ModelAndView getRequestExample(ServletRequest request){\n    ModelAndView mav = new ModelAndView();\n    mav.setViewName(\"index\");\n    mav.addObject(\"variable1\", new ArrayList<String>());\n    return mav;\n}\n```", "```java\n@RequestMapping(value=\"/index\")\npublic ModelAndView getRequestExample(@RequestParam(\"exP1\") String exP1){\n   ModelAndView mav = new ModelAndView();\n   mav.setViewName(\"index\");\n   mav.addObject(\"exP1\", exP1);\n   return mav;\n}\n```", "```java\n    @Controller\n    public class DefaultController {\n      @RequestMapping(value=\"/*\", method={RequestMethod.GET,RequestMethod.HEAD})\n      public String fallback() {\n        return \"index\";\n      }\n    }\n    ```", "```java\n\n@RequestMapping(value=\"/*\", ...)\n\n```", "```java\n/portal/1, /portal/foo, /portal/foo-bar\n```", "```java\n/portal/foo/bar\n```", "```java\n/portal/**/foo/*/bar  \t\n```", "```java\n@RequestMapping(value=\"/default\"...)\n@Controller\npublic class DefaultController\u2026{\n      @RequestMapping(value=\"/*\"...)\n      public String fallback(Model model) {...}\n}\n```", "```java\n<bean id=\"viewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n  <property name=\"viewClass\" value=\"org.springframework.web.servlet.view.JstlView\" />\n  <property name=\"prefix\" value=\"/WEB-INF/jsp/\" />\n  <property name=\"suffix\" value=\".jsp\" />\n</bean>\n```", "```java\n@RequestMapping(value=\"/example/{param}\")\npublic HttpEntity<String> example(@PathVariable(\"param\") String parameter) {\n  return new HttpEntity<>(parameter);\n}\n```", "```java\n@RequestMapping(value=\"/example/{param}\")\npublic HttpEntity<String> example(@PathVariable String param) {\n  return new HttpEntity<>(param);\n}\n```", "```java\n        <%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n        <%@ page isELIgnored=\"false\" %>\n        ```", "```java\n        <!-- start: Meta -->\n        <meta charset=\"utf-8\">\n        <title>Spring MVC: CloudST Market</title> \n        <meta name=\"description\" content=\"Spring MVC CookBook: Cloud Street Market\"/>\n        <meta name=\"keywords\" content=\"spring mvc, cookbook, packt publishing, microservices, angular.js\" />\n        <meta name=\"author\" content=\"Your name\"/>\n        <!-- end: Meta -->\n        ```", "```java\n        <!--start: Logo -->\n        <div class=\"logo span4\">\n          CLOUD<span class=\"sub\">ST</span><span>Market</span>\n        </div>\n        <!--end: Logo -->\n        ```", "```java\n        <ul class=\"nav\">\n          <li class=\"active\"><a href=\"index\">Home</a></li>\n          <li><a href=\"markets\">Prices and markets</a></li>\n          <li><a href=\"community\">Community</a></li>\n          <li><a href=\"sources\">Sources</a></li>\n          <li><a href=\"about\">About</a></li>\n          <li><a href=\"contact\">Contact</a></li>\n        </ul>\n        ```", "```java\n        <!-- start: Row -->\n        <div class=\"row\"></div>\n        <!-- end: Row -->\n        ```", "```java\n        <!-- start: Footer Menu -->\n        <div id=\"footer-menu\" class=\"hidden-tablet hidden-phone\">\n          <!-- start: Container -->\n          <div class=\"container\">\n            <!-- start: Row -->\n            <div class=\"row\">\n              <!-- start: Footer Menu Logo -->\n              <div class=\"span1\">\n              <div class=\"logoSmall\">CLOUD<span class=\"sub\">ST</span><span>M!</span>\n                </div>\n                </div>\n              <!-- end: Footer Menu Logo -->\n              <!-- start: Footer Menu Links-->\n              <div class=\"span10\" >\n              <div id=\"footer-menu-links\">\n              <ul id=\"footer-nav\" style=\"margin-left:35pt;\">\n                <li><a href=\"index\">Home</a></li>\n                <li><a href=\"markets\">Prices and markets</a></li>\n              <li><a href=\"community\">Community</a></li>\n                <li><a href=\"sources\">Sources</a></li>\n                <li><a href=\"about\">About</a></li>\n                <li><a href=\"contact\">Contact</a></li>\n                </ul>\n                </div>\n                </div>\n                <!-- end: Footer Menu Links-->\n                <!-- start: Footer Menu Back To Top -->\n                <div class=\"span1\">\n                <div id=\"footer-menu-back-to-top\">\n                  <a href=\"#\"></a>\n                  </div>\n                </div>\n                <!-- end: Footer Menu Back To Top -->\n            </div>\n            <!-- end: Row -->\n            </div>\n          <!-- end: Container  -->\t\n        </div>\t\n        <!-- end: Footer Menu -->\n        ```", "```java\n        <!-- start: Leaderboard -->\n        <div class=\"span3\">\n          <h3>Leaderboard</h3>\n          <div class=\"flickr-widget\">\n            <script type=\"text/javascript\" src=\"\"></script>\n            <div class=\"clear\"></div>\n          </div>\n        </div>\n        <!-- end: Leaderboard -->\n        ```", "```java\n    .logo{\n      font-family: 'Droid Sans';\tfont-size: 24pt; color: \t#666; width:157pt; font-weight:bold; margin-top:18pt; \tmargin-left:10pt; height:30pt;\n    }\n    .logo span{\n      position:relative;float:right; margin-top: 3pt;\tfont-weight:normal; font-family: 'Boogaloo'; font-\tstyle:italic;\tcolor: #89C236; padding-right: 3pt;\n    }\n    .logo .sub {\n      vertical-align: super;\tfont-style:normal;font-size: 16pt; font-family: 'Droid Sans';\tfont-weight:bold; position: absolute;\tcolor: #888; \tmargin:-4pt 0 -4pt 0;\n    }\n    .logoSmall{\n      font-family: 'Droid Sans';\tfont-size: 16pt; color: #888;width:80pt;\tfont-weight:bold; margin-top:10pt;height:20pt; margin-right:30pt;\n    }\n    .logoSmall span{\n      position:relative;\tfloat:right; margin-top: 3pt;\n      font-weight:normal;font-family: 'Boogaloo';\tfont-style:italic;color: #89C236;\n    }\n    .logoSmall .sub {\n      vertical-align: super;\n      font-style:normal;\tfont-size: 10pt;font-family: 'Droid Sans';font-weight:bold;position: absolute; color: #666;margin:-2pt 0 -4pt 0;\n    }\n    ```", "```java\n        <div class='span12'>\n          <div class=\"hero-unit hidden-phone\"><p>Welcome to CloudStreet Market, the educational platform.</p></div>\n        </div>\n        <div class='span5'>\n            <div id='landingGraphContainer'></div>\n            <div id='tableMarketPrices'>\n              <table class=\"table table-hover table-condensed table-bordered table-striped\">\n                <thead>\n                  <tr>\n                    <th>Index</th>\n                    <th>Value</th>\n                    <th>Change</th>\n                  </tr>\n                 </thead>\n                 <tbody>\n               <tr>\n                   <td>Dow Jones-IA</td><td>17,634.74</td>\n                   <td class='text-success'><b>-18.05</b></td>\n                    </tr>\n                    ...\n                    <tr>\n                      <td>FTSE MIB</td><td>18,965.41</td>\n                      <td class='text-error'><b>-182.86</b></td>\n                    </tr>\n                    ...\n                </tbody>\n                </table>\n              </div>\n        </div>\n        <div id=\"containerCommunity\" class='span7'>\n            <div id=\"divRss3\"></div>\n        </div>\n        ```", "```java\n        <script src=\"img/jquery-1.8.2.js\"></script>\n        <script src=\"img/bootstrap.js\"></script>\n        <script src=\"img/flexslider.js\"></script>\n        <script src=\"img/carousel.js\"></script>\n        <script def src=\"img/custom.js\"></script>\n        <script src=\"img/FeedEk.js\"></script>\n        <script src=\"img/raphael.js\"></script>\n        <script src=\"img/morris.min.js\"></script>\n        <script>\n        $(function () {\n            var financial_data = [\n             {\"period\": \"08:00\", \"index\": 66},{\"period\": \"09:00\", \"index\": 62},\n        \t {\"period\": \"10:00\", \"index\": 61},{\"period\": \"11:00\", \"index\": 66},\n             {\"period\": \"12:00\", \"index\": 67},{\"period\": \"13:00\", \"index\": 68},\n             {\"period\": \"14:00\", \"index\": 62},{\"period\": \"15:00\", \"index\": 61},\n             {\"period\": \"16:00\", \"index\": 61},{\"period\": \"17:00\", \"index\": 54}\n            ];\n            Morris.Line({\n              element: 'landingGraphContainer',\n              hideHover: 'auto', data: financial_data,\n              ymax: 70, ymin: 50,\n              pointSize: 3, hideHover:'always',\n              xkey: 'period', xLabels: 'month',\n              ykeys: ['index'], postUnits: '',\n              parseTime: false, labels: ['Index'],\n              resize: true, smooth: false,\n              lineColors: ['#A52A2A']\n            });\n        });\n        </script>\n        ```", "```java\n        <div id=\"divRss3\">\n          <ul class=\"feedEkList\">\n            <li>\n            <div class=\"itemTitle\">\n              <div class=\"listUserIco\">\n                <img src='img/young-\tlad.jpg'>\n              </div>\n              <span class=\"ico-white ico-up-arrow   listActionIco \tactionBuy\"></span>\n                <a href=\"#\">happyFace8</a> buys 6 <a href=\"#\">NXT.L</a> at $3.00\n                <p class=\"itemDate\">15/11/2014 11:12 AM</p>\n            </div>\n            </li>\n            <li>\n            <div class=\"itemTitle\">\n              <div class=\"ico-user listUserIco\"></div>\n              <span class=\"ico-white ico-down-arrow listActionIco actionSell\"></span>\n              <a href=\"#\">actionMan9</a> sells 6 <a href=\"#\">CCH.L</a> at $12.00\n              <p class=\"itemDate\">15/11/2014 10:46 \tAM</p>\n            </div>\n            </li>\n              ...\n          </ul>\n        </div>\n        ```", "```java\n    <link href=\"css/FeedEk.css\" rel=\"stylesheet\">\n    ```", "```java\n    .listUserIco {\n        background-color:#bbb;\n        float:left;\n        margin:0 7px 0 0;\n    }\n    .listActionIco {\n        float:right; \n        margin-top:-3px;\n    }\n    .actionSell {\n        background-color:#FC9090;\n    }\n    .actionBuy {\n        background-color:#8CDBA0;\n    }\n    #landingGraphContainer{\n        height:160px;\n        padding: 0px 13px 0 10px;\n    }\n    .tableMarketPrices{\n        padding: 13px 13px 0 15px;\n    }\n    ```", "```java\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n```", "```java\n/* Higher than 960 (desktop devices)\n================================================================ */\n@media only screen and (min-width: 960px) {\n...\n  #footer-menu {\n    padding-left: 30px;\n    padding-right: 30px;\n    margin-left: -30px;\n    margin-right: -30px;\n  }\n...\n}\n```", "```java\n<div class=\"row\">\n  <div class=\"span4\">...</div>\n  <div class=\"span8\">...</div>\n</div>\n```", "```java\n<div class=\"row\">\n  <div class=\"span6\">...</div>\n  <div class=\"span6\">...</div>\n</div>\n```", "```java\n<div class=\"row\">\n    <div class=\"span6\">...</div>\n    <div class=\"span4 offset2\">...</div>\n</div>\n```", "```java\n<div class=\"row\">\n   <div class=\"span6\">\n      <div class=\"row\">\n        <div class=\"span2\">...</div>\n        <div class=\"span4\">...</div>\n      </div>\n   </div>\n</div>\n```", "```java\n<table class=\"table table-hover table-condensed table-bordered table-striped\">\n  <thead>\n    <tr><th>Index</th>\n       <th>Value</th>\n       <th>Change</th></tr>\n  </thead>\n  <tbody>\n      <tr><td>...</td>\n       <td>...</td>\n       <td>...</td>\n    </tr>\n  </tbody>\n</table>\n```", "```java\n<div class=\"navbar navbar-inverse\">\n  <div class=\"navbar-inner\">\n  ...\n  <ul class=\"nav\">\n    <li class=\"active\"><a href=\"index\">Home</a></li>\n    <li><a href=\"markets\">Prices and markets</a></li>\n    <li><a href=\"community\">Community</a></li>\n    <li><a href=\"sources\">Sources</a></li>\n    <li><a href=\"about\">About</a></li>\n    <li><a href=\"contact\">Contact</a></li>\n  </ul>\n...\n```", "```java\n<ul class=\"nav\">\n     <li class=\"active\"><a href=\"#\">Home</a></li>\n     <li><a href=\"#\">Link</a></li>\n</ul>\n```", "```java\n<div class=\"hero-unit\"><p>Welcome to CloudStreet Market, the educational platform.</p></div>\n```", "```java\n<div class=\"alert\">\n    <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n    <strong>Warning!</strong> Best check yo self, you're not looking too good.\n</div>\n```", "```java\n<span class=\"label\">Default</span>\n<span class=\"label label-success\">Success</span>\n<span class=\"label label-important\">Important</span>\n\u2026\n```", "```java\n<span class=\"badge\">1</span>\n<span class=\"badge badge-warning\">4</span>\n<span class=\"badge badge-important\">6</span>\n\u2026\n```", "```java\n    public interface IMarketService {\n      DailyMarketActivityDTO getLastDayMarketActivity(String string);\n      List<MarketOverviewDTO> getLastDayMarketsOverview();\n    }\n        public interface ICommunityService {\n        List<UserActivityDTO> getLastUserPublicActivity(int number);\n    }\n    ```", "```java\n    public class DailyMarketActivityDTO {\n      String marketShortName;\n      String marketId;\n      Map<String, BigDecimal> values;\n      Date dateSnapshot;\n      ... //and constructors, getters and setters\n    }\n    public class MarketOverviewDTO {\n      private String marketShortName;\n      private String marketId;\n      private BigDecimal latestValue;\n      private BigDecimal latestChange;\n      ... //and constructors, getters and setters\n    }\n    public class UserActivityDTO {\n      private String userName;\n      private String urlProfilePicture;\n      private Action userAction;\n      private String valueShortId;\n      private int amount;\n      private BigDecimal price;\n      private Date date;\n      ... //and constructors, getters and setters\n    }\n    ```", "```java\n    public enum Action {\n      BUY(\"buys\"), SELL(\"sells\");\n      private String presentTense;\n        Action(String present){\n      presentTense = present;\n      }\n        public String getPresentTense(){\n        return presentTense;\n      }\n    }\n    ```", "```java\n    @Controller\n    public class DefaultController {\n      @Autowired\n      private IMarketService marketService;\n      @Autowired\n      private ICommunityService communityService;\n      @RequestMapping(value=\"/*\", method={RequestMethod.GET,RequestMethod.HEAD})\n      public String fallback(Model model) {\n        model.addAttribute(\"dailyMarketActivity\", marketService.getLastDayMarketActivity(\"GDAXI\"));\n        model.addAttribute(\"dailyMarketsActivity\", marketService.getLastDayMarketsOverview());\n        model.addAttribute(\"recentUserActivity\", communityService.getLastUserPublicActivity(10));\n        return \"index\";\n      }\n    }\n    ```", "```java\n    @Service\n    public class DummyMarketServiceImpl implements IMarketService {\n        private DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\n        public DailyMarketActivityDTO \n        getLastDayMarketActivity(String string){\n        Map<String, BigDecimal> map = new HashMap<>();\n        map.put(\"08:00\", new BigDecimal(9523));\n        map.put(\"08:30\", new BigDecimal(9556));\n        ...\n        map.put(\"18:30\", new BigDecimal(9758));\n        LocalDateTime ldt = LocalDateTime.parse(\"2015-04-10 17:00\", formatter);\n        return new DailyMarketActivityDTO(\"DAX 30\",\"GDAXI\", map, Date.from(ldt.toInstant(ZoneOffset.UTC)));\n      }\n        @Override\n      public List<MarketOverviewDTO> getLastDayMarketsOverview() {\n          List<MarketOverviewDTO> result = Arrays.asList(\n          new MarketOverviewDTO(\"Dow Jones-IA\", \"DJI\", new BigDecimal(17810.06), new BigDecimal(0.0051)),\n          ...\n          new MarketOverviewDTO(\"CAC 40\", \"FCHI\", new BigDecimal(4347.23), new BigDecimal(0.0267))\n        );\n        return result;\n      }\n    }\n      @Service\n    public class DummyCommunityServiceImpl implements ICommunityService {\n      private DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\n        public List<UserActivityDTO> getLastUserPublicActivity(int number){\n          List<UserActivityDTO> result = Arrays.asList(\n          new UserActivityDTO(\"happyFace8\", \"img/young-lad.jpg\", Action.BUY, \"NXT.L\", 6, new BigDecimal(3), LocalDateTime.parse(\"2015-04-10 11:12\", formatter)),\n          ...\n           new UserActivityDTO(\"userB\", null, Action.BUY, \"AAL.L\", 7, new BigDecimal(7), LocalDateTime.parse(\"2015-04-10 13:29\", formatter))\n          );\n        return result;\n      }\n    }\n    ```", "```java\n    <div class='morrisTitle'>\n      <fmt:formatDate value=\"${dailyMarketActivity.dateSnapshot}\" pattern=\"yyyy-MM-dd\"/>\n    </div>\n    <select class=\"form-control centeredElementBox\">\n      <option value=\"${dailyMarketActivity.marketId}\"> ${dailyMarketActivity.marketShortName}\n      </option>\n    </select> \n    ```", "```java\n    <c:forEach var=\"market\" items=\"${dailyMarketsActivity}\">\n      <tr>\n        <td>${market.marketShortName}</td>\n        <td style='text-align: right'>\n          <fmt:formatNumber type=\"number\" maxFractionDigits=\"3\" value=\"${market.latestValue}\"/>\n      </td>\n       <c:choose>\n          <c:when test=\"${market.latestChange >= 0}\">\n          <c:set var=\"textStyle\" scope=\"page\" value=\"text-success\"/>\n          </c:when>\n          <c:otherwise>\n            <c:set var=\"textStyle\" scope=\"page\" value=\"text-error\"/>\n          </c:otherwise>\n        </c:choose>        \n          <td class='${textStyle}' style='text-align: right'>\n            <b><fmt:formatNumber type=\"percent\" maxFractionDigits=\"2\" value=\"${market.latestChange}\"/>\n        </b>\n      </td>\n      </tr>\n    </c:forEach>\n    ```", "```java\n    <c:forEach var=\"activity\" items=\"${recentUserActivity}\">\n       <c:choose>\n         <c:when test=\"${activity.userAction == 'BUY'}\">\n           <c:set var=\"icoUpDown\" scope=\"page\" value=\"ico-up-arrow actionBuy\"/>\n         </c:when>\n         <c:otherwise>\n           <c:set var=\"icoUpDown\" scope=\"page\" value=\"ico-down-\tarrow actionSell\"/>\n         </c:otherwise>\n        </c:choose>\n        <c:set var=\"defaultProfileImage\" scope=\"page\" value=\"\"/>\n        <c:if test=\"${activity.urlProfilePicture == null}\">\n        <c:set var=\"defaultProfileImage\" scope=\"page\" value=\"ico-user\"/>\n        </c:if>\n      <li>\n      <div class=\"itemTitle\">\n        <div class=\"listUserIco ${defaultProfileImage}\">\n          <c:if test=\"${activity.urlProfilePicture != \tnull}\">\n        <img src='${activity.urlProfilePicture}'>\n    </c:if>\n    </div>\n      <span class=\"ico-white ${icoUpDown} listActionIco\"></span>\n    <a href=\"#\">${activity.userName}</a> \n    ${activity.userAction.presentTense} ${activity.amount} \n      <a href=\"#\">${activity.valueShortId}</a> \n      at $${activity.price}\n        <p class=\"itemDate\">\n          <fmt:formatDate value=\"${activity.date}\" pattern=\"dd/MM/yyyy hh:mm aaa\"/>\n        </p>\n        </div>\n      </li>\n    </c:forEach>\n    ```", "```java\n    <script>\n      var financial_data = [];\n      <c:forEach var=\"dailySnapshot\" items=\"${dailyMarketActivity.values}\">\n      financial_data.push({\"period\": '<c:out value=\"${dailySnapshot.key}\"/>', \"index\": <c:out value='${dailySnapshot.value}'/>});\n      </c:forEach>\n    </script>\n    <script>\n      $(function () {\n        Morris.Line({\n          element: 'landingGraphContainer',\n          hideHover: 'auto', data: financial_data,\n          ymax: <c:out value=\"${dailyMarketActivity.maxValue}\"/>,\n          ymin: <c:out value=\"${dailyMarketActivity.minValue}\"/>,\n          pointSize: 3, hideHover:'always',\n          xkey: 'period', xLabels: 'month',\n          ykeys: ['index'], postUnits: '',\n          parseTime: false, labels: ['Index'],\n          resize: true, smooth: false,\n          lineColors: ['#A52A2A']\n        });\n    });\n    </script>\n    ```", "```java\n@Autowired\nprivate IMarketService marketService;\n@Autowired\nprivate ICommunityService communityService;\n```", "```java\n<context:annotation-config/>\n<context:component-scan base-package=\"edu.zipcloud.cloudstreetmarket.core\" />  \n```", "```java\n@Autowired\nprivate IMarketService marketService;\n\n@Autowired\nprivate ICommunityService communityService;\n```", "```java\npublic String getMarketShortName() {\n  return marketShortName;\n}\n```", "```java\nrequest.setAttribute(\"currentMarket\", \"DAX 30\");\nrequest.getSession().setAttribute(\"userName\", \"UserA\");\nrequest.getServletContext().setAttribute(\"applicationState\", \"FINE\");\n```", "```java\n${requestScope[\"currentMarket\"]}\n${sessionScope[\"username\"]}\n${applicationScope[\"applicationState\"]}\n```", "```java\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/fmt\" prefix=\"fmt\" %>\n```", "```java\n    <mvc:interceptors>\n      <bean id=\"webContentInterceptor\" class=\"org.sfw.web.servlet.mvc.WebContentInterc\teptor\">\n        <property name=\"cacheSeconds\" value=\"0\"/>  \n        <property name=\"requireSession\" value=\"false\"/>  \n        ...\n      </bean>\n    <mvc:interceptors>\n    ```", "```java\n    public class CloudstreetApiWCI extends WebContentInterceptor {\n      public CloudstreetApiWCI(){\n        setRequireSession(false);\n        setCacheSeconds(0);\n      }\n      @Override\n      public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws ServletException {\n          super.preHandle(request, response, handler);\n          return true;\n      }\n      @Override\n      public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, \tModelAndView modelAndView) throws Exception {\n      }\n      @Override\n      public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n      }\n    }\n    ```", "```java\n    public class CloudstreetWebAppWCI extends WebContentInterceptor {\n      public CloudstreetWebAppWCI(){\n        setRequireSession(false);\n        setCacheSeconds(120);\n        setSupportedMethods(\"GET\",\"POST\", \"OPTIONS\", \"HEAD\");\n      }\n      @Override\n      public boolean preHandle(HttpServletRequest request, HttpServletResponse  response, Object handler) throws ServletException {\n          super.preHandle(request, response, handler);\n          return true;\n      }\n      @Override\n      public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView \tmodelAndView) throws Exception {\n      }\n      @Override\n      public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n      }\n    }\n    ```", "```java\n    public class InfoTagController extends CloudstreetWebAppWCI {\n    ...\n    }\n    public class DefaultController extends CloudstreetWebAppWCI {\n    ...\n    }\n    ```", "```java\n    <mvc:interceptors>\n      <bean \tclass=\"edu.zc...controllers.CloudstreetWebAppWCI\">\n        <property name=\"cacheMappings\">\n          <props>\n            <prop key=\"/**/*.js\">86400</prop>\n            <prop key=\"/**/*.css\">86400</prop>\n            <prop key=\"/**/*.png\">86400</prop>\n            <prop key=\"/**/*.jpg\">86400</prop>\n          </props>\n        </property>\n      </bean> \n    </mvc:interceptors>\n    ```", "```java\n      <mvc:interceptors>\n        <bean class=\"edu.zc...controllers.CloudstreetApiWCI\"/>\n      </mvc:interceptors>\n    ```", "```java\n    <bean class=\"org.sfw...annotation.RequestMappingHandlerAdapter\">\n        <property name=\"synchronizeOnSession\" value=\"true\"/>\n        </bean>\n    ```", "```java\n<props>\n  <prop key=\"/**/*.js\">86400</prop>\n  <prop key=\"/**/*.css\">86400</prop>\n  <prop key=\"/**/*.png\">86400</prop>\n  <prop key=\"/**/*.jpg\">86400</prop>\n</props>\n```", "```java\n  <mvc:interceptors>\n    <mvc:interceptor>\n    <mvc:mapping path=\"/**\"/>\n    <bean class=\"edu.zc.csm.portal...CloudstreetWebAppWCI\">\n    <property name=\"cacheMappings\">\n      <props>\n      <prop key=\"/**/*.js\">86400</prop>\n      <prop key=\"/**/*.css\">86400</prop>\n      <prop key=\"/**/*.png\">86400</prop>\n      <prop key=\"/**/*.jpg\">86400</prop>\n      </props>\n    </property>\n    </bean>\n    </mvc:interceptor>\n  </mvc:interceptors>\n```", "```java\n    <HTML ng-app=\"cloudStreetMarketApp\">\n    ```", "```java\n    <div id='landingGraphContainer' ng-controller=\"homeFinancialGraphController\">\n        <select class=\"form-control centeredElementBox\">\n          <option value=\"${dailyMarketActivity.marketId}\"> \n          ${dailyMarketActivity.marketShortName}</option>\n        </select> \n      </div>\n    ```", "```java\n    <div id='tableMarketPrices'>\n        <script>\n          var dailyMarketsActivity = [];\n          var market;\n        </script>\n        <c:forEach var=\"market\" items=\"${dailyMarketsActivity}\">\n        <script>\n          market = {};\n          market.marketShortName = '${market.marketShortName}';\n          market.latestValue = (${market.latestValue}).toFixed(2);\n          market.latestChange = \t(${market.latestChange}*100).toFixed(2);\n          dailyMarketsActivity.push(market);\n        </script>\n        </c:forEach>\n    <div>\n    <table class=\"table table-hover table-condensed table-bordered table-striped\" data-ng-controller='homeFinancialTableController'>\n        <thead>\n          <tr>\n            <th>Index</th>\n            <th>Value</th>\n            <th>Change</th>\n          </tr>\n        </thead>\n        <tbody>\n            <tr data-ng-repeat=\"value in financialMarkets\">\n            <td>{{value.marketShortName}}</td>\n            <td style=\"text-\talign:right\">{{value.latestValue}}</td>\n            <td class='{{value.style}}' style=\"text-align:right\">\n            <strong>{{value.latestChange}}%</strong>\n            </td>\n          </tr>\n        </tbody>\n        </table>\n        </div>\n    </div>\t\n    ```", "```java\n    <div id=\"divRss3\">\n      <ul class=\"feedEkList\" data-ng-controller='homeCommunityActivityController'>\n        <script>\n          var userActivities = [];\n          var userActivity;\n         </script>\n          <c:forEach var=\"activity\" items=\"${recentUserActivity}\">\n          <script>\n            userActivity = {};\n            userActivity.userAction = '${activity.userAction}';\n             userActivity.urlProfilePicture = '${activity.urlProfilePicture}';\n               userActivity.userName = '${activity.userName}';\n               userActivity.urlProfilePicture = \t'${activity.urlProfilePicture}';\n            userActivity.date = '<fmt:formatDate =\"${activity.date}\" pattern=\"dd/MM/yyyy hh:mm aaa\"/>';\n            userActivity.userActionPresentTense = '${activity.userAction.presentTense}';\n            userActivity.amount = ${activity.amount};\n            userActivity.valueShortId = '${activity.valueShortId}';\n            userActivity.price = (${activity.price}).toFixed(2);\n            userActivities.push(userActivity);\n          </script>\n           </c:forEach>\n        <li data-ng-repeat=\"value in communityActivities\">\n        <div class=\"itemTitle\">\n        <div class=\"listUserIco {{value.defaultProfileImage}}\">\n          <img ng-if=\"value.urlProfilePicture\" src='{{value.urlProfilePicture}}'>\n        </div>\n        <span class=\"ico-white {{value.iconDirection}} listActionIco\"></span>\n          <a href=\"#\">{{value.userName}}</a> \n          {{value.userActionPresentTense}} {{value.amount}} \n          <a href=\"#\">{{value.valueShortId}}</a> at {{value.price}}\n          <p class=\"itemDate\">{{value.date}}</p>\n          </div>\n        </li>\n      </ul>\n    </div>\n    ```", "```java\n    <script>\n      var cloudStreetMarketApp = \n        angular.module('cloudStreetMarketApp', []);\n      var tmpYmax = <c:out \n        value=\"${dailyMarketActivity.maxValue}\"/>;\n      var tmpYmin = <c:out \t\n        value=\"${dailyMarketActivity.minValue}\"/>;\n    </script>\n    ```", "```java\n    <script src=\"img/angular.min.js\"></script>\n\n    <script src=\"img/home_financial_graph.js\"></script>\n    <script src=\"img/home_financial_table.js\"></script>\n    <script src=\"img/home_community_activity.js\"></script>\n    ```", "```java\n    cloudStreetMarketApp.factory(\"financialDataFactory\", function () {\n        return {\n            getData: function (market) {\n              return financial_data;\n            },\n            getMax: function (market) {\n              return tmpYmax;\n            },\n            getMin: function (market) {\n              return tmpYmin;\n            }\n        }\n    });\n    ```", "```java\n    cloudStreetMarketApp.controller('homeFinancialGraphController', function ($scope, financialDataFactory){\n      readSelectValue();\n      drawGraph();\n      $('.form-control').on('change', function (elem) {\n        $('#landingGraphContainer').html('');\n        readSelectValue()\n        drawGraph();\n      });\n      function readSelectValue(){\n      $scope.currentMarket = $('.form-control').val();\n      }\n      function drawGraph(){\n        Morris.Line({\n          element: 'landingGraphContainer',\n            hideHover: 'auto',\n            data:financialDataFactory.getData($scope.currentMarket),\n            ymax: financialDataFactory.getMax($scope.currentMarket),\n            ymin: financialDataFactory.getMin($scope.currentMarket),\n            pointSize: 3,\n            hideHover:'always',\n            xkey: 'period', xLabels: 'time',\n            ykeys: ['index'], postUnits: '',\n            parseTime: false, labels: ['Index'],\n            resize: true, smooth: false,\n            lineColors: ['#A52A2A']\n          });\n      }\n    });\n    ```", "```java\n    cloudStreetMarketApp.factory(\"financialMarketsFactory\", function () {\n      var data=[];\n        return {\n            fetchData: function () {\n              return data;\n            },\n            pull: function () {\n            $.each( dailyMarketsActivity, function(index, el ) {\n              if(el.latestChange >=0){\n                dailyMarketsActivity[index].style='text-success';\n              }\n              else{\n                dailyMarketsActivity[index].style='text-error';\n              }\n            });\n            data = dailyMarketsActivity;\n            }\n        }\n    });\n    ```", "```java\n    cloudStreetMarketApp.controller('homeFinancialTableController', function ($scope, financialMarketsFactory){\n       financialMarketsFactory.pull();\n       $scope.financialMarkets = financialMarketsFactory.fetchData();\n    });\n    ```", "```java\n    cloudStreetMarketApp.factory(\"communityFactory\", function () {\n      var data=[];\n        return {\n            fetchData: function () {\n              return data;\n            },\n            pull: function () {\n\n            $.each( userActivities, function(index, el ) {\n            if(el.userAction =='BUY'){\n              userActivities[index].iconDirection='ico-up-arrow actionBuy';\n              }\n              else{\n              userActivities[index].iconDirection='ico-down-arrow actionSell';\n            }\n            userActivities[index].defaultProfileImage='';\n            if(!el.urlProfilePicture){\n              userActivities[index].defaultProfileImage='ico-\tuser';\n            }\n            userActivities[index].price='$'+el.price;\n            });\n            data = userActivities;\n            }\n        }\n    });\n    ```", "```java\n    cloudStreetMarketApp.controller('homeCommunityActivityController', function ($scope, communityFactory){\n       communityFactory.pull();\n       $scope.communityActivities = communityFactory.fetchData();\n    });\n    ```", "```java\n<HTML ng-app=\"cloudStreetMarketApp\">\n```", "```java\nvar cloudStreetMarketApp= angular.module('cloudStreetMarketApp', []);\n```", "```java\nangular.element(document).ready(function() {\n      angular.bootstrap(document, ['myApp']);\n});\n```", "```java\n<div ng-controller=\"homeFinancialGraphController\">\n  <table data-ng-controller='homeFinancialTableController'>\n  <ul data-ng-controller='homeCommunityActivityController'>\n```", "```java\ncloudStreetMarketApp.controller('homeCommunityActivityController', function ($scope, communityFactory){\n  ...\n  $scope.communityActivities = communityFactory.fetchData();\n  $scope.example = 123;\n}\n```", "```java\n<li data-ng-repeat=\"value in communityActivities\">\n  <div class=\"itemTitle\">\n    <div class=\"listUserIco {{value.defaultProfileImage}}\">\n     <img ng-if=\"value.urlProfilePicture\" src='{{value.urlProfilePicture}}'>\n    </div>\n    ...\n  </div>\n</li>\n```", "```java\n<div class=\"listUserIco {{value.defaultProfileImage}}\">\n  <img ng-if=\"value.urlProfilePicture\" src='{{value.urlProfilePicture}}'>\n</div>\n```", "```java\ncloudStreetMarketApp.factory(\"communityFactory\", function () {\n  var data=[];\n    return {\n        fetchData: function () {\n        return data;\n        },\n        pull: function () {\n        $.each( userActivities, function(index, el ) {\n          if(el.userAction =='BUY'){\n            userActivities[index].iconDirection='ico-up-arrow     actionBuy';\n          }\n          else{\n          userActivities[index].iconDirection='ico-down-arrow actionSell';\n          }\n          userActivities[index].defaultProfileImage='';\n          if(!el.urlProfilePicture){\n          userActivities[index].defaultProfileImage='ico-user';\n          }\n          userActivities[index].price='$'+el.price;\n        });\n        data = userActivities;\n        }\n    }\n});\n```", "```java\ncloudStreetMarketApp.controller('homeCommunityActivityController', function ($scope, communityFactory){\n   communityFactory.pull();\n   $scope.communityActivities = communityFactory.fetchData();\n});\n```", "```java\n    cloudStreetMarketApp.controller('homeCommunityActivityController', ['$scope', 'communityFactory', function ($scope, \n    communityFactory){\n       communityFactory.pull();\n       $scope.communityActivities = communityFactory.fetchData();\n    }]);\n    ```", "```java\n    var homeCommunityActivityController = function ($scope, \n    communityFactory){\n       communityFactory.pull();\n       $scope.communityActivities = communityFactory.fetchData();\n    }\n    homeCommunityActivityController.$inject = ['$scope', 'communityFactory'];\n    cloudStreetMarketApp.controller('homeCommunityActivityController', homeCommunityActivityController);\n    ```", "```java\n    cloudStreetMarketApp.controller('homeCommunityActivityController', function ($scope, communityFactory){\n        communityFactory.pull();\n        $scope.communityActivities = communityFactory.fetchData();\n    });\n    ```", "```java\n    <jpa:repositories base-package=\"edu.zc.csm.core.daos\" />\n    <bean id=\"dataSource\" class=\"org.sfw.jdbc.datasource.DriverManagerDataSource>\n      <property name=\"driverClassName\">\n      <value>org.hsqldb.jdbcDriver</value>\n      </property>\n      <property name=\"url\">\n      <value>jdbc:hsqldb:mem:csm</value>\n      </property>\n      <property name=\"username\">\n      <value>sa</value>\n      </property>\n    </bean>\n\n    <bean id=\"entityManagerFactory\" class=\"org.sfw.orm.jpa.LocalContainerEntityManagerFactoryBean\">\n          <property name=\"persistenceUnitName\" value=\"jpaData\"/>\n          <property name=\"dataSource\" ref=\"dataSource\" />\n          <property name=\"jpaVendorAdapter\">\n          <beanclass=\"org.sfw.orm.jpa.vendor.HibernateJpaVendorAdapter\"/>\n          </property>\n          <property name=\"jpaProperties\">\n          <props>\n              <prop key=\"hibernate.dialect\">\n                org.hibernate.dialect.HSQLDialect\n              </prop>\n              <prop key=\"hibernate.show_sql\">true</prop>\n              <prop key=\"hibernate.format_sql\">false</prop>\n              <prop key=\"hibernate.hbm2ddl.auto\">create-drop</prop>\n              <prop key=\"hibernate.default_schema\">public</prop>\n          </props>\n        </property>\n    </bean>\n    ```", "```java\nList<User> findByUserName(String username);\n\n```", "```java\n<jpa:repositories base-package=\"edu.zipcloud.cloudstreetmarket.core.daos\" \n    entity-manager-factory-ref=\"entityManagerFactory\"\n    transaction-manager-ref=\"transactionManager\"/>\n```", "```java\n          @Entity\n          @Table(name=\"user\")\n          public class User implements Serializable{\n            private static final long serialVersionUID = 1990856213905768044L;\n            @Id\n            @Column(nullable = false)\n            private String loginName;\n            private String password;\n            private String profileImg;\n\n          @OneToMany(mappedBy=\"user\", cascade = {CascadeType.ALL}, fetch = FetchType.LAZY)\n          @OrderBy(\"id desc\")\n          private Set<Transaction> transactions = new LinkedHashSet< >();\n          ...\n          }\n        ```", "```java\n          @Entity\n          @Table(name=\"transaction\")\n          public class Transaction implements Serializable{\n            private static final long serialVersionUID = -6433721069248439324L;\n            @Id\n            @GeneratedValue\n            private int id;\n\n            @ManyToOne(fetch = FetchType.EAGER)\n            @JoinColumn(name = \"user_name\")\n            private User user;\n\n            @Enumerated(EnumType.STRING)\n            private Action type;\n\n            @OneToOne(fetch = FetchType.EAGER)\n            @JoinColumn(name = \"stock_quote_id\")\n            private StockQuote quote;\n            private int quantity;\n          ...\n          }\n        ```", "```java\n          @Entity\n          @Table(name=\"market\")\n          public class Market implements Serializable {\n            private static final long serialVersionUID = -6433721069248439324L;\n            @Id\n          private String id;\n          private String name;\n\n          @OneToMany(mappedBy = \"market\", cascade = { CascadeType.ALL }, fetch = FetchType.EAGER)\n          private Set<Index> indices = new LinkedHashSet<>();\n          ...\n          }\n        ```", "```java\n    @Entity\n    @Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n    @DiscriminatorColumn(name = \"historic_type\")\n    @Table(name=\"historic\")\n    public abstract class Historic {\n\n      private static final long serialVersionUID = -802306391915956578L;\n\n      @Id\n      @GeneratedValue\n      private int id;\n\n      private double open;\n\n      private double high;\n\n      private double low;\n\n      private double close;\n\n      private double volume;\n\n      @Column(name=\"adj_close\")\n      private double adjClose;\n\n      @Column(name=\"change_percent\")\n      private double changePercent;\n\n      @Temporal(TemporalType.TIMESTAMP)\n      @Column(name=\"from_date\")\n      private Date fromDate;\n\n      @Temporal(TemporalType.TIMESTAMP)\n      @Column(name=\"to_date\")\n      private Date toDate;\n\n      @Enumerated(EnumType.STRING)\n      @Column(name=\"interval\")\n    private QuotesInterval interval;\n    ...\n      }\n    ```", "```java\n      @Entity\n      @DiscriminatorValue(\"idx\")\n      public class HistoricalIndex extends Historic implements Serializable {\n\n      private static final long serialVersionUID = -802306391915956578L;\n\n      @ManyToOne(fetch = FetchType.EAGER)\n      @JoinColumn(name = \"index_code\")\n      private Index index;\n    ...\n    }\n    @Entity\n    @DiscriminatorValue(\"stk\")\n    public class HistoricalStock extends Historic implements Serializable {\n\n      private static final long serialVersionUID = -802306391915956578L;\n\n      @ManyToOne(fetch = FetchType.LAZY)\n      @JoinColumn(name = \"stock_code\")\n      private StockProduct stock;\n\n      private double bid;\n      private double ask;\n      ...\n        }\n    ```", "```java\n        @Entity\n        @Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n        public abstract class Product {\n          private static final long serialVersionUID = -    802306391915956578L;\n          @Id\n          private String code;\n          private String name;\n          ...\n        }\n\n        @Entity\n        @Table(name=\"stock\")\n        public class StockProduct extends Product implements Serializable{\n          private static final long serialVersionUID = 1620238240796817290L;\n          private String currency;\n          @ManyToOne(fetch = FetchType.EAGER)\n          @JoinColumn(name = \"market_id\")\n          private Market market;\n          ...\n        }\n    ```", "```java\n    @Entity\n    @Table(name=\"index_value\")\n    public class Index implements Serializable{\n      private static final long serialVersionUID = -2919348303931939346L;\n      @Id\n      private String code;\n      private String name;\n\n      @ManyToOne(fetch = FetchType.EAGER)\n      @JoinColumn(name = \"market_id\", nullable=true)\n      private Market market;\n\n      @ManyToMany(fetch = FetchType.LAZY)\n      @JoinTable(name = \"stock_indices\", joinColumns={@JoinColumn(name = \"index_code\")}, inverseJoinColumns={@JoinColumn(name =\"stock_code\")})\n      private Set<StockProduct> stocks = new LinkedHashSet<>();\n      ...\n    }\n    ```", "```java\n    @Entity\n    @Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n    public abstract class Quote {\n      @Id\n      @GeneratedValue(strategy = GenerationType.TABLE)\n      protected Integer id;\n      private Date date;\n      private double open;\n\n      @Column(name = \"previous_close\")\n      private double previousClose;\n      private double last;\n      ...\n    }\n\n    @Entity\n    @Table(name=\"stock_quote\")\n    public class StockQuote extends Quote implements Serializable{\n      private static final long serialVersionUID = -8175317254623555447L;\n      @ManyToOne(fetch = FetchType.EAGER)\n      @JoinColumn(name = \"stock_code\")\n      private StockProduct stock;\n      private double bid;\n      private double ask;\n      ...\n    }\n\n    @Entity\n    @Table(name=\"index_quote\")\n    public class IndexQuote extends Quote implements Serializable{\n      private static final long serialVersionUID = -8175317254623555447L;\n\n      @ManyToOne(fetch = FetchType.EAGER)\n      @JoinColumn(name = \"index_code\")\n      private Index index;\n      ...\n    }\n    ```", "```java\n    @ManyToOne(fetch = FetchType.EAGER)\n    @JoinColumn(name = \"user_name\")\n    private User user;\n    ```", "```java\n      @OneToMany(mappedBy=\"user\", cascade ={CascadeType.ALL}, fetch = FetchType.LAZY)\n      @OrderBy(\"id desc\")\n      private Set<Transaction> transactions = new LinkedHashSet<>();\n    ```", "```java\n@ManyToMany(fetch = FetchType.LAZY)\n@JoinTable(name = \"stock_indices\", joinColumns={@JoinColumn(name = \"index_code\")}, inverseJoinColumns={@JoinColumn(name =\"stock_code\")})\nprivate Set<StockProduct> stocks = new LinkedHashSet<>();\n```", "```java\n    public interface HistoricalIndexRepository {\n      Iterable<HistoricalIndex> findIntraDay(String code, Date of);\n      Iterable<HistoricalIndex> findLastIntraDay(String code);\n      HistoricalIndex findLastHistoric(String code);\n    }\n    public interface TransactionRepository {\n      Iterable<Transaction> findAll();\n      Iterable<Transaction> findByUser(User user);\n      Iterable<Transaction> findRecentTransactions(Date from);\n      Iterable<Transaction> findRecentTransactions(int nb);\n    }\n    ```", "```java\n    @Repository\n    public class HistoricalIndexRepositoryImpl implements HistoricalIndexRepository{\n\n      @PersistenceContext \n      private EntityManager em;\n\n      @Override\n      public Iterable<HistoricalIndex> findIntraDay(String code,Date of){\n        TypedQuery<HistoricalIndex> sqlQuery = em.createQuery(\"from HistoricalIndex h where h.index.code = ? and h.fromDate >= ? and h.toDate <= ? ORDER BY h.toDate asc\", HistoricalIndex.class);\n\n        sqlQuery.setParameter(1, code);\n        sqlQuery.setParameter(2, DateUtil.getStartOfDay(of));\n        sqlQuery.setParameter(3, DateUtil.getEndOfDay(of));\n\n        return sqlQuery.getResultList();\n      }\n\n      @Override\n      public Iterable<HistoricalIndex> findLastIntraDay(String code) {\n        return findIntraDay(code,findLastHistoric(code).getToDate());\n      }\n\n      @Override\n      public HistoricalIndex findLastHistoric(String code){\n         TypedQuery<HistoricalIndex> sqlQuery =  em.createQuery(\"from HistoricalIndex h where h.index.code = ? ORDER BY h.toDate desc\", HistoricalIndex.class);\n\n      sqlQuery.setParameter(1, code);\n\n        return sqlQuery.setMaxResults(1).getSingleResult();\n      }\n    }\n    ```", "```java\n    @Repository\n    public class TransactionRepositoryImpl implements TransactionRepository{\n      @PersistenceContext \n      private EntityManager em;\n      @Autowired\n      private TransactionRepositoryJpa repo;\n      @Override\n      public Iterable<Transaction> findByUser(User user) {\n        TypedQuery<Transaction> sqlQuery = em.createQuery(\"from Transaction where user = ?\", Transaction.class);\n        return sqlQuery.setParameter(1, user).getResultList();\n      }\n      @Override\n      public Iterable<Transaction> findRecentTransactions(Date from) {\n        TypedQuery<Transaction> sqlQuery = em.createQuery(\"from Transaction t where t.quote.date >= ?\", Transaction.class);\n        return sqlQuery.setParameter(1, from).getResultList();\n      }\n      @Override\n      public Iterable<Transaction> findRecentTransactions(int nb) {\n      TypedQuery<Transaction> sqlQuery = em.createQuery(\"from Transaction t ORDER BY t.quote.date desc\", Transaction.class);\n        return sqlQuery.setMaxResults(nb).getResultList();\n      }\n      @Override\n      public Iterable<Transaction> findAll() {\n        return repo.findAll();\n      }\n    }\n    ```", "```java\n      <jdbc:initialize-database data-source=\"dataSource\">\n          <jdbc:script location=\"classpath:/META-INF/db/init.sql\"/>\n      </jdbc:initialize-database>\n    ```", "```java\n    @Service(value=\"marketServiceImpl\")\n    @Service(value=\"communityServiceImpl\")\n    ```", "```java\n\nfrom Transaction where user = ?\n\n```", "```java\n\nfrom Transaction t where t.quote.date >= ?\n\n```", "```java\n\nfrom HistoricalIndex h where h.index.code = ? ORDER BY h.toDate desc\n\n```", "```java\n@Repository\npublic interface UserRepository extends JpaRepository<User, String>{\n  User findByUserName(String username);\n  User findByUserNameAndPassword(String username, String password);\n}\n```", "```java\n    <bean class=\"org.sfw.web...\n      method.annotation.RequestMappingHandlerAdapter\">\n      <property name=\"webBindingInitializer\">\n        <bean class=\"org.sfw...\n         support.ConfigurableWebBindingInitializer\">\n          <property name=\"conversionService\" ref=\"conversionService\"/>\n        </bean>\n        </property>\n      <property name=\"messageConverters\">\n        <list>\n            <ref bean=\"jsonConverter\"/>\n          </list>\n      </property>\n      <property name=\"customArgumentResolvers\">\n        <list>\n          <bean class=\"net.kaczmarzyk.spring.data.jpa.web.\n          SpecificationArgumentResolver\"/>\n          <bean\tclass=\"org.sfw.data.web.PageableHandlerMethodArgumentResolver\">\n              <property name=\"pageParameterName\" value=\"pn\"/>\n              <property name=\"sizeParameterName\" value=\"ps\"/>\n              </bean>\n        </list>\n      </property>\n      <property name=\"requireSession\" value=\"false\"/>\n    </bean>\n\n    <bean id=\"jsonConverter\" class=\"org.sfw...\n        converter.json.MappingJackson2HttpMessageConverter\">\n        <property name=\"supportedMediaTypes\" value=\"application/json\"/>\n      <property name=\"objectMapper\">\n        <bean class=\"com.fasterxml.jackson. databind.ObjectMapper\">\n          <property name=\"dateFormat\">\n         <bean class=\"java.text.SimpleDateFormat\">\n           <constructor-arg type=\"java.lang.String\" value=\"yyyy-MM-dd HH:mm\"/>\n           </bean>\n          </property>\n        </bean>\n        </property>\n    </bean>\n    <bean id=\"conversionService\" class=\"org.sfw.format.support.FormattingConversionServiceFactoryBean\">\n      <property name=\"converters\">\n        <list>\n          <bean class=\"edu.zc.csm.core. converters.StringToStockProduct\"/>\n        </list>\n      </property>\n    </bean>\n    ```", "```java\n          <dependency>\n             <groupId>com.fasterxml.jackson.core</groupId>\n                 <artifactId>jackson-annotations</artifactId>\n                 <version>2.5.1</version>\n           </dependency>\n             <dependency>\n                 <groupId>com.fasterxml.jackson.core</groupId>\n                 <artifactId>jackson-databind</artifactId>\n                 <version>2.5.1</version>\n             </dependency>\n             <dependency>\n                 <groupId>commons-collections</groupId>\n                 <artifactId>commons-collections</artifactId>\n                 <version>3.2</version>\n             </dependency>\n             <dependency>\n                 <groupId>net.kaczmarzyk</groupId>\n                 <artifactId>specification-arg-resolver</artifactId>\n                 <version>0.4.1</version>\n             </dependency>\n    ```", "```java\n      private DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\");\n\n      @InitBinder\n      public void allowDateBinding ( WebDataBinder binder ){\n        binder.registerCustomEditor( Date.class, new CustomDateEditor( df, true ));\n      }\n    ```", "```java\n      @RequestMapping(value=\"/{market}/{index}/histo\", method=GET)\n      public HistoProductDTO getHistoIndex(\n        @PathVariable(\"market\") MarketCode market, \n        @PathVariable(\"index\") String indexCode,\n        @RequestParam(value=\"fd\",defaultValue=\"\") Date fromDate,\n        @RequestParam(value=\"td\",defaultValue=\"\") Date toDate,\n        @RequestParam(value=\"i\",defaultValue=\"MINUTE_30\") QuotesInterval interval){\n        return marketService.getHistoIndex(indexCode, market, fromDate, toDate, interval);\n      }\n    ```", "```java\n    @RequestMapping(value=\"/{code}\", method=GET)\n    @ResponseStatus(HttpStatus.OK)\n    public StockProductOverviewDTO getByCode(\n    @PathVariable(value=\"code\") StockProduct stock){\n      return StockProductOverviewDTO.build(stock);\n    }\n    ```", "```java\n    @Component\n    public class StringToStockProduct implements Converter<String, StockProduct> {\n\n    @Autowired\n    private ProductRepository<StockProduct> productRepository;\n\n    @Override\n    public StockProduct convert(String code) {\n      StockProduct stock = productRepository.findOne(code);\n      if(stock == null){\n        throw new NoResultException(\"No result has been found for the value \"+ code +\" !\");\n      }\n      return stock;\n    }\n    }\n    ```", "```java\n  @InitBinder\n  public void allowDateBinding(WebDataBinder binder){\n    binder.registerCustomEditor(Date.class, new CustomDateEditor( df, true ));\n  }\n```", "```java\n@RequestMapping(value=\"/{code}\", method=GET)\n@ResponseStatus(HttpStatus.OK)\npublic StockProductOverviewDTO getByCode(\n@PathVariable(value=\"code\") StockProduct stock){\n  return StockProductOverviewDTO.build(stock);\n}\n```", "```java\n    <bean class=\"org.sfw.web...\n      method.annotation.RequestMappingHandlerAdapter\">\n      <property name=\"messageConverters\">\n        <list>\n          <ref bean=\"xmlConverter\"/>\n          <ref bean=\"jsonConverter\"/>\n          </list>\n      </property>\n      <property name=\"customArgumentResolvers\">\n        <list>\n          <bean class=\"net.kaczmarzyk.spring.data.jpa. web.SpecificationArgumentResolver\"/>\n        <bean class=\"org.sfw.data.web. PageableHandlerMethodArgumentResolver\">\n          <property name=\"pageParameterName\" value=\"pn\"/>\n          <property name=\"sizeParameterName\" value=\"ps\"/>\n          </bean>\n        </list>\n      </property>\n      <property name=\"requireSession\" value=\"false\"/>\n      <property name=\"contentNegotiationManager\" ref=\"contentNegotiationManager\"/>\n    </bean>\n\n    <bean id=\"contentNegotiationManager\" class=\"org.sfw.web.accept. ContentNegotiationManagerFactoryBean\">\n      <property name=\"favorPathExtension\" value=\"true\" />\n      <property name=\"favorParameter\" value=\"false\" />\n      <property name=\"ignoreAcceptHeader\" value=\"false\"/>\n      <property name=\"parameterName\" value=\"format\" />\n      <property name=\"useJaf\" value=\"false\"/>\n      <property name=\"defaultContentType\" value=\"application/json\" />\n      <property name=\"mediaTypes\">\n        <map>\n          <entry key=\"json\" value=\"application/json\" />\n          <entry key=\"xml\" value=\"application/xml\" />\n       </map>\n      </property>\n    </bean>\n    <bean id=\"xmlConverter\" class=\"org.sfw.http...xml.MarshallingHttpMessageConverter\">\n      <property name=\"marshaller\">\n        <ref bean=\"xStreamMarshaller\"/>\n      </property>\n      <property name=\"unmarshaller\">\n        <ref bean=\"xStreamMarshaller\"/>\n      </property>\n    </bean>\n    <bean id=\"xStreamMarshaller\" class=\"org.springframework.oxm.xstream.XStreamMarshaller\">\n      <property name=\"autodetectAnnotations\" value=\"true\"/>\n    </bean>\n    ```", "```java\n        <dependency>\n          <groupId>com.thoughtworks.xstream</groupId>\n           <artifactId>xstream</artifactId>\n          <version>1.4.3</version>\n        </dependency>\n    ```", "```java\n<dependency>\n  <groupId>org.springframework</groupId>\n  <artifactId>spring-oxm</artifactId>\n  <version>${spring.version}</version>\n</dependency>\n```", "```java\n<bean class=\"org.springframework.oxm.xstream.XStreamMarshaller\">\n  <property name=\"autodetectAnnotations\" value=\"true\"/>\n</bean>\n```", "```java\n    import org.springframework.data.domain.PageRequest;\n\n        @RequestMapping(value=\"/{market}\", method=GET)\n        public Page<IndexOverviewDTO> getIndicesPerMarket(\n          @PathVariable MarketCode market,\n          @PageableDefault(size=10, page=0, sort={\"dailyLatestValue\"}, direction=Direction.DESC) Pageable pageable){\n            return marketService. getLastDayIndicesOverview(market, pageable);\n    }\n    ```", "```java\n    @Override\n    public Page<IndexOverviewDTO> getLastDayIndicesOverview(Pageable pageable) {\n        Page<Index> indices = indexProductRepository.findAll(pageable);\n        List<IndexOverviewDTO> result = new LinkedList<>();\n        for (Index index : indices) {\n          result.add(IndexOverviewDTO.build(index));\n        }\n        return new PageImpl<>(result, pageable,   indices.getTotalElements());\n    }\n    ```", "```java\n    @RequestMapping(value=\"/activity\", method=GET)\n    @ResponseStatus(HttpStatus.OK)\n    public Page<UserActivityDTO> getPublicActivities(\n      @PageableDefault(size=10, page=0, sort={\"quote.date\"},direction=Direction.DESC) Pageable pageable){\n      return communityService.getPublicActivity(pageable);\n    }\n    ```", "```java\n    @RequestMapping(method=GET)\n    @ResponseStatus(HttpStatus.OK)\n    public Page<ProductOverviewDTO> search(\n    @And(value = { @Spec(params = \"mkt\", path=\"market.code\",spec = EqualEnum.class)},\n       and = { @Or({\n    @Spec(params=\"cn\", path=\"code\", spec=LikeIgnoreCase.class),\n    @Spec(params=\"cn\", path=\"name\", spec=LikeIgnoreCase.class)})}\n      ) Specification<StockProduct> spec,\n    @RequestParam(value=\"mkt\", required=false) MarketCodeParam market, \n    @RequestParam(value=\"sw\", defaultValue=\"\") String startWith, \n    @RequestParam(value=\"cn\", defaultValue=\"\") String contain, \n    @PageableDefault(size=10, page=0, sort={\"dailyLatestValue\"}, direction=Direction.DESC) Pageable pageable){\n      return productService.getProductsOverview(startWith, spec, pageable);\n    }\n    ```", "```java\n    @Override\n    public Page<ProductOverviewDTO> getProductsOverview(String startWith, Specification<T> spec, Pageable pageable) {\n      if(StringUtils.isNotBlank(startWith)){\n        spec = Specifications.where(spec).and(new ProductSpecifications<T>().nameStartsWith(startWith);\n      }\n      Page<T> products = productRepository.findAll(spec, pageable);\n      List<ProductOverviewDTO> result = new LinkedList<>();\n      for (T product : products) {\n        result.add(ProductOverviewDTO.build(product));\n      }\n      return new PageImpl<>(result, pageable, products.getTotalElements());\n    }\n    ```", "```java\n    public class ProductSpecifications<T extends Product> {\n    public Specification<T> nameStartsWith(final String searchTerm) {\n      return new Specification<T>() {\n      private String startWithPattern(final String searchTerm) {\n        StringBuilder pattern = new StringBuilder();\n    \tpattern.append(searchTerm.toLowerCase());\n        pattern.append(\"%\");\n        return pattern.toString();\n      }\n        @Override\n          public Predicate toPredicate(Root<T> root,CriteriaQuery<?> query, CriteriaBuilder cb) {    \n          return cb.like(cb.lower(root.<String>get(\"name\")), startWithPattern(searchTerm));\n    }\n        };\n      }\n    }\n    ```", "```java\npublic interface IndexRepositoryJpa extends JpaRepository<Index, \n  String>{\n  List<Index> findByMarket(Market market);\n  Page<Index> findByMarket(Market market, Pageable pageable);\n  List<Index> findAll();\n  Page<Index> findAll(Pageable pageable);\n  Index findByCode(MarketCode code);\n}\n```", "```java\nPage<User> findByLastname(String lastname, Pageable pageable);\nSlice<User> findByLastname(String lastname, Pageable pageable);\nList<User> findByLastname(String lastname, Sort sort);\nList<User> findByLastname(String lastname, Pageable pageable);\n```", "```java\n\nIterable<T> findAll(Sort sort);\n  Page<T> findAll(Pageable pageable);\n```", "```java\n@PageableDefault(\nsize=10, page=0, sort={\"dailyLatestValue\"}, direction=Direction.DESC\n)\n```", "```java\n@Repository\npublic interface ProductRepository<T extends Product> extends JpaRepository<T, String>, JpaSpecificationExecutor<T> {\n  Page<T> findByMarket(Market marketEntity, Pageable pageable);\n  Page<T> findByNameStartingWith(String param, Pageable pageable);\n  Page<T> findByNameStartingWith(String param, Specification<T> spec, Pageable pageable);\n}\n```", "```java\ncloudStreetMarketApp.config(function($locationProvider, $routeProvider) {\n  $locationProvider.html5Mode(true);\n  $routeProvider\n    .when('/portal/index', {\n      templateUrl: '/portal/html/home.html', \n      controller: 'homeMainController'\n    })\n  .when('/portal/indices-:name', {\n    templateUrl: '/portal/html/indices-by-market.html', \n    controller: 'indicesByMarketTableController' \n  })\n    .when('/portal/stock-search', {\n      templateUrl: '/portal/html/stock-search.html', \n      controller:  'stockSearchMainController'\n    })\n    .when('/portal/stock-search-by-market', {\n      templateUrl: '/portal/html/stock-search-by-market.html', \n      controller:  'stockSearchByMarketMainController'\n    })\n    .when('/portal/stocks-risers-fallers', {\n      templateUrl: '/portal/html/stocks-risers-fallers.html', \n      controller:  'stocksRisersFallersMainController'\n    })\n    .otherwise({ redirectTo: '/' });\n});\n```", "```java\n<pagination page=\"paginationCurrentPage\" \n  ng-model=\"paginationCurrentPage\" \n  items-per-page=\"pageSize\" \n  total-items=\"paginationTotalItems\"\n  ng-change=\"setPage(paginationCurrentPage)\">   \n</pagination>\n```", "```java\n    public class ErrorInfo {\n        public final String error;\n        public int status;\n        public final String date;\n\n        private static final DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\");\n        public ErrorInfo(Throwable throwable, HttpStatus status){\n          this.error = ExceptionUtil.getRootMessage(throwable);\n          this.date = dateFormat.format(new Date());\n          this.status = status.value();\n       }\n       public ErrorInfo(String message, HttpStatus status) {\n          this.error = message;\n          this.date = dateFormat.format(new Date());\n          this.status = status.value();\n       }\n      @Override\n      public String toString() {\n        return \"ErrorInfo [status=\"+status+\", error=\"+error+ \", date=\" + date + \"]\";\n      }\n    }\n    ```", "```java\n    @ControllerAdvice\n    public class RestExceptionHandler extends ResponseEntityExceptionHandler {\n\n       @Override\n    protected ResponseEntity<Object> handleExceptionInternal(Exception ex, Object body, HttpHeaders headers, HttpStatus status, WebRequest request) {\n    if(body instanceof String){\n    return new ResponseEntity<Object>(new ErrorInfo((String) body, status), headers, status);\n       }\n      return new ResponseEntity<Object>(new ErrorInfo(ex, status), headers, status);\n    }\n\n        // 400\n        @Override\n    protected ResponseEntity<Object> handleHttpMessageNotReadable(final HttpMessageNotReadableException ex, final HttpHeaders headers, final HttpStatus status, final WebRequest request) {\n    return handleExceptionInternal(ex, \"The provided request body is not readable!\", headers, HttpStatus.BAD_REQUEST, request);\n    }\n\n    @Override\n    protected ResponseEntity<Object> handleTypeMismatch(TypeMismatchException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {\n      return handleExceptionInternal(ex, \"The request parameters were not valid!\", headers, HttpStatus.BAD_REQUEST, request);\n      }\n    (...)\n\n    @ExceptionHandler({ InvalidDataAccessApiUsageException.class, DataAccessException.class , IllegalArgumentException.class })\n    protected ResponseEntity<Object> handleConflict(final RuntimeException ex, final WebRequest request) {\n        return handleExceptionInternal(ex, \"The request parameters were not valid!\", new HttpHeaders(), HttpStatus.BAD_REQUEST, request);\n    }\n    (...)\n\n    // 500\n    @ExceptionHandler({ NullPointerException.class, IllegalStateException.class })\n    public ResponseEntity<Object> handleInternal(final RuntimeException ex, final WebRequest request) {\n    return handleExceptionInternal(ex,  \"An internal \terror happened during the request! Please try \tagain or contact an administrator.\", new HttpHeaders(), HttpStatus.INTERNAL_SERVER_ERROR, request);\n    }\n    }\n    ```", "```java\n    public class MarketCodeEditor extends PropertyEditorSupport{\n    public void setAsText(String text) {\n        try{\n          setValue(MarketCode.valueOf(text));\n        } catch (IllegalArgumentException e) {\n          throw new IllegalArgumentException(\"The provided value for the market code variable is invalid!\");\n        }\n        }\n    }\n    public class QuotesIntervalEditor extends PropertyEditorSupport {\n        public void setAsText(String text) {\n        try{\n           setValue(QuotesInterval.valueOf(text));\n        } catch (IllegalArgumentException e) {\n          throw new IllegalArgumentException(\"The provided value for the quote-interval variable is invalid!\");\n        }\n      }\n    }\n    ```", "```java\nprotected ResponseEntity<Object> handleNoSuchRequestHandlingMethod(NoSuchRequestHandlingMethod Exception ex, HttpHeaders headers, HttpStatus status, WebRequest request) {\n    pageNotFoundLogger.warn(ex.getMessage());\n  return handleExceptionInternal(ex, null, headers, status, request);\n}\n```", "```java\n@Override\nprotected ResponseEntity<Object> handleExceptionInternal(Exception ex, Object body, HttpHeaders headers, HttpStatus status, WebRequest request) {\n  return new ResponseEntity<Object>(new ErrorInfo(ex, (body!=null)? body.toString() : null, status), headers, status);\n}\n```", "```java\n{\n  error: \"Global categorization error message\",\n  message: \"Specific and explicit error message\",\n  status: 400,\n  date: \"yyyy-MM-dd HH:mm:ss.SSS\"\n}\n```", "```java\n    <dependency>\n      <groupId>com.mangofactory</groupId>\n      <artifactId>swagger-springmvc</artifactId>\n      <version>${swagger-springmvc.version}</version>\n    </dependency> \n    ```", "```java\n    @Configuration\n    @EnableSwagger //Loads the beans required by the framework\n    public class SwaggerConfig {\n\n      private SpringSwaggerConfig springSwaggerConfig;\n      @Autowired\n        public void setSpringSwaggerConfig(SpringSwaggerConfig springSwaggerConfig) {\n        this.springSwaggerConfig = springSwaggerConfig;\n        }\n      @Bean\n      public SwaggerSpringMvcPlugin customImplementation(){\n          return new SwaggerSpringMvcPlugin( this.springSwaggerConfig)\n              .includePatterns(\".*\")\n              .apiInfo(new ApiInfo(\n              \"Cloudstreet Market / Swagger UI\",\n              \"The Rest API developed with Spring MVC Cookbook [PACKT]\",\n              \"\",\n              \"alex.bretet@gmail.com\",\n              \"LGPL\",\n              \"http://www.gnu.org/licenses/gpl-3.0.en.html\"\n          ));\n      }\n    }\n    ```", "```java\n    <bean class=\"com.mangofactory.swagger.configuration.SpringSwaggerConfig\"/>\n\n    <bean class=\"edu.zc.csm.api.swagger.SwaggerConfig\"/>\n    <context:property-placeholder location=\"classpath*:/META-INF/properties/swagger.properties\" />\n    ```", "```java\n      documentation.services.version=1.0\n      documentation.services.basePath=http://localhost:8080/api\n    ```", "```java\n    @Api(value = \"indices\", description = \"Financial indices\") \n    @RestController\n    @RequestMapping(value=\"/indices\", produces={\"application/xml\", \"application/json\"})\n    public class IndexController extends CloudstreetApiWCI {\n\n    @RequestMapping(method=GET)\n    @ApiOperation(value = \"Get overviews of indices\", notes = \"Return a page of index-overviews\")\n    public Page<IndexOverviewDTO> getIndices(\n    @ApiIgnore @PageableDefault(size=10, page=0, sort={\"dailyLatestValue\"}, direction=Direction.DESC) Pageable pageable){\n        return \n        marketService.getLastDayIndicesOverview(pageable);\n    }\n\n    @RequestMapping(value=\"/{market}\", method=GET)\n    @ApiOperation(value = \"Get overviews of indices filtered by market\", notes = \"Return a page of index-overviews\")\n    public Page<IndexOverviewDTO> getIndicesPerMarket(\n      @PathVariable MarketCode market,\n      @ApiIgnore \n    @PageableDefault(size=10, page=0, sort={\"dailyLatestValue\"}, direction=Direction.DESC) Pageable pageable){\n        return \n        marketService.getLastDayIndicesOverview(market, pageable);\n    }\n\n    @RequestMapping(value=\"/{market}/{index}/histo\", method=GET)\n    @ApiOperation(value = \"Get historical-data for one index\", notes = \"Return a set of historical-data from one index\")\n    public HistoProductDTO getHistoIndex(\n      @PathVariable(\"market\") MarketCode market, \n      @ApiParam(value=\"Index code: ^OEX\") \n      @PathVariable(\"index\") String \n      indexCode,@ApiParam(value=\"Start date: 2014-01-01\") @RequestParam(value=\"fd\",defaultValue=\"\") Date fromDate,\n      @ApiParam(value=\"End date: 2020-12-12\") \n      @RequestParam(value=\"td\",defaultValue=\"\") Date toDate,\n      @ApiParam(value=\"Period between snapshots\") @RequestParam(value=\"i\",defaultValue=\"MINUTE_30\") QuotesInterval interval){\n        return marketService.getHistoIndex(indexCode, market, fromDate, toDate, interval);\n      }\n    }\n    ```", "```java\n    <!-- Serve static content-->\n    <mvc:default-servlet-handler/>\n    ```", "```java\n\n        $ tar \u2013xvzf httpd-NN.tar.gz\n        $ cd httpd-NN\n\n        ```", "```java\n\n        $ ./configure\n\n        ```", "```java\n\n        $ make\n\n        ```", "```java\n\n        $ make install\n\n        ```", "```java\n        %SystemRoot%\\system32\\drivers\\etc\\hosts\n        ```", "```java\n        127.0.0.1 cloudstreetmarket.com\n        ```", "```java\n        127.0.0.1 cloudstreetmarket.com\n        ```", "```java\n\n        LoadModule proxy_module modules/mod_proxy.so\n        LoadModule proxy_http_module modules/mod_proxy_http.so\n\n        ```", "```java\n        <VirtualHost cloudstreetmarket.com:80>\n          ProxyPass        /portal http://localhost:8080/portal\n          ProxyPassReverse /portal http://localhost:8080/portal\n          ProxyPass        /api  http://localhost:8080/api\n          ProxyPassReverse /api  http://localhost:8080/api\n          RedirectMatch ^/$ /portal/index\n        </VirtualHost>\n        ```", "```java\n            <Connector port\"=\"8080\"\" protocol\"=\"HTTP/1.1\"\"\n            connectionTimeout\"=\"20000\" redirectPort\"=\"8443\"\" \n            proxyName\"=\"cloudstreetmarket.com\"\" proxyPort\"=\"80\"\"/>\n        ```", "```java\n            $ cd C:/apache24/bin\n            ```", "```java\n\n        $ httpd.exe \u2013k install\n\n        ```", "```java\n            $ httpd.exe \u2013k start\n            ```", "```java\n        $ sudo apachectl start\n        ```", "```java\n    NameVirtualHost 192.168.0.1\n    <VirtualHost portal.cloudstreetmarket.com>\u2026</VirtualHost>\n    <VirtualHost api.cloudstreetmarket.com>\u2026</VirtualHost>\n    ```", "```java\n    <VirtualHost 192.168.0.1>\u2026</VirtualHost>\n    <VirtualHost 192.168.0.2>\u2026</VirtualHost>\n    ```", "```java\n    Listen 80\n    Listen 8080\n    <VirtualHost 192.168.0.1:80>\u2026</VirtualHost>\n    <VirtualHost 192.168.0.2:8080>\u2026</VirtualHost>\n    ```", "```java\nProxyPass         /api  http://localhost:8080/api\nProxyPassReverse  /api  http://localhost:8080/api\n```", "```java\nProxyPass /api http://localhost:8080/api connectiontimeout=5 timeout=30\n```", "```java\nProxyPass / ajp://localhost:8009/api\nProxyPassReverse / http://cloudstreetmarket.com/api/\n```", "```java\n    <!-- Spring Security -->\n    <dependency>\n      <groupId>org.springframework.security</groupId>\n      <artifactId>spring-security-web</artifactId>\n      <version>4.0.0.RELEASE</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.security</groupId>\n      <artifactId>spring-security-config</artifactId>\n      <version>4.0.0.RELEASE</version>\n    </dependency>\n    ```", "```java\n    @Entity\n    @Table(name=\"users\")\n    public class User implements UserDetails{\n    private static final long serialVersionUID = 1990856213905768044L;\n\n    @Id\n    @Column(name = \"user_name\", nullable = false)\n    private String username;\n\n    @Column(name = \"full_name\")\n    private String fullName;\n\n    private String email;\n    private String password;\n    private boolean enabled = true;\n    private String profileImg;\n\n    @Column(name=\"not_expired\")\n    private boolean accountNonExpired;\n\n    @Column(name=\"not_locked\")\n    private boolean accountNonLocked;\n\n    @Enumerated(EnumType.STRING)\n    private SupportedCurrency currency;\n\n    @OneToMany(mappedBy= \"user\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    @OrderBy(\"id desc\")\n    private Set<Action> actions = new LinkedHashSet<Action>();\n\n    @OneToMany(mappedBy=\"user\", cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n    private Set<Authority> authorities = new LinkedHashSet<Authority>();\n\n    @OneToMany(cascade=CascadeType.ALL, fetch = FetchType.LAZY)\n    private Set<SocialUser> socialUsers = new LinkedHashSet<SocialUser>();\n\n    //getters and setters as per the UserDetails interface\n    ...\n    }\n    ```", "```java\n    @Entity\n    @Table(name\"=\"authorities\"\", uniqueConstraints={@UniqueConstraint(columnNames = \"{\"username\"\"\",\"authority\"\"})})\n    public class Authority implements GrantedAuthority{\n      private static final long serialVersionUID = 1990856213905768044L;\n      public Authority() {}\n      public Authority(User user, Role authority) {\n        this.user = user;\n        this.authority = authority;\n      }\n      @Id\n      @GeneratedValue\n      private Long  id;\n      @OneToOne(fetch = FetchType.LAZY)\n      @JoinColumn(name = \"\"username\"\", nullable=false)\n      private User user;\n      @Column(nullable = false)\n      @Enumerated(EnumType.STRING)\n      private Role authority;\n      //getters and setters as per the GrantedAuthority \n      //interface\n      ...\n    }\n    ```", "```java\n    public enum Role {\n      ROLE_ANONYMOUS,\n      ROLE_BASIC,\n      ROLE_OAUTH2,\n      ROLE_ADMIN,\n      ROLE_SYSTEM,\n      IS_AUTHENTICATED_REMEMBERED; //Transitory role\n    }\n    ```", "```java\n    insert into users(username, fullname, email, password, profileImg, enabled, not_expired, not_locked) values ('userC', '', 'fake12@fake.com', '123456', '', true, true, true);\n    insert into authorities(username, authority) values ('userC', 'ROLE_'BASIC');\n    ```", "```java\n    username: <marcus>\n    email: <marcus@chapter5.com>\n    password: <123456>\n    preferred currency: <USD>\n    ```", "```java\nprivate static SecurityContextHolderStrategy strategy;\n```", "```java\nfinal class ThreadLocalSecurityContextHolderStrategy implements\n    SecurityContextHolderStrategy {\n  private static final ThreadLocal<SecurityContext> contextHolder = new ThreadLocal<SecurityContext>();\n  ...\n}\n```", "```java\npublic interface Authentication extends Principal, Serializable {\n  Collection<? extends GrantedAuthority> getAuthorities();\n  Object getCredentials();\n  Object getDetails();\n  Object getPrincipal();\n  boolean isAuthenticated();\n  void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException;\n}\n```", "```java\nObject principal = SecurityContextHolder.getContext()\n  .getAuthentication()\n  .getPrincipal();\nif (principal instanceof UserDetails) {\n    String username = ((UserDetails) principal).getUsername();\n} else {\n  String username = principal.toString();\n}\n```", "```java\npublic interface UserDetailsService {\n  UserDetails loadUserByUsername(String username) throws UsernameNotFoundException;\n}\n```", "```java\n<security:authentication-manager alias=\"authenticationManager\">\n  <security:authentication-provider>\n    <security:jdbc-user-service data-source-ref=\"dataSource\" />\n  </security:authentication-provider>\n</security:authentication-manager>\n```", "```java\n<security:authentication-manager alias=\"authenticationManager\">\n  <security:authentication-provider>\n    <security:user-service id=\"inMemoryUserDetailService\"/>\n  </security:authentication-provider>\n</security:authentication-manager>\n```", "```java\n<security:authentication-manager alias=\"authenticationManager\">\n  <security:authentication-provider user-service-ref='communityServiceImpl'>\n    <security:password-encoder ref=\"passwordEncoder\"/>\n  </security:authentication-provider>\n</security:authentication-manager>\n```", "```java\npublic class User implements UserDetails, CredentialsContainer {\n  private String password;\n  private final String username;\n  private final Set<GrantedAuthority> authorities;\n  private final boolean accountNonExpired;\n  private final boolean accountNonLocked;\n  private final boolean credentialsNonExpired;\n  private final boolean enabled;\n  ...\n}\n```", "```java\npublic interface UserDetailsManager extends UserDetailsService {\n  void createUser(UserDetails user);\n  void updateUser(UserDetails user);\n  void deleteUser(String username);\n  void changePassword(String oldPassword, String newPassword);\n  boolean userExists(String username);\n}\n```", "```java\npublic interface GrantedAuthority extends Serializable {\n  String getAuthority();\n}\n```", "```java\n    <filter>\n      <filter-name>springSecurityFilterChain</filter-name>\n      <filter-class> org.sfw.web.filter.DelegatingFilterProxy\n      </filter-\tclass>\n    </filter>\n    <filter-mapping>\n      <filter-name>springSecurityFilterChain</filter-name>\n      <url-pattern>/*</url-pattern>\n    </filter-mapping>\n    ```", "```java\n    <bean id=\"authenticationEntryPoint\" class=\"edu.zc.csm.api.authentication.CustomBasicAuthenticationEntryPoint\">\n      <property name=\"realmName\" value=\"cloudstreetmarket.com\" />\n    </bean> \n    <security:http create-session=\"stateless\" authentication-manager-ref=\"authenticationManager\" entry-point-ref=\"authenticationEntryPoint\">\n        <security:custom-filter ref=\"basicAuthenticationFilter\" after=\"BASIC_AUTH_FILTER\" />\n       <security:csrf disabled=\"true\"/>\n    </security:http>\n\n    <bean id=\"basicAuthenticationFilter\" class=\"org.sfw.security.web.authentication.www.BasicAuthenticationFilter\">\n      <constructor-arg name=\"authenticationManager\" ref=\"authenticationManager\" />\n      <constructor-arg name=\"authenticationEntryPoint\" ref=\"authenticationEntryPoint\" />\n    </bean>\n    <security:authentication-manager alias=\"authenticationManager\">\n        <security:authentication-provider user-service-ref='communityServiceImpl'>\n          <security:password-encoder ref=\"passwordEncoder\"/>\n      </security:authentication-provider>\n    </security:authentication-manager>\n\n    <security:global-method-security secured-annotations=\"enabled\" pre-post-annotations=\"enabled\" authentication-manager-ref=\"authenticationManager\"/>\n    ```", "```java\n    public class CustomBasicAuthenticationEntryPoint extends BasicAuthenticationEntryPoint {\n      @Override\n      public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {\n        response.setHeader(\"WWW-Authenticate\", \"CSM_Basic realm=\\ + getRealmName() + \\\");\n        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage()\n        );\n      }\n    }\n    ```", "```java\n    @ExceptionHandler({BadCredentialsException.class, AuthenticationException.class, AccessDeniedException.class})\n    protected ResponseEntity<Object> handleBadCredentials(final RuntimeException ex, final WebRequest request) {\n      return handleExceptionInternal(ex, \"The attempted  operation has been denied!\", new HttpHeaders(),   FORBIDDEN, request);\n    }\n    ...\n    ```", "```java\n    @Secured (\"ROLE_BASIC\")\n    public interface IMarketService {\n      Page<IndexOverviewDTO> getLastDayIndicesOverview( MarketCode market, Pageable pageable);\n      Page<IndexOverviewDTO> getLastDayIndicesOverview( Pageable pageable);\n      HistoProductDTO getHistoIndex(String code, MarketCode market, Date fromDate, Date toDate, QuotesInterval interval);\n    }\n    ```", "```java\n    {\"error\":\"Access is denied\",\"message\":\"The attempted operation has been denied!\",\"status\":403\",\"date\":\"2015-05-05 18:01:14.917\"}\n    ```", "```java\n    Username: <userC> \n    Password: <123456>\n    ```", "```java\n<beans   xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation\"=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.0.xsd\">\n    ...\n</beans>\n```", "```java\n  <http>\n    <form-login />\n    <http-basic />\n    <logout />\n  </http>\n```", "```java\n  <filter>\n    <filter-name>springSecurityFilterChain</filter-name>\n  <filter-class>org.sfw.web.filter.DelegatingFilterProxy</filter-class>\n</filter>\n<filter-mapping>\n  <filter-name>springSecurityFilterChain</filter-name>\n  <url-pattern>/*</url-pattern>\n</filter-mapping>\n```", "```java\n<security:custom-filter ref=\"myFilter\" after=\"BASIC_AUTH_FILTER\"/>\n```", "```java\n<security:http create-session=\"stateless\" entry-point-ref=\"authenticationEntryPoint\" authentication-manager- ref=\"authenticationManager\">\n  <security:custom-filter ref=\"basicAuthenticationFilter\" after=\"BASIC_AUTH_FILTER\" />\n  <security:csrf disabled=\"true\"/>\n</security:http>\n<bean id=\"basicAuthenticationFilter\" class=\"org.sfw.security.web.authentication.www.BasicAuthenticationFilter\">\n  <constructor-arg name=\"authenticationManager\" ref=\"authenticationManager\" />\n  <constructor-arg name=\"authenticationEntryPoint\" ref=\"authenticationEntryPoint\" />\n</bean>\n<bean id=\"authenticationEntryPoint\" class=\"edu.zc.csm.api. authentication.CustomBasicAuthenticationEntryPoint\">\n  <property name=\"realmName\" value=\"${realm.name}\" />\n</bean>\n```", "```java\npublic interface AuthenticationManager {\n  Authentication authenticate(Authentication authentication) throws AuthenticationException;\n}\n```", "```java\npublic interface AuthenticationProvider {\n  Authentication authenticate(Authentication authentication)\n    throws AuthenticationException;\n  boolean supports(Class<?> authentication);\n}\n```", "```java\n<security:authentication-manager >\n  <security:authentication-provider ref='myAuthenticationProvider'/>\n</security:authentication-manager>\n```", "```java\n<security:authentication-manager alias\"=\"authenticationManager\"\">\n  <security:authentication-provider user-service-ref='communityServiceImpl'>\n    <security:password-encoder ref=\"passwordEncoder\"/>\n  </security:authentication-provider>\n</security:authentication-manager>\n```", "```java\n        <!\u2013 Spring Social Core \u2013>\n        <dependency>\n          <groupId>org.springframework.social</groupId>\n          <artifactId>spring-social-core</artifactId>\n          <version>1.1.0.RELEASE</version>\n        </dependency>\n        <!\u2013 Spring Social Web (login/signup controllers) \u2013>\n        <dependency>\n          <groupId>org.springframework.social</groupId>\n          <artifactId>spring-social-web</artifactId>\n          <version>1.1.0.RELEASE</version>\n        </dependency>\n    ```", "```java\n      <!\u2013 Spring Social Twitter \u2013>\n        <dependency>\n          <groupId>org.springframework.social</groupId>\n          <artifactId>spring-social-twitter</artifactId>\n          <version>1.1.0.RELEASE</version>\n        </dependency>\n        <!\u2013 Spring Social Facebook \u2013>\n          <dependency>\n          <groupId>org.springframework.social</groupId>\n          <artifactId>spring-social-facebook</artifactId>\n          <version>1.1.0.RELEASE</version>\n        </dependency>\n    ```", "```java\n    <security:http create-session=\"stateless\" entry-point-ref=\"authenticationEntryPoint\" authentication-manager-ref=\"authenticationManager\">\n      <security:custom-filter ref=\"basicAuthenticationFilter\" after=\"BASIC_AUTH_FILTER\" />\n      <security:csrf disabled=\"true\"/>\n      <security:intercept-url pattern=\"/signup\" access=\"permitAll\"/>\n      ...\n      <security:intercept-url pattern=\"/**\" access=\"permitAll\"/>\n    </security:http>\n    ```", "```java\n    @Transactional(propagation = Propagation.REQUIRED)\n    @SuppressWarnings(\"unchecked\")\n    public class SocialUserConnectionRepositoryImpl implements ConnectionRepository {\n    @Autowired\n    private SocialUserRepository socialUserRepository;\n    private final String userId;\n    private final ConnectionFactoryLocator connectionFactoryLocator;\n    private final TextEncryptor textEncryptor;\n    public SocialUserConnectionRepositoryImpl(String userId, SocialUserRepository socialUserRepository, ConnectionFactoryLocator connectionFactoryLocator, TextEncryptor textEncryptor){\n        this.socialUserRepository = socialUserRepository;\n        this.userId = userId;\n        this.connectionFactoryLocator = connectionFactoryLocator;\n        this.textEncryptor = textEncryptor;\n    }\n     ...\n    public void addConnection(Connection<?> connection) {\n    try {\n       ConnectionData data = connection.createData();\n      int rank = socialUserRepository.getRank(userId, data.getProviderId()) ;\n      socialUserRepository.create(userId, data.getProviderId(), data.getProviderUserId(), rank, data.getDisplayName(), data.getProfileUrl(), data.getImageUrl(), encrypt(data.getAccessToken()), encrypt(data.getSecret()), encrypt(data.getRefreshToken()), data.getExpireTime()    );\n        } catch (DuplicateKeyException e) {\n      throw new   DuplicateConnectionException(connection.getKey());\n    }\n    }\n    ...\n    public void removeConnections(String providerId) {\n      socialUserRepository.delete(userId,providerId);\n    }\n      ...\n    }\n    ```", "```java\n    public interface SocialUserRepository {\n      List<SocialUser> findUsersConnectedTo(String providerId);\n      ...\n      List<String> findUserIdsByProviderIdAndProviderUserIds( String providerId, Set<String> providerUserIds);\n    ...\n      List<SocialUser> getPrimary(String userId, String providerId);\n      ...\n      SocialUser findFirstByUserIdAndProviderId(String userId, String providerId);\n    }\n    ```", "```java\n    @Entity\n    @Table(name=\"userconnection\", uniqueConstraints = {@UniqueConstraint(columnNames = { \"\"userId\", \"providerId\", \"providerUserId\" }), \n    @UniqueConstraint(columnNames = { \"userId\", \"providerId\", \"rank\" })})\n    public class SocialUser {\n      @Id\n      @GeneratedValue\n      private Integer id;\n\n      @Column(name = \"userId\")\n      private String userId;\n\n      @Column(nullable = false)\n      private String providerId;\n      private String providerUserId;\n\n      @Column(nullable = false)\n      private int rank;\n      private String displayName;\n      private String profileUrl;\n      private String imageUrl;\n\n      @Lob\n      @Column(nullable = false)\n      private String accessToken;\n      private String secret;\n      private String refreshToken;\n      private Long expireTime;\n      private Date createDate = new Date();\n      //+ getters / setters\n      ...\n    } \n    ```", "```java\n    @Transactional(readOnly = true)\n    public class SocialUserServiceImpl implements SocialUserService {\n       @Autowired\n       private SocialUserRepository socialUserRepository;\n      @Autowired\n       private ConnectionFactoryLocator connectionFactoryLocator;\n      @Autowired\n      private UserRepository userRepository;\n      private TextEncryptor textEncryptor = Encryptors.noOpText();\n    public List<String> findUserIdsWithConnection(Connection<?> connection) {\n       ConnectionKey key = connection.getKey();\n      return socialUserRepository. findUserIdsByProviderIdAndProviderUserId(key.getProviderId(), key.getProviderUserId());\n    }\n    public Set<String> findUserIdsConnectedTo(String providerId, Set<String> providerUserIds) {\n        return Sets.newHashSet(socialUserRepository.findUserIdsByProviderIdAndProviderUserIds(providerId, providerUserIds));\n    }\n    public ConnectionRepository createConnectionRepository(String userId) {\n      if (userId == null) {\n        throw new IllegalArgumentException\"(\"userId cannot be null\"\");\n      }\n      return new SocialUserConnectionRepositoryImpl(\n          userId,\n          socialUserRepository,\n          connectionFactoryLocator,\n          textEncryptor);\n    }\n     \t...\n    }\n    ```", "```java\n    <bean id=\"usersConnectionRepository\" class=\"edu.zc.csm.core.services.SocialUserServiceImpl\"/>\n    <bean id=\"connectionRepository\" factory-method=\"createConnectionRepository\" factory-bean=\"usersConnectionRepository\" scope\"=\"request\">\n      <constructor-arg value=\"#{request.userPrincipal.name}\"/>\n      <aop:scoped-proxy proxy-target-class\"=\"false\"\" />\n    </bean>\n    ```", "```java\n    <bean id=\"signInAdapter\" class=\"edu.zc.csm.api.signin.SignInAdapterImpl\"/>\n    <bean id=\"connectionFactoryLocator\" \n      class=\"org.sfw.social.connect.support. ConnectionFactoryRegistry\">\n      <property name=\"connectionFactories\">\n        <list>\n        <bean class\"=\"org.sfw.social.yahoo.connect.YahooOAuth2ConnectionFactory\"\">\n          <constructor-arg value=\"${yahoo.client.token}\"/>\n          <constructor-arg value=\"${yahoo.client.secret}\" />\n          <constructor-arg value=\"${yahoo.signin.url}\" />\n        </bean>\n        </list>\n      </property>\n    </bean>\n    <bean class=\"org.sfw.social.connect.web.ProviderSignInController\">\n      <constructor-arg ref=\"connectionFactoryLocator\"/>\n      <constructor-arg ref=\"usersConnectionRepository\"/>\n      <constructor-arg ref=\"signInAdapter\"/>\n      <property name=\"signUpUrl\" value=\"/signup\"/>\n      <property name=\"postSignInUrl\" value=\"${frontend.home.page.url}\"/>\n    </bean>\n    ```", "```java\n    @Transactional(propagation = Propagation.REQUIRED)\n    @PropertySource(\"classpath:application.properties\")\n    public class SignInAdapterImpl implements SignInAdapter{\n      @Autowired\n      private UserRepository userRepository;\n      @Autowired\n      private CommunityService communityService;\n      @Autowired\n      private SocialUserRepository socialUserRepository;\n      @Value(\"${oauth.success.view}\")\n      private String successView;\n      public String signIn(String userId, Connection<?> connection, NativeWebRequest request) {\n          User user = userRepository.findOne(userId);\n          String view = null;\n          if(user == null){\n            //temporary user for Spring Security\n            //won't be persisted\n            user = new User(userId, communityService.generatePassword(), null, true, true, true, true, communityService.createAuthorities(newRole[]{Role.ROLE_BASIC, Role.ROLE_OAUTH2}));\n        }\n        else{\n            //We have a successful previous oAuth \t//authentication\n            //The user is already registered\n            //Only the guid is sent back\n            List<SocialUser> socialUsers = \n            socialUserRepository. findByProviderUserIdOrUserId(userId, userId);\n            if(CollectionUtils.isNotEmpty(socialUsers)){\n              //For now we only deal with Yahoo!\n              view = successView.concat(\n                \"?spi=\" + socialUsers.get(0) .getProviderUserId());\n        }\n        }\n        communityService.signInUser(user);\n        return view;\n      }\n    }\n    ```", "```java\n    @Controller\n    @RequestMapping\"(\"/signup\"\")\n    @PropertySource\"(\"classpath:application.properties\"\")\n    public class SignUpController extends CloudstreetApiWCI{\n      @Autowired\n      private CommunityService communityService;\n      @Autowired\n      private SignInAdapter signInAdapter;\n      @Autowired\n      private ConnectionRepository connectionRepository;\n      @Value(\"${oauth.signup.success.view}\")\n      private String successView;\n      @RequestMapping(method = RequestMethod.GET)\n      public String getForm(NativeWebRequest request, @ModelAttribute User user) {\n        String view = successView;\n        // check if this is a new user signing in via //Spring Social\n        Connection<?> connection = ProviderSignInUtils.getConnection(request);\n          if (connection != null) {\n            // populate new User from social connection //user profile\n            UserProfile userProfile = connection.fetchUserProfile();\n            user.setUsername(userProfile.getUsername());\n            // finish social signup/login\n            ProviderSignInUtils. handlePostSignUp(user.getUsername(), request);\n            // sign the user in and send them to the user //home page\n            signInAdapter.signIn(user.getUsername(), connection, request);\n          view += ?spi=+ user.getUsername();\n        }\n        return view;\n      }\n    }\n    ```", "```java\n    username: <marcus>\n    email: <marcus@chapter5.com>\n    password: <123456>\n    preferred currency: <USD>\n    ```", "```java\nGET https://social.yahooapis.com/v1/user/abcdef123/profile\nAuthorization: Bearer aXJUKynsTUXLVY \n```", "```java\ncreate table UserConnection (userId varchar(255) not null,\n    providerId varchar(255) not null,\n    providerUserId varchar(255),\n    rank int not null,\n    displayName varchar(255),\n    profileUrl varchar(512),\n    imageUrl varchar(512),\n    accessToken varchar(255) not null,\n    secret varchar(255),\n    refreshToken varchar(255),\n    expireTime bigint,\n    primary key (userId, providerId, providerUserId));\ncreate unique index UserConnectionRank on UserConnection(userId, providerId, rank);\n```", "```java\n<bean id=\"connectionRepository\" factory-method=\"createConnectionRepository\" factory-bean=\"usersConnectionRepository\" scop=\"request\">\n  <constructor-arg value=\"#{request.userPrincipal.name}\" />\n  <aop:scoped-proxy proxy-target-class=\"false\" />\n</bean>\n<bean id=\"usersConnectionRepository\" class=\"edu.zc.csm.core.services.SocialUserServiceImpl\"/>\n```", "```java\n<bean id=\"connectionFactoryLocator\" class=\"org.sfw.social.connect.support.ConnectionFactoryRegistry\">\n  <property name=\"connectionFactories\">\n    <list>\n    <bean class\"=\"org.sfw.social.yahoo.connect. YahooOAuth2ConnectionFactory\"\">\n        <constructor-arg value=\"${yahoo.client.token}\" />\n        <constructor-arg value=\"${yahoo.client.secret}\" />\n        <constructor-arg value=\"${yahoo.signin.url}\" />\n      </bean>\n    </list>\n  </property>\n</bean>\n```", "```java\npublic interface ConnectionFactoryLocator {\n    ConnectionFactory<?> getConnectionFactory(String providerId);\n    <A> ConnectionFactory<A> getConnectionFactory(Class<A> apiType);\n    Set<String> registeredProviderIds();\n}\n```", "```java\nConnectionFactory<?> connectionFactory = connectionFactoryLocator.getConnectionFactory(providerId);\n```", "```java\n@Override\npublic Authentication signInUser(User user) {\n  Authentication authentication = new UsernamePasswordAuthenticationToken(user, user.getPassword(), user.getAuthorities());\n  SecurityContextHolder.getContext().setAuthentication(authentication);\n  return authentication;\n}\n```", "```java\n<bean class\"=\"org.sfw.social.connect.web.ProviderSignInController\"\">\n  <constructor-arg ref=\"connectionFactoryLocator\"/>\n  <constructor-arg ref=\"usersConnectionRepository\"/>\n  <constructor-arg ref=\"signInAdapter\"/>\n  <property name=\"signUpUrl\"\" value\"=\"/signup\"/>\n  <property name=\"postSignInUrl\" value=\"${frontend.home.page.url}\"/>\n</bean>\n```", "```java\n    cloudStreetMarketApp.factory(\"httpAuth\", function ($http) {\n      return {\n        clearSession: function () {\n          var authBasicItem = sessionStorage.getItem('basicHeaderCSM');\n          var oAuthSpiItem = sessionStorage.getItem('oAuthSpiCSM');\n        if(authBasicItem || oAuthSpiItem){\n          sessionStorage.removeItem('basicHeaderCSM');\n          sessionStorage.removeItem('oAuthSpiCSM');\n          sessionStorage.removeItem('authenticatedCSM');\n          $http.defaults.headers.common.Authorization = undefined;\n          $http.defaults.headers.common.Spi = undefined;\n          $http.defaults.headers.common.OAuthProvider = undefined;\n      }\n      },\n      refresh: function(){\n        var authBasicItem = sessionStorage.getItem('basicHeaderCSM');\n        var oAuthSpiItem = sessionStorage.getItem('oAuthSpiCSM');\n        if(authBasicItem){\n          $http.defaults.headers.common.Authorization = \n          $.parseJSON(authBasicItem).Authorization;\n          }\n          if(oAuthSpiItem){\n            $http.defaults.headers.common.Spi = oAuthSpiItem;\n            $http.defaults.headers.common.OAuthProvider = \"yahoo\";\n        }\n        },\n        setCredentials: function (login, password) {\n        //Encodes in base 64\n        var encodedData = window.btoa(login+\":\"+password);\n        var basicAuthToken = 'Basic '+encodedData;\n        var header = {Authorization: basicAuthToken};\n        sessionStorage.setItem('basicHeaderCSM', JSON.stringify(header));\n        $http.defaults.headers.common.Authorization = basicAuthToken;\n      },\n      setSession: function(attributeName, attributeValue) {\n        sessionStorage.setItem(attributeName, attributeValue);\n      },\n      getSession: function (attributeName) {\n        return sessionStorage.getItem(attributeName);\n      },\n      post: function (url, body) {\n        this.refresh();\n      return $http.post(url, body);\n      },\n      post: function (url, body, headers, data) {\n        this.refresh();\n        return $http.post(url, body, headers, data);\n      },\n      get: function (url) {\n        this.refresh();\n        return $http.get(url);\n      },\n      isUserAuthenticated: function () {\n        var authBasicItem = sessionStorage.getItem('authenticatedCSM');\n      if(authBasicItem){\n        return true;\n        }\n      return false;\n      }\n    }});\n    ```", "```java\n    cloudStreetMarketApp.factory(\"indicesTableFactory\", function (httpAuth) {\n        return {\n            get: function (market) {\n            return httpAuth.get(\"/api/indices/\" + market + \".json?ps=6\");\n            }\n        }\n    });\n    ```", "```java\n    <bean id=\"passwordEncoder\" \n      class=\"org.sfw.security.crypto.bcrypt.BCryptPasswordEnco  der\"/>\n    ```", "```java\n    <security:authentication-manager alias\"=\"authenticationManager\">\n      <security:authentication-provider user-service-ref='communityServiceImpl'>\n        <security:password-encoder ref=\"passwordEncoder\"/>\n      </security:authentication-provider>\n    </security:authentication-manager>\n    ```", "```java\n    @Service(value=\"communityServiceImpl\")\n    @Transactional(propagation = Propagation.REQUIRED)\n    public class CommunityServiceImpl implements CommunityService {\n      @Autowired\n      private ActionRepository actionRepository;\t\n      ...\n      @Autowired\n      private PasswordEncoder passwordEncoder;\n      ...\n      @Override\n      public User createUser(User user, Role role) {\n        if(findByUserName(user.getUsername()) != null){\n          throw new ConstraintViolationException(\"The provided user name already exists!\", null, null);\n         }\n        user.addAuthority(new Authority(user, role));\n        user.addAction(new AccountActivity(user, UserActivityType.REGISTER, new Date()));\n        user.setPassword(passwordEncoder. encode(user.getPassword()));\n        return userRepository.save(user);\n      }\n      @Override\n      public User identifyUser(User user) {\n        Preconditions.checkArgument(user.getPassword() != null, \"The provided password cannot be null!\");\n       Preconditions.checkArgument( StringUtils.isNotBlank(user.getPassword()), \"The provided password cannot be empty!\");\n        User retreivedUser = userRepository.findByUsername(user.getUsername());\n        if(!passwordEncoder.matches(user.getPassword(), retreivedUser.getPassword())){\n          throw new BadCredentialsException\"(\"No match has been found with the provided credentials!\");\n        }\n      return retreivedUser;\n      }\n      ...\n    }\n    ```", "```java\nhttpAuth.setCredentials($scope.form.username, $scope.form.password);\n```", "```java\nsetCredentials: function (login, password) {\n  var encodedData = window.btoa(login\"+\":\"+password);\n  var basicAuthToken = 'Basic '+encodedData;\n  var header = {Authorization: basicAuthToken};\n  sessionStorage.setItem('basicHeaderCSM', JSON.stringify(header));\n  $http.defaults.headers.common.Authorization = basicAuthToken;\n}\n```", "```java\nhttpAuth.setCredentials($scope.form.username, $scope.form.password);\n```", "```java\n@RequestMapping(value=\"/*\", method={RequestMethod.GET,RequestMethod.HEAD})\npublic String fallback(Model model, @RequestParam(value=\"spi\", required=false) String spi) {\n  if(StringUtils.isNotBlank(spi)){\n    model.addAttribute(\"spi\", spi);\n  }\n  return \"index\";\n}\n```", "```java\n<div id=\"spi\" class=\"hide\">${spi}</div>\n```", "```java\n$scope.init = function () {\n  if($('#spi').text()){\n    httpAuth.setSession('oAuthSpiCSM', $('#spi').text());\n  }\n}\n```", "```java\nrefresh: function(){\n  var authBasicItem = sessionStorage.getItem('basicHeaderCSM');\n  var oAuthSpiItem = sessionStorage.getItem('oAuthSpiCSM');\n  if(authBasicItem){\n    $http.defaults.headers.common.Authorization = $.parseJSON(authBasicItem).Authorization;\n  }\n  if(oAuthSpiItem){\n    $http.defaults.headers.common.Spi = oAuthSpiItem;\n    $http.defaults.headers.common.OAuthProvider = \"yahoo\";\n  }\n}\n```", "```java\nsetItem(key,value);\ngetItem(key);\nremoveItem(key);\nclear();\n```", "```java\npublic interface PasswordEncoder {\n  String encode(CharSequence rawPassword);\n  boolean matches(CharSequence rawPassword, String encodedPassword);\n}\n```", "```java\n$2a$10$Qz5slUkuV7RXfaH/otDY9udROisOwf6XXAOLt4PHWnYgOhG59teC6\n$2a$10$GYCkBzp2NlpGS/qjp5f6NOWHeF56ENAlHNuSssSJpE1MMYJevHBWO\n$2a$10$5uKS72xK2ArGDgb2CwjYnOzQcOmB7CPxK6fz2MGcDBM9vJ4rUql36\n```", "```java\n    public class CustomBasicAuthenticationEntryPoint extends BasicAuthenticationEntryPoint {\n      @Override\n      public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {\n        String referer = (String) request.getHeader(\"referer\");\n        if(referer != null && referer.contains(SWAGGER_UI_PATH)){\n          super.commence(request, response, authException);\n          return;\n        }\n        response.setHeader(\"WWW-Authenticate\", \"CSM_Basic realm=\\\" + getRealmName() + \\\");\n        response.sendError( HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());\n      }\n    }\n    ```", "```java\n    @RestController\n    @RequestMapping(value=\"/monitoring\", \tproduces={\"application/xml\", \"application/json\"})\n    @PreAuthorize(\"hasRole('ADMIN')\")\n    public class MonitoringController extends CloudstreetApiWCI{\n      @Autowired\n      private CommunityService communityService;\n      @Autowired\n      private SocialUserService socialUserService;\n      @RequestMapping(value=\"/users/{username}\", method=GET)\n      @ResponseStatus(HttpStatus.OK)\n      @ApiOperation(value = \"Details one account\", notes = )\n      public User getUserDetails(@PathVariable String username){\n        return communityService.findOne(username);\n      }\n      @RequestMapping(value=\"/users/{username}\", method=DELETE)\n      @ResponseStatus(HttpStatus.OK)\n      @ApiOperation(value = \"Delete user account\", notes =)\n      public void deleteUser(@PathVariable String username){\n        communityService.delete(username);\n      }\n      @RequestMapping(value=\"/users\", method=GET)\n      @ResponseStatus(HttpStatus.OK)\n      @ApiOperation(value = \"List user accounts\", notes =)\n      public Page<User> getUsers(@ApiIgnore @PageableDefault(size=10, page=0) Pageable pageable){\n        return communityService.findAll(pageable);\n      }\n    }\n    ```", "```java\n      @Override\n      @Secured({\"ROLE_ADMIN\", \"ROLE_SYSTEM\"})\n      public void delete(String userName) {\n        userRepository.delete(userName);\n      }\n      @Override\n      @Secured(\"ROLE_ADMIN\")\n      public Page<User> findAll(Pageable pageable) {\n        return userRepository.findAll(pageable);\n      }\n    ```", "```java\n    <security:global-method-security secured-annotations\"=\"enabled\"\" pre-post-annotations\"=\"enabled\"\" authentication-manager-ref\"=\"authenticationManager\"\"/>\n    ```", "```java\n    @RequestMapping(value\"=\"/{username\"}\", method=DELETE)\n    @ResponseStatus(HttpStatus.OK\n    @ApiOperation(value = \"Delete a user account\", notes =)\n    public void deleteUser(@PathVariable String username){\n      communityService.delete(username);\n    }\n    ```", "```java\n    <User Name> admin\n    <Password> admin \n    ```", "```java\npublic interface ConfigAttribute extends Serializable {\n  String getAttribute();\n}\n```", "```java\n<security:intercept-url pattern=\"/basic.html\" access=\"hasRole('BASIC')\"/>\n```", "```java\npublic interface RunAsManager {\n  Authentication buildRunAs(Authentication authentication, Object object, Collection<ConfigAttribute> attributes);\n  boolean supports(ConfigAttribute attribute);\n  boolean supports(Class<?> clazz);\n}\n```", "```java\npublic interface AccessDecisionManager {\n  void decide(Authentication authentication, Object object, \t\t\t\tCollection<ConfigAttribute> configAttributes) throws AccessDeniedException, InsufficientAuthenticationException;\n  boolean supports(ConfigAttribute attribute);\n  boolean supports(Class<?> clazz);\n}\n```", "```java\n      <security:http ... access-decision-manager-ref\"=\"xxx\"\">\n      </security:http>\n    ```", "```java\n      <security:global-method-security access-decision-manager-ref\"\"=\"\"... />\n    ```", "```java\npublic interface AccessDecisionVoter<S> {\n  boolean supports(ConfigAttribute attribute);\n  boolean supports(Class<?> clazz);\n  int vote(Authentication authentication, S object,\n  Collection<ConfigAttribute> attributes);\n}\n```", "```java\npublic interface AfterInvocationProvider {\n  Object decide(Authentication authentication, Object object, Collection<ConfigAttribute> attributes, Object returnedObject) throws AccessDeniedException;\n  boolean supports(ConfigAttribute attribute);\n  boolean supports(Class<?> clazz);\n}\n```", "```java\n<security:global-method-security pre-post-annotations\"=\"enabled\"\">\n```", "```java\n@PreAuthorize(\"hasRole('ADMIN')\")\npublic class MonitoringController extends CloudstreetApiWCI{\n  ...\n}\n```", "```java\n@PreAuthorize(\"hasPermission(#contact, 'admin')\")\npublic void deletePermission(Contact contact, Sid recipient, Permission permission);\n```", "```java\n@PreAuthorize(\"hasRole('USER')\")\n@PostFilter(\"hasPermission(filterObject, 'read') or hasPermission(filterObject, 'admin')\")\npublic List<Contact> getAll();\n```", "```java\n<security:global-method-security...>\n  <security:expression-handler ref=\"expressionHandler\"/>\n</security:global-method-security>\n<bean id=\"expressionHandler\" class=\"org.sfw.security.access.expression.method.DefaultMethod SecurityExpressionHandler\">\n  <property name=\"permissionEvaluator\" ref=\"myPermissionEvaluator\"/>\n</bean>\n```", "```java\npublic interface PermissionEvaluator extends AopInfrastructureBean {\n  boolean hasPermission(Authentication authentication, Object targetDomainObject, Object permission);\n  boolean hasPermission(Authentication authentication, Serializable targetId, String targetType, Object permission);\n}\n```", "```java\n<security:global-method-security jsr250-annotations\"=\"enabled\"\"\u2026/>\n```", "```java\n<security:global-method-security secured-annotations\"=\"enabled\"\"\u2026/>\n```", "```java\n    <dependency>\n      <groupId>org.springframework.hateoas</groupId>\n      <artifactId>spring-hateoas</artifactId>\n      <version>0.17.0.RELEASE</version>\n    </dependency>\n    ```", "```java\n    @XStreamAlias(\"resource\")\n    public class IndexResource extends Resource<Index> {\n      public static final String INDEX = \"index\";\n      public static final String INDICES = \"indices\";\n      public static final String INDICES_PATH = \"/indices\";\n\n      public IndexResource(Index content, Link... links) {\n        super(content, links);\n      }\n    }\n    ```", "```java\n    @Entity\n    @Table(name=\"index_value\")\n    @XStreamAlias(\"index\")\n    public class Index extends ProvidedId<String> {\n\n      private String name;\n\n      @Column(name=\"daily_latest_value\")\n      private BigDecimal dailyLatestValue;\n\n      @Column(name=\"daily_latest_change\")\n      private BigDecimal dailyLatestChange;\n\n      @Column(name=\"daily_latest_change_pc\")\n      private BigDecimal dailyLatestChangePercent;\n\n      @Column(name = \"previous_close\")\n      private BigDecimal previousClose;\n\n      private BigDecimal open;\n\n      private BigDecimal high;\n\n      private BigDecimal low;\n\n      @ManyToOne(fetch = FetchType.EAGER)\n      @JsonSerialize(using=IdentifiableSerializer.class)\n      @JsonProperty(\"exchangeId\")\n      @XStreamConverter(value=IdentifiableToIdConverter.class, strings={\"id\"})\n      @XStreamAlias(\"exchangeId\")\n       private Exchange exchange;\n\n      @JsonIgnore\n      @XStreamOmitField\n      @ManyToMany(fetch = FetchType.LAZY)\n      @JoinTable(name = \"stock_indices\", joinColumns = \n      {@JoinColumn(name = \"index_code\") },\n      inverseJoinColumns = {@JoinColumn(name = \"stock_code\")})\n      private Set<StockProduct> components = new LinkedHashSet<>();\n\n      @Column(name=\"last_update\", insertable=false, columnDefinition=\"TIMESTAMP DEFAULT CURRENT_TIMESTAMP\")\n\n      @Temporal(TemporalType.TIMESTAMP)\n      private Date lastUpdate;\n\n      public Index(){}\n\n      public Index(String indexId) {\n        setId(indexId);\n      }\n\n      //getters & setters\n\n        @Override\n        public String toString() {\n        return \"Index [name=\" + name + \", dailyLatestValue=\" + dailyLatestValue + \", dailyLatestChange=\" + dailyLatestChange + \", dailyLatestChangePercent=\" + dailyLatestChangePercent + \", previousClose=\" + previousClose + \", open=\" + open + \", high=\" + high + \", low=\" + low + \", exchange=\" + exchange + \", lastUpdate=\" + lastUpdate + \", id=\" + id + \"]\";\n        }\n      }\n    ```", "```java\n    @MappedSuperclass\n    public class ProvidedId<ID extends Serializable> implements Identifiable<ID> {\n      @Id \n      protected ID id;\n      @Override\n      public ID getId() {\n        return id;\n      }\n      public void setId(ID id) {\n        this.id = id;\n      }\n      @Override\n      public String toString() {\n        return id;\n      }\n      @Override\n      public int hashCode() {\n        return Objects.hash(id);\n      }\n      @Override\n      public boolean equals(Object obj) {\n        if (this == obj)\n          return true;\n        if (obj == null)\n          return false;\n        if (getClass() != obj.getClass())\n          return false;\n        ProvidedId <?> other = (ProvidedId <?>) obj;\n        return Objects.equals(this.id, other.id);\n      }\n    }\n    ```", "```java\npublic class ResourceSupport extends Object implements Identifiable<Link>\n```", "```java\npublic class Resource<T> extends ResourceSupport\n```", "```java\npublic interface Identifiable<ID extends Serializable> {\n  ID getId();\n}\n```", "```java\n    import static org.sfw.hateoas.mvc.ControllerLinkBuilder.linkTo;\n    import static org.sfw.hateoas.mvc.ControllerLinkBuilder.methodOn;\n    import org.sfw.hateoas.mvc.ResourceAssemblerSupport;\n    import org.sfw.hateoas.EntityLinks;\n    import static edu.zc.csm.api.resources.ChartResource.CHART;\n    import static edu.zc.csm.api.resources.ExchangeResource.EXCHANGE;\n    import static edu.zc.csm.api.resources.StockProductResource.COMPONENTS;\n\n    @Component\n    public class IndexResourceAssembler extends ResourceAssemblerSupport<Index, IndexResource> {\n      @Autowired\n      private EntityLinks entityLinks;\n      public IndexResourceAssembler() {\n        super(IndexController.class, IndexResource.class);\n      }\n      @Override\n      public IndexResource toResource(Index index) {\n        IndexResource resource = createResourceWithId(index.getId(), index);\n        resource.add(\n          entityLinks.linkToSingleResource(index.getExchange ()).withRel(EXCHANGE)\n    );\n      resource.add(\n      linkTo(methodOn(ChartIndexController.class).get(in dex.getId(), \".png\", null, null, null, null, null, \tnull, null)).withRel(CHART)\n    );\n      resource.add(\n        linkTo(methodOn(StockProductController.class).getS everal(null, null, index.getId(), null, null, \tnull, null)).withRel(COMPONENTS)\n    );\n    return resource;\n      }\n      @Override\n      protected IndexResource instantiateResource(Index entity) {\n        return new IndexResource(entity);\n      }\n    }\n    ```", "```java\n    @EnableHypermediaSupport(type = { HypermediaType.HAL })\n\n    @EnableEntityLinks \n    ```", "```java\n    @RestController\n    @ExposesResourceFor(Index.class)\n    @RequestMapping(value=INDICES_PATH, produces={\"application/xml\", \"application/json\"})\n    public class IndexController extends CloudstreetApiWCI<Index> {\n      @Autowired\n      private IndexService indexService;\n      @Autowired\n      private IndexResourceAssembler assembler;\n      @RequestMapping(method=GET)\n      public PagedResources<IndexResource> getSeveral(\n        @RequestParam(value=\"exchange\", required=false) String exchangeId,@RequestParam(value=\"market\", required=false) MarketId marketId, @PageableDefault(size=10, page=0, sort={\"previousClose\"}, direction=Direction.DESC) Pageable pageable){\n          return pagedAssembler.toResource( indexService.gather(exchangeId,marketId, pageable), assembler);\n      }\n      @RequestMapping(value=\"/{index:[a-zA-Z0-9^.-]+}{extension:\\\\.[a-z]+}\", method=GET)\n      public IndexResource get(\n        @PathVariable(value=\"index\") String indexId, @PathVariable(value=\"extension\") String extension){\n        return assembler.toResource( indexService.gather(indexId));\n    }\n    }\n    ```", "```java\n    @Component\n    @PropertySource(\"classpath:application.properties\")\n    public class CloudstreetApiWCI<T extends Identifiable<?>> \n      extends WebContentInterceptor {\n    ...\n        @Autowired\n        protected PagedResourcesAssembler<T> pagedAssembler;\n    ...\n    }\n    ```", "```java\n      <bean class=\"org.sfw.data.web.PagedResourcesAssembler\">\n        <constructor-arg><null/></constructor-arg>\n        <constructor-arg><null/></constructor-arg>\n      </bean>\n    ```", "```java\npublic abstract class ResourceAssemblerSupport<T, D extends ResourceSupport> implements ResourceAssembler<T, D>\n```", "```java\npublic interface ResourceAssembler<T, D extends ResourceSupport> {\n  D toResource(T entity);\n} \n```", "```java\n@RequestMapping(method=GET)\npublic PagedResources<IndexResource> getSeveral(\n@RequestParam(value=\"exchange\", required=false) String exchangeId,\n@RequestParam(value=\"market\", required=false) MarketId marketId,\n@PageableDefault(size=10, page=0, sort={\"previousClose\"}, direction=Direction.DESC) Pageable pageable){\n  return pagedAssembler.toResource(\n  indexService.gather(exchangeId, marketId, pageable), \n  assembler);\n}\n```", "```java\npublic interface EntityLinks extends Plugin<Class<?>>{ \n  LinkBuilder linkFor(Class<?> type);\n  LinkBuilder linkFor(Class<?> type, Object... parameters);\n  LinkBuilder linkForSingleResource(Class<?> type, Object id);\n  LinkBuilder linkForSingleResource(Identifiable<?> entity);\n  Link linkToCollectionResource(Class<?> type);\n  Link linkToSingleResource(Class<?> type, Object id);\n  Link linkToSingleResource(Identifiable<?> entity);\n}\n```", "```java\nresource.add(\n  linkTo(\n  methodOn(StockProductController.class)\n  .getSeveral(null, null, index.getId(), null, null, null, null)\n  )\n  .withRel(COMPONENTS)\n);\n```", "```java\n@RequestMapping(value=\"/{index:[a-zA-Z0-9^.-]+}{extension:\\\\.[a-z]+}\", method=GET)\npublic IndexResource get(\n  @PathVariable(value=\"index\") String indexId, \n  @PathVariable(value=\"extension\") String extension){\n  return assembler.toResource(indexService.gather(indexId));\n}\n```", "```java\n    import edu.zc.csm.core.converters.IdentifiableSerializer;\n    import edu.zc.csm.core.converters.IdentifiableToIdConverter;\n\n    @Entity\n    public class Exchange extends ProvidedId<String> {\n      private String name;\n\n      @ManyToOne(fetch = FetchType.EAGER)\n      @JoinColumn(name = \"market_id\", nullable=true)\n      @JsonSerialize(using=IdentifiableSerializer.class)\n      @JsonProperty(\"marketId\")\n      @XStreamConverter(value=IdentifiableToIdConverter.class, strings={\"id\"})\n      @XStreamAlias(\"marketId\")\n      private Market market;\n\n      @OneToMany(mappedBy = \"exchange\", cascade = CascadeType.ALL, fetch=FetchType.LAZY)\n      @JsonIgnore\n      @XStreamOmitField\n      private Set<Index> indices = new LinkedHashSet<>();\n\n      @OneToMany(mappedBy = \"exchange\", cascade = CascadeType.ALL, fetch=FetchType.LAZY)\n      @JsonIgnore\n      @XStreamOmitField\n      private Set<StockProduct> stocks = new LinkedHashSet<>();\n\n      public Exchange(){}\n      public Exchange(String exchange) {\n        setId(exchange);\n      }\n\n      //getters & setters\n\n      @Override\n          public String toString() {\n            return \"Exchange [name=\" + name + \", market=\" + market + \", id=\" + id+ \"]\";\n          }\n    } \n    ```", "```java\n        import org.springframework.hateoas.Identifiable;\n        import com.fasterxml.jackson.core.JsonGenerator;\n        import com.fasterxml.jackson.core.JsonProcessingException;\n        import com.fasterxml.jackson.databind.JsonSerializer;\n        import com.fasterxml.jackson.databind.SerializerProvider;\n        public class IdentifiableSerializer extends JsonSerializer<Identifiable<?>> {\n           @Override\n           public void serialize(Identifiable<?> value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {\n            provider.defaultSerializeValue(value.getId(), jgen);\n           }\n        }\n        ```", "```java\n        import com.thoughtworks.xstream.converters.Converter;\n        public class IdentifiableToIdConverter implements Converter {\n            private final Class <Identifiable<?>> type;\n            public IdentifiableToIdConverter(final Class <Identifiable<?>> type, final Mapper mapper, final ReflectionProvider reflectionProvider, final ConverterLookup lookup, final String valueFieldName) {\n                this(type, mapper, reflectionProvider, lookup, valueFieldName, null);\n            }\n          public IdentifiableToIdConverter(final Class<Identifiable<?>> type, final Mapper mapper, final ReflectionProvider reflectionProvider, final ConverterLookup lookup, final String valueFieldName, Class valueDefinedIn) {\n                this.type = type;\n                Field field = null;\n                try {\n          field = (valueDefinedIn != null? valueDefinedIn : type.getSuperclass()).getDeclaredField(\"id\");\n          if (!field.isAccessible()) {\n            field.setAccessible(true);\n            }\n              } catch (NoSuchFieldException e) {\n                throw new IllegalArgumentException( \te.getMessage()+\": \"+valueFieldName);\n                  }\n              }\n              public boolean canConvert(final Class type) {\n                return type.isAssignableFrom(this.type);\n            }\n            public void marshal(final Object source, final HierarchicalStreamWriter writer,final \tMarshallingContext context) {\n                  if(source instanceof Identifiable){\n                    writer.setValue( ((Identifiable<?>)source).getId() .toString()\n                  );\n                }\n              }\n            public Object unmarshal(final HierarchicalStreamReader reader, final UnmarshallingContext context) {\n              return null;\n            }\n        }\n        ```", "```java\n@JsonSerialize(using=IdentifiableSerializer.class)\n@JsonProperty(\"marketId\")\n```", "```java\n@XStreamConverter(value=IdentifiableToIdConverter.class, strings={\"id\"})\n@XStreamAlias(\"marketId\")\n```", "```java\n    @Override\n    public Index gather(String indexId) {\n        Index index = indexRepository.findOne(indexId);\n        if(AuthenticationUtil.userHasRole(Role.ROLE_OAUTH2)){\n          updateIndexAndQuotesFromYahoo(index != null ? Sets.newHashSet(index) : Sets.newHashSet(new Index(indexId)));\n          return indexRepository.findOne(indexId);\n        }\n      return index;\n    }\n    ```", "```java\n      @Autowired\n      private SocialUserService usersConnectionRepository;\n\n      @Autowired\n      private ConnectionRepository connectionRepository;\n\n      private void updateIndexAndQuotesFromYahoo(Set<Index> askedContent) {\n          Set<Index> recentlyUpdated = askedContent.stream()\n          .filter(t -> t.getLastUpdate() != null && DateUtil.isRecent(t.getLastUpdate(), 1))\n            .collect(Collectors.toSet());\n\n        if(askedContent.size() != recentlyUpdated.size()){\n          String guid = AuthenticationUtil.getPrincipal().getUsername();\n        String token = usersConnectionRepository .getRegisteredSocialUser(guid) .getAccessToken();\n        Connection<Yahoo2> connection = connectionRepository .getPrimaryConnection(Yahoo2.class);\n        if (connection != null) {\n          askedContent.removeAll(recentlyUpdated);\n            List<String> updatableTickers = askedContent.stream()\n             .map(Index::getId)\n             .collect(Collectors.toList());\n         List<YahooQuote> yahooQuotes = connection.getApi() .financialOperations().getYahooQuotes(updatableTickers, token);\n\n         Set<Index> upToDateIndex = yahooQuotes.stream()\n           .map(t -> yahooIndexConverter.convert(t))\n           .collect(Collectors.toSet());\n\n          final Map<String, Index> persistedStocks = indexRepository.save(upToDateIndex) \t.stream()\n            .collect(Collectors.toMap(Index::getId, Function.identity()));\n\n         yahooQuotes.stream()\n          .map(sq -> new IndexQuote(sq, persistedStocks.get(sq.getId())))\n            .collect(Collectors.toSet());\n          indexQuoteRepository.save(updatableQuotes);\n        }\n      }\n    } \n    ```", "```java\n    public interface FinancialOperations {\n      List<YahooQuote> getYahooQuotes(List<String> tickers, String accessToken) ;\n      byte[] getYahooChart(String indexId, ChartType type, ChartHistoSize histoSize, ChartHistoMovingAverage histoAverage, ChartHistoTimeSpan histoPeriod, Integer intradayWidth, Integer intradayHeight, String token);\n    }\n    ```", "```java\n    public class FinancialTemplate extends AbstractYahooOperations implements FinancialOperations {\n        private RestTemplate restTemplate;\n      public FinancialTemplate(RestTemplate restTemplate, boolean isAuthorized, String guid) {\n        super(isAuthorized, guid);\n        this.restTemplate = restTemplate;\n        this.restTemplate.getMessageConverters() add( new YahooQuoteMessageConverter( MediaType.APPLICATION_OCTET_STREAM));\n        }\n      @Override\n      public List<YahooQuote> getYahooQuotes(List<String> tickers, String token)  {\n          requiresAuthorization();\n          final StringBuilder sbTickers = new StringBuilder();\n          String url = \"quotes.csv?s=\";\n          String strTickers = \"\";\n          if(tickers.size() > 0){\n            tickers.forEach(t -> strTickers = sbTickers.toString();\n              strTickers = strTickers.substring(0, strTickers.length()-1);\n          }\n           HttpHeaders headers = new HttpHeaders();\n           headers.set(\"Authorization\", \"Bearer \"+token);\n           HttpEntity<?> entity = new HttpEntity<>(headers);\n           return restTemplate.exchange(buildUri(FINANCIAL, url.concat(strTickers).concat(\"&f=snopl1c1p2hgbavx\tc4\")), HttpMethod.GET, entity , QuoteWrapper.class).getBody();\n      } \n      ...\n    }\n    ```", "```java\n@Autowired\nprivate SocialUserService usersConnectionRepository;\n@Autowired\nprivate ConnectionRepository connectionRepository;\n```", "```java\nString guid = AuthenticationUtil.getPrincipal().getUsername();\n```", "```java\nString token = usersConnectionRepository .getRegisteredSocialUser(guid).getAccessToken();\n```", "```java\nConnection<Yahoo2> connection = connectionRepository.getPrimaryConnection(Yahoo2.class);\n```", "```java\nList<YahooQuote> yahooQuotes = connection.getApi() .financialOperations().getYahooQuotes(updatableTickers, token);\n```", "```java\n    @RestController\n    @RequestMapping(value=USERS_PATH, produces={\"application/xml\", \"application/json\"})\n    public class UsersController extends CloudstreetApiWCI{\n      @RequestMapping(method=POST)\n      @ResponseStatus(HttpStatus.CREATED)\n      public void create(@RequestBody User user, \n      @RequestHeader(value=\"Spi\", required=false) String \tguid, @RequestHeader(value=\"OAuthProvider\", required=false) String provider,\n      HttpServletResponse response) throws IllegalAccessException{\n      ...\n      response.setHeader(LOCATION_HEADER, USERS_PATH + user.getId());\n      }\n      @RequestMapping(method=PUT)\n      @ResponseStatus(HttpStatus.OK)\n      public void update(@RequestBody User user, \n        BindingResult result){\n        ...\n      }\n      @RequestMapping(method=GET)\n      @ResponseStatus(HttpStatus.OK)\n      public Page<UserDTO> getAll(@PageableDefault(size=10, page=0) Pageable pageable){\n      return communityService.getAll(pageable);\n      }\n      @RequestMapping(value=\"/{username}\", method=GET)\n      @ResponseStatus(HttpStatus.OK)\n      public UserDTO get(@PathVariable String username){\n        return communityService.getUser(username);\n      }\n      @RequestMapping(value=\"/{username}\", method=DELETE)\n      @ResponseStatus(HttpStatus.NO_CONTENT)\n      public void delete(@PathVariable String username){\n        communityService.delete(username);\n      }\n    }\n    ```", "```java\n    @RestController\n    @ExposesResourceFor(Transaction.class)\n    @RequestMapping(value=ACTIONS_PATH + TRANSACTIONS_PATH, produces={\"application/xml\", \"application/json\"})\n    public class TransactionController extends CloudstreetApiWCI<Transaction> {\n    ```", "```java\n      @RequestMapping(method=GET)\n      @ResponseStatus(HttpStatus.OK)\n      public PagedResources<TransactionResource> search(\n        @RequestParam(value=\"user\", required=false) String userName,\n        @RequestParam(value=\"quote:[\\\\d]+\", required=false) Long quoteId,\n        @RequestParam(value=\"ticker:[a-zA-Z0-9-:]+\", required=false) String ticker,\n        @PageableDefault(size=10, page=0, sort={\"lastUpdate\"}, direction=Direction.DESC) Pageable pageable){\n        Page<Transaction> page = transactionService.findBy(pageable, userName, quoteId, ticker);\n          return pagedAssembler.toResource(page, assembler);\n      }\n      @RequestMapping(value=\"/{id}\", method=GET)\n      @ResponseStatus(HttpStatus.OK)\n    public TransactionResource get(@PathVariable(value=\"id\") Long transactionId){\n      return assembler.toResource(\n        transactionService.get(transactionId));\n      }\n    ```", "```java\n      @RequestMapping(method=POST)\n      @ResponseStatus(HttpStatus.CREATED)\n    public TransactionResource post(@RequestBody Transaction transaction) {\n        transactionService.hydrate(transaction);\n        ...\n      TransactionResource resource = assembler.toResource(transaction);\n      response.setHeader(LOCATION_HEADER, resource.getLink(\"self\").getHref());\n        return resource;\n      }\n      @PreAuthorize(\"hasRole('ADMIN')\")\n      @RequestMapping(value=\"/{id}\", method=DELETE)\n      @ResponseStatus(HttpStatus.NO_CONTENT)\n    public void delete(@PathVariable(value=\"id\") Long transactionId){\n        transactionService.delete(transactionId);\n      }\n    }\n    ```", "```java\n    @Override\n    public Transaction hydrate(final Transaction transaction) {\n\n      if(transaction.getQuote().getId() != null){\n        transaction.setQuote(\n          stockQuoteRepository.findOne(\n            transaction.getQuote().getId()));\n      }\n      if(transaction.getUser().getId() != null){\n       transaction.setUser(userRepository.findOne(transaction.getUser().getId()));\n      }\n      if(transaction.getDate() == null){\n        transaction.setDate(new Date());\n      }\n      return transaction;\n    }\n    ```", "```java\n    @Service\n    @Transactional(readOnly = true)\n    public class TransactionServiceImpl implements TransactionService{\n      ...\n    }\n    ```", "```java\n      @Override\n      @Transactional\n      public Transaction create(Transaction transaction) {\n      if(!transactionRepository.findByUserAndQuote(transaction.getUser(), transaction.getQuote()).isEmpty()){\n          throw new DataIntegrityViolationException(\"A transaction for the quote and the user already exists!\");\n        }\n        return transactionRepository.save(transaction);\n      }\n    ```", "```java\n    @Repository\n    @Transactional(readOnly = true)\n    public class IndexRepositoryImpl implements IndexRepository{\n      @PersistenceContext \n      private EntityManager em;\n\n      @Autowired\n      private IndexRepositoryJpa repo;\n      ...\n      @Override\n      @Transactional\n      public Index save(Index index) {\n        return repo.save(index);\n      }\n      ...\n    }\n    ```", "```java\npublic interface HttpMessageConverter<T> {\n  boolean canRead(Class<?> clazz, MediaType mediaType);\n  boolean canWrite(Class<?> clazz, MediaType mediaType);\n  List<MediaType> getSupportedMediaTypes();\n  T read(Class<? extends T> clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException;\n  void write(T t, MediaType contentType, HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException;\n}\n```", "```java\n    @RequestMapping(method=POST, produces={\"application/json\"})\n    @ResponseStatus(HttpStatus.CREATED)\n    public String save( @RequestPart(\"file\") MultipartFile file, HttpServletResponse response){\n    String extension = ImageUtil.getExtension(file.getOriginalFilename());\n    String name = UUID.randomUUID().toString().concat(\".\").concat(extension);\n    if (!file.isEmpty()) {\n       try {\n                byte[] bytes = file.getBytes();\n                Path newPath = Paths.get(pathToUserPictures);\n                Files.write(newPath, bytes, \tStandardOpenOption.CREATE);\n       ...\n  ...\n  response.addHeader(LOCATION_HEADER, env.getProperty(\"pictures.user.endpoint\").concat(name));\n  return \"Success\";\n  ...\n  }\n```", "```java\n    <dependency>\n      <groupId>org.hibernate</groupId>\n      <artifactId>hibernate-validator</artifactId>\n      <version>4.3.1.Final</version>\n    </dependency>\n    ```", "```java\n    <bean id=\"validator\" class=\"org.sfw.validation.beanvalidation.LocalValidatorFactoryBean\"/>\n    ```", "```java\n      @RequestMapping(method=PUT)\n      @ResponseStatus(HttpStatus.OK)\n      public void update(@Valid @RequestBody User user, \n      BindingResult result){\n        ValidatorUtil.raiseFirstError(result);\n        user = communityService.updateUser(user);\n      }\n    ```", "```java\n      @InitBinder\n        protected void initBinder(WebDataBinder binder) {\n            binder.setValidator(new UserValidator());\n        }\n    ```", "```java\n    package edu.zipcloud.cloudstreetmarket.core.validators;\n    import java.util.Map;\n    import javax.validation.groups.Default;\n    import org.springframework.validation.Errors;\n    import org.springframework.validation.Validator;\n    import edu.zc.csm.core.entities.User;\n    import edu.zc.csm.core.util.ValidatorUtil;\n    public class UserValidator implements Validator {\n      @Override\n      public boolean supports(Class<?> clazz) {\n        return User.class.isAssignableFrom(clazz);\n      }\n      @Override\n      public void validate(Object target, Errors err) {\n        Map<String, String> fieldValidation = ValidatorUtil.validate((User)target, Default.class);\n        fieldValidation.forEach(\n          (k, v) -> err.rejectValue(k, v)\n        );\n      }\n    }\n    ```", "```java\n    @Entity\n    @Table(name=\"users\")\n    public class User extends ProvidedId<String> implements UserDetails{\n      ...\n      private String fullName;\n      @NotNull\n      @Size(min=4, max=30)\n      private String email;\n      @NotNull\n      private String password;\n      private boolean enabled = true;\n      @NotNull\n      @Enumerated(EnumType.STRING)\n      private SupportedLanguage language;\n      private String profileImg;\n\n      @Column(name=\"not_expired\")\n      private boolean accountNonExpired;\n      @Column(name=\"not_locked\")\n      private boolean accountNonLocked;\n\n      @NotNull\n      @Enumerated(EnumType.STRING)\n      private SupportedCurrency currency;\n\n      private BigDecimal balance;\n      ...\n    }\n    ```", "```java\n    package edu.zipcloud.cloudstreetmarket.core.util;\n    import java.util.Arrays;\n    import java.util.HashMap;\n    import java.util.Map;\n    import java.util.Set;\n    import javax.validation.ConstraintViolation;\n    import javax.validation.Validation;\n    import javax.validation.Validator;\n    import javax.validation.ValidatorFactory;\n    import javax.validation.groups.Default;\n    import org.springframework.validation.BindingResult;\n\n    public class ValidatorUtil {\n        private static Validator validator;\n        static {\n          ValidatorFactory factory = Validation.buildDefaultValidatorFactory();\n          validator = factory.getValidator();\n        }\n    ```", "```java\n    public static <T> Map<String, String> validate(T object, Class<?>... groups) {\n      Class<?>[] args = Arrays.copyOf(groups, groups.length + 1);\n      args[groups.length] = Default.class;\n      return extractViolations(validator.validate(object, args));\n    }\n    private static <T> Map<String, String> extractViolations(Set<ConstraintViolation<T>> violations) {\n      Map<String, String> errors = new HashMap<>();\n      for (ConstraintViolation<T> v: violations) {\n        errors.put(v.getPropertyPath().toString(), \"[\"+v.getPropertyPath().toString()+\"] \" + StringUtils.capitalize(v.getMessage()));\n      }\n      return errors;\n      }\n    ```", "```java\n      public static void raiseFirstError(BindingResult result) {\n        if (result.hasErrors()) {\n          throw new IllegalArgumentException(result.getAllErrors().get(0).getCode());\n        }\n    else if (result.hasGlobalErrors()) {\n    throw new IllegalArgumentException(result.getGlobalError().getDefaultMessage());\n           }\n    }\n    }\n    ```", "```java\n    @ControllerAdvice\n    public class RestExceptionHandler extends ResponseEntityExceptionHandler {\n      @Autowired\n      private ResourceBundleService bundle;\n       @Override\n      protected ResponseEntity<Object> handleExceptionInternal(Exception ex, Object body,\n        HttpHeaders headers, HttpStatus status, WebRequest request) {\n        ErrorInfo errorInfo = null;\n        if(body!=null && bundle.containsKey(body.toString())){\n            String key = body.toString();\n            String localizedMessage = bundle.get(key);\n            errorInfo = new ErrorInfo(ex, localizedMessage, key, status);\n        }\n        else{\n          errorInfo = new ErrorInfo(ex, (body!=null)? body.toString() : null, null, status);\n        }\n    return new ResponseEntity<Object>(errorInfo, headers, status);\n    }\n      @ExceptionHandler({ InvalidDataAccessApiUsageException.class, DataAccessException.class, IllegalArgumentException.class })\n      protected ResponseEntity<Object> handleConflict(final RuntimeException ex, final WebRequest request) {\n          return handleExceptionInternal(ex, I18N_API_GENERIC_REQUEST_PARAMS_NOT_VALID, new HttpHeaders(), BAD_REQUEST, request);\n        }\n    }\n    ```", "```java\n    {\"error\":\"[email] Size must be between 4 and 30\",\n    \"message\":\"The request parameters were not valid!\",\n    \"i18nKey\":\"error.api.generic.provided.request.parameters.not.valid\",\n    \"status\":400,\n    \"date\":\"2016-01-05 05:59:26.584\"}\n    ```", "```java\n    cloudStreetMarketApp.controller('accountController', function ($scope, $translate, $location, errorHandler, accountManagementFactory, httpAuth, genericAPIFactory){\n          $scope.form = {\n          id: \"\",\n        email: \"\",\n        fullName: \"\",\n        password: \"\",\n        language: \"EN\",\n        currency: \"\",\n        profileImg: \"img/anon.png\"\n          };\n      ...\n    }\n    ```", "```java\n      $scope.update = function () {\n        $scope.formSubmitted = true;\n\n        if(!$scope.updateAccount.$valid) {\n            return;\n        }\n          httpAuth.put('/api/users', JSON.stringify($scope.form)).success(\n          function(data, status, headers, config) {\n            httpAuth.setCredentials($scope.form.id, $scope.form.password);\n          $scope.updateSuccess = true;\n          }\n        ).error(function(data, status, headers, config) {\n            $scope.updateFail = true;\n            $scope.updateSuccess = false;\n            $scope.serverErrorMessage = errorHandler.renderOnForms(data);\n          }\n        );\n      };\n    ```", "```java\n    cloudStreetMarketApp.factory(\"errorHandler\", ['$translate', function ($translate) {\n        return {\n            render: function (data) {\n            if(data.message && data.message.length > 0){\n              return data.message;\n            }\n            else if(!data.message && data.i18nKey && data.i18nKey.length > 0){\n              return $translate(data.i18nKey);\n              }\n            return $translate(\"error.api.generic.internal\");\n            },\n            renderOnForms: function (data) {\n            if(data.error && data.error.length > 0){\n              return data.error;\n            }\n            else if(data.message && data.message.length > 0){\n              return data.message;\n            }\n            else if(!data.message && data.i18nKey && data.i18nKey.length > 0){\n              return $translate(data.i18nKey);\n            }\n            return $translate(\"error.api.generic.internal\");\n            }\n        }\n    }]);\n    ```", "```java\n    @Component\n    public class TransactionValidator implements Validator {\n      @Override\n      public boolean supports(Class<?> clazz) {\n        return Transaction.class.isAssignableFrom(clazz);\n      }\n      @Override\n      public void validate(Object target, Errors errors) {\n        ValidationUtils.rejectIfEmpty(errors, \"quote\", \" transaction.quote.empty\");\n        ValidationUtils.rejectIfEmpty(errors, \"user\", \" transaction.user.empty\");\n        ValidationUtils.rejectIfEmpty(errors, \"type\", \" transaction.type.empty\");\n      }\n    }\n    ```", "```java\npublic interface Validator {\n  boolean supports(Class<?> clazz);\n  void validate(Object target, Errors errors);\n}\n```", "```java\npublic interface Errors {\n  ...\n  void reject(String errorCode);\n  void reject(String errorCode, String defaultMessage);\nvoid reject(String errorCode, Object[] errorArgs, String defaultMessage);\nvoid rejectValue(String field, String errorCode); void rejectValue(String field, String errorCode, String defaultMessage);\nvoid rejectValue(String field, String errorCode, Object[] errorArgs, String defaultMessage);\n  void addAllErrors(Errors errors);\n  boolean hasErrors();\n  int getErrorCount();\n  List<ObjectError> getAllErrors();\n  ...\n}\n```", "```java\n  @InitBinder\n    protected void initBinder(WebDataBinder binder) {\n        binder.setValidator(new UserValidator());\n    }\n```", "```java\npublic interface BindingResult extends Errors {\n  Object getTarget();\n  Map<String, Object> getModel();\n  Object getRawFieldValue(String field);\n  PropertyEditor findEditor(String field, Class<?> valueType);\n  PropertyEditorRegistry getPropertyEditorRegistry();\n  void addError(ObjectError error);\n  String[] resolveMessageCodes(String errorCode);\n  String[] resolveMessageCodes(String errorCode, String field);\n  void recordSuppressedField(String field);\n  String[] getSuppressedFields();\n}\n```", "```java\nMissing field error: \"required\"\nType mismatch error: \"typeMismatch\"\nMethod invocation error: \"methodInvocation\"\n```", "```java\nMessageSource.getMessage(org.sfw.context.MessageSourceResolvable, java.util.Locale). \n```", "```java\n\nValidatorUtil.raiseFirstError(result);\n```", "```java\n<bean id=\"validator\" class=\"org.sfw.validation.beanvalidation.LocalValidatorFactoryBean\"/>\n```", "```java\njavax.validation.constraints.Max.message=must be less than or equal to {value}\njavax.validation.constraints.Min.message=must be greater than or equal to {value}\njavax.validation.constraints.Pattern.message=must match \"{regexp}\"\njavax.validation.constraints.Size.message=size must be between {min} and {max}\n```", "```java\n    <bean id=\"messageBundle\" class=\"edu.zc.csm.core.i18n.SerializableResourceBundleMessageSource\">\n    <property name=\"basenames\" value=\"classpath:/META-INF/i18n/messages,classpath:/META-INF/i18n/errors\"/>\n      <property name=\"fileEncodings\" value=\"UTF-8\" />\n      <property name=\"defaultEncoding\" value=\"UTF-8\" />\n    </bean>\n    ```", "```java\n    /**\n     * @author rvillars\n     * {@link https://github.com/rvillars/bookapp-rest} \n     */\n    public class SerializableResourceBundleMessageSource extends ReloadableResourceBundleMessageSource {\n       public Properties getAllProperties(Locale locale) {\n          clearCacheIncludingAncestors();\n          PropertiesHolder propertiesHolder = getMergedProperties(locale);\n          Properties properties = propertiesHolder.getProperties();\n        return properties;\n      }\n    }\n    ```", "```java\n    @RestController\n    @ExposesResourceFor(Transaction.class)\n    @RequestMapping(value=\"/properties\")\n    public class PropertiesController{\n      @Autowired\n      protected SerializableResourceBundleMessageSource messageBundle;\n      @RequestMapping(method = RequestMethod.GET, produces={\"application/json; charset=UTF-8\"})\n      @ResponseBody\n      public Properties list(@RequestParam String lang) {\n        return messageBundle.getAllProperties(new Locale(lang));\n      }\n    }\n    ```", "```java\n    @Service\n    @Transactional(readOnly = true)\n    public class ResourceBundleServiceImpl implements ResourceBundleService {\n      @Autowired\n    protected SerializableResourceBundleMessageSource messageBundle;\n      private static final Map<Locale, Properties> localizedMap = new HashMap<>();\n      @Override\n      public Properties getAll() {\n        return getBundleForUser();\n      }\n      @Override\n      public String get(String key) {\n        return getBundleForUser().getProperty(key);\n      }\n      @Override\n      public String getFormatted(String key, String... arguments) {\n        return MessageFormat.format( getBundleForUser().getProperty(key), arguments\n        );\n      }\n      @Override\n      public boolean containsKey(String key) {\n        return getAll().containsKey(key);\n      }\n      private Properties getBundleForUser(){\n        Locale locale = AuthenticationUtil.getUserPrincipal().getLocale();\n        if(!localizedMap.containsKey(locale)){\n          localizedMap.put(locale, messageBundle.getAllProperties(locale));\n        }\n        return localizedMap.get(locale);\n    }\n    }\n    ```", "```java\n      @Autowired\n      protected ResourceBundleService bundle;\n    ```", "```java\n    if(!transaction.getUser().getUsername()\n        .equals(getPrincipal().getUsername())){\n      throw new AccessDeniedException( bundle.get(I18nKeys.I18N_TRANSACTIONS_USER_FORBIDDEN)\n    );\n    }\n    ```", "```java\n    public class I18nKeys {\n      //Messages\n    public static final String I18N_ACTION_REGISTERS = \"webapp.action.feeds.action.registers\";\n    public static final String I18N_ACTION_BUYS = \"webapp.action.feeds.action.buys\";\n    public static final String I18N_ACTION_SELLS = \"webapp.action.feeds.action.sells\";\n     ...\n    }\n    ```", "```java\n    <script src=\"img/angular-translate.min.js\"></script>\n    <script src=\"img/angular-translate-loader-url.min.js\"></script>\n    ```", "```java\n    cloudStreetMarketApp.config(function ($translateProvider) {\n       \t$translateProvider.useUrlLoader('/api/properties.json');\n      $translateProvider.useStorage('UrlLanguageStorage');\n      $translateProvider.preferredLanguage('en');\n      $translateProvider.fallbackLanguage('en');\n    });\n    ```", "```java\n    cloudStreetMarketApp.controller('menuController',  function ($scope, $translate, $location, modalService, httpAuth, genericAPIFactory) {\n        $scope.init = function () {\n        ...\n      genericAPIFactory.get(\"/api/users/\"+httpAuth.getLoggedInUser()+\".json\")\n      .success(function(data, status, headers, config) {\n          $translate.use(data.language);\n          $location.search('lang', data.language);\n      });\n      }\n      ...\n      }\n    ```", "```java\n    <span translate=\"screen.stock.detail.will.remain\">Will remain</span>\n    ```", "```java\n    <td translate>screen.index.detail.table.prev.close</td>\n    ```", "```java\n    {{value.userAction.presentTense | translate}}\n    ```", "```java\npublic interface MessageSource {\n  String getMessage(String code, Object[] args, String defaultMessage, Locale locale);\n  String getMessage(String code, Object[] args, Locale locale) throws NoSuchMessageException;\n  String getMessage(MessageSourceResolvable resolvable, Locale locale) throws NoSuchMessageException;\n}\n```", "```java\n<bean id=\"messageBundle\" class=\"edu.zc.csm.core.i18n.SerializableResourceBundleMessageSource\">\n<property name=\"basenames\" value=\"classpath:/META-INF/i18n/messages,classpath:/META-INF/i18n/errors\"/>\n  <property name=\"fileEncodings\" value=\"UTF-8\" />\n  <property name=\"defaultEncoding\" value=\"UTF-8\" />\n</bean>\n```", "```java\n<resources location=\"/, classpath:/META-INF/i18n\" mapping=\"/resources/**\"/>\n```", "```java\npublic interface LocaleResolver {\n  Locale resolveLocale(HttpServletRequest request);\n  void setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale);\n}\n```", "```java\npublic static final String LOCALE_SESSION_ATTRIBUTE_NAME = SessionLocaleResolver.class.getName() + \".LOCALE\";\n```", "```java\n  <span translate>i18n.key.message</span> or  \n  <span translate=\" i18n.key.message\" >fallBack translation in English (better for Google indexes) </span>\n```", "```java\n{{data.type.type == 'BUY' ? 'screen.stock.detail.transaction.bought' : 'screen.stock.detail.transaction.sold' | translate}}\n```", "```java\n    <form name=\"updateAccount\" action=\"#\" ng-class=\"formSubmitted ? 'submitted':''\">\n      <fieldset>\n        <div class=\"clearfix span\">\n          <label for=\"id\" translate> screen.preference.field.username</label>\n            <div class=\"input\">\n    <input type=\"text\" name=\"id\" placeholder=\"Username\" ng-model=\"form.id\" ng-minlength=\"4\" ng-maxlength=\"15\" readonly required/>\n    <span class=\"text-error\" ng-show=\"formSubmitted && updateAccount.id.$error.required\" translate>   error.webapp.user.account.username.required</span>\n            </div>\n    <label for=\"email\" translate> screen.preference.field.email</label>\n          <div class=\"input\">\n    <input type=\"email\" name=\"email\" placeholder=\"Email\" ng-model=\"form.email\"/>\n    <span class=\"text-error\" ng-show=\"formSubmitted && \n      updateAccount.email.$error\" translate>error.webapp.user.account.email</span>\n          </div>\n    <label for=\"password\" translate> screen.preference.field.password</label>\n          <div class=\"input\">\n    <input type=\"password\" name=\"password\" ng-minlength=\"5\" placeholder=\"Please type again\" ng-model=\"form.password\" required/>\n    <span class=\"text-error\" ng-show=\"formSubmitted && updateAccount.password.$error.required\" translate>   error.webapp.user.account.password.type.again</span>\n    <span class=\"text-error\" ng-show=\"formSubmitted && updateAccount.password.$error.minlength\" translate>   error.webapp.user.account.password.too.short</span>\n    </div>   \n    <label for=\"fullname\" translate>   screen.preference.field.full.name</label>\n            <div class=\"input\" >\n    <input type=\"text\" name=\"fullname\" placeholder=\"Full name\" ng-model=\"form.fullname\"/>\n            </div>\n    <label for=\"currencySelector\" translate>   screen.preference.field.preferred.currency</label>\n            <div class=\"input\">\n    <select class=\"input-small\"  id=\"currencySelector\" ng-model=\"form.currency\" ng-init=\"form.currency='USD'\" ng-selected=\"USD\" ng-change=\"updateCredit()\">\n            <option>USD</option><option>GBP</option>\n            <option>EUR</option><option>INR</option>\n            <option>SGD</option><option>CNY</option>\n            </select>\n            </div>\n    <label for=\"currencySelector\" translate>   screen.preference.field.preferred.language</label>\n            <div class=\"input\">\n          <div class=\"btn-group\">\n    <button onclick=\"return false;\" class=\"btn\" tabindex=\"-1\"><span class=\"lang-sm lang-lbl\" lang=\"{{form.language | lowercase}}\"></button>\n    <button class=\"btn dropdown-toggle\" data-toggle=\"dropdown\" tabindex=\"-1\">\n            <span class=\"caret\"></span>\n            </button>\n           <ul class=\"dropdown-menu\">\n    <li><a href=\"#\" ng-click=\"setLanguage('EN')\"><span class=\"lang-sm lang-lbl-full\" lang=\"en\"></span></a></li>\n    <li><a href=\"#\" ng-click=\"setLanguage('FR')\">  <span class=\"lang-sm lang-lbl-full\" lang=\"fr\"></span></a></li>\n            </ul>\n            </div>\n            </div>\n         </div>\n      </fieldset>\n    </form>\n    ```", "```java\n      $scope.update = function () {\n          \t$scope.formSubmitted = true;\n          if(!$scope.updateAccount.$valid) {\n           return;\n      }\n    httpAuth.put('/api/users', JSON.stringify($scope.form)).success(\n        function(data, status, headers, config) {\n          httpAuth.setCredentials(\n            $scope.form.id, $scope.form.password);\n            $scope.updateSuccess = true;\n            }).error(function(data,status,headers,config) {\n              $scope.updateFail = true;\n              $scope.updateSuccess = false;\n    $scope.serverErrorMessage = errorHandler.renderOnForms(data);\n        });\n     };\n        $scope.setLanguage = function(language) {\n        $translate.use(language);\n        $scope.form.language = language;\n       }\n\n       //Variables initialization\n       $scope.formSubmitted = false;\n       $scope.serverErrorMessage =\"\";\n       $scope.updateSuccess = false;\n       $scope.updateFail = false;\n    ```", "```java\n    .submitted  input.ng-invalid{\n      border: 2px solid #b94a48;\n      background-color: #EBD3D5;!important;\n    } \n    .submitted .input .text-error {\n      font-weight:bold;\n      padding-left:10px;\n    }\n    ```", "```java\n<input type=\"text\" required /> \n```", "```java\n<input type=\"text\" ng-minlength=\"3\" /> \n```", "```java\n<input type=\"text\" ng-maxlength=\"15\" /> \n```", "```java\n<input type=\"text\" ng-pattern=\"[a-zA-Z]\" />\n```", "```java\n<input type=\"number\" name=\"quantity\" ng-model=\"form.quantity\" />\n<input type=\"email\" name=\"email\" ng-model=\" form.email\" />\n<input type=\"url\" name=\"destination\" ng-model=\" form.url\" />\n```", "```java\n  formName.inputFieldName.property\n```", "```java\nformName.inputFieldName.$pristine;\nformName.inputFieldName.$dirty;\n```", "```java\nformName.inputFieldName.$valid;\nformName.inputFieldName.$invalid;\nformName.$valid;\nformName.$invalid;\n```", "```java\nmyForm.username.$error.pattern\nmyForm.username.$error.required\nmyForm.username.$error.minlength\n```", "```java\ninput.ng-invalid {\n  border: 1px solid red;\n}\ninput.ng-valid {\n  border: 1px solid green;\n}\n```", "```java\n    <VirtualHost cloudstreetmarket.com:80>\n      ProxyPass        /portal http://localhost:8080/portal\n      ProxyPassReverse /portal http://localhost:8080/portal\n      ProxyPass        /api  \thttp://localhost:8080/api\n      ProxyPassReverse /api  \thttp://localhost:8080/api\n      RewriteEngine on\n      RewriteCond %{HTTP:UPGRADE} ^WebSocket$ [NC]\n      RewriteCond %{HTTP:CONNECTION} ^Upgrade$ [NC]\n      RewriteRule .* ws://localhost:8080%{REQUEST_URI} [P]\n      RedirectMatch ^/$ /portal/index\n    </VirtualHost>\n    ```", "```java\n    LoadModule proxy_wstunnel_module modules/mod_proxy_wstunnel.so\n    ```", "```java\n    <script src=\"img/sockjs-1.0.2.min.js\"></script>\n    <script src=\"img/stomp-2.3.3.js\"></script> \n    ```", "```java\n    cloudStreetMarketApp.controller('homeCommunityActivityController', function ($scope, $rootScope, httpAuth, modalService, communityFactory, genericAPIFactory, $filter){\n      var $this = this,\n      socket = new SockJS('/api/users/feed/add'),\n      stompClient = Stomp.over(socket);\n      pageNumber = 0;\n      $scope.communityActivities = {};\n      $scope.pageSize=10;\n      $scope.init = function () {\n        $scope.loadMore();\n        socket.onclose = function() {\n          stompClient.disconnect();\n        };\n        stompClient.connect({}, function(frame) {\n        stompClient.subscribe('/topic/actions', \tfunction(message){\n         var newActivity = $this.prepareActivity( JSON.parse(message.body)\n           );\n            $this.addAsyncActivityToFeed(newActivity);\n            $scope.$apply();\n        });\n        });\n      ...\n      }\n    ...\n    ```", "```java\n      $scope.loadMore = function () {\n        communityFactory.getUsersActivity(pageNumber, $scope.pageSize).then(function(response) {\n          var usersData = response.data,\n          status = response.status,\n          headers  = response.headers,\n          config = response.config;\n          $this.handleHeaders(headers);\n          if(usersData.content){\n            if(usersData.content.length > 0){\n              pageNumber++;\n            }\n            $this.addActivitiesToFeed(usersData.content);\n          }\n        });\n      };\n    ```", "```java\n        <span ng-if=\"userAuthenticated() && value.amountOfLikes == 0\">\n        <img ng-src=\"img/{{image}}\" class=\"like-img\" \n          ng-init=\"image='img/icon-finder/1441189591_1_like.png'\"\n          ng-mouseover=\"image='img/icon-finder/1441188631_4_like.png'\"\n          ng-mouseleave=\"image='img/icon-finder/1441189591_1_like.png'\"\n          ng-click=\"like(value.id)\"/>\n      </span>\n    ```", "```java\n      $scope.like = function (targetActionId){\n        var likeAction = {\n          id: null,\n          type: 'LIKE',\n          date: null,\n          targetActionId: targetActionId,\n          userId: httpAuth.getLoggedInUser()\n        };\n        genericAPIFactory.post(\"/api/actions/likes\", likeAction);\n      }\n    ```", "```java\n        <dependency>\n          <groupId>org.springframework</groupId>\n          <artifactId>spring-websocket</artifactId>\n          <version>${spring.version}</version>\n       </dependency>\n       <dependency>\n          <groupId>org.springframework</groupId>\n          <artifactId>spring-messaging</artifactId>\n          <version>${spring.version}</version>\n       </dependency>\n    ```", "```java\n    <async-supported>true</async-supported>\n    ```", "```java\n    @Configuration\n    @ComponentScan(\"edu.zipcloud.cloudstreetmarket.api\")\n    @EnableWebSocketMessageBroker\n    public class WebSocketConfig extends AbstractWebSocketMessageBrokerConfigurer {\n\n       @Override\n       public void registerStompEndpoints(final StompEndpointRegistry registry) {\n             registry.addEndpoint(\"/users/feed/add\")\n                .withSockJS();\n        }\n       @Override\n       public void configureMessageBroker(final MessageBrokerRegistry registry) {\n          registry.setApplicationDestinationPrefixes(\"/app\");\n           registry.enableSimpleBroker(\"/topic\");\n        }\n    }\n    ```", "```java\n    @RestController\n    public class ActivityFeedWSController extends CloudstreetApiWCI{\n        @MessageMapping(\"/users/feed/add\")\n        @SendTo(\"/topic/actions\")\n        public UserActivityDTO handle(UserActivityDTO message) throws Exception{\n            return message;\n        }\n        @RequestMapping(value=\"/users/feed/info\", method=GET)\n        public String infoWS(){\n            return \"v0\";\n        }\n    }\n    ```", "```java\n    <bean\n      class=\"org.sfw.web.socket.server.support.OriginHandshakeInterceptor\">\n        <property name=\"allowedOrigins\">\n          <list>\n          <value>http://cloudstreetmarket.com</value>\n          </list>\n        property>\n    </bean>\n    ```", "```java\n        <security:http create-session=\"stateless\" \n            entry-point-ref=\"authenticationEntryPoint\" authentication-manager-ref=\"authenticationManager\">\n        ...\n        <security:headers>\n          <security:frame-options policy=\"SAMEORIGIN\"/>\n        </security:headers>\n        ...\n        </security:http>\n    ```", "```java\n    @RestController\n    @ExposesResourceFor(Transaction.class)\n    @RequestMapping(value=ACTIONS_PATH + TRANSACTIONS_PATH, produces={\"application/xml\", \"application/json\"})\n    public class TransactionController extends CloudstreetApiWCI<Transaction> {\n      @Autowired\n      private SimpMessagingTemplate messagingTemplate;\n      @RequestMapping(method=POST)\n      @ResponseStatus(HttpStatus.CREATED)\n      public TransactionResource post(@Valid @RequestBody Transaction transaction, HttpServletResponse response, BindingResult result) {\n        ...\n       messagingTemplate.convertAndSend(\"/topic/actions\", new UserActivityDTO(transaction));\n        ...\n      }\n    }\n    ```", "```java\n     @RequestMapping(method=POST)\n    @ResponseStatus(HttpStatus.CREATED)\n    public LikeActionResource post(@RequestBody LikeAction likeAction, HttpServletResponse response) {\n       ...\n        likeAction = likeActionService.create(likeAction);\n       messagingTemplate.convertAndSend(\"/topic/actions\", new UserActivityDTO(likeAction));\n       ...\n    }\n    ```", "```java\nCONNECTED\nsession:session-4F_y4UhJTEjabe0LfFH2kg\nheart-beat:10000,10000\nserver:RabbitMQ/3.2.4\nversion:1.1\nuser-name:marcus\n```", "```java\n    var socket = new SockJS('/app/users/feed/add');\n    var stompClient = Stomp.over(socket);\n        stompClient.connect({}, function(frame) {\n  ...\n    });\n    socket.onclose = function() {\n    stompClient.disconnect();\n  };\n```", "```java\n@Configuration\n@ComponentScan(\"edu.zipcloud.cloudstreetmarket.api\")\n@EnableWebSocketMessageBroker\npublic class WebSocketConfig extends   AbstractWebSocketMessageBrokerConfigurer {\n\n  @Override\n  public void registerStompEndpoints(final StompEndpointRegistry registry) {\n        registry.addEndpoint(\"/users/feed/add\")\n        .withSockJS();\n  }\n\n  @Override\n  public void configureMessageBroker(final MessageBrokerRegistry registry) {\n        registry.setApplicationDestinationPrefixes(\"/app\");\n        registry.enableSimpleBroker(\"/topic\");\n  }\n}\n```", "```java\nvar socket = new SockJS('/api/users/feed/add');\n```", "```java\nsimpMessagingTemplate.convertAndSend(String destination, Object message);\n```", "```java\n@RestController\npublic class ActivityFeedWSController extends CloudstreetApiWCI{\n\n  @MessageMapping(\"/users/feed/add\")\n  @SendTo(\"/topic/actions\")\n  public UserActivityDTO handle(UserActivityDTO payload) throws Exception{\n        return payload;\n }\n}\n```", "```java\n    rabbitmq-plugins enable rabbitmq_stomp\n    ```", "```java\n    <dependency>\n      <groupId>org.springframework.amqp</groupId>\n      <artifactId>spring-rabbit</artifactId>\n      <version>1.4.0.RELEASE</version>\n    </dependency>\n    <dependency>\n      <groupId>io.projectreactor</groupId>\n      <artifactId>reactor-core</artifactId>\n      <version>2.0.5.RELEASE</version>\n    </dependency>\n    <dependency>\n      <groupId>io.projectreactor</groupId>\n      <artifactId>reactor-net</artifactId>\n      <version>2.0.5.RELEASE</version>\n    </dependency>\n    <dependency>\n      <groupId>io.projectreactor.spring</groupId>\n      <artifactId>reactor-spring-context</artifactId>\n      <version>2.0.5.RELEASE</version>\n    </dependency>\n    <dependency>\n      <groupId>io.netty</groupId>\n      <artifactId>netty-all</artifactId>\n      <version>4.0.31.Final</version>\n    </dependency>\n    ```", "```java\n    <beans \n\n       ...\n\n       xsi:schemaLocation=\"http://www.sfw.org/schema/beans\n       ...\n       http://www.sfw.org/schema/rabbit\n      http://www.sfw.org/schema/rabbit/spring-rabbit-1.5.xsd\">\n        ...\n      <rabbit:connection-factory id=\"connectionFactory\" host=\"localhost\" username=\"guest\" password=\"guest\" />\n      <rabbit:admin connection-factory=\"connectionFactory\" />\n      <rabbit:template id=\"messagingTemplate\" connection-factory=\"connectionFactory\"/>\n    </beans>\n    ```", "```java\n    <beans \n\n        ...\n        xmlns:task=http://www.sfw.org/schema/task\n        http://www.sfw.org/schema/task/spring-task-4.0.xsd\">\n        ...\n        <task:annotation-driven scheduler=\"wsScheduler\"/>\n        <task:scheduler id=\"wsScheduler\" pool-size=\"1000\"/>\n        <task:executor id=\"taskExecutor\"/>\n    </beans>\n    ```", "```java\n    @EnableRabbit\n    @EnableAsync\n    public class AnnotationConfig {\n    \t...\n    }\n    ```", "```java\n    @Configuration\n    @ComponentScan(\"edu.zipcloud.cloudstreetmarket.api\")\n    @EnableWebSocketMessageBroker\n    @EnableScheduling\n    @EnableAsync\n    public class WebSocketConfig extends AbstractWebSocketMessageBrokerConfigurer {\n    ...\n        @Override\n        public void configureMessageBroker(final MessageBrokerRegistry registry) {\n         registry.setApplicationDestinationPrefixes( WEBAPP_PREFIX_PATH);\n         registry.enableStompBrokerRelay(TOPIC_ROOT_PATH);\n        }\n    }\n    ```", "```java\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\n@RestController\npublic class TransactionController extends CloudstreetApiWCI<Transaction> {\n  @Autowired\n  private RabbitTemplate messagingTemplate;\n\n  @RequestMapping(method=POST)\n  @ResponseStatus(HttpStatus.CREATED)\n  public TransactionResource post(@Valid @RequestBody Transaction transaction, HttpServletResponse response, BindingResult result) {\n   ...\n   messagingTemplate.convertAndSend(\"AMQP_USER_ACTIVITY\", new UserActivityDTO(transaction));\n   ...\n   return resource;\n  }\n}\n```", "```java\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\n\n@RestController\npublic class LikeActionController extends CloudstreetApiWCI<LikeAction> {\n  @Autowired\n  private RabbitTemplate messagingTemplate;\n  @RequestMapping(method=POST)\n  @ResponseStatus(HttpStatus.CREATED)\n  public LikeActionResource post(@RequestBody LikeAction likeAction, HttpServletResponse response) {\n  ...\n   messagingTemplate.convertAndSend(\"AMQP_USER_ACTIVITY\", new UserActivityDTO(likeAction));\n   ...\n   return resource;\n  }\n}\n```", "```java\n    <rabbit:connection-factory id=\"rabbitConnectionFactory\" username=\"guest\" host=\"localhost\" password=\"guest\"/>\n    <bean id=\"rabbitListenerContainerFactory\" class=\"org.sfw.amqp.rabbit.config.SimpleRabbitListenerContainerFactory\">\n        <property name=\"connectionFactory\" ref=\"rabbitConnectionFactory\"/>\n        <property name=\"concurrentConsumers\" value=\"3\"/>\n        <property name=\"maxConcurrentConsumers\" value=\"10\"/>\n        <property name=\"prefetchCount\" value=\"12\"/>\n    </bean>\n    ```", "```java\n    @Component\n    public class CSMReceiver {\n      @Autowired\n      private SimpMessagingTemplate simpMessagingTemplate;\n\n      @RabbitListener(queues = \"AMQP_USER_ACTIVITY_QUEUE\")\n      public void handleMessage(UserActivityDTO payload) {\n      simpMessagingTemplate.convertAndSend(\"/topic/actions\", payload);\n      }\n    } \n    ```", "```java\nvar timer = $timeout( function(){ \n  window.socket = new SockJS('/ws/channels/users/broadcast');\n  window.stompClient = Stomp.over(window.socket);\n    window.socket.onclose = function() {\n        window.stompClient.disconnect();\n      };\n  window.stompClient.connect({}, function(frame) {\n    window.stompClient.subscribe('/topic/actions', function(message){\n        var newActivity = $this.prepareActivity(JSON.parse(message.body));\n        $this.addAsyncActivityToFeed(newActivity);\n        $scope.$apply();\n      });\n    });\n     $scope.$on(\n      \"$destroy\",\n        function( event ) {\n          $timeout.cancel( timer );\n          window.stompClient.disconnect();\n          }\n      );\n                }, 5000);\n```", "```java\n<VirtualHost cloudstreetmarket.com:80>\n  ProxyPass        /portal http://localhost:8080/portal\n  ProxyPassReverse /portal http://localhost:8080/portal\n  ProxyPass        /api  \thttp://localhost:8080/api\n  ProxyPassReverse /api  \thttp://localhost:8080/api\n  ProxyPass        /ws  \thttp://localhost:8080/ws\n  ProxyPassReverse /ws  \thttp://localhost:8080/ws\n  RewriteEngine on\n  RewriteCond %{HTTP:UPGRADE} ^WebSocket$ [NC]\n  RewriteCond %{HTTP:CONNECTION} ^Upgrade$ [NC]\n  RewriteRule .* ws://localhost:8080%{REQUEST_URI} [P]\n  RedirectMatch ^/$ /portal/index\n</VirtualHost>\n```", "```java\n    $ src/redis-server\n    ```", "```java\n    $ redis-server.exe redis.windows.conf\n    ```", "```java\n    <Valve asyncSupported=\"true\" className=\"edu.zipcloud.catalina.session.RedisSessionHandlerValve\"/>\n    <Manager className=\"edu.zipcloud.catalina.session.RedisSessionManager\"\n          host=\"localhost\" \n          port=\"6379\" \n          database=\"0\" \n          maxInactiveInterval=\"60\"/>\n    ```", "```java\n\n    mysql> CREATE DATABASE csm; \n\n    ```", "```java\n\n    mysql> USE csm;\n\n    ```", "```java\n\n    mysql> csm < <home-directory>\\cloudstreetmarket-parent\\cloudstreetmarket-core\\src\\main\\resources\\META-INF\\db\\currency_exchange.sql;\n    mysql> csm < <home-directory>\\cloudstreetmarket-parent\\cloudstreetmarket-core\\src\\main\\resources\\META-INF\\db\\init.sql;\n    mysql> csm < <home-directory>\\cloudstreetmarket-parent\\cloudstreetmarket-core\\src\\main\\resources\\META-INF\\db\\stocks.sql;\n    mysql> csm < <home-directory>\\cloudstreetmarket-parent\\cloudstreetmarket-core\\src\\main\\resources\\META-INF\\db\\indices.sql;\n\n    ```", "```java\n    <filter>\n      <filter-name>springSessionRepositoryFilter</filter-name>\n      <filter-class>\n      org.springframework.web.filter.DelegatingFilterProxy\n      </filter-class>\n      <async-supported>true</async-supported>\n    </filter>\n    <filter-mapping>\n      <filter-name>springSessionRepositoryFilter</filter-name>\n      <url-pattern>/*</url-pattern>\n    </filter-mapping>\n    ```", "```java\n    <!-- Spring Session -->\n    <dependency>\n      <groupId>org.springframework.session</groupId>\n      <artifactId>spring-session</artifactId>\n      <version>1.0.2.RELEASE</version>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.commons</groupId>\n      <artifactId>commons-pool2</artifactId>\n      <version>2.2</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.session</groupId>\n      <artifactId>spring-session-data-redis</artifactId>\n      <version>1.0.2.RELEASE</version>\n    </dependency>\n    <!-- Spring Security -->\n    <dependency>\n      <groupId>org.springframework.security</groupId>\n      <artifactId>spring-security-messaging</artifactId>\n      <version>4.0.2.RELEASE</version>\n    </dependency>\n      <dependency>\n        <groupId>commons-io</groupId>\n        <artifactId>commons-io</artifactId>\n        <version>2.4</version>\n      </dependency>\n    ```", "```java\n    <security:http create-session=\"ifRequired\" \n      authentication-manager-ref=\"authenticationManager\" entry-point-ref=\"authenticationEntryPoint\">\n     <security:custom-filter ref=\"basicAuthenticationFilter\" after=\"BASIC_AUTH_FILTER\" />\n       <security:csrf disabled=\"true\"/>\n     <security:intercept-url pattern=\"/oauth2/**\" access=\"permitAll\"/>\n     <security:intercept-url pattern=\"/basic.html\" access=\"hasRole('ROLE_BASIC')\"/>\n       <security:intercept-url pattern=\"/**\" access=\"permitAll\"/>\n     <security:session-management session-authentication-strategy-ref=\"sas\"/>\n    </security:http>\n    <bean id=\"sas\" class=\"org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy\" />\n    ```", "```java\n    <bean class=\"org.springframework.data.redis.connection.jedis.JedisConnectionFactory\" p:port=\"6379\"/>\n    <bean class=\"org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration\"/>\n    <bean class=\"edu.zipcloud.cloudstreetmarket.core.util.RootPath CookieHttpSessionStrategy\"/>\n    ```", "```java\n    <session-config>\n        <session-timeout>1</session-timeout>\n        <cookie-config>\n            <max-age>0</max-age>\n        </cookie-config>\n    </session-config>\n    ```", "```java\n    <bean id=\"securityContextPersistenceFilter\" class=\"org.springframework.security.web.context.SecurityContextPersistenceFilter\"/>\n    <security:http create-session=\"never\" \n    authentication-manager-ref=\"authenticationManager\" entry-point-ref=\"authenticationEntryPoint\">\n      <security:custom-filter ref=\"securityContextPersistenceFilter\" before=\"FORM_LOGIN_FILTER\" />\n      <security:csrf disabled=\"true\"/>\n      <security:intercept-url pattern=\"/channels/private/**\" access=\"hasRole('OAUTH2')\"/>\n      <security:headers>\n          <security:frame-options policy=\"SAMEORIGIN\" />\n      </security:headers>\n    </security:http>\n    <security:global-method-security secured-annotations=\"enabled\" pre-post-annotations=\"enabled\" authentication-manager-ref=\"authenticationManager\"/>\n    ```", "```java\n    @EnableScheduling\n    @EnableAsync\n    @EnableRabbit\n    @Configuration\n    @EnableWebSocketMessageBroker\n    public class WebSocketConfig extends   AbstractSessionWebSocketMessageBrokerConfigurer<Expiring Session> {\n      @Override\n      protected void configureStompEndpoints(StompEndpointRegistry registry) {\n              registry.addEndpoint(\"/channels/users/broadcast\")\n              .setAllowedOrigins(protocol.concat(realmName))\n              .withSockJS()\n              .setClientLibraryUrl( Constants.SOCKJS_CLIENT_LIB);\n\n            registry.addEndpoint(\"/channels/private\")\n              .setAllowedOrigins(protocol.concat(realmName))\n              .withSockJS()\n              .setClientLibraryUrl( Constants.SOCKJS_CLIENT_LIB);\n      }\n\n      @Override\n      public void configureMessageBroker(final MessageBrokerRegistry registry) {\n            registry.enableStompBrokerRelay(\"/topic\", \"/queue\");\n            registry.setApplicationDestinationPrefixes(\"/app\");\n      }\n\n      @Override\n      public void configureClientInboundChannel(ChannelRegistration registration) {\n            registration.taskExecutor() corePoolSize(Runtime.getRuntime().availableProcessors() *4);\n      }\n\n      @Override\n      //Increase number of threads for slow clients\n      public void configureClientOutboundChannel( \n         ChannelRegistration registration) {\n            registration.taskExecutor().corePoolSize( Runtime.getRuntime().availableProcessors() *4);\n      }\n      @Override\n      public void configureWebSocketTransport(  \n        WebSocketTransportRegistration registration) {\n            registration.setSendTimeLimit(15*1000) \n              .setSendBufferSizeLimit(512*1024); \n      }\n    }\n    ```", "```java\n    @Configuration\n    public class WebSocketSecurityConfig extends AbstractSecurityWebSocketMessageBrokerConfigurer {\n        @Override\n        protected void configureInbound( MessageSecurityMetadataSourceRegistry messages) {\n        messages.simpMessageDestMatchers(\"/topic/actions\", \"/queue/*\", \"/app/queue/*\").permitAll();\n        }\n        @Override\n        protected boolean sameOriginDisabled() {\n        return true;\n        }\n    }\n    ```", "```java\n    @RestController\n    public class ActivityFeedWSController extends CloudstreetWebSocketWCI{\n\n        @MessageMapping(\"/channels/users/broadcast\")\n        @SendTo(\"/topic/actions\")\n        public UserActivityDTO handle(UserActivityDTO message) throws Exception {\n            return message;\n        }\n\n        @RequestMapping(value=\"/channels/users/broadcast/info\", produces={\"application/json\"})\n        @ResponseBody\n        public String info(HttpServletRequest request) {\n          return \"v0\";\n        }\n    }\n    ```", "```java\n    @RestController\n    public class StockProductWSController extends CloudstreetWebSocketWCI<StockProduct>{\n\n      @Autowired\n      private StockProductServiceOffline stockProductService;\n\n      @MessageMapping(\"/queue/CSM_QUEUE_{queueId}\")\n      @SendTo(\"/queue/CSM_QUEUE_{queueId}\")\n      @PreAuthorize(\"hasRole('OAUTH2')\")\n      public List<StockProduct> sendContent(@Payload List<String> tickers, @DestinationVariable(\"queueId\") String queueId) throws Exception {\n          String username = extractUserFromQueueId(queueId);\n          if(!getPrincipal().getUsername().equals(username)){\n            throw new IllegalAccessError(\"/queue/CSM_QUEUE_\"+queueId);\n          }\n          return stockProductService.gather(username,      tickers.toArray(new String[tickers.size()]));\n      }\n\n      @RequestMapping(value=PRIVATE_STOCKS_ENDPOINT+\"/info\", produces={\"application/xml\", \"application/json\"})\n      @ResponseBody\n      @PreAuthorize(\"hasRole('OAUTH2')\")\n      public String info(HttpServletRequest request) {\n          return \"v0\";\n      }\n\n      private static String extractUserFromQueueId(String token){\n            Pattern p = Pattern.compile(\"_[0-9]+$\");\n            Matcher m = p.matcher(token);\n            String sessionNumber = m.find() ? m.group() : \"\";\n            return token.replaceAll(sessionNumber, \"\");\n    \t}\n    }\n    ```", "```java\n    if(httpAuth.isUserAuthenticated()){\n      window.socket = new SockJS('/ws/channels/private');\n      window.stompClient = Stomp.over($scope.socket);\n      var queueId = httpAuth.generatedQueueId();\n\n      window.socket.onclose = function() {\n        window.stompClient.disconnect();\n      };\n      window.stompClient.connect({}, function(frame) {\n        var intervalPromise = $interval(function() {\n          window.stompClient.send( '/app/queue/CSM_QUEUE_'+queueId, {}, JSON.stringify($scope.tickers)); \n        }, 5000);\n\n        $scope.$on(\n            \"$destroy\",\n            function( event ) {\n              $interval.cancel(intervalPromise);\n              window.stompClient.disconnect();\n            }\n        );\n\n      window.stompClient.subscribe('/queue/CSM_QUEUE_'+queueId, function(message){\n        var freshStocks = JSON.parse(message.body);\n        $scope.stocks.forEach(function(existingStock) {\n          //Here we update the currently displayed stocks\n        });\n\n        $scope.$apply();\n        dynStockSearchService.fadeOutAnim(); //CSS animation   \n          //(green/red backgrounds\u2026)\n         });\n        });\n    };\n    ```", "```java\n\n$ src/redis-cli\n\n```", "```java\n\n$ redis-cli.exe\n\n```", "```java\n127.0.0.1:6379> keys *\n1) \"spring:session:sessions:4fc39ce3-63b3-4e17-b1c4-5e1ed96fb021\"\n2) \"spring:session:expirations:1418772300000\"\n```", "```java\nredis 127.0.0.1:6379> FLUSHALL\nOK\n```", "```java\n<bean id=\"securityContextPersistenceFilter\" class=\"org.sfw.security.web.context.SecurityContextPersistence Filter\">\n    <constructor-arg name=\"repo\" ref=\"httpSessionSecurityContextRepo\" />\n</bean>\n\n<bean id=\"httpSessionSecurityContextRepo\" class='org.sfw.security.web.context.HttpSessionSecurityContext Repository'>operty name='allowSessionCreation' value='false' />\n</bean> \n```", "```java\n<global-method-security secured-annotations=\"enabled\" pre-post-annotations=\"enabled\" />\n```", "```java\n    <plugin>\n      <groupId>com.googlecode.flyway</groupId>\n      <artifactId>flyway-maven-plugin</artifactId>\n      <version>2.3.1</version>\n      <inherited>false</inherited>\n      <executions>\n          <execution>\n          <id>package</id>\n          <goals>\n          <goal>migrate</goal>\n          </goals>\n          </execution>\n      </executions>\n      <configuration>\n        <driver>${database.driver}</driver>\n        <url>${database.url}</url>\n        <serverId>${database.serverId}</serverId>\n        <schemas>\n          <schema>${database.name}</schema>\n          </schemas>\n        <locations>\n          <location>\n            filesystem:${user.home}/app/db/migration\n            </location>\n          </locations>\n          <initOnMigrate>true</initOnMigrate>\n            <sqlMigrationPrefix>Migration-</sqlMigrationPrefix>\n            <placeholderPrefix>#[</placeholderPrefix>\n            <placeholderSuffix>]</placeholderSuffix>\n            placeholderReplacement>true</placeholderReplacement>\n            <placeholders>\n            <db.name>${database.name}</db.name>\n            </placeholders>\n      </configuration>\n      <dependencies>\n            <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>5.1.6</version>\n            </dependency>\n      </dependencies>\n      </plugin>\n    ```", "```java\n      <database.name>csm</database.name>\n      <database.driver>com.mysql.jdbc.Driver</database.driver>\n      <database.url>jdbc:mysql://localhost</database.url>\n      <database.serverId>csm_db</database.serverId>\n    ```", "```java\n      <servers>\n          <server>  \n          <id>csm_db</id>\n          <username>csm_tech</username>\n          <password>csmDB1$55</password>\n          </server>\n      </servers>\n    ```", "```java\n    <profiles>\n      <profile>\n      <id>flyway-integration</id>\n      <properties>\n      <database.name>csm_integration</database.name>\n      <database.driver>com.mysql.jdbc.Driver</database.driver>\n      <database.url>jdbc:mysql://localhost</database.url>\n      <database.serverId>csm_db</database.serverId>\n      </properties>\n      </profile>\n    </profiles>\n    ```", "```java\n<plugin>\n    <groupId>com.googlecode.flyway</groupId>\n    <artifactId>flyway-maven-plugin</artifactId>\n    <version>2.3.1</version>\n    <inherited>false</inherited>\n    <executions>\n      <execution>\n        <id>package</id>\n        <goals>\n          <goal>migrate</goal>\n        </goals>\n      </execution>\n    </executions>\n    <configuration>\n      <driver>${database.driver}</driver>\n    <url>${database.url}</url>\n    <serverId>${database.serverId}</serverId>\n    <schemas>\n       <schema>${database.name}</schema>\n    </schemas>\n    <locations>\n      <location>\n          filesystem:${user.home}/app/db/migration\n        </location>\n        </locations>\n    <initOnMigrate>true</initOnMigrate>\n      <sqlMigrationPrefix>Migration-</sqlMigrationPrefix>\n      <placeholderPrefix>#[</placeholderPrefix>\n      <placeholderSuffix>]</placeholderSuffix>\n      <placeholderReplacement>true</placeholderReplacement>\n      <placeholders>\n      <db.name>${database.name}</db.name>\n     </placeholders>\n  </configuration>\n</plugin>\n```", "```java\n        <dependency>\n             <groupId>junit</groupId>\n             <artifactId>junit</artifactId>\n             <version>4.9</version>\n        </dependency>\n    ```", "```java\n    import static org.junit.Assert.*;\n    import org.junit.Test;\n    import edu.zipcloud.cloudstreetmarket.core.entities.*;\n\n    public class IdentifiableToIdConverterTest {\n\n      private IdentifiableToIdConverter converter;\n\n      @Test\n      public void canConvertChartStock(){\n        converter = new IdentifiableToIdConverter(ChartStock.class);\n        assertTrue(converter.canConvert(ChartStock.class));\n        }\n\n      @Test\n      public void canConvertAction(){\n        converter = new IdentifiableToIdConverter(Action.class);\n        assertTrue(converter.canConvert(Action.class));\n      }\n    }\n    ```", "```java\n    @RunWith(MockitoJUnitRunner.class)\n    public class YahooQuoteToCurrencyExchangeConverterTest {\n      @InjectMocks\n      private YahooQuoteToCurrencyExchangeConverter converter;\n      @Mock\n      private CurrencyExchangeRepository currencyExchangeRepository;\n      @Test\n      public void transferCriticalData(){\n          when(currencyExchangeRepository.findOne(\n          any(String.class))\n          )\n          .thenReturn(new CurrencyExchange(\"WHATEVER_ID\"\"));\n        CurrencyExchange currencyExchange = converter.convert(buildYahooQuoteInstance());\n        assertEquals(\"WHATEVER_ID\"\",currencyExchange.getId());\n        assertEquals(\"USDGBP=X\"\", currencyExchange.getName());\n        assertEquals(BigDecimal.valueOf(10), \n          currencyExchange.getBid());\n        ...\n        assertEquals(BigDecimal.valueOf(17), \n        currencyExchange.getOpen());\t\n        verify(currencyExchangeRepository, times(1))\n          .findOne(any(String.class));\n      }\n      ...\n    }\n    ```", "```java\n        <dependency>\n          <groupId>org.mockito</groupId>\n          <artifactId>mockito-all</artifactId>\n          <version>1.9.5<version>\n        </dependency>\n    ```", "```java\n    @Test\n    public void registerUser_generatesPasswordAndEncodesIt() {\n      when(communityServiceHelper.generatePassword())\n        .thenReturn(\"newPassword\");\n      when(passwordEncoder.encode(\"newPassword\"))\n        .thenReturn(\"newPasswordEncoded\");\n      ArgumentCaptor<User>userArgumentCaptor = \n        ArgumentCaptor.forClass(User.class);\n      userA.setPassword(null);\n      communityServiceImpl.registerUser(userA);\n      verify(userRepository, times(1))\n        .save(userArgumentCaptor.capture());\n      verify(passwordEncoder, times(1))\n        .encode(\"newPassword\");\n      String capturedGeneratedPassword = \n        userArgumentCaptor.getValue().getPassword();\n      assertEquals(\"newPasswordEncoded\", capturedGeneratedPassword);\n    }\n    ```", "```java\n      <dependency>\n        <groupId>com.jayway.restassured</groupId>\n        <artifactId>rest-assured</artifactId>\n        <version>2.7.0</version>\n      </dependency>\n    ```", "```java\n    public class UserControllerIT extends AbstractCommonTestUser{\n      private static User userA;\n      @Before\n      public void before(){\n        userA = new User.Builder()\n          .withId(generateUserName())\n          .withEmail(generateEmail())\n          .withCurrency(SupportedCurrency.USD)\n          .withPassword(generatePassword())\n          .withLanguage(SupportedLanguage.EN)\n          .withProfileImg(DEFAULT_IMG_PATH)\n          .build();\n      }\n      @Test\n      public void createUserBasicAuth(){\n        Response responseCreateUser = given()\n          .contentType(\"application/json;charset=UTF-8\")\n          .accept(\"application/json\"\")\n          .body(userA)\n          .expect\n          .when()\n          .post(getHost() + CONTEXT_PATH + \"/users\");\n      String location = \n          responseCreateUser.getHeader(\"Location\");\n      assertNotNull(location);\n      Response responseGetUser = given()\n          .expect().log().ifError()\n          .statusCode(HttpStatus.SC_OK)\n          .when()\n          .get(getHost() + CONTEXT_PATH + location + \n          \t\tJSON_SUFFIX);\n        UserDTO userADTO = \n          deserialize(responseGetUser.getBody().asString());\n        assertEquals(userA.getId(), userADTO.getId());\n        assertEquals(userA.getLanguage().name(), \n        userADTO.getLanguage());\n        assertEquals(HIDDEN_FIELD, userADTO.getEmail());\n        assertEquals(HIDDEN_FIELD, userADTO.getPassword());\n        assertNull(userA.getBalance());\n      }\n    }\n    ```", "```java\n    <profiles>\n      <profile>\n      <id>integration</id>\n      <build>\n      <plugins>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-failsafe-plugin</artifactId>\n          <version>2.12.4</version>\n          <configuration>\n          <includes>\n            <include>**/*IT.java</include>\n          </includes>\n          <excludes>\n            <exclude>**/*Test.java</exclude>\n          </excludes>\n       </configuration>\n       <executions>\n          <execution>\n            <id>integration-test</id>\n            <goals>\n              <goal>integration-test</goal>\n            </goals>\n          </execution>\n          <execution>\n            <id>verify</id>\n            <goals><goal>verify</goal></goals>\n          </execution>\n       </executions>\n     </plugin>\n     <plugin>\n      <groupId>org.codehaus.cargo</groupId>\n      <artifactId>cargo-maven2-plugin</artifactId>\n      <version>1.4.16</version>\n          <configuration>\n          <wait>false</wait>\n          <container>\n          <containerId>tomcat8x</containerId>\n                <home>${CATALINA_HOME}</home>\n          <logLevel>warn</logLevel>\n          </container>\n          <deployer/>\n          <type>existing</type>\n          <deployables>\n          <deployable>\n          <groupId>edu.zc.csm</groupId>\n          <artifactId>cloudstreetmarket-api</artifactId>\n          <type>war</type>\n            <properties>\n              <context>api</context>\n            </properties>\n          </deployable>\n          </deployables>\n        </configuration>\n        <executions>\n          <execution>\n            <id>start-container</id>\n            <phase>pre-integration-test</phase>\n            <goals>\n             <goal>start</goal>\n             <goal>deploy</goal>\n          </goals>\n        </execution>\n        <execution>\n          <id>stop-container</id>\n          <phase>post-integration-test</phase>\n          <goals>\n             <goal>undeploy</goal>\n             <goal>stop</goal>\n          </goals>\n             </execution>\n          </executions>\n        </plugin>\n      </plugins>\n      </build>\n      </profile>\n    </profiles>\n    ```", "```java\n\n         mvn clean verify -P integration\n\n        ```", "```java\n\n**/Test*.java\n**/*Test.java\n**/*TestCase.java\n\n```", "```java\n\n**/IT*.java\n**/*IT.java\n**/*ITCase.java\n\n```", "```java\n\n${basedir}/target/surefire-reports\n\n```", "```java\n\n${basedir}/target/failsafe-reports\n\n```", "```java\n\ntest\n\n```", "```java\n\npre-integration-test\nintegration-test\npost-integration-test\nverify\n\n```", "```java\n<executions>\n  <execution>\n    <id>start-container</id>\n    <phase>pre-integration-test</phase>\n    <goals>\n      <goal>start</goal>\n    <goal>deploy</goal>\n      </goals>\n  </execution>\n  <execution>\n        <id>stop-container</id>\n    <phase>post-integration-test</phase>\n      <goals>\n      <goal>undeploy</goal>\n      <goal>stop</goal>\n        </goals>\n  </execution>\n</executions>\n```", "```java\n  @Test\n  public void createUserBasicAuthAjax(){\n    Response response = given()\n    .header(\"X-Requested-With\", \"XMLHttpRequest\")\n    .contentType(\"application/json;charset=UTF-8\")\n    .accept(\"application/json\\\")\n    .body(userA)\n    .when()\n    .post(getHost() + CONTEXT_PATH + \"/users\");\n    assertNotNull(response.getHeader(\"Location\"));\n  }\n```", "```java\n    <context:property-placeholderlocation=\"\n      file:${user.home}/app/cloudstreetmarket.properties\"\"/>\n    <bean id=\"dataSource\" \t\t\n      class=\"org.apache.commons.dbcp2.BasicDataSource\" \t\n      destroy-method=\"close\"\">\n      <property name=\"driverClassName\"\">\n         <value>com.mysql.jdbc.Driver</value>\n      </property>\n      <property name=\"url\"\">\n        <value>${db.connection.url}</value>\n      </property>\n    <property name=\"username\"\">\n      <value>${db.user.name}</value>\n    </property>\n    <property name=\"password\"\">\n      <value>${db.user.passsword}</value>\n    </property>\n    <property name=\"defaultReadOnly\">\n      <value>false</value>\n    </property>\n    </bean>\n    ```", "```java\n        @Autowired\n        private JdbcTemplate jdbcTemplate;\n        @Autowired\n        public void setDataSource(DataSource dataSource) {\n        \tthis.jdbcTemplate = new JdbcTemplate(dataSource);\n        }\n    ```", "```java\n        private void deleteConnection(String spi, String id) {\n        \tthis.jdbcTemplate.update(\"delete from userconnection where providerUserId = ? and userId = \"?\", new Object[] {spi, id});\n       }\n    ```", "```java\n            @RunWith(SpringJUnit4ClassRunner.class)\n            @ContextConfiguration(\"classpath:spring-context-api-test.xml\"\")\n            public class UserControllerIT extends AbstractCommonTestUser{\n            private static User userA;\n            private static User userB;\n            ...\n            }\n        ```", "```java\njdbcTemplate.update(\"delete from userconnection where \n  providerUserId = ? and userId = \"?\", new Object[] {spi, id});\n```", "```java\njdbcTemplate.update(final PreparedStatementCreator psc, final\n  KeyHolder generatedKeyHolder);\n```", "```java\nKeyHolder keyHolder = new GeneratedKeyHolder();\njdbcTemplate.update(\n  new PreparedStatementCreator() {\n    public PreparedStatement createPreparedStatement(Connection \n    connection) throws SQLException {\n    PreparedStatement ps = connection.prepareStatement(\"insert into userconnection (accessToken, ... , secret, userId ) values (?, ?, ... , ?, ?)\", new String[] {\"id\"\"});\n    ps.setString(1, generateGuid());\n    ps.setDate(2, new Date(System.currentTimeMillis()));\n    ...\n    return ps;\n    }\n  }, keyHolder);\n  Long Id = keyHolder.getKey().longValue();\n```", "```java\n        <!-- Logging dependencies -->\n        <dependency>\n          <groupId>org.apache.logging.log4j</groupId>\n          <artifactId>log4j-api</artifactId>\n          <version>2.4.1</version>\n        </dependency>\n        <dependency>\n          <groupId>org.apache.logging.log4j</groupId>\n          <artifactId>log4j-core</artifactId>\n          <version>2.4.1</version>\n        </dependency>\n        <dependency>\n          <groupId>org.apache.logging.log4j</groupId>\n          <artifactId>log4j-slf4j-impl</artifactId>\n          <version>2.4.1</version>\n        </dependency>\n        <dependency>\n          <groupId>org.apache.logging.log4j</groupId>\n          <artifactId>log4j-1.2-api</artifactId>\n          <version>2.4.1</version>\n        </dependency>\n        <dependency>\n          <groupId>org.apache.logging.log4j</groupId>\n          <artifactId>log4j-jcl</artifactId>\n          <version>2.4.1</version>\n          </dependency>\n        <dependency>\n          <groupId>org.apache.logging.log4j</groupId>\n          <artifactId>log4j-web</artifactId>\n            <scope>runtime</scope>\n          <version>2.4.1</version>\n        </dependency>\n        <dependency>\n          <groupId>org.slf4j</groupId>\n          artifactId>slf4j-api</artifactId>\n          <version>${slf4j.version}</version>\n        </dependency>\n    ```", "```java\n    -Dlog4j.configurationFile=<home-directory>\\app\\log4j2.xml.\n    ```", "```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <Configuration status=\"OFF\" monitorInterval=\"30\">\n    <Appenders\n      <Console name=\"Console\" target=\"SYSTEM_OUT\">\n        <PatternLayout pattern\"=\"%d{HH:mm:ss.SSS} %-5level %logger{36} - %msg%n\"\"/>\n      </Console>\n      <RollingFile name=\"FileAppender\" fileName=\"${sys:user.home}/app/logs/cloudstreetmarket.log\"\n            filePattern=\"${sys:user.home}/app/logs/${date:yyyy-MM}/cloudstreetmarket-%d{MM-dd-yyyy}-%i.log.gz\">\n          <PatternLayout>\n            <Pattern>%d %p %C{1} %m%n</Pattern>\n          </PatternLayout>\n          <Policies>\n            <TimeBasedTriggeringPolicy />\n            <SizeBasedTriggeringPolicy size=\"250 MB\"/>\n          </Policies>\n      </RollingFile>\n    </Appenders>\n    <Loggers>\n      <Logger name=\"edu.zipcloud\" level=\"INFO\"/>\n      <Logger name=\"org.apache.catalina\" level=\"ERROR\"/>\n      <Logger name=\"org.springframework.amqp\" level=\"ERROR\"/>\n      <Logger name=\"org.springframework.security\" level=\"ERROR\"/>\n\n      <Root level=\"WARN\">\n        <AppenderRef ref=\"Console\"/>\n      <AppenderRef ref=\"FileAppender\"/>\n      </Root>\n    </Loggers>\n    </Configuration>\n    ```", "```java\n        import org.apache.logging.log4j.LogManager;\n    import org.apache.logging.log4j.Logger;\n\n    @Transactional\n    public class SignInAdapterImpl implements SignInAdapter{\n      private static final Logger logger = \n        LogManager.getLogger(SignInAdapterImpl.class);\n      ...\n      public String signIn(String userId, Connection<?>connection, NativeWebRequest request) {\n      ...\n      communityService.signInUser(user);\n      logger.info(\"User {} logs-in with OAUth2 account\", user.getId());\n      return view;\n      }\n    }\n    ```", "```java\n    @RestController\n    @RequestMapping(value=USERS_PATH, produces={\"application/xml\", \"application/json\"})\n    public class UsersController extends CloudstreetApiWCI{\n      private static final Logger logger = LogManager.getLogger(UsersController.class);\n      ...\n      @RequestMapping(method=POST)\n      @ResponseStatus(HttpStatus.CREATED)\n      public void create(@Valid @RequestBody User user, \n        @RequestHeader(value=\"Spi\", required=false) String guid, \n      @RequestHeader(value=\"OAuthProvider\", required=false) String provider, HttpServletResponse response) throws IllegalAccessException{\n          if(isNotBlank(guid)){\n          ...\n          communityService.save(user);\n          logger.info(\"User {} registers an OAuth2 account: \"{}\", user.getId(), guid);\n          }\n          else{\n        user = communityService.createUser(user, ROLE_BASIC);\n        ...\n        logger.info(\"User registers a BASIC account\"\", user.getId());\n          }\n        ...\n      }\n      ...\n    }\n    ```", "```java\n<dependency>\n  <groupId>org.apache.logging.log4j</groupId>\n  <artifactId>log4j-api</artifactId>\n  <version>2.4.1</version>\n</dependency>\n<dependency>\n  <groupId>org.apache.logging.log4j</groupId>\n  <artifactId>log4j-core</artifactId>\n  <version>2.4.1</version>\n</dependency>\n```", "```java\n<dependency>\n  <groupId>org.apache.logging.log4j</groupId>\n  <artifactId>log4j-1.2-api</artifactId>\n  <version>2.4.1</version>\n</dependency>\n```", "```java\n<dependency>\n  <groupId>org.apache.logging.log4j</groupId>\n  <artifactId>log4j-jcl</artifactId>\n  <version>2.4.1</version>\n</dependency>\n```", "```java\n<dependency>\n  <groupId>org.apache.logging.log4j</groupId>\n  <artifactId>log4j-slf4j-impl</artifactId>\n  <version>2.4.1</version>\n</dependency>\n```", "```java\n<dependency>\n  <groupId>org.apache.logging.log4j</groupId>\n  <artifactId>log4j-jul</artifactId>\n  <version>2.4.1</version>\n</dependency>\n```", "```java\n<dependency>\n  <groupId>org.apache.logging.log4j</groupId>\n  <artifactId>log4j-web</artifactId>\n  <version>2.4.1</version>\n  <scope>runtime</scope>\n</dependency>\n```", "```java\nbuildscript {\n    ext {\n        springBootVersion = '1.2.5.RELEASE'\n    }\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath(\"org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}\") \n        classpath(\"io.spring.gradle:dependency-management-plugin:0.5.1.RELEASE\")\n    }\n}\n\napply plugin: 'java'\napply plugin: 'eclipse'\napply plugin: 'idea'\napply plugin: 'spring-boot' \napply plugin: 'io.spring.dependency-management' \n\njar {\n    baseName = 'masterSpringMvc'\n    version = '0.0.1-SNAPSHOT'\n}\nsourceCompatibility = 1.8\ntargetCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile 'org.springframework.boot:spring-boot-starter-web'\n    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'\n    testCompile 'org.springframework.boot:spring-boot-starter-test'\n}\n\neclipse {\n    classpath {\n         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')\n         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'\n    }\n}\n\ntask wrapper(type: Wrapper) {\n    gradleVersion = '2.3'\n}\n```", "```java\n<!DOCTYPE html>\n<html >\n<head lang=\"en\">\n    <meta charset=\"UTF-8\"/>\n    <title>Hello thymeleaf</title>\n</head>\n<body>\n    <span th:text=\"|Hello thymeleaf|\">Hello html</span>\n</body>\n</html>\n```", "```java\nspring.thymeleaf.cache=false\n```", "```java\n@Controller\npublic class HelloController {\n\n    @RequestMapping(\"/\")\n    public String hello() {\n        return \"resultPage\";\n    }\n}\n```", "```java\n<!DOCTYPE html>\n<html >\n<head lang=\"en\">\n    <meta charset=\"UTF-8\"/>\n    <title>Hello thymeleaf</title>\n</head>\n<body>\n    <span th:text=\"${message}\">Hello html</span>\n</body>\n</html>\n```", "```java\n@Controller\npublic class HelloController {\n\n    @RequestMapping(\"/\")\n    public String hello(Model model) {\n        model.addAttribute(\"message\", \"Hello from the controller\");\n        return \"resultPage\";\n    }\n}\n```", "```java\n@Controller\npublic class HelloController {\n\n    @RequestMapping(\"/\")\n    public String hello(@RequestParam(\"name\") String userName, Model model) {\n        model.addAttribute(\"message\", \"Hello, \" + userName);\n        return \"resultPage\";\n    }\n}\n```", "```java\n@Controller\npublic class HelloController {\n\n    @RequestMapping(\"/\")\n    public String hello(@RequestParam(defaultValue = \"world\") String name, Model model) {\n        model.addAttribute(\"message\", \"Hello, \" + name);\n        return \"resultPage\";\n    }\n}\n```", "```java\ncompile 'org.springframework.boot:spring-boot-starter-social-twitter'\n```", "```java\nspring.social.twitter.appId= <Consumer Key>\nspring.social.twitter.appSecret= <Consumer Secret>\n```", "```java\n@Controller\npublic class HelloController {\n\n    @Autowired\n    private Twitter twitter;\n\n    @RequestMapping(\"/\")\n    public String hello(@RequestParam(defaultValue = \"masterSpringMVC4\") String search, Model model) {\n        SearchResults searchResults = twitter.searchOperations().search(search);\n        String text = searchResults.getTweets().get(0).getText();\n        model.addAttribute(\"message\", text);\n        return \"resultPage\";\n    }\n}\n```", "```java\n<!DOCTYPE html>\n<html >\n<head lang=\"en\">\n    <meta charset=\"UTF-8\"/>\n    <title>Hello twitter</title>\n</head>\n<body>\n    <ul>\n <li th:each=\"tweet : ${tweets}\" th:text=\"${tweet}\">Some tweet</li>\n </ul>\n</body>\n</html>\n```", "```java\n@Controller\npublic class TweetController {\n\n    @Autowired\n    private Twitter twitter;\n\n    @RequestMapping(\"/\")\n    public String hello(@RequestParam(defaultValue = \"masterSpringMVC4\") String search, Model model) {\n        SearchResults searchResults = twitter.searchOperations().search(search);\n        List<String> tweets =\n searchResults.getTweets()\n .stream()\n .map(Tweet::getText)\n .collect(Collectors.toList());\n model.addAttribute(\"tweets\", tweets);\n        return \"resultPage\";\n    }\n}\n```", "```java\nComparator<Integer> c = (e1, e2) -> e1 - e2;\n```", "```java\nTweet::getText\n```", "```java\n(Tweet t) -> t.getText()\n```", "```java\ncompile 'org.webjars:materializecss:0.96.0'\ncompile 'org.webjars:jquery:2.1.4'\n```", "```java\n<script src=\"img/jquery.js\"></script>\n```", "```java\npackage masterSpringMvc.controller;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.social.twitter.api.SearchResults;\nimport org.springframework.social.twitter.api.Tweet;\nimport org.springframework.social.twitter.api.Twitter;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\nimport java.util.List;\n\n@Controller\npublic class TweetController {\n\n    @Autowired\n    private Twitter twitter;\n\n    @RequestMapping(\"/\")\n    public String hello(@RequestParam(defaultValue = \"masterSpringMVC4\") String search, Model model) {\n        SearchResults searchResults = twitter.searchOperations().search(search);\n        List<Tweet> tweets = searchResults.getTweets();\n        model.addAttribute(\"tweets\", tweets);\n        model.addAttribute(\"search\", search);\n        return \"resultPage\";\n    }\n}\n```", "```java\n<!DOCTYPE html>\n<html >\n<head lang=\"en\">\n    <meta charset=\"UTF-8\"/>\n    <title>Hello twitter</title>\n\n    <link href=\"/webjars/materializecss/0.96.0/css/materialize.css\" type=\"text/css\" rel=\"stylesheet\" media=\"screen,projection\"/>\n</head>\n<body>\n<div class=\"row\">\n\n    <h2 class=\"indigo-text center\" th:text=\"|Tweet results for ${search}|\">Tweets</h2>\n\n    <ul class=\"collection\">\n        <li class=\"collection-item avatar\" th:each=\"tweet : ${tweets}\">\n            <img th:src=\"img/${tweet.user.profileImageUrl}\" alt=\"\" class=\"circle\"/>\n            <span class=\"title\" th:text=\"${tweet.user.name}\">Username</span>\n            <p th:text=\"${tweet.text}\">Tweet message</p>\n        </li>\n    </ul>\n\n</div>\n\n<script src=\"img/jquery.js\"></script>\n<script src=\"img/materialize.js\"></script>\n</body>\n</html>\n```", "```java\n<!DOCTYPE html>\n<html \n      >\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1.0, user-scalable=no\"/>\n    <title>Default title</title>\n\n    <link href=\"/webjars/materializecss/0.96.0/css/materialize.css\" type=\"text/css\" rel=\"stylesheet\" media=\"screen,projection\"/>\n</head>\n<body>\n\n<section layout:fragment=\"content\">\n    <p>Page content goes here</p>\n</section>\n\n<script src=\"img/jquery.js\"></script>\n<script src=\"img/materialize.js\"></script>\n</body>\n</html>\n```", "```java\n<!DOCTYPE html>\n<html \n\n      layout:decorator=\"layout/default\">\n<head lang=\"en\">\n    <title>Hello twitter</title>\n</head>\n<body>\n<div class=\"row\" layout:fragment=\"content\">\n\n    <h2 class=\"indigo-text center\" th:text=\"|Tweet results for ${search}|\">Tweets</h2>\n\n    <ul class=\"collection\">\n        <li class=\"collection-item avatar\" th:each=\"tweet : ${tweets}\">\n            <img th:src=\"img/${tweet.user.profileImageUrl}\" alt=\"\" class=\"circle\"/>\n            <span class=\"title\" th:text=\"${tweet.user.name}\">Username</span>\n\n            <p th:text=\"${tweet.text}\">Tweet message</p>\n        </li>\n    </ul>\n</div>\n</body>\n</html>\n```", "```java\n@Controller\npublic class TweetController {\n\n    @Autowired\n    private Twitter twitter;\n\n    @RequestMapping(\"/\")\n    public String home() {\n        return \"searchPage\";\n    }\n\n    @RequestMapping(\"/result\")\n    public String hello(@RequestParam(defaultValue = \"masterSpringMVC4\") String search, Model model) {\n        SearchResults searchResults = twitter.searchOperations().search(search);\n        List<Tweet> tweets = searchResults.getTweets();\n        model.addAttribute(\"tweets\", tweets);\n        model.addAttribute(\"search\", search);\n        return \"resultPage\";\n    }\n}\n```", "```java\n<!DOCTYPE html>\n<html \n\n      layout:decorator=\"layout/default\">\n<head lang=\"en\">\n    <title>Search</title>\n</head>\n<body>\n\n<div class=\"row\" layout:fragment=\"content\">\n\n    <h4 class=\"indigo-text center\">Please enter a search term</h4>\n\n    <form action=\"/result\" method=\"get\" class=\"col s12\">\n        <div class=\"row center\">\n            <div class=\"input-field col s6 offset-s3\">\n                <i class=\"mdi-action-search prefix\"></i>\n                <input id=\"search\" name=\"search\" type=\"text\" class=\"validate\"/>\n                <label for=\"search\">Search</label>\n            </div>\n        </div>\n    </form>\n</div>\n\n</body>\n</html>\n```", "```java\n<form action=\"/result\" method=\"get\" class=\"col s12\">\n```", "```java\n<form action=\"/postSearch\" method=\"post\" class=\"col s12\">\n```", "```java\n@RequestMapping(value = \"/postSearch\", method = RequestMethod.POST)\npublic String postSearch(HttpServletRequest request,\n    RedirectAttributes redirectAttributes) {\n        String search = request.getParameter(\"search\");\n        redirectAttributes.addAttribute(\"search\", search);\n        return \"redirect:result\";\n}\n```", "```java\n@RequestMapping(value = \"/postSearch\", method = RequestMethod.POST)\npublic String postSearch(HttpServletRequest request,\n    RedirectAttributes redirectAttributes) {\n        String search = request.getParameter(\"search\");\n        if (search.toLowerCase().contains(\"struts\")) {\n                redirectAttributes.addFlashAttribute(\"error\", \"Try using spring instead!\");\n                return \"redirect:/\";\n        }\n        redirectAttributes.addAttribute(\"search\", search);\n        return \"redirect:result\";\n}\n```", "```java\n<!DOCTYPE html>\n<html \n\n      layout:decorator=\"layout/default\">\n<head lang=\"en\">\n    <title>Search</title>\n</head>\n<body>\n\n<div class=\"row\" layout:fragment=\"content\">\n\n    <h4 class=\"indigo-text center\">Please enter a search term</h4>\n\n <div class=\"col s6 offset-s3\">\n <div id=\"errorMessage\" class=\"card-panel red lighten-2\" th:if=\"${error}\">\n <span class=\"card-title\" th:text=\"${error}\"></span>\n </div>\n\n        <form action=\"/postSearch\" method=\"post\" class=\"col s12\">\n            <div class=\"row center\">\n                <div class=\"input-field\">\n                    <i class=\"mdi-action-search prefix\"></i>\n                    <input id=\"search\" name=\"search\" type=\"text\" class=\"validate\"/>\n                    <label for=\"search\">Search</label>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>\n\n</body>\n</html>\n```", "```java\n<!DOCTYPE html>\n<html \n\n      layout:decorator=\"layout/default\">\n<head lang=\"en\">\n    <title>Your profile</title>\n</head>\n<body>\n<div class=\"row\" layout:fragment=\"content\">\n\n    <h2 class=\"indigo-text center\">Personal info</h2>\n\n    <form th:action=\"@{/profile}\" method=\"post\" class=\"col m8 s12 offset-m2\">\n\n        <div class=\"row\">\n            <div class=\"input-field col s6\">\n                <input id=\"twitterHandle\" type=\"text\"/>\n                <label for=\"twitterHandle\">Last Name</label>\n            </div>\n            <div class=\"input-field col s6\">\n                <input id=\"email\" type=\"text\"/>\n                <label for=\"email\">Email</label>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"input-field col s6\">\n                <input id=\"birthDate\" type=\"text\"/>\n                <label for=\"birthDate\">Birth Date</label>\n            </div>\n        </div>\n        <div class=\"row s12\">\n            <button class=\"btn waves-effect waves-light\" type=\"submit\" name=\"save\">Submit\n                <i class=\"mdi-content-send right\"></i>\n            </button>\n        </div>\n    </form>\n</div>\n</body>\n</html>\n```", "```java\npackage masterspringmvc4.profile;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class ProfileController {\n\n    @RequestMapping(\"/profile\")\n    public String displayProfile() {\n        return \"profile/profilePage\";\n    }\n}\n```", "```java\npackage masterSpringMvc.profile;\n\nimport java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ProfileForm {\n    private String twitterHandle;\n    private String email;\n    private LocalDate birthDate;\n    private List<String> tastes = new ArrayList<>();\n\n    // getters and setters\n}\n```", "```java\n<!DOCTYPE html>\n<html \n\n      layout:decorator=\"layout/default\">\n<head lang=\"en\">\n    <title>Your profile</title>\n</head>\n<body>\n<div class=\"row\" layout:fragment=\"content\">\n\n    <h2 class=\"indigo-text center\">Personal info</h2>\n\n    <form th:action=\"@{/profile}\" th:object=\"${profileForm}\" method=\"post\" class=\"col m8 s12 offset-m2\">\n\n        <div class=\"row\">\n            <div class=\"input-field col s6\">\n                <input th:field=\"${profileForm.twitterHandle}\" id=\"twitterHandle\" type=\"text\"/>\n                <label for=\"twitterHandle\">Last Name</label>\n            </div>\n            <div class=\"input-field col s6\">\n                <input th:field=\"${profileForm.email}\" id=\"email\" type=\"text\"/>\n                <label for=\"email\">Email</label>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"input-field col s6\">\n                <input th:field=\"${profileForm.birthDate}\" id=\"birthDate\" type=\"text\"/>\n                <label for=\"birthDate\">Birth Date</label>\n            </div>\n        </div>\n        <div class=\"row s12\">\n            <button class=\"btn waves-effect waves-light\" type=\"submit\" name=\"save\">Submit\n                <i class=\"mdi-content-send right\"></i>\n            </button>\n        </div>\n    </form>\n</div>\n</body>\n</html>\n```", "```java\n@Controller\npublic class ProfileController {\n\n    @RequestMapping(\"/profile\")\n    public String displayProfile(ProfileForm profileForm) {\n        return \"profile/profilePage\";\n    }\n\n    @RequestMapping(value = \"/profile\", method = RequestMethod.POST)\n    public String saveProfile(ProfileForm profileForm) {\n        System.out.println(\"save ok\" + profileForm);\n        return \"redirect:/profile\";\n    }\n}\n```", "```java\nlogging.level.org.springframework.web=DEBUG\n```", "```java\nField error in object 'profileForm' on field 'birthDate': rejected value [10/10/1980]; codes [typeMismatch.profileForm.birthDate,typeMismatch.birthDate,typeMismatch.java.time.LocalDate,typeMismatch]; \u2026 nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type java.lang.String to type java.time.LocalDate for value '10/10/1980'; nested exception is java.time.format.DateTimeParseException: Text '10/10/1980' could not be parsed, unparsed text found at index 8]\n```", "```java\npublic class USLocalDateFormatter implements Formatter<LocalDate> {\n    public static final String US_PATTERN = \"MM/dd/yyyy\";\n    public static final String NORMAL_PATTERN = \"dd/MM/yyyy\";\n\n    @Override public LocalDate parse(String text, Locale locale) throws ParseException {\n        return LocalDate.parse(text, DateTimeFormatter.ofPattern(getPattern(locale)));\n    }\n\n    @Override public String print(LocalDate object, Locale locale) {\n        return DateTimeFormatter.ofPattern(getPattern(locale)).format(object);\n    }\n\n    public static String getPattern(Locale locale) {\n        return isUnitedStates(locale) ? US_PATTERN : NORMAL_PATTERN;\n    }\n\n    private static boolean isUnitedStates(Locale locale) {\n        return Locale.US.getCountry().equals(locale.getCountry());\n    }\n}\n```", "```java\npackage masterSpringMvc.config;\n\nimport masterSpringMvc.dates.USLocalDateFormatter;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.format.FormatterRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n\nimport java.time.LocalDate;\n\n@Configuration\npublic class WebConfiguration extends WebMvcConfigurerAdapter {\n\n    @Override public void addFormatters(FormatterRegistry registry) {\n        registry.addFormatterForFieldType(LocalDate.class, new USLocalDateFormatter());\n    }\n}\n```", "```java\n@ModelAttribute(\"dateFormat\")\npublic String localeFormat(Locale locale) {\n    return USLocalDateFormatter.getPattern(locale);\n}\n```", "```java\n<div class=\"row\">\n    <div class=\"input-field col s6\">\n        <input th:field=\"${profileForm.birthDate}\" id=\"birthDate\" type=\"text\" th:placeholder=\"${dateFormat}\"/>\n        <label for=\"birthDate\">Birth Date</label>\n    </div>\n</div>\n```", "```java\npackage masterspringmvc4.profile;\n\nimport org.hibernate.validator.constraints.Email;\nimport org.hibernate.validator.constraints.NotEmpty;\n\nimport javax.validation.constraints.NotNull;\nimport javax.validation.constraints.Past;\nimport javax.validation.constraints.Size;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\npublic class ProfileForm {\n    @Size(min = 2)\n    private String twitterHandle;\n\n    @Email\n    @NotEmpty\n    private String email;\n\n   @NotNull\n    private Date birthDate;\n\n    @NotEmpty\n    private List<String> tastes = new ArrayList<>();\n}\n```", "```java\n@RequestMapping(value = \"/profile\", method = RequestMethod.POST)\npublic String saveProfile(@Valid ProfileForm profileForm, BindingResult bindingResult) {\n    if (bindingResult.hasErrors()) {\n        return \"profile/profilePage\";\n    }\n\n    System.out.println(\"save ok\" + profileForm);\n    return \"redirect:/profile\";\n}\n```", "```java\n<ul th:if=\"${#fields.hasErrors('*')}\" class=\"errorlist\">\n    <li th:each=\"err : ${#fields.errors('*')}\" th:text=\"${err}\">Input is incorrect</li>\n</ul>\n```", "```java\n<!DOCTYPE html>\n<html \n\n      layout:decorator=\"layout/default\">\n<head lang=\"en\">\n    <title>Your Profile</title>\n</head>\n<body>\n<div class=\"row\" layout:fragment=\"content\">\n\n    <h2 class=\"indigo-text center\">Personal info</h2>\n\n    <form th:action=\"@{/profile}\" th:object=\"${profileForm}\" method=\"post\" class=\"col m8 s12 offset-m2\">\n\n        <div class=\"row\">\n            <div class=\"input-field col s6\">\n                <input th:field=\"${profileForm.twitterHandle}\" id=\"twitterHandle\" type=\"text\" th:errorclass=\"invalid\"/>\n                <label for=\"twitterHandle\">Twitter handle</label>\n\n                <div th:errors=\"*{twitterHandle}\" class=\"red-text\">Error</div>\n            </div>\n            <div class=\"input-field col s6\">\n                <input th:field=\"${profileForm.email}\" id=\"email\" type=\"text\" th:errorclass=\"invalid\"/>\n                <label for=\"email\">Email</label>\n\n                <div th:errors=\"*{email}\" class=\"red-text\">Error</div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"input-field col s6\">\n                <input th:field=\"${profileForm.birthDate}\" id=\"birthDate\" type=\"text\" th:errorclass=\"invalid\" th:placeholder=\"${dateFormat}\"/>\n                <label for=\"birthDate\">Birth Date</label>\n\n                <div th:errors=\"*{birthDate}\" class=\"red-text\">Error</div>\n            </div>\n        </div>\n        <div class=\"row s12\">\n            <button class=\"btn indigo waves-effect waves-light\" type=\"submit\" name=\"save\">Submit\n                <i class=\"mdi-content-send right\"></i>\n            </button>\n        </div>\n    </form>\n</div>\n</body>\n</html>\n```", "```java\nSize.profileForm.twitterHandle=Please type in your twitter user name\nEmail.profileForm.email=Please specify a valid email address\nNotEmpty.profileForm.email=Please specify your email address\nPastLocalDate.profileForm.birthDate=Please specify a real birth date\nNotNull.profileForm.birthDate=Please specify your birth date\n\ntypeMismatch.birthDate = Invalid birth date format.\n```", "```java\nSize=the {0} field must be between {2} and {1} characters long\ntypeMismatch.java.util.Date = Invalid date format.\n```", "```java\n@Size(min = 2, message = \"Please specify a valid twitter handle\")\nprivate String twitterHandle;\n```", "```java\npackage masterSpringMvc.date;\n\nimport javax.validation.Constraint;\nimport javax.validation.ConstraintValidator;\nimport javax.validation.ConstraintValidatorContext;\nimport javax.validation.Payload;\nimport java.lang.annotation.*;\nimport java.time.LocalDate;\n\n@Target({ElementType.FIELD})\n@Retention(RetentionPolicy.RUNTIME)\n@Constraint(validatedBy = PastLocalDate.PastValidator.class)\n@Documented\npublic @interface PastLocalDate {\n    String message() default \"{javax.validation.constraints.Past.message}\";\n\n    Class<?>[] groups() default {};\n\n    Class<? extends Payload>[] payload() default {};\n\n    class PastValidator implements ConstraintValidator<PastLocalDate, LocalDate> {\n        public void initialize(PastLocalDate past) {\n        }\n\n        public boolean isValid(LocalDate localDate, ConstraintValidatorContext context) {\n            return localDate == null || localDate.isBefore(LocalDate.now());\n        }\n    }\n}\n```", "```java\n@NotNull\n@PastLocalDate\nprivate LocalDate birthDate;\n```", "```java\nSize.profileForm.twitterHandle=Veuillez entrer votre identifiant Twitter\nEmail.profileForm.email=Veuillez sp\u00e9cifier une adresse mail valide\nNotEmpty.profileForm.email=Veuillez sp\u00e9cifier votre adresse mail\nPastLocalDate.profileForm.birthDate=Veuillez donner votre vraie date de naissance\nNotNull.profileForm.birthDate=Veuillez sp\u00e9cifier votre date de naissance\n\ntypeMismatch.birthDate = Date de naissance invalide.\n```", "```java\npublic interface LocaleResolver {\n\n    Locale resolveLocale(HttpServletRequest request);\n\n    void setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale);\n}\n```", "```java\nspring.mvc.locale=fr\n```", "```java\npackage masterSpringMvc.config;\n\nimport masterSpringMvc.date.USLocalDateFormatter;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.format.FormatterRegistry;\nimport org.springframework.web.servlet.LocaleResolver;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\nimport org.springframework.web.servlet.i18n.LocaleChangeInterceptor;\nimport org.springframework.web.servlet.i18n.SessionLocaleResolver;\n\nimport java.time.LocalDate;\n\n@Configuration\npublic class WebConfiguration extends WebMvcConfigurerAdapter {\n\n    @Override\n    public void addFormatters(FormatterRegistry registry) {\n        registry.addFormatterForFieldType(LocalDate.class, new USLocalDateFormatter());\n    }\n\n    @Bean\n    public LocaleResolver localeResolver() {\n        return new SessionLocaleResolver();\n    }\n\n    @Bean\n    public LocaleChangeInterceptor localeChangeInterceptor() {\n        LocaleChangeInterceptor localeChangeInterceptor = new LocaleChangeInterceptor();\n        localeChangeInterceptor.setParamName(\"lang\");\n        return localeChangeInterceptor;\n    }\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(localeChangeInterceptor());\n    }\n}\n```", "```java\n<!DOCTYPE html>\n<html \n      >\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1.0, user-scalable=no\"/>\n    <title>Default title</title>\n\n    <link href=\"/webjars/materializecss/0.96.0/css/materialize.css\" type=\"text/css\" rel=\"stylesheet\" media=\"screen,projection\"/>\n</head>\n<body>\n\n<ul id=\"lang-dropdown\" class=\"dropdown-content\">\n    <li><a href=\"?lang=en_US\">English</a></li>\n    <li><a href=\"?lang=fr\">French</a></li>\n</ul>\n<nav>\n    <div class=\"nav-wrapper indigo\">\n        <ul class=\"right\">\n            <li><a class=\"dropdown-button\" href=\"#!\" data-activates=\"lang-dropdown\"><i class=\"mdi-action-language right\"></i> Lang</a></li>\n        </ul>\n    </div>\n</nav>\n\n<section layout:fragment=\"content\">\n    <p>Page content goes here</p>\n</section>\n\n<script src=\"img/jquery.js\"></script>\n<script src=\"img/materialize.js\"></script>\n<script type=\"text/javascript\">\n    $(\".dropdown-button\").dropdown();\n</script>\n</body>\n</html>\n```", "```java\n<!DOCTYPE html>\n<html \n\n      layout:decorator=\"layout/default\">\n<head lang=\"en\">\n    <title>Your profile</title>\n</head>\n<body>\n<div class=\"row\" layout:fragment=\"content\">\n\n    <h2 class=\"indigo-text center\" th:text=\"#{profile.title}\">Personal info</h2>\n\n    <form th:action=\"@{/profile}\" th:object=\"${profileForm}\" method=\"post\" class=\"col m8 s12 offset-m2\">\n\n        <div class=\"row\">\n            <div class=\"input-field col s6\">\n                <input th:field=\"${profileForm.twitterHandle}\" id=\"twitterHandle\" type=\"text\" th:errorclass=\"invalid\"/>\n                <label for=\"twitterHandle\" th:text=\"#{twitter.handle}\">Twitter handle</label>\n\n                <div th:errors=\"*{twitterHandle}\" class=\"red-text\">Error</div>\n            </div>\n            <div class=\"input-field col s6\">\n                <input th:field=\"${profileForm.email}\" id=\"email\" type=\"text\" th:errorclass=\"invalid\"/>\n                <label for=\"email\" th:text=\"#{email}\">Email</label>\n\n                <div th:errors=\"*{email}\" class=\"red-text\">Error</div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"input-field col s6\">\n                <input th:field=\"${profileForm.birthDate}\" id=\"birthDate\" type=\"text\" th:errorclass=\"invalid\"/>\n                <label for=\"birthDate\" th:text=\"#{birthdate}\" th:placeholder=\"${dateFormat}\">Birth Date</label>\n\n                <div th:errors=\"*{birthDate}\" class=\"red-text\">Error</div>\n            </div>\n        </div>\n        <div class=\"row s12 center\">\n            <button class=\"btn indigo waves-effect waves-light\" type=\"submit\" name=\"save\" th:text=\"#{submit}\">Submit\n                <i class=\"mdi-content-send right\"></i>\n            </button>\n        </div>\n    </form>\n</div>\n</body>\n</html>\n```", "```java\nNotEmpty.profileForm.tastes=Please enter at least one thing\nprofile.title=Your profile\ntwitter.handle=Twitter handle\nemail=Email\nbirthdate=Birth Date\ntastes.legend=What do you like?\nremove=Remove\ntaste.placeholder=Enter a keyword\nadd.taste=Add taste\nsubmit=Submit\n```", "```java\nNotEmpty.profileForm.tastes=Veuillez saisir au moins une chose\nprofile.title=Votre profil\ntwitter.handle=Pseudo twitter\nemail=Email\nbirthdate=Date de naissance\ntastes.legend=Quels sont vos go\u00fbts ?\nremove=Supprimer\ntaste.placeholder=Entrez un mot-cl\u00e9\nadd.taste=Ajouter un centre d'int\u00e9r\u00eat\nsubmit=Envoyer\n```", "```java\n<fieldset class=\"row\">\n    <legend th:text=\"#{tastes.legend}\">What do you like?</legend>\n    <button class=\"btn teal\" type=\"submit\" name=\"addTaste\" th:text=\"#{add.taste}\">Add taste\n        <i class=\"mdi-content-add left\"></i>\n    </button>\n\n    <div th:errors=\"*{tastes}\" class=\"red-text\">Error</div>\n\n    <div class=\"row\" th:each=\"row,rowStat : *{tastes}\">\n        <div class=\"col s6\">\n            <input type=\"text\" th:field=\"*{tastes[__${rowStat.index}__]}\" th:placeholder=\"#{taste.placeholder}\"/>\n        </div>\n\n        <div class=\"col s6\">\n            <button class=\"btn red\" type=\"submit\" name=\"removeTaste\" th:value=\"${rowStat.index}\" th:text=\"#{remove}\">Remove\n                <i class=\"mdi-action-delete right waves-effect\"></i>\n            </button>\n        </div>\n    </div>\n</fieldset>\n```", "```java\nth:field=\"*{tastes[__${rowStat.index}__]}\"\n```", "```java\nth:field=\"*{tastes[rowStat.index]}\"\n```", "```java\n@Controller\npublic class ProfileController {\n\n    @ModelAttribute(\"dateFormat\")\n    public String localeFormat(Locale locale) {\n        return USLocalDateFormatter.getPattern(locale);\n    }\n\n    @RequestMapping(\"/profile\")\n    public String displayProfile(ProfileForm profileForm) {\n        return \"profile/profilePage\";\n    }\n\n    @RequestMapping(value = \"/profile\", params = {\"save\"}, method = RequestMethod.POST)\n    public String saveProfile(@Valid ProfileForm profileForm, BindingResult bindingResult) {\n        if (bindingResult.hasErrors()) {\n            return \"profile/profilePage\";\n        }\n        System.out.println(\"save ok\" + profileForm);\n        return \"redirect:/profile\";\n    }\n\n    @RequestMapping(value = \"/profile\", params = {\"addTaste\"})\n    public String addRow(ProfileForm profileForm) {\n        profileForm.getTastes().add(null);\n        return \"profile/profilePage\";\n    }\n\n    @RequestMapping(value = \"/profile\", params = {\"removeTaste\"})\n    public String removeRow(ProfileForm profileForm, HttpServletRequest req) {\n        Integer rowId = Integer.valueOf(req.getParameter(\"removeTaste\"));\n        profileForm.getTastes().remove(rowId.intValue());\n        return \"profile/profilePage\";\n    }\n}\n```", "```java\nInteger rowId = Integer.valueOf(req.getParameter(\"removeTaste\"));\n```", "```java\n<input th:field=\"${profileForm.twitterHandle}\" id=\"twitterHandle\" type=\"text\" th:errorclass=\"invalid\"/>\n<input th:field=\"${profileForm.email}\" id=\"email\" type=\"text\" th:errorclass=\"invalid\"/>\n<input th:field=\"${profileForm.birthDate}\" id=\"birthDate\" type=\"text\" th:errorclass=\"invalid\"/>\n<input type=\"text\" th:field=\"*{tastes[__${rowStat.index}__]}\" th:placeholder=\"#{taste.placeholder}\"/>\n```", "```java\n<input th:field=\"${profileForm.twitterHandle}\" id=\"twitterHandle\" type=\"text\" required=\"required\" th:errorclass=\"invalid\"/>\n<input th:field=\"${profileForm.email}\" id=\"email\" type=\"email\" required=\"required\" th:errorclass=\"invalid\"/>\n<input th:field=\"${profileForm.birthDate}\" id=\"birthDate\" type=\"text\" required=\"required\" th:errorclass=\"invalid\"/>\n<input type=\"text\" required=\"required\" th:field=\"*{tastes[__${rowStat.index}__]}\" th:placeholder=\"#{taste.placeholder}\"/>\n```", "```java\n<script type=\"text/javascript\" layout:fragment=\"script\">\n</script>\n```", "```java\n<script layout:fragment=\"script\">\n    $('button').bind('click', function(e) {\n        if (e.currentTarget.name === 'save') {\n            $(e.currentTarget.form).removeAttr('novalidate');\n        } else {\n            $(e.currentTarget.form).attr('novalidate', 'novalidate');\n        }\n    });\n</script>\n```", "```java\n<!DOCTYPE html>\n<html \n\n      layout:decorator=\"layout/default\">\n<head lang=\"en\">\n    <title>Profile Picture Upload</title>\n</head>\n<body>\n<div class=\"row\" layout:fragment=\"content\">\n\n    <h2 class=\"indigo-text center\">Upload</h2>\n\n    <form th:action=\"@{/upload}\" method=\"post\" enctype=\"multipart/form-data\" class=\"col m8 s12 offset-m2\">\n\n        <div class=\"input-field col s6\">\n            <input type=\"file\" id=\"file\" name=\"file\"/>\n        </div>\n\n        <div class=\"col s6 center\">\n            <button class=\"btn indigo waves-effect waves-light\" type=\"submit\" name=\"save\" th:text=\"#{submit}\">Submit\n                <i class=\"mdi-content-send right\"></i>\n            </button>\n        </div>\n    </form>\n</div>\n</body>\n</html>\n```", "```java\npackage masterSpringMvc.profile;\n\nimport org.apache.tomcat.util.http.fileupload.IOUtils;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.*;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\n@Controller\npublic class PictureUploadController {\n    public static final Resource PICTURES_DIR = new FileSystemResource(\"./pictures\");\n\n    @RequestMapping(\"upload\")\n    public String uploadPage() {\n        return \"profile/uploadPage\";\n    }\n\n    @RequestMapping(value = \"/upload\", method = RequestMethod.POST)\n    public String onUpload(MultipartFile file) throws IOException {\n        String filename = file.getOriginalFilename();\n        File tempFile = File.createTempFile(\"pic\", getFileExtension(filename), PICTURES_DIR.getFile());\n\n        try (InputStream in = file.getInputStream();\n             OutputStream out = new FileOutputStream(tempFile)) {\n            IOUtils.copy(in, out);\n        }\n\n        return \"profile/uploadPage\";\n    }\n\n    private static String getFileExtension(String name) {\n        return name.substring(name.lastIndexOf(\".\"));\n    }\n}\n```", "```java\npackage masterSpringMvc.profile;\n\nimport org.apache.tomcat.util.http.fileupload.IOUtils;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\n\nimport java.io.*;\n\n@Controller\npublic class PictureUploadController {\n    public static final Resource PICTURES_DIR = new FileSystemResource(\"./pictures\");\n\n    @RequestMapping(\"upload\")\n    public String uploadPage() {\n        return \"profile/uploadPage\";\n    }\n\n    @RequestMapping(value = \"/upload\", method = RequestMethod.POST)\n    public String onUpload(MultipartFile file, RedirectAttributes redirectAttrs) throws IOException {\n\n if (file.isEmpty() || !isImage(file)) {\n redirectAttrs.addFlashAttribute(\"error\", \"Incorrect file. Please upload a picture.\");\n return \"redirect:/upload\";\n }\n\n        copyFileToPictures(file);\n\n        return \"profile/uploadPage\";\n    }\n\n    private Resource copyFileToPictures(MultipartFile file) throws IOException {\n        String fileExtension = getFileExtension(file.getOriginalFilename());\n        File tempFile = File.createTempFile(\"pic\", fileExtension, PICTURES_DIR.getFile());\n        try (InputStream in = file.getInputStream();\n             OutputStream out = new FileOutputStream(tempFile)) {\n\n            IOUtils.copy(in, out);\n        }\n        return new FileSystemResource(tempFile);\n    }\n\n    private boolean isImage(MultipartFile file) {\n return file.getContentType().startsWith(\"image\");\n }\n\n    private static String getFileExtension(String name) {\n        return name.substring(name.lastIndexOf(\".\"));\n    }\n}\n```", "```java\n<div class=\"col s12 center red-text\" th:text=\"${error}\" th:if=\"${error}\">\n    Error during upload\n</div>\n```", "```java\n<div class=\"col m8 s12 offset-m2\">\n    <img th:src=\"img/uploadedPicture}\" width=\"100\" height=\"100\"/>\n</div>\n```", "```java\n@RequestMapping(value = \"/uploadedPicture\")\npublic void getUploadedPicture(HttpServletResponse response) throws IOException {\n    ClassPathResource classPathResource = new ClassPathResource(\"/images/anonymous.png\");\n    response.setHeader(\"Content-Type\", URLConnection.guessContentTypeFromName(classPathResource.getFilename()));\n    IOUtils.copy(classPathResource.getInputStream(), response.getOutputStream());\n}\n```", "```java\npackage masterSpringMvc.config;\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\n\nimport java.io.IOException;\n@ConfigurationProperties(prefix = \"upload.pictures\")\npublic class PicturesUploadProperties {\n    private Resource uploadPath;\n    private Resource anonymousPicture;\n\n    public Resource getAnonymousPicture() {\n        return anonymousPicture;\n    }\n\n    public void setAnonymousPicture(String anonymousPicture) {\n        this.anonymousPicture = new DefaultResourceLoader().getResource(anonymousPicture);\n    }\n\n    public Resource getUploadPath() {\n        return uploadPath;\n    }\n\n    public void setUploadPath(String uploadPath) {\n        this.uploadPath = new DefaultResourceLoader().getResource(uploadPath);\n    }\n}\n```", "```java\n@SpringBootApplication\n@EnableConfigurationProperties({PictureUploadProperties.class})\npublic class MasterSpringMvc4Application extends WebMvcConfigurerAdapter {\n  // code omitted\n}\n```", "```java\nupload.pictures.uploadPath=file:./pictures\nupload.pictures.anonymousPicture=classpath:/images/anonymous.png\n```", "```java\npackage masterSpringMvc.profile;\n\nimport masterSpringMvc.config.PictureUploadProperties;\nimport org.apache.tomcat.util.http.fileupload.IOUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.io.Resource;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\n\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.*;\nimport java.net.URLConnection;\n\n@Controller\npublic class PictureUploadController {\n    private final Resource picturesDir;\n private final Resource anonymousPicture;\n\n @Autowired\n public PictureUploadController(PictureUploadProperties uploadProperties) {\n picturesDir = uploadProperties.getUploadPath();\n anonymousPicture = uploadProperties.getAnonymousPicture();\n }\n\n    @RequestMapping(value = \"/uploadedPicture\")\n    public void getUploadedPicture(HttpServletResponse response) throws IOException {\n        response.setHeader(\"Content-Type\", URLConnection.guessContentTypeFromName(anonymousPicture.getFilename()));\n IOUtils.copy(anonymousPicture.getInputStream(), response.getOutputStream());\n    }\n\n  private Resource copyFileToPictures(MultipartFile file) throws IOException {\n       String fileExtension = getFileExtension(file.getOriginalFilename());\n       File tempFile = File.createTempFile(\"pic\", fileExtension, picturesDir.getFile());\n       try (InputStream in = file.getInputStream();\n            OutputStream out = new FileOutputStream(tempFile)) {\n\n           IOUtils.copy(in, out);\n       }\n       return new FileSystemResource(tempFile);\n   }    \n// The rest of the code remains the same\n}\n```", "```java\n@ModelAttribute(\"picturePath\")\npublic Resource picturePath() {\n  return anonymousPicture;\n}\n```", "```java\n@RequestMapping(value = \"/uploadedPicture\")\npublic void getUploadedPicture(HttpServletResponse response, @ModelAttribute(\"picturePath\") Path picturePath) throws IOException {\n    response.setHeader(\"Content-Type\", URLConnection.guessContentTypeFromName(picturePath.toString()));\n    Files.copy(picturePath, response.getOutputStream());\n}\n```", "```java\n@RequestMapping(value = \"/upload\", method = RequestMethod.POST)\npublic String onUpload(MultipartFile file, RedirectAttributes redirectAttrs, Model model) throws IOException {\n\n    if (file.isEmpty() || !isImage(file)) {\n        redirectAttrs.addFlashAttribute(\"error\", \"Incorrect file. Please upload a picture.\");\n        return \"redirect:/upload\";\n    }\n\n    Resource picturePath = copyFileToPictures(file);\n model.addAttribute(\"picturePath\", picturePath);\n\n    return \"profile/uploadPage\";\n}\n```", "```java\n@Controller\n@SessionAttributes(\"picturePath\")\npublic class PictureUploadController {\n}\n```", "```java\n@ExceptionHandler(IOException.class)\npublic ModelAndView handleIOException(IOException exception) {\n    ModelAndView modelAndView = new ModelAndView(\"profile/uploadPage\");\n    modelAndView.addObject(\"error\", exception.getMessage());\n    return modelAndView;\n}\n```", "```java\n@RequestMapping(value = \"/upload\", method = RequestMethod.POST)\npublic String onUpload(MultipartFile file, RedirectAttributes redirectAttrs, Model model) throws IOException {\n    throw new IOException(\"Some message\");\n}\n```", "```java\n@Bean\npublic EmbeddedServletContainerCustomizer containerCustomizer() {\n    EmbeddedServletContainerCustomizer \nembeddedServletContainerCustomizer = new EmbeddedServletContainerCustomizer() {\n        @Override\n        public void customize(ConfigurableEmbeddedServletContainer container) {\n            container.addErrorPages(new ErrorPage(MultipartException.class, \"/uploadError\"));\n        }\n    };\n    return embeddedServletContainerCustomizer;\n}\n```", "```java\n@Bean\npublic EmbeddedServletContainerCustomizer containerCustomizer() {\n    EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer\n            = container -> container.addErrorPages(new ErrorPage(MultipartException.class, \"/uploadError\"));\n    return embeddedServletContainerCustomizer;\n}\n```", "```java\n@Bean\npublic EmbeddedServletContainerCustomizer containerCustomizer() {\n    return container -> container.addErrorPages(new ErrorPage(MultipartException.class, \"/uploadError\"));\n}\n```", "```java\n@RequestMapping(\"uploadError\")\npublic ModelAndView onUploadError(HttpServletRequest request) {\n    ModelAndView modelAndView = new ModelAndView(\"uploadPage\");\n    modelAndView.addObject(\"error\", request.getAttribute(WebUtils.ERROR_MESSAGE_ATTRIBUTE));\n    return modelAndView;\n}\n```", "```java\n\nprivate final MessageSource messageSource;\n\n@Autowired\npublic PictureUploadController(PictureUploadProperties uploadProperties, MessageSource messageSource) {\n    picturesDir = uploadProperties.getUploadPath();\n    anonymousPicture = uploadProperties.getAnonymousPicture();\n    this.messageSource = messageSource;\n}\n```", "```java\n@ExceptionHandler(IOException.class)\npublic ModelAndView handleIOException(Locale locale) {\n    ModelAndView modelAndView = new ModelAndView(\"profile/uploadPage\");\n    modelAndView.addObject(\"error\", messageSource.getMessage(\"upload.io.exception\", null, locale));\n    return modelAndView;\n}\n\n@RequestMapping(\"uploadError\")\npublic ModelAndView onUploadError(Locale locale) {\n    ModelAndView modelAndView = new ModelAndView(\"profile/uploadPage\");\n    modelAndView.addObject(\"error\", messageSource.getMessage(\"upload.file.too.big\", null, locale));\n    return modelAndView;\n}\n```", "```java\nupload.io.exception=An error occurred while uploading the file. Please try again.\nupload.file.too.big=Your file is too big.\n```", "```java\nupload.io.exception=Une erreur est survenue lors de l'envoi du fichier. Veuillez r\u00e9essayer.\nupload.file.too.big=Votre fichier est trop gros.\n```", "```java\npackage masterSpringMvc.profile;\n\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.stereotype.Component;\nimport java.io.Serializable;\nimport java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Component\n@Scope(value = \"session\", proxyMode = ScopedProxyMode.TARGET_CLASS)\npublic class UserProfileSession implements Serializable {\n    private String twitterHandle;\n    private String email;\n    private LocalDate birthDate;\n    private List<String> tastes = new ArrayList<>();\n\n    public void saveForm(ProfileForm profileForm) {\n        this.twitterHandle = profileForm.getTwitterHandle();\n        this.email = profileForm.getEmail();\n        this.birthDate = profileForm.getBirthDate();\n        this.tastes = profileForm.getTastes();\n    }\n\n    public ProfileForm toForm() {\n        ProfileForm profileForm = new ProfileForm();\n        profileForm.setTwitterHandle(twitterHandle);\n        profileForm.setEmail(email);\n        profileForm.setBirthDate(birthDate);\n        profileForm.setTastes(tastes);\n        return profileForm;\n    }\n}\n```", "```java\n@Controller\npublic class ProfileController {\n\n    private UserProfileSession userProfileSession;\n    @Autowired\n    public ProfileController(UserProfileSession userProfileSession) {\n        this.userProfileSession = userProfileSession;\n    }\n\n    @ModelAttribute\n    public ProfileForm getProfileForm() {\n        return userProfileSession.toForm();\n    }\n\n    @RequestMapping(value = \"/profile\", params = {\"save\"}, method = RequestMethod.POST)\n    public String saveProfile(@Valid ProfileForm profileForm, BindingResult bindingResult) {\n        if (bindingResult.hasErrors()) {\n            return \"profile/profilePage\";\n        }\n        userProfileSession.saveForm(profileForm);\n        return \"redirect:/profile\";\n    }\n\n    // the rest of the code is unchanged\n}\n```", "```java\n@Controller\npublic class ProfileController {\n\n    @Autowired\n    private UserProfileSession userProfileSession;\n}\n```", "```java\n@Scope(value = \"session\", proxyMode = ScopedProxyMode.TARGET_CLASS)\n```", "```java\n<!DOCTYPE html>\n<html >\n<head lang=\"en\">\n    <meta charset=\"UTF-8\"/>\n    <title th:text=\"${status}\">404</title>\n\n    <link href=\"/webjars/materializecss/0.96.0/css/materialize.css\" type=\"text/css\" rel=\"stylesheet\"\n          media=\"screen,projection\"/>\n</head>\n<body>\n<div class=\"row\">\n    <h1 class=\"indigo-text center\" th:text=\"${error}\">Not found</h1>\n\n    <p class=\"col s12 center\" th:text=\"${message}\">\n        This page is not available\n    </p>\n</div>\n</body>\n</html>\n```", "```java\nsomeUrl/param?var1=value1&var2=value2\n```", "```java\nsomeUrl/param;var1=value1;var2=value2\n```", "```java\nsomeUrl/param;var1=value1,value2;var2=value3,value4\n```", "```java\nhttp://localhost:8080/search/popular;keywords=scala,java\n```", "```java\n@Override\npublic void configurePathMatch(PathMatchConfigurer configurer) {\n    UrlPathHelper urlPathHelper = new UrlPathHelper();\n    urlPathHelper.setRemoveSemicolonContent(false);\n    configurer.setUrlPathHelper(urlPathHelper);\n}\n```", "```java\npackage masterSpringMvc.search;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.social.twitter.api.Tweet;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.MatrixVariable;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport java.util.List;\n\n@Controller\npublic class SearchController {\n    private SearchService searchService;\n    @Autowired\n    public SearchController(SearchService searchService) {\n        this.searchService = searchService;\n    }\n\n    @RequestMapping(\"/search/{searchType}\")\n    public ModelAndView search(@PathVariable String searchType, @MatrixVariable List<String> keywords) {\n        List<Tweet> tweets = searchService.search(searchType, keywords);\n        ModelAndView modelAndView = new ModelAndView(\"resultPage\");\n        modelAndView.addObject(\"tweets\", tweets);\n        modelAndView.addObject(\"search\", String.join(\",\", keywords));\n        return modelAndView;\n    }\n}\n```", "```java\npackage masterSpringMvc.search;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.social.twitter.api.Tweet;\nimport org.springframework.social.twitter.api.Twitter;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\n\n@Service\npublic class SearchService {\n    private Twitter twitter;\n\n    @Autowired\n    public SearchService(Twitter twitter) {\n        this.twitter = twitter;\n    }\n\n    public List<Tweet> search(String searchType, List<String> keywords) {\n        return null;\n    }\n}\n```", "```java\nprivate SearchParameters.ResultType getResultType(String searchType) {\n    for (SearchParameters.ResultType knownType : SearchParameters.ResultType.values()) {\n        if (knownType.name().equalsIgnoreCase(searchType)) {\n            return knownType;\n        }\n    }\n    return SearchParameters.ResultType.RECENT;\n}\n```", "```java\nprivate SearchParameters createSearchParam(String searchType, String taste) {\n\n    SearchParameters.ResultType resultType = getResultType(searchType);\n    SearchParameters searchParameters = new SearchParameters(taste);\n    searchParameters.resultType(resultType);\n    searchParameters.count(3);\n    return searchParameters;\n}\n```", "```java\nList<SearchParameters> searches = keywords.stream()\n        .map(taste -> createSearchParam(searchType, taste))\n        .collect(Collectors.toList());\n```", "```java\nList<Tweet> tweets = searches.stream()\n        .map(params -> twitter.searchOperations().search(params))\n        .map(searchResults -> searchResults.getTweets())\n        .collect(Collectors.toList());\n```", "```java\nList<Tweet> tweets = searches.stream()\n        .map(params -> twitter.searchOperations().search(params))\n        .flatMap(searchResults -> searchResults.getTweets().stream())\n        .collect(Collectors.toList());\n```", "```java\npackage masterSpringMvc.search;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.social.twitter.api.SearchParameters;\nimport org.springframework.social.twitter.api.Tweet;\nimport org.springframework.social.twitter.api.Twitter;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@Service\npublic class SearchService {\n    private Twitter twitter;\n\n    @Autowired\n    public SearchService(Twitter twitter) {\n        this.twitter = twitter;\n    }\n\n    public List<Tweet> search(String searchType, List<String> keywords) {\n        List<SearchParameters> searches = keywords.stream()\n                .map(taste -> createSearchParam(searchType, taste))\n                .collect(Collectors.toList());\n\n        List<Tweet> results = searches.stream()\n                .map(params -> twitter.searchOperations().search(params))\n                .flatMap(searchResults -> searchResults.getTweets().stream())\n                .collect(Collectors.toList());\n\n        return results;\n    }\n\n    private SearchParameters.ResultType getResultType(String searchType) {\n        for (SearchParameters.ResultType knownType : SearchParameters.ResultType.values()) {\n            if (knownType.name().equalsIgnoreCase(searchType)) {\n                return knownType;\n            }\n        }\n        return SearchParameters.ResultType.RECENT;\n    }\n\n    private SearchParameters createSearchParam(String searchType, String taste) {\n        SearchParameters.ResultType resultType = getResultType(searchType);\n        SearchParameters searchParameters = new SearchParameters(taste);\n        searchParameters.resultType(resultType);\n        searchParameters.count(3);\n        return searchParameters;\n    }\n}\n```", "```java\n<div class=\"row\">\n\n    <div class=\"col m8 s12 offset-m2\">\n        <img th:src=\"img/uploadedPicture}\" width=\"100\" height=\"100\"/>\n    </div>\n\n    <div class=\"col s12 center red-text\" th:text=\"${error}\" th:if=\"${error}\">\n        Error during upload\n    </div>\n\n    <form th:action=\"@{/profile}\" method=\"post\" enctype=\"multipart/form-data\" class=\"col m8 s12 offset-m2\">\n\n        <div class=\"input-field col s6\">\n            <input type=\"file\" id=\"file\" name=\"file\"/>\n        </div>\n\n        <div class=\"col s6 center\">\n            <button class=\"btn indigo waves-effect waves-light\" type=\"submit\" name=\"upload\" th:text=\"#{upload}\">Upload\n                <i class=\"mdi-content-send right\"></i>\n            </button>\n        </div>\n    </form>\n</div>\n```", "```java\nupload=Upload\n```", "```java\nUpload=Envoyer\n```", "```java\n@RequestMapping(value = \"/profile\", params = {\"upload\"}, method = RequestMethod.POST)\npublic String onUpload(@RequestParam MultipartFile file, RedirectAttributes redirectAttrs) throws IOException {\n\n    if (file.isEmpty() || !isImage(file)) {\n        redirectAttrs.addFlashAttribute(\"error\", \"Incorrect file. Please upload a picture.\");\n        return \"redirect:/profile\";\n    }\n\n    Resource picturePath = copyFileToPictures(file);\n    userProfileSession.setPicturePath(picturePath);\n\n    return \"redirect:profile\";\n}\n```", "```java\n@Component\n@Scope(value = \"session\", proxyMode = ScopedProxyMode.TARGET_CLASS)\npublic class UserProfileSession implements Serializable {\n    private URL picturePath;\n\n    public void setPicturePath(Resource picturePath) throws IOException {\n        this.picturePath = picturePath.getURL();\n    }\n\n    public Resource getPicturePath() {\n        return picturePath == null ? null : new UrlResource(picturePath);\n    }\n}\n```", "```java\npackage masterSpringMvc.profile;\n\nimport masterSpringMvc.config.PictureUploadProperties;\nimport org.apache.tomcat.util.http.fileupload.IOUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.MessageSource;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\n\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.*;\nimport java.net.URLConnection;\nimport java.util.Locale;\n\n@Controller\npublic class PictureUploadController {\n    private final Resource picturesDir;\n    private final Resource anonymousPicture;\n    private final MessageSource messageSource;\n    private final UserProfileSession userProfileSession;\n\n    @Autowired\n    public PictureUploadController(PictureUploadProperties uploadProperties,\n                                   MessageSource messageSource,\n                                   UserProfileSession userProfileSession) {\n        picturesDir = uploadProperties.getUploadPath();\n        anonymousPicture = uploadProperties.getAnonymousPicture();\n        this.messageSource = messageSource;\n        this.userProfileSession = userProfileSession;\n    }\n\n    @RequestMapping(value = \"/uploadedPicture\")\n    public void getUploadedPicture(HttpServletResponse response) throws IOException {\n        Resource picturePath = userProfileSession.getPicturePath();\n        if (picturePath == null) {\n            picturePath = anonymousPicture;\n        }\n        response.setHeader(\"Content-Type\", URLConnection.guessContentTypeFromName(picturePath.getFilename()));\n        IOUtils.copy(picturePath.getInputStream(), response.getOutputStream());\n    }\n\n    @RequestMapping(value = \"/profile\", params = {\"upload\"}, method = RequestMethod.POST)\n    public String onUpload(@RequestParam MultipartFile file, RedirectAttributes redirectAttrs) throws IOException {\n\n        if (file.isEmpty() || !isImage(file)) {\n            redirectAttrs.addFlashAttribute(\"error\", \"Incorrect file. Please upload a picture.\");\n            return \"redirect:/profile\";\n        }\n\n        Resource picturePath = copyFileToPictures(file);\n        userProfileSession.setPicturePath(picturePath);\n\n        return \"redirect:profile\";\n    }\n\n    private Resource copyFileToPictures(MultipartFile file) throws IOException {\n        String fileExtension = getFileExtension(file.getOriginalFilename());\n        File tempFile = File.createTempFile(\"pic\", fileExtension, picturesDir.getFile());\n        try (InputStream in = file.getInputStream();\n             OutputStream out = new FileOutputStream(tempFile)) {\n\n            IOUtils.copy(in, out);\n        }\n        return new FileSystemResource(tempFile);\n    }\n\n    @ExceptionHandler(IOException.class)\n    public ModelAndView handleIOException(Locale locale) {\n        ModelAndView modelAndView = new ModelAndView(\"profile/profilePage\");\n        modelAndView.addObject(\"error\", messageSource.getMessage(\"upload.io.exception\", null, locale));\n        modelAndView.addObject(\"profileForm\", userProfileSession.toForm());\n        return modelAndView;\n    }\n\n    @RequestMapping(\"uploadError\")\n    public ModelAndView onUploadError(Locale locale) {\n        ModelAndView modelAndView = new ModelAndView(\"profile/profilePage\");\n        modelAndView.addObject(\"error\", messageSource.getMessage(\"upload.file.too.big\", null, locale));\n        modelAndView.addObject(\"profileForm\", userProfileSession.toForm());\n        return modelAndView;\n    }\n\n    private boolean isImage(MultipartFile file) {\n        return file.getContentType().startsWith(\"image\");\n    }\n\n    private static String getFileExtension(String name) {\n        return name.substring(name.lastIndexOf(\".\"));\n    }\n}\n```", "```java\n@RequestMapping(value = \"/profile\", params = {\"save\"}, method = RequestMethod.POST)\npublic String saveProfile(@Valid ProfileForm profileForm, BindingResult bindingResult) {\n    if (bindingResult.hasErrors()) {\n        return \"profile/profilePage\";\n    }\n    userProfileSession.saveForm(profileForm);\n    return \"redirect:/search/mixed;keywords=\" + String.join(\",\", profileForm.getTastes());\n}\n```", "```java\npackage masterSpringMvc.controller;\n\nimport masterSpringMvc.profile.UserProfileSession;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\nimport java.util.List;\n\n@Controller\npublic class HomeController {\n    private UserProfileSession userProfileSession;\n\n    @Autowired\n    public HomeController(UserProfileSession userProfileSession) {\n        this.userProfileSession = userProfileSession;\n    }\n\n    @RequestMapping(\"/\")\n    public String home() {\n        List<String> tastes = userProfileSession.getTastes();\n        if (tastes.isEmpty()) {\n            return \"redirect:/profile\";\n        }\n        return \"redirect:/search/mixed;keywords=\" + String.join(\",\", tastes);\n    }\n}\n```", "```java\n\n{\n \"_links\" : {\n \"people\" : {\n \"href\" : \"http://localhost:8080/users{?page,size,sort}\",\n \"templated\" : true\n }\n }\n}\n\n```", "```java\n\n{\n \"_links\" : {\n \"self\" : {\n \"href\" : \"http://localhost:8080/users{?page,size,sort}\",\n \"templated\" : true\n },\n \"search\" : {\n \"href\" : \"http://localhost:8080/users/search\"\n }\n },\n \"page\" : {\n \"size\" : 20,\n \"totalElements\" : 0,\n \"totalPages\" : 0,\n \"number\" : 0\n }\n}\n\n```", "```java\npackage masterSpringMvc.search.api;\n\nimport masterSpringMvc.search.SearchService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.social.twitter.api.Tweet;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/search\")\npublic class SearchApiController {\n    private SearchService searchService;\n\n    @Autowired\n    public SearchApiController(SearchService searchService) {\n        this.searchService = searchService;\n    }\n\n    @RequestMapping(value = \"/{searchType}\", method = RequestMethod.GET)\n    public List<Tweet> search(@PathVariable String searchType, @MatrixVariable List<String> keywords) {\n        return searchService.search(searchType, keywords);\n    }\n}\n```", "```java\n\nhttp PUT httpbin.org/put hello=world\n\n```", "```java\n\ncurl -i -X PUT httpbin.org/put -H Content-Type:application/json -d '{\"hello\": \"world\"}'\n\n```", "```java\n{\n \"text\": \"original text\",\n \"user\": \"some_dude\",\n \"profileImageUrl\": \"url\",\n \"lang\": \"en\",\n \"date\": 2015-04-15T20:18:55,\n \"retweetCount\": 42\n}\n\n```", "```java\npackage masterSpringMvc.search;\n\nimport org.springframework.social.twitter.api.Tweet;\nimport org.springframework.social.twitter.api.TwitterProfile;\n\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.util.Date;\n\npublic class LightTweet {\n    private String profileImageUrl;\n    private String user;\n    private String text;\n    private LocalDateTime date;\n    private String lang;\n    private Integer retweetCount;\n\n    public LightTweet(String text) {\n        this.text = text;\n    }\n\n    public static LightTweet ofTweet(Tweet tweet) {\n        LightTweet lightTweet = new LightTweet(tweet.getText());\n        Date createdAt = tweet.getCreatedAt();\n        if (createdAt != null) {\n            lightTweet.date = LocalDateTime.ofInstant(createdAt.toInstant(), ZoneId.systemDefault());\n        }\n        TwitterProfile tweetUser = tweet.getUser();\n        if (tweetUser != null) {\n            lightTweet.user = tweetUser.getName();\n            lightTweet.profileImageUrl = tweetUser.getProfileImageUrl();\n        }\n        lightTweet.lang = tweet.getLanguageCode();\n        lightTweet.retweetCount = tweet.getRetweetCount();\n        return lightTweet;\n    }\n\n  // don't forget to generate getters\n  // They are used by Jackson to serialize objects\n}\n```", "```java\n    public List<LightTweet> search(String searchType, List<String> keywords) {\n        List<SearchParameters> searches = keywords.stream()\n                .map(taste -> createSearchParam(searchType, taste))\n                .collect(Collectors.toList());\n\n        List<LightTweet> results = searches.stream()\n                .map(params -> twitter.searchOperations().search(params))\n                .flatMap(searchResults -> searchResults.getTweets().stream())\n                .map(LightTweet::ofTweet)\n                .collect(Collectors.toList());\n\n        return results;\n    }\n```", "```java\n<ul class=\"collection\">\n    <li class=\"collection-item avatar\" th:each=\"tweet : ${tweets}\">\n        <img th:src=\"img/strong>}\" alt=\"\" class=\"circle\"/>\n        <span class=\"title\" th:text=\"${tweet.user}\">Username</span>\n\n        <p th:text=\"${tweet.text}\">Tweet message</p>\n    </li>\n</ul>\n```", "```java\ncompile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'\n```", "```java\n@Bean\n@Primary\npublic ObjectMapper objectMapper(Jackson2ObjectMapperBuilder builder) {\n   ObjectMapper objectMapper = builder.createXmlMapper(false).build();\n   objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);\n   return objectMapper;\n}\n```", "```java\npackage masterSpringMvc.user;\n\nimport java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class User {\n    private String twitterHandle;\n    private String email;\n    private LocalDate birthDate;\n    private List<String> tastes = new ArrayList<>();\n\n    // Getters and setters for all fields\n}\n```", "```java\npackage masterSpringMvc.user;\n\nimport org.springframework.stereotype.Repository;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\n@Repository\npublic class UserRepository {\n    private final Map<String, User> userMap = new ConcurrentHashMap<>();\n\n    public User save(String email, User user) {\n        user.setEmail(email);\n        return userMap.put(email, user);\n    }\n\n    public User save(User user) {\n        return save(user.getEmail(), user);\n    }\n\n    public User findOne(String email) {\n        return userMap.get(email);\n    }\n\n    public List<User> findAll() {\n        return new ArrayList<>(userMap.values());\n    }\n\n    public void delete(String email) {\n        userMap.remove(email);\n    }\n\n    public boolean exists(String email) {\n        return userMap.containsKey(email);\n    }\n}\n```", "```java\npackage masterSpringMvc.user.api;\n\nimport masterSpringMvc.user.User;\nimport masterSpringMvc.user.UserRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api\")\npublic class UserApiController {\n\n    private UserRepository userRepository;\n\n    @Autowired\n    public UserApiController(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n\n    @RequestMapping(value = \"/users\", method = RequestMethod.GET)\n    public List<User> findAll() {\n        return userRepository.findAll();\n    }\n\n    @RequestMapping(value = \"/users\", method = RequestMethod.POST)\n    public User createUser(@RequestBody User user) {\n        return userRepository.save(user);\n    }\n\n    @RequestMapping(value = \"/user/{email}\", method = RequestMethod.PUT)\n    public User updateUser(@PathVariable String email, @RequestBody User user) {\n        return userRepository.save(email, user);\n    }\n\n    @RequestMapping(value = \"/user/{email}\", method = RequestMethod.DELETE)\n    public void deleteUser(@PathVariable String email) {\n        userRepository.delete(email);\n    }\n}\n```", "```java\n@Override\npublic void configurePathMatch(PathMatchConfigurer configurer) {\n    UrlPathHelper urlPathHelper = new UrlPathHelper();\n    urlPathHelper.setRemoveSemicolonContent(false);\n    configurer.setUrlPathHelper(urlPathHelper);\n    configurer.setUseRegisteredSuffixPatternMatch(true);\n}\n```", "```java\n\n~ $ http get http://localhost:8080/api/users\nHTTP/1.1 200 OK\nContent-Type: application/json;charset=UTF-8\nDate: Mon, 20 Apr 2015 00:01:08 GMT\nServer: Apache-Coyote/1.1\nTransfer-Encoding: chunked\n\n[]\n\n~ $ http post http://localhost:8080/api/users email=geo@springmvc.com birthDate=2011-12-12 tastes:='[\"spring\"]'\nHTTP/1.1 200 OK\nContent-Length: 0\nDate: Mon, 20 Apr 2015 00:02:07 GMT\nServer: Apache-Coyote/1.1\n\n~ $ http get http://localhost:8080/api/users\nHTTP/1.1 200 OK\nContent-Type: application/json;charset=UTF-8\nDate: Mon, 20 Apr 2015 00:02:13 GMT\nServer: Apache-Coyote/1.1\nTransfer-Encoding: chunked\n\n[\n {\n \"birthDate\": \"2011-12-12\",\n \"email\": \"geo@springmvc.com\",\n \"tastes\": [\n \"spring\"\n ],\n \"twitterHandle\": null\n }\n]\n\n~ $ http delete http://localhost:8080/api/user/geo@springmvc.com\nHTTP/1.1 200 OK\nContent-Length: 0\nDate: Mon, 20 Apr 2015 00:02:42 GMT\nServer: Apache-Coyote/1.1\n\n~ $ http get http://localhost:8080/api/users\nHTTP/1.1 200 OK\nContent-Type: application/json;charset=UTF-8\nDate: Mon, 20 Apr 2015 00:02:46 GMT\nServer: Apache-Coyote/1.1\nTransfer-Encoding: chunked\n\n[]\n\n```", "```java\npackage masterSpringMvc.user.api;\n\nimport masterSpringMvc.user.User;\nimport masterSpringMvc.user.UserRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api\")\npublic class UserApiController {\n\n    private UserRepository userRepository;\n\n    @Autowired\n    public UserApiController(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n\n    @RequestMapping(value = \"/users\", method = RequestMethod.GET)\n    public List<User> findAll() {\n        return userRepository.findAll();\n    }\n\n    @RequestMapping(value = \"/users\", method = RequestMethod.POST)\n    public ResponseEntity<User> createUser(@RequestBody User user) {\n        HttpStatus status = HttpStatus.OK;\n        if (!userRepository.exists(user.getEmail())) {\n            status = HttpStatus.CREATED;\n        }\n        User saved = userRepository.save(user);\n        return new ResponseEntity<>(saved, status);\n    }\n\n    @RequestMapping(value = \"/user/{email}\", method = RequestMethod.PUT)\n    public ResponseEntity<User> updateUser(@PathVariable String email, @RequestBody User user) {\n        if (!userRepository.exists(user.getEmail())) {\n            return new ResponseEntity<>(HttpStatus.NOT_FOUND);\n        }\n        User saved = userRepository.save(email, user);\n        return new ResponseEntity<>(saved, HttpStatus.CREATED);\n    }\n\n    @RequestMapping(value = \"/user/{email}\", method = RequestMethod.DELETE)\n    public ResponseEntity<User> deleteUser(@PathVariable String email) {\n        if (!userRepository.exists(email)) {\n            return new ResponseEntity<>(HttpStatus.NOT_FOUND);\n        }\n        userRepository.delete(email);\n        return new ResponseEntity<>(HttpStatus.OK);\n    }\n}\n```", "```java\npackage masterSpringMvc.error;\n\npublic class EntityNotFoundException extends Exception {\n    public EntityNotFoundException(String message) {\n        super(message);\n    }\n\n    public EntityNotFoundException(String message, Throwable cause) {\n        super(message, cause);\n    }\n}\n```", "```java\npackage masterSpringMvc.user;\n\nimport masterSpringMvc.error.EntityNotFoundException;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\n@Repository\npublic class UserRepository {\n    private final Map<String, User> userMap = new ConcurrentHashMap<>();\n\n    public User update(String email, User user) throws EntityNotFoundException {\n        if (!exists(email)) {\n            throw new EntityNotFoundException(\"User \" + email + \" cannot be found\");\n        }\n        user.setEmail(email);\n        return userMap.put(email, user);\n    }\n\n    public User save(User user) {\n        return userMap.put(user.getEmail(), user);\n    }\n\n    public User findOne(String email) throws EntityNotFoundException {\n        if (!exists(email)) {\n            throw new EntityNotFoundException(\"User \" + email + \" cannot be found\");\n        }\n        return userMap.get(email);\n    }\n\n    public List<User> findAll() {\n        return new ArrayList<>(userMap.values());\n    }\n\n    public void delete(String email) throws EntityNotFoundException {\n        if (!exists(email)) {\n            throw new EntityNotFoundException(\"User \" + email + \" cannot be found\");\n        }\n        userMap.remove(email);\n    }\n\n    public boolean exists(String email) {\n        return userMap.containsKey(email);\n    }\n}\n```", "```java\npackage masterSpringMvc.user.api;\n\nimport masterSpringMvc.error.EntityNotFoundException;\nimport masterSpringMvc.user.User;\nimport masterSpringMvc.user.UserRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api\")\npublic class UserApiController {\n\n    private UserRepository userRepository;\n\n    @Autowired\n    public UserApiController(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n\n    @RequestMapping(value = \"/users\", method = RequestMethod.GET)\n    public List<User> findAll() {\n        return userRepository.findAll();\n    }\n\n    @RequestMapping(value = \"/users\", method = RequestMethod.POST)\n    public ResponseEntity<User> createUser(@RequestBody User user) {\n        HttpStatus status = HttpStatus.OK;\n        if (!userRepository.exists(user.getEmail())) {\n            status = HttpStatus.CREATED;\n        }\n        User saved = userRepository.save(user);\n        return new ResponseEntity<>(saved, status);\n    }\n\n    @RequestMapping(value = \"/user/{email}\", method = RequestMethod.PUT)\n    public ResponseEntity<User> updateUser(@PathVariable String email, @RequestBody User user) throws EntityNotFoundException {\n        User saved = userRepository.update(email, user);\n        return new ResponseEntity<>(saved, HttpStatus.CREATED);\n    }\n\n    @RequestMapping(value = \"/user/{email}\", method = RequestMethod.DELETE)\n    public ResponseEntity<User> deleteUser(@PathVariable String email) throws EntityNotFoundException {\n        userRepository.delete(email);\n        return new ResponseEntity<>(HttpStatus.OK);\n    }\n}\n```", "```java\npackage masterSpringMvc.error;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.ResponseStatus;\n\n@ControllerAdvice\npublic class EntityNotFoundMapper {\n\n    @ExceptionHandler(EntityNotFoundException.class)\n    @ResponseStatus(value = HttpStatus.NOT_FOUND, reason = \"Entity could not be found\")\n    public void handleNotFound() {\n    }\n}\n```", "```java\ncompile 'io.springfox:springfox-swagger2:2.1.2'\ncompile 'io.springfox:springfox-swagger-ui:2.1.2'\n```", "```java\n@Configuration\n@EnableSwagger2\npublic class WebConfiguration extends WebMvcConfigurerAdapter {\n }\n```", "```java\n@Bean\npublic Docket userApi() {\n    return new Docket(DocumentationType.SWAGGER_2)\n        .select()\n        .paths(path -> path.startsWith(\"/api/\"))\n        .build();\n}\n```", "```java\ncompile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'\n```", "```java\ncompile 'org.springframework.boot:spring-boot-starter-security'\n```", "```java\n\nUsing default security password: 13212bb6-8583-4080-b790-103408c93115\n\n```", "```java\nsecurity.user.name=admin\nsecurity.user.password=secret\n```", "```java\npackage masterSpringMvc.config;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n@Configuration\n@EnableGlobalMethodSecurity(securedEnabled = true)\npublic class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    public void configureAuth(AuthenticationManagerBuilder auth)\n            throws Exception {\n        auth.inMemoryAuthentication()\n                .withUser(\"user\").password(\"user\").roles(\"USER\").and()\n                .withUser(\"admin\").password(\"admin\").roles(\"USER\", \"ADMIN\");\n    }\n}\n```", "```java\n@RestController\n@RequestMapping(\"/api\")\n@Secured(\"ROLE_ADMIN\")\npublic class UserApiController {\n  // ... code omitted\n}\n```", "```java\n\n> http GET 'http://localhost:8080/api/users' -a user:user -p=h\nHTTP/1.1 403 Forbidden\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\nContent-Type: application/json;charset=UTF-8\nDate: Sat, 23 May 2015 17:40:09 GMT\nExpires: 0\nPragma: no-cache\nServer: Apache-Coyote/1.1\nSet-Cookie: JSESSIONID=2D4761C092EDE9A4DB91FA1CAA16C59B; Path=/; HttpOnly\nTransfer-Encoding: chunked\nX-Content-Type-Options: nosniff\nX-Frame-Options: DENY\nX-XSS-Protection: 1; mode=block\n\n```", "```java\n\n> http GET 'http://localhost:8080/api/users' -a admin:admin -p=h\nHTTP/1.1 200 OK\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\nContent-Type: application/json;charset=UTF-8\nDate: Sat, 23 May 2015 17:42:58 GMT\nExpires: 0\nPragma: no-cache\nServer: Apache-Coyote/1.1\nSet-Cookie: JSESSIONID=CE7A9BF903A25A7A8BAD7D4C30E59360; Path=/; HttpOnly\nTransfer-Encoding: chunked\nX-Content-Type-Options: nosniff\nX-Frame-Options: DENY\nX-XSS-Protection: 1; mode=block\n\n```", "```java\n@Configuration\n@EnableGlobalMethodSecurity(securedEnabled = true)\npublic class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    public void configureAuth(AuthenticationManagerBuilder auth)\n        throws Exception {\n        auth.inMemoryAuthentication()\n            .withUser(\"user\").password(\"user\").roles(\"USER\").and()\n            .withUser(\"admin\").password(\"admin\").roles(\"USER\", \"ADMIN\");\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n            .httpBasic()\n            .and()\n            .csrf().disable()\n            .authorizeRequests()\n            .antMatchers(\"/login\", \"/logout\").permitAll()\n            .antMatchers(HttpMethod.GET, \"/api/**\").hasRole(\"USER\")\n            .antMatchers(HttpMethod.POST, \"/api/**\").hasRole(\"ADMIN\")\n            .antMatchers(HttpMethod.PUT, \"/api/**\").hasRole(\"ADMIN\")\n            .antMatchers(HttpMethod.DELETE, \"/api/**\").hasRole(\"ADMIN\")\n            .anyRequest().authenticated();\n    }\n}\n```", "```java\ncompile 'org.thymeleaf.extras:thymeleaf-extras-springsecurity3'\n```", "```java\n<!DOCTYPE html>\n<html \n\n      >\n<head>\n  <!-- content trimmed -->\n</head>\n<body>\n\n<!-- content trimmed -->\n<nav>\n    <div class=\"nav-wrapper indigo\">\n        <ul class=\"right\">\n        <!-- content trimmed -->\n        </ul>\n    </div>\n</nav>\n<div>\n You are logged as <b sec:authentication=\"name\" /> with roles <span sec:authentication=\"authorities\" />\n -\n <form th:action=\"@{/logout}\" method=\"post\" style=\"display: inline-block\">\n <input type=\"submit\" value=\"Sign Out\" />\n </form>\n <hr/>\n</div>\n\n<section layout:fragment=\"content\">\n    <p>Page content goes here</p>\n</section>\n\n<!-- content trimmed -->\n</body>\n</html>\n```", "```java\n<div sec:authorize=\"hasRole('ROLE_ADMIN')\">\n    You are an administrator\n</div>\n```", "```java\n@Configuration\n@Order(1)\npublic class ApiSecurityConfiguration extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    public void configureAuth(AuthenticationManagerBuilder auth)\n        throws Exception {\n        auth.inMemoryAuthentication()\n            .withUser(\"user\").password(\"user\").roles(\"USER\").and()\n            .withUser(\"admin\").password(\"admin\").roles(\"USER\", \"ADMIN\");\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n            .antMatcher(\"/api/**\")\n            .httpBasic().and()\n            .csrf().disable()\n            .authorizeRequests()\n            .antMatchers(HttpMethod.GET).hasRole(\"USER\")\n            .antMatchers(HttpMethod.POST).hasRole(\"ADMIN\")\n            .antMatchers(HttpMethod.PUT).hasRole(\"ADMIN\")\n            .antMatchers(HttpMethod.DELETE).hasRole(\"ADMIN\")\n            .anyRequest().authenticated();\n    }\n}\n```", "```java\npackage masterSpringMvc.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n@Configuration\npublic class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                .formLogin()\n                .defaultSuccessUrl(\"/profile\")\n                .and()\n                .logout().logoutSuccessUrl(\"/login\")\n                .and()\n                .authorizeRequests()\n                .antMatchers(\"/webjars/**\", \"/login\").permitAll()\n                .anyRequest().authenticated();\n    }\n}\n```", "```java\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    http\n        .formLogin()\n        .loginPage(\"/login\") // <= custom login page\n        .defaultSuccessUrl(\"/profile\")\n        // the rest of the configuration stays the same\n}\n```", "```java\npackage masterSpringMvc.authentication;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class LoginController {\n\n    @RequestMapping(\"/login\")\n    public String authenticate() {\n        return \"login\";\n    }\n}\n```", "```java\n<!DOCTYPE HTML>\n<html \n\n      layout:decorator=\"layout/default\">\n<head>\n    <title>Login</title>\n</head>\n<body>\n<div class=\"section no-pad-bot\" layout:fragment=\"content\">\n    <div class=\"container\">\n\n        <h2 class=\"header center orange-text\">Login</h2>\n\n        <div class=\"row\">\n            <div id=\"errorMessage\" class=\"card-panel red lighten-2\" th:if=\"${param.error}\">\n                <span class=\"card-title\">Invalid user name or password</span>\n            </div>\n\n            <form class=\"col s12\" action=\"/login\" method=\"post\">\n                <div class=\"row\">\n                    <div class=\"input-field col s12\">\n                        <input id=\"username\" name=\"username\" type=\"text\" class=\"validate\"/>\n                        <label for=\"username\">Username</label>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"input-field col s12\">\n                        <input id=\"password\" name=\"password\" type=\"password\" class=\"validate\"/>\n                        <label for=\"password\">Password</label>\n                    </div>\n                </div>\n                <div class=\"row center\">\n                    <button class=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\">Submit\n                        <i class=\"mdi-content-send right\"></i>\n                    </button>\n                </div>\n                <input type=\"hidden\" th:name=\"${_csrf.parameterName}\" th:value=\"${_csrf.token}\"/>\n            </form>\n        </div>\n    </div>\n</div>\n</body>\n</html>\n```", "```java\n<div sec:authorize=\"isAuthenticated()\">\n    You are logged as <b sec:authentication=\"name\"/> with roles <span sec:authentication=\"authorities\"/>\n    -\n    <form th:action=\"@{/logout}\" method=\"post\" style=\"display: inline-block\">\n        <input type=\"submit\" value=\"Sign Out\"/>\n    </form>\n    <hr/>\n</div>\n```", "```java\n.antMatchers(\"/webjars/**\", \"/login\", \"/signin/**\", \"/signup\").permitAll()\n```", "```java\npackage masterSpringMvc.authentication;\n\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.social.connect.Connection;\nimport org.springframework.social.connect.UserProfile;\nimport org.springframework.social.connect.web.SignInAdapter;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.context.request.NativeWebRequest;\n\n@Component\npublic class AuthenticatingSignInAdapter implements SignInAdapter {\n\n    public static void authenticate(Connection<?> connection) {\n        UserProfile userProfile = connection.fetchUserProfile();\n        String username = userProfile.getUsername();\n        UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(username, null, null);\n        SecurityContextHolder.getContext().setAuthentication(authentication);\n        System.out.println(String.format(\"User %s %s connected.\", userProfile.getFirstName(), userProfile.getLastName()));\n    }\n\n    @Override\n    public String signIn(String userId, Connection<?> connection, NativeWebRequest request) {\n        authenticate(connection);\n        return null;\n    }\n}\n```", "```java\npackage masterSpringMvc.authentication;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.social.connect.Connection;\nimport org.springframework.social.connect.ConnectionFactoryLocator;\nimport org.springframework.social.connect.UsersConnectionRepository;\nimport org.springframework.social.connect.web.ProviderSignInUtils;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.context.request.WebRequest;\n\n@Controller\npublic class SignupController {\n    private final ProviderSignInUtils signInUtils;\n\n    @Autowired\n    public SignupController(ConnectionFactoryLocator connectionFactoryLocator, UsersConnectionRepository connectionRepository) {\n        signInUtils = new ProviderSignInUtils(connectionFactoryLocator, connectionRepository);\n    }\n\n    @RequestMapping(value = \"/signup\")\n    public String signup(WebRequest request) {\n        Connection<?> connection = signInUtils.getConnectionFromSession(request);\n        if (connection != null) {\n            AuthenticatingSignInAdapter.authenticate(connection);\n            signInUtils.doPostSignUp(connection.getDisplayName(), request);\n        }\n        return \"redirect:/profile\";\n    }\n}\n```", "```java\n<form th:action=\"@{/signin/twitter}\" method=\"POST\" class=\"center\">\n    <div class=\"row\">\n        <button class=\"btn indigo\" name=\"twitterSignin\" type=\"submit\">Connect with Twitter\n            <i class=\"mdi-social-group-add left\"></i>\n        </button>\n    </div>\n</form>\n```", "```java\n@Bean\n@ConditionalOnBean(SignInAdapter.class)\n@ConditionalOnMissingBean(ProviderSignInController.class)\npublic ProviderSignInController signInController(\n        ConnectionFactoryLocator factoryLocator,\n        UsersConnectionRepository usersRepository, SignInAdapter signInAdapter) {\n    ProviderSignInController controller = new ProviderSignInController(\n            factoryLocator, usersRepository, signInAdapter);\n    if (!CollectionUtils.isEmpty(this.signInInterceptors)) {\n controller.setSignInInterceptors(this.signInInterceptors);\n    }\n    return controller;\n}\n```", "```java\n@Bean\n@Primary\npublic UsersConnectionRepository getUsersConnectionRepository(\n  DataSource dataSource, ConnectionFactoryLocator connectionFactoryLocator) {\n    return new JdbcUsersConnectionRepository(\n      dataSource, connectionFactoryLocator, Encryptors.noOpText());\n}\n```", "```java\n\nbrew install redis\n\n```", "```java\n\nredis-server\n\n```", "```java\ncompile 'org.springframework.boot:spring-boot-starter-redis'\ncompile 'org.springframework.session:spring-session:1.0.1.RELEASE'\n```", "```java\nspring.redis.host=localhost\nspring.redis.port=6379\n```", "```java\npackage masterSpringMvc.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Profile;\nimport org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;\n\n@Configuration\n@Profile(\"redis\")\n@EnableRedisHttpSession\npublic class RedisConfig {\n}\n```", "```java\n\n-Dspring.profiles.active=redis\n\n```", "```java\n\njava -Dserver.port=$PORT -Dspring.profiles.active=redis -jar app.jar\n\n```", "```java\n\nSPRING_PROFILES_ACTIVE=redis ./gradlew bootRun\n\n```", "```java\n\n> redis-cli\n127.0.0.1:6379> KEYS *\n(empty list or set)\n\n```", "```java\n\n127.0.0.1:6379> KEYS *\n1) \"spring:session:expirations:1432487760000\"\n2) \"spring:session:sessions:1768a55b-081a-4673-8535-7449e5729af5\"\n127.0.0.1:6379> HKEYS spring:session:sessions:1768a55b-081a-4673-8535-7449e5729af5\n1) \"sessionAttr:SPRING_SECURITY_CONTEXT\"\n2) \"sessionAttr:org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository.CSRF_TOKEN\"\n3) \"lastAccessedTime\"\n4) \"maxInactiveInterval\"\n5) \"creationTime\"\n\n```", "```java\n\n$ keytool -genkey -alias masterspringmvc -keyalg RSA -keystore src/main/resources/tomcat.keystore\nEnter keystore password: password\nRe-enter new password: password\nWhat is your first and last name?\n [Unknown]:  Master Spring MVC\nWhat is the name of your organizational unit?\n [Unknown]:  Packt\nWhat is the name of your organization?\n [Unknown]:  Packt\nWhat is the name of your City or Locality?\n [Unknown]:  Paris\nWhat is the name of your State or Province?\n [Unknown]:  France\nWhat is the two-letter country code for this unit?\n [Unknown]:  FR\nIs CN=Master Spring MVC, OU=Packt, O=Packt, L=Paris, ST=France, C=FR correct?\n [no]:  yes\n\nEnter key password for <masterspringmvc>\n (RETURN if same as keystore password): password2\nRe-enter new password: password2\n\n```", "```java\n\nserver.port = 8443\nserver.ssl.key-store = classpath:tomcat.keystore\n\u2029server.ssl.key-store-password = password\nserver.ssl.key-password = password2\n\n```", "```java\n@Configuration\npublic class SslConfig {\n\n    @Bean\n    public EmbeddedServletContainerFactory servletContainer() throws IOException {\n        TomcatEmbeddedServletContainerFactory tomcat = new TomcatEmbeddedServletContainerFactory();\n        tomcat.addAdditionalTomcatConnectors(createSslConnector());\n        return tomcat;\n    }\n\n    private Connector createSslConnector() throws IOException {\n        Connector connector = new Connector(Http11NioProtocol.class.getName());\n        Http11NioProtocol protocol =\n                (Http11NioProtocol) connector.getProtocolHandler();\n        connector.setPort(8443);\n        connector.setSecure(true);\n        connector.setScheme(\"https\");\n        protocol.setSSLEnabled(true);\n        protocol.setKeyAlias(\"masterspringmvc\");\n        protocol.setKeystorePass(\"password\");\n        protocol.setKeyPass(\"password2\");\n        protocol.setKeystoreFile(new ClassPathResource(\"tomcat.keystore\").getFile().getAbsolutePath());\n        protocol.setSslProtocol(\"TLS\");\n        return connector;\n    }\n}\n```", "```java\n@Configuration\npublic class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n            .requiresChannel().anyRequest().requiresSecure()\n            .and()\n            /* rest of the configuration */;\n    }\n}\n```", "```java\n\nserver.tomcat.remote_ip_header=x-forwarded-for\nserver.tomcat.protocol_header=x-forwarded-proto\n\n```", "```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = MasterSpringMvc4Application.class)\n@WebAppConfiguration\npublic class MasterSpringMvc4ApplicationTests {\n\n    @Test\n    public void contextLoads() {\n    }\n}\n```", "```java\npackage masterSpringMvc.controller;\n\nimport masterSpringMvc.MasterSpringMvcApplication;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.web.WebAppConfiguration;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport org.springframework.web.context.WebApplicationContext;\n\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\nimport static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = MasterSpringMvcApplication.class)\n@WebAppConfiguration\npublic class HomeControllerTest {\n    @Autowired\n    private WebApplicationContext wac;\n\n    private MockMvc mockMvc;\n\n    @Before\n    public void setup() {\n        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();\n    }\n\n    @Test\n    public void should_redirect_to_profile() throws Exception {\n        this.mockMvc.perform(get(\"/\"))\n                .andDo(print())\n                .andExpect(status().isFound())\n                .andExpect(redirectedUrl(\"/profile\"));\n    }\n}\n```", "```java\nimport org.springframework.mock.web.MockHttpSession;\nimport masterSpringMvc.profile.UserProfileSession;\n\n// put this test below the other one\n@Test\npublic void should_redirect_to_tastes() throws Exception {\n    MockHttpSession session = new MockHttpSession();\n    UserProfileSession sessionBean = new UserProfileSession();\n    sessionBean.setTastes(Arrays.asList(\"spring\", \"groovy\"));\n    session.setAttribute(\"scopedTarget.userProfileSession\", sessionBean);\n\n    this.mockMvc.perform(get(\"/\").session(session))\n        .andExpect(status().isFound())\n        .andExpect(redirectedUrl(\"/search/mixed;keywords=spring,groovy\"));\n}\n```", "```java\n@Test\npublic void should_redirect_to_tastes() throws Exception {\n\n    MockHttpSession session = new SessionBuilder().userTastes(\"spring\", \"groovy\").build();\n    this.mockMvc.perform(get(\"/\")\n        .session(session))\n        .andExpect(status().isFound())\n        .andExpect(redirectedUrl(\"/search/mixed;keywords=spring,groovy\"));\n}\n```", "```java\npublic class SessionBuilder {\n    private final MockHttpSession session;\n    UserProfileSession sessionBean;\n\n    public SessionBuilder() {\n        session = new MockHttpSession();\n        sessionBean = new UserProfileSession();\n        session.setAttribute(\"scopedTarget.userProfileSession\", sessionBean);\n    }\n\n    public SessionBuilder userTastes(String... tastes) {\n        sessionBean.setTastes(Arrays.asList(tastes));\n        return this;\n    }\n\n    public MockHttpSession build() {\n        return session;\n    }\n}\n```", "```java\npackage masterSpringMvc.search;\n\nimport masterSpringMvc.MasterSpringMvcApplication;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.web.WebAppConfiguration;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\nimport java.util.Arrays;\n\nimport static org.hamcrest.Matchers.*;\nimport static org.mockito.Matchers.*;\nimport static org.mockito.Mockito.*;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = MasterSpringMvcApplication.class)\n@WebAppConfiguration\npublic class SearchControllerMockTest {\n    @Mock\n    private SearchService searchService;\n\n    @InjectMocks\n    private SearchController searchController;\n\n    private MockMvc mockMvc;\n\n    @Before\n    public void setup() {\n        MockitoAnnotations.initMocks(this);\n        this.mockMvc = MockMvcBuilders\n                .standaloneSetup(searchController)\n                .setRemoveSemicolonContent(false)\n                .build();\n    }\n\n    @Test\n    public void should_search() throws Exception {\n\n        when(searchService.search(anyString(), anyListOf(String.class)))\n                .thenReturn(Arrays.asList(\n                        new LightTweet(\"tweetText\")\n                ));\n\n        this.mockMvc.perform(get(\"/search/mixed;keywords=spring\"))\n                .andExpect(status().isOk())\n                .andExpect(view().name(\"resultPage\"))\n                .andExpect(model().attribute(\"tweets\", everyItem(\n                        hasProperty(\"text\", is(\"tweetText\"))\n                )));\n\n        verify(searchService, times(1)).search(anyString(), anyListOf(String.class));\n    }\n}\n```", "```java\npublic interface TwitterSearch {\n    List<LightTweet> search(String searchType, List<String> keywords);\n}\n```", "```java\npackage masterSpringMvc.search;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\n\nimport java.util.Arrays;\n\n@Configuration\npublic class StubTwitterSearchConfig {\n    @Primary @Bean\n    public TwitterSearch twitterSearch() {\n        return (searchType, keywords) -> Arrays.asList(\n                new LightTweet(\"tweetText\"),\n                new LightTweet(\"secondTweet\")\n        );\n    }\n}\n```", "```java\npackage masterSpringMvc.search;\n\nimport masterSpringMvc.MasterSpringMvcApplication;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.web.WebAppConfiguration;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport org.springframework.web.context.WebApplicationContext;\n\nimport static org.hamcrest.Matchers.*;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = {\n        MasterSpringMvcApplication.class,\n        StubTwitterSearchConfig.class\n})\n@WebAppConfiguration\npublic class SearchControllerTest {\n    @Autowired\n    private WebApplicationContext wac;\n\n    private MockMvc mockMvc;\n\n    @Before\n    public void setup() {\n        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();\n    }\n\n    @Test\n    public void should_search() throws Exception {\n\n        this.mockMvc.perform(get(\"/search/mixed;keywords=spring\"))\n                .andExpect(status().isOk())\n                .andExpect(view().name(\"resultPage\"))\n                .andExpect(model().attribute(\"tweets\", hasSize(2)))\n                .andExpect(model().attribute(\"tweets\",\n                                hasItems(\n                                        hasProperty(\"text\", is(\"tweetText\")),\n                                        hasProperty(\"text\", is(\"secondTweet\"))\n                                ))\n                );\n    }\n}\n```", "```java\ntestCompile 'com.jayway.jsonpath:json-path'\n```", "```java\npackage masterSpringMvc.search.api;\n\nimport masterSpringMvc.MasterSpringMvcApplication;\nimport masterSpringMvc.search.StubTwitterSearchConfig;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.web.WebAppConfiguration;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport org.springframework.web.context.WebApplicationContext;\n\nimport static org.hamcrest.Matchers.*;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = {\n        MasterSpringMvcApplication.class,\n        StubTwitterSearchConfig.class\n})\n@WebAppConfiguration\npublic class SearchApiControllerTest {\n    @Autowired\n    private WebApplicationContext wac;\n\n    private MockMvc mockMvc;\n\n    @Before\n    public void setup() {\n        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();\n    }\n\n    @Test\n    public void should_search() throws Exception {\n\n        this.mockMvc.perform(\n                get(\"/api/search/mixed;keywords=spring\")\n                        .accept(MediaType.APPLICATION_JSON))\n                .andDo(print())\n                .andExpect(status().isOk())\n                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))\n                .andExpect(jsonPath(\"$\", hasSize(2)))\n                .andExpect(jsonPath(\"$[0].text\", is(\"tweetText\")))\n                .andExpect(jsonPath(\"$[1].text\", is(\"secondTweet\")));\n    }\n}\n```", "```java\ntestCompile 'org.assertj:assertj-core:3.0.0'\n```", "```java\nvoid reset(User... users) {\n        userMap.clear();\n        for (User user : users) {\n                save(user);\n        }\n}\n```", "```java\npackage masterSpringMvc.user.api;\n\nimport masterSpringMvc.MasterSpringMvcApplication;\nimport masterSpringMvc.user.User;\nimport masterSpringMvc.user.UserRepository;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.web.WebAppConfiguration;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport org.springframework.web.context.WebApplicationContext;\n\nimport static org.hamcrest.Matchers.*;\n   import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = MasterSpringMvcApplication.class)\n@WebAppConfiguration\npublic class UserApiControllerTest {\n\n    @Autowired\n    private WebApplicationContext wac;\n\n    @Autowired\n    private UserRepository userRepository;\n\n    private MockMvc mockMvc;\n\n    @Before\n    public void setup() {\n        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();\n        userRepository.reset(new User(\"bob@spring.io\"));\n    }\n\n    @Test\n    public void should_list_users() throws Exception {\n        this.mockMvc.perform(\n                get(\"/api/users\")\n                        .accept(MediaType.APPLICATION_JSON)\n        )\n                .andExpect(status().isOk())\n                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))\n                .andExpect(jsonPath(\"$\", hasSize(1)))\n                .andExpect(jsonPath(\"$[0].email\", is(\"bob@spring.io\")));\n    }\n}\n```", "```java\nimport static org.assertj.core.api.Assertions.assertThat;\n\n// Insert this test below the previous one\n@Test\npublic void should_create_new_user() throws Exception {\n        User user = new User(\"john@spring.io\");\n        this.mockMvc.perform(\n                post(\"/api/users\")\n                        .contentType(MediaType.APPLICATION_JSON)\n                        .content(JsonUtil.toJson(user))\n        )\n                .andExpect(status().isCreated());\n\n        assertThat(userRepository.findAll())\n                .extracting(User::getEmail)\n                .containsOnly(\"bob@spring.io\", \"john@spring.io\");\n}\n```", "```java\nimport static org.assertj.core.api.Assertions.assertThat;\n```", "```java\npackage masterSpringMvc.utils;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport java.io.IOException;\n\npublic class JsonUtil {\n    public static byte[] toJson(Object object) throws IOException {\n        ObjectMapper mapper = new ObjectMapper();\n        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n        return mapper.writeValueAsBytes(object);\n    }\n}\n```", "```java\n@Test\npublic void should_delete_user() throws Exception {\n        this.mockMvc.perform(\n                delete(\"/api/user/bob@spring.io\")\n                        .accept(MediaType.APPLICATION_JSON)\n        )\n                .andExpect(status().isOk());\n\n        assertThat(userRepository.findAll()).hasSize(0);\n}\n\n@Test\npublic void should_return_not_found_when_deleting_unknown_user() throws Exception {\n        this.mockMvc.perform(\n                delete(\"/api/user/non-existing@mail.com\")\n                        .accept(MediaType.APPLICATION_JSON)\n        )\n                .andExpect(status().isNotFound());\n}\n```", "```java\n@Test\npublic void put_should_update_existing_user() throws Exception {\n        User user = new User(\"ignored@spring.io\");\n        this.mockMvc.perform(\n                put(\"/api/user/bob@spring.io\")\n                        .content(JsonUtil.toJson(user))\n                        .contentType(MediaType.APPLICATION_JSON)\n        )\n                .andExpect(status().isOk());\n\n        assertThat(userRepository.findAll())\n                .extracting(User::getEmail)\n                .containsOnly(\"bob@spring.io\");\n}\n```", "```java\n   @RequestMapping(value = \"/user/{email}\", method = RequestMethod.PUT)\n    public ResponseEntity<User> updateUser(@PathVariable String email, @RequestBody User user) throws EntityNotFoundException {\n        User saved = userRepository.update(email, user);\n        return new ResponseEntity<>(saved, HttpStatus.CREATED);\n    }\n```", "```java\npackage masterSpringMvc.user.api;\n\nimport masterSpringMvc.MasterSpringMvcApplication;\nimport masterSpringMvc.user.User;\nimport masterSpringMvc.user.UserRepository;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.http.MediaType;\nimport org.springframework.security.web.FilterChainProxy;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.web.WebAppConfiguration;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport org.springframework.web.context.WebApplicationContext;\n\nimport java.util.Base64;\n\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = MasterSpringMvcApplication.class)\n@WebAppConfiguration\npublic class UserApiControllerAuthTest {\n\n    @Autowired\n    private FilterChainProxy springSecurityFilter;\n\n    @Autowired\n    private WebApplicationContext wac;\n\n    @Autowired\n    private UserRepository userRepository;\n\n    private MockMvc mockMvc;\n\n    @Before\n    public void setup() {\n        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).addFilter(springSecurityFilter).build();\n        userRepository.reset(new User(\"bob@spring.io\"));\n    }\n\n    @Test\n    public void unauthenticated_cannot_list_users() throws Exception {\n        this.mockMvc.perform(\n                get(\"/api/users\")\n                        .accept(MediaType.APPLICATION_JSON)\n        )\n                .andExpect(status().isUnauthorized());\n    }\n\n    @Test\n    public void admin_can_list_users() throws Exception {\n        this.mockMvc.perform(\n                get(\"/api/users\")\n                        .accept(MediaType.APPLICATION_JSON)\n                        .header(\"Authorization\", basicAuth(\"admin\", \"admin\"))\n        )\n                .andExpect(status().isOk());\n    }\n\n    private String basicAuth(String login, String password) {\n        byte[] auth = (login + \":\" + password).getBytes();\n        return \"Basic \" + Base64.getEncoder().encodeToString(auth);\n    }\n}\n```", "```java\nconfigurations {\n    integrationTestCompile.extendsFrom testCompile\n    integrationTestRuntime.extendsFrom testRuntime\n}\n```", "```java\nsourceSets {\n    integrationTest {\n        compileClasspath += main.output + test.output\n        runtimeClasspath += main.output + test.output\n    }\n}\n```", "```java\ntask integrationTest(type: Test) {\n    testClassesDir = sourceSets.integrationTest.output.classesDir\n    classpath = sourceSets.integrationTest.runtimeClasspath\n    reports.html.destination = file(\"${reporting.baseDir}/integrationTests\")\n}\n```", "```java\ntestCompile 'org.fluentlenium:fluentlenium-assertj:0.10.3'\ntestCompile 'com.codeborne:phantomjsdriver:1.2.1'\ntestCompile 'org.seleniumhq.selenium:selenium-java:2.45.0'\n```", "```java\n+--- org.fluentlenium:fluentlenium-assertj:0.10.3\n|    +--- org.fluentlenium:fluentlenium-core:0.10.3\n|    |    \\--- org.seleniumhq.selenium:selenium-java:2.44.0 -> 2.45.0\n|    |         +--- org.seleniumhq.selenium:selenium-chrome-driver:2.45.0\n\n|    |         +--- org.seleniumhq.selenium:selenium-htmlunit-driver:2.45.0\n\n|    |         +--- org.seleniumhq.selenium:selenium-firefox-driver:2.45.0\n\n|    |         +--- org.seleniumhq.selenium:selenium-ie-driver:2.45.0\n\n|    |         +--- org.seleniumhq.selenium:selenium-safari-driver:2.45.0\n\n|    |         +--- org.webbitserver:webbit:0.4.14 (*)\n|    |         \\--- org.seleniumhq.selenium:selenium-leg-rc:2.45.0\n|    |              \\--- org.seleniumhq.selenium:selenium-remote-driver:2.45.0 (*)\n|    \\--- org.assertj:assertj-core:1.6.1 -> 3.0.0\n```", "```java\nconfigurations {\n    testCompile {\n        exclude module: 'selenium-safari-driver'\n        exclude module: 'selenium-ie-driver'\n        //exclude module: 'selenium-firefox-driver'\n        exclude module: 'selenium-htmlunit-driver'\n        exclude module: 'selenium-chrome-driver'\n    }\n}\n```", "```java\nimport masterSpringMvc.MasterSpringMvcApplication;\nimport masterSpringMvc.search.StubTwitterSearchConfig;\nimport org.fluentlenium.adapter.FluentTest;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.phantomjs.PhantomJSDriver;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.boot.test.WebIntegrationTest;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = {\n        MasterSpringMvcApplication.class,\n        StubTwitterSearchConfig.class\n})\n@WebIntegrationTest(randomPort = true)\npublic class FluentIntegrationTest extends FluentTest {\n\n    @Value(\"${local.server.port}\")\n    private int serverPort;\n\n    @Override\n    public WebDriver getDefaultDriver() {\n        return new PhantomJSDriver();\n    }\n\n    public String getDefaultBaseUrl() {\n        return \"http://localhost:\" + serverPort;\n    }\n\n    @Test\n    public void hasPageTitle() {\n        goTo(\"/\");\n        assertThat(findFirst(\"h2\").getText()).isEqualTo(\"Login\");\n    }\n}\n```", "```java\n\njava.lang.IllegalStateException: The path to the driver executable must be set by the phantomjs.binary.path capability/system property/PATH variable; for more information, see https://github.com/ariya/phantomjs/wiki. The latest version can be downloaded from http://phantomjs.org/download.html\n\n```", "```java\npackage masterSpringMvc.auth;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.social.connect.ConnectionFactoryLocator;\nimport org.springframework.social.connect.UsersConnectionRepository;\nimport org.springframework.social.connect.web.ProviderSignInController;\nimport org.springframework.social.connect.web.SignInAdapter;\nimport org.springframework.web.context.request.NativeWebRequest;\nimport org.springframework.web.servlet.view.RedirectView;\n\n@Configuration\npublic class StubSocialSigninConfig {\n\n    @Bean\n    @Primary\n    @Autowired\n    public ProviderSignInController signInController(ConnectionFactoryLocator factoryLocator,\n                                                     UsersConnectionRepository usersRepository,\n                                                     SignInAdapter signInAdapter) {\n        return new FakeSigninController(factoryLocator, usersRepository, signInAdapter);\n    }\n\n    public class FakeSigninController extends ProviderSignInController {\n        public FakeSigninController(ConnectionFactoryLocator connectionFactoryLocator,\n                                    UsersConnectionRepository usersConnectionRepository,\n                                    SignInAdapter signInAdapter) {\n            super(connectionFactoryLocator, usersConnectionRepository, signInAdapter);\n        }\n\n        @Override\n        public RedirectView signIn(String providerId, NativeWebRequest request) {\n            UsernamePasswordAuthenticationToken authentication =\n                    new UsernamePasswordAuthenticationToken(\"geowarin\", null, null);\n            SecurityContextHolder.getContext().setAuthentication(authentication);\n            return new RedirectView(\"/\");\n        }\n    }\n}\n```", "```java\nimport masterSpringMvc.MasterSpringMvcApplication;\nimport masterSpringMvc.auth.StubSocialSigninConfig;\nimport masterSpringMvc.search.StubTwitterSearchConfig;\nimport org.fluentlenium.adapter.FluentTest;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.phantomjs.PhantomJSDriver;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.boot.test.WebIntegrationTest;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.fluentlenium.core.filter.FilterConstructor.withName;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = {\n        MasterSpringMvcApplication.class,\n        StubTwitterSearchConfig.class,\n        StubSocialSigninConfig.class\n})\n@WebIntegrationTest(randomPort = true)\npublic class FluentIntegrationTest extends FluentTest {\n\n    @Value(\"${local.server.port}\")\n    private int serverPort;\n\n    @Override\n    public WebDriver getDefaultDriver() {\n        return new PhantomJSDriver();\n    }\n\n    public String getDefaultBaseUrl() {\n        return \"http://localhost:\" + serverPort;\n    }\n\n    @Test\n    public void hasPageTitle() {\n        goTo(\"/\");\n        assertThat(findFirst(\"h2\").getText()).isEqualTo(\"Login\");\n    }\n\n    @Test\n    public void should_be_redirected_after_filling_form() {\n        goTo(\"/\");\n        assertThat(findFirst(\"h2\").getText()).isEqualTo(\"Login\");\n\n        find(\"button\", withName(\"twitterSignin\")).click();\n assertThat(findFirst(\"h2\").getText()).isEqualTo(\"Your profile\");\n\n        fill(\"#twitterHandle\").with(\"geowarin\");\n        fill(\"#email\").with(\"geowarin@mymail.com\");\n        fill(\"#birthDate\").with(\"03/19/1987\");\n\n        find(\"button\", withName(\"addTaste\")).click();\n        fill(\"#tastes0\").with(\"spring\");\n\n        find(\"button\", withName(\"save\")).click();\n\n        takeScreenShot();\n        assertThat(findFirst(\"h2\").getText()).isEqualTo(\"Tweet results for spring\");\n        assertThat(findFirst(\"ul.collection\").find(\"li\")).hasSize(2);\n    }\n}\n```", "```java\npackage pages;\n\nimport org.fluentlenium.core.FluentPage;\nimport org.fluentlenium.core.domain.FluentWebElement;\nimport org.openqa.selenium.support.FindBy;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class LoginPage extends FluentPage {\n    @FindBy(name = \"twitterSignin\")\n    FluentWebElement signinButton;\n\n    public String getUrl() {\n        return \"/login\";\n    }\n\n    public void isAt() {\n        assertThat(findFirst(\"h2\").getText()).isEqualTo(\"Login\");\n    }\n\n    public void login() {\n        signinButton.click();\n    }\n}\n```", "```java\npackage pages;\n\nimport org.fluentlenium.core.FluentPage;\nimport org.fluentlenium.core.domain.FluentWebElement;\nimport org.openqa.selenium.support.FindBy;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class ProfilePage extends FluentPage {\n    @FindBy(name = \"addTaste\")\n    FluentWebElement addTasteButton;\n    @FindBy(name = \"save\")\n    FluentWebElement saveButton;\n\n    public String getUrl() {\n        return \"/profile\";\n    }\n\n    public void isAt() {\n        assertThat(findFirst(\"h2\").getText()).isEqualTo(\"Your profile\");\n    }\n\n    public void fillInfos(String twitterHandle, String email, String birthDate) {\n        fill(\"#twitterHandle\").with(twitterHandle);\n        fill(\"#email\").with(email);\n        fill(\"#birthDate\").with(birthDate);\n    }\n\n    public void addTaste(String taste) {\n        addTasteButton.click();\n        fill(\"#tastes0\").with(taste);\n    }\n\n    public void saveProfile() {\n        saveButton.click();\n    }\n}\n```", "```java\npackage pages;\n\nimport com.google.common.base.Joiner;\nimport org.fluentlenium.core.FluentPage;\nimport org.fluentlenium.core.domain.FluentWebElement;\nimport org.openqa.selenium.support.FindBy;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class SearchResultPage extends FluentPage {\n    @FindBy(css = \"ul.collection\")\n    FluentWebElement resultList;\n\n    public void isAt(String... keywords) {\n        assertThat(findFirst(\"h2\").getText())\n                .isEqualTo(\"Tweet results for \" + Joiner.on(\",\").join(keywords));\n    }\n\n    public int getNumberOfResults() {\n        return resultList.find(\"li\").size();\n    }\n}\n```", "```java\n@Page\nprivate LoginPage loginPage;\n@Page\nprivate ProfilePage profilePage;\n@Page\nprivate SearchResultPage searchResultPage;\n\n@Test\npublic void should_be_redirected_after_filling_form() {\n    goTo(\"/\");\n    loginPage.isAt();\n\n    loginPage.login();\n    profilePage.isAt();\n\n    profilePage.fillInfos(\"geowarin\", \"geowarin@mymail.com\", \"03/19/1987\");\n    profilePage.addTaste(\"spring\");\n\n    profilePage.saveProfile();\n\n    takeScreenShot();\n    searchResultPage.isAt();\n    assertThat(searchResultPage.getNumberOfResults()).isEqualTo(2);\n}\n```", "```java\napply plugin: 'java'\n```", "```java\napply plugin: 'groovy'\n```", "```java\ntestCompile 'org.codehaus.groovy:groovy-all:2.4.4:indy'\ntestCompile 'org.spockframework:spock-spring'\n```", "```java\npackage masterSpringMvc.controller\n\nimport masterSpringMvc.MasterSpringMvcApplication\nimport masterSpringMvc.search.StubTwitterSearchConfig\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.boot.test.SpringApplicationContextLoader\nimport org.springframework.test.context.ContextConfiguration\nimport org.springframework.test.context.web.WebAppConfiguration\nimport org.springframework.test.web.servlet.MockMvc\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders\nimport org.springframework.web.context.WebApplicationContext\nimport spock.lang.Specification\n\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\n@ContextConfiguration(loader = SpringApplicationContextLoader,\n        classes = [MasterSpringMvcApplication, StubTwitterSearchConfig])\n@WebAppConfiguration\nclass HomeControllerSpec extends Specification {\n    @Autowired\n    WebApplicationContext wac;\n\n    MockMvc mockMvc;\n\n    def setup() {\n        mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();\n    }\n\n    def \"User is redirected to its profile on his first visit\"() {\n        when: \"I navigate to the home page\"\n        def response = this.mockMvc.perform(get(\"/\"))\n\n        then: \"I am redirected to the profile page\"\n        response\n                .andExpect(status().isFound())\n                .andExpect(redirectedUrl(\"/profile\"))\n    }\n}\n```", "```java\npackage masterSpringMvc.search\n\nimport masterSpringMvc.MasterSpringMvcApplication\nimport org.springframework.boot.test.SpringApplicationContextLoader\nimport org.springframework.test.context.ContextConfiguration\nimport org.springframework.test.context.web.WebAppConfiguration\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders\nimport spock.lang.Specification\n\nimport static org.hamcrest.Matchers.*;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\n@ContextConfiguration(loader = SpringApplicationContextLoader,\n        classes = [MasterSpringMvcApplication])\n@WebAppConfiguration\nclass SearchControllerMockSpec extends Specification {\n    def twitterSearch = Mock(TwitterSearch)\n    def searchController = new SearchController(twitterSearch)\n\n    def mockMvc = MockMvcBuilders.standaloneSetup(searchController)\n            .setRemoveSemicolonContent(false)\n            .build()\n\n    def \"searching for the spring keyword should display the search page\"() {\n        when: \"I search for spring\"\n        def response = mockMvc.perform(get(\"/search/mixed;keywords=spring\"))\n\n        then: \"The search service is called once\"\n        1 * twitterSearch.search(_, _) >> [new LightTweet('tweetText')]\n\n        and: \"The result page is shown\"\n        response\n                .andExpect(status().isOk())\n                .andExpect(view().name(\"resultPage\"))\n\n        and: \"The model contains the result tweets\"\n        response\n                .andExpect(model().attribute(\"tweets\", everyItem(\n                hasProperty(\"text\", is(\"tweetText\"))\n        )))\n    }\n}\n```", "```java\ntestCompile 'org.gebish:geb-spock:0.12.0'\n```", "```java\nimport org.openqa.selenium.Dimension\nimport org.openqa.selenium.firefox.FirefoxDriver\nimport org.openqa.selenium.phantomjs.PhantomJSDriver\n\nreportsDir = new File('./build/geb-reports')\ndriver = {\n        def driver = new FirefoxDriver()\n    // def driver = new PhantomJSDriver()\n    driver.manage().window().setSize(new Dimension(1024, 768))\n    return driver\n}\n```", "```java\nimport geb.Configuration\nimport geb.spock.GebSpec\nimport masterSpringMvc.MasterSpringMvcApplication\nimport masterSpringMvc.search.StubTwitterSearchConfig\nimport org.springframework.beans.factory.annotation.Value\nimport org.springframework.boot.test.SpringApplicationContextLoader\nimport org.springframework.boot.test.WebIntegrationTest\nimport org.springframework.test.context.ContextConfiguration\n\n@ContextConfiguration(loader = SpringApplicationContextLoader,\n        classes = [MasterSpringMvcApplication, StubTwitterSearchConfig])\n@WebIntegrationTest(randomPort = true)\nclass IntegrationSpec extends GebSpec {\n\n    @Value('${local.server.port}')\n    int port\n\n    Configuration createConf() {\n        def configuration = super.createConf()\n        configuration.baseUrl = \"http://localhost:$port\"\n        configuration\n    }\n\n    def \"User is redirected to the login page when not logged\"() {\n        when: \"I navigate to the home page\"\n        go '/'\n//        report 'navigation-redirection'\n\n        then: \"I am redirected to the profile page\"\n        $('h2', 0).text() == 'Login'\n    }\n}\n```", "```java\npackage geb.pages\n\nimport geb.Page\n\nclass LoginPage extends Page {\n\n    static url = '/login'\n    static at = { $('h2', 0).text() == 'Login' }\n    static content = {\n        twitterSignin { $('button', name: 'twitterSignin') }\n    }\n\n    void loginWithTwitter() {\n        twitterSignin.click()\n    }\n}\n```", "```java\npackage geb.pages\n\nimport geb.Page\n\nclass ProfilePage extends Page {\n\n    static url = '/profile'\n    static at = { $('h2', 0).text() == 'Your profile' }\n    static content = {\n        addTasteButton { $('button', name: 'addTaste') }\n        saveButton { $('button', name: 'save') }\n    }\n\n    void fillInfos(String twitterHandle, String email, String birthDate) {\n        $(\"#twitterHandle\") << twitterHandle\n        $(\"#email\") << email\n        $(\"#birthDate\") << birthDate\n    }\n\n    void addTaste(String taste) {\n        addTasteButton.click()\n        $(\"#tastes0\") << taste\n    }\n\n    void saveProfile() {\n        saveButton.click();\n    }\n}\n```", "```java\npackage geb.pages\n\nimport geb.Page\n\nclass SearchResultPage extends Page {\n    static url = '/search'\n    static at = { $('h2', 0).text().startsWith('Tweet results for') }\n    static content = {\n        resultList { $('ul.collection') }\n        results { resultList.find('li') }\n    }\n}\n```", "```java\nimport geb.Configuration\nimport geb.pages.LoginPage\nimport geb.pages.ProfilePage\nimport geb.pages.SearchResultPage\nimport geb.spock.GebSpec\nimport masterSpringMvc.MasterSpringMvcApplication\nimport masterSpringMvc.auth.StubSocialSigninConfig\nimport masterSpringMvc.search.StubTwitterSearchConfig\nimport org.springframework.beans.factory.annotation.Value\nimport org.springframework.boot.test.SpringApplicationContextLoader\nimport org.springframework.boot.test.WebIntegrationTest\nimport org.springframework.test.context.ContextConfiguration\n\n@ContextConfiguration(loader = SpringApplicationContextLoader,\n        classes = [MasterSpringMvcApplication, StubTwitterSearchConfig, StubSocialSigninConfig])\n@WebIntegrationTest(randomPort = true)\nclass IntegrationSpec extends GebSpec {\n\n    @Value('${local.server.port}')\n    int port\n\n    Configuration createConf() {\n        def configuration = super.createConf()\n        configuration.baseUrl = \"http://localhost:$port\"\n        configuration\n    }\n\n    def \"User is redirected to the login page when not logged\"() {\n        when: \"I navigate to the home page\"\n        go '/'\n\n        then: \"I am redirected to the login page\"\n        $('h2').text() == 'Login'\n    }\n\n    def \"User is redirected to its profile on his first visit\"() {\n        when: 'I am connected'\n        to LoginPage\n        loginWithTwitter()\n\n        and: \"I navigate to the home page\"\n        go '/'\n\n        then: \"I am redirected to the profile page\"\n        $('h2').text() == 'Your profile'\n    }\n\n    def \"After filling his profile, the user is taken to result matching his tastes\"() {\n        given: 'I am connected'\n        to LoginPage\n        loginWithTwitter()\n\n        and: 'I am on my profile'\n        to ProfilePage\n\n        when: 'I fill my profile'\n        fillInfos(\"geowarin\", \"geowarin@mymail.com\", \"03/19/1987\");\n        addTaste(\"spring\")\n\n        and: 'I save it'\n        saveProfile()\n\n        then: 'I am taken to the search result page'\n        at SearchResultPage\n        page.results.size() == 2\n    }\n}\n```", "```java\nspring.thymeleaf.cache=true\nspring.messages.cache-seconds=-1\n```", "```java\nserver.tomcat.compression=on\nserver.tomcat.compressableMimeTypes=text/html,text/xml,text/css,text/plain,\\\n  application/json,application/xml,application/javascript\n```", "```java\nsecurity.headers.cache=false\n\n# Cache resources for 3 days\nspring.resources.cache-period=259200\n```", "```java\n@Override\npublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n    // This is just an example\n    registry.addResourceHandler(\"/img/**\")\n            .addResourceLocations(\"classpath:/static/images/\")\n            .setCachePeriod(12);\n}\n```", "```java\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    http\n        .antMatcher(\"/api/**\")\n// This is just an example \u2013 not required in our case\n        .headers().cacheControl().disable()\n        .httpBasic().and()\n        .csrf().disable()\n        .authorizeRequests()\n        .antMatchers(HttpMethod.GET).hasRole(\"USER\")\n        .antMatchers(HttpMethod.POST).hasRole(\"ADMIN\")\n        .antMatchers(HttpMethod.PUT).hasRole(\"ADMIN\")\n        .antMatchers(HttpMethod.DELETE).hasRole(\"ADMIN\")\n        .anyRequest().authenticated();\n}\n```", "```java\npackage masterSpringMvc.config;\n\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.cache.concurrent.ConcurrentMapCache;\nimport org.springframework.cache.support.SimpleCacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.Arrays;\n\n@Configuration\n@EnableCaching\npublic class CacheConfiguration {\n\n    @Bean\n    public CacheManager cacheManager() {\n        SimpleCacheManager simpleCacheManager = new SimpleCacheManager();\n        simpleCacheManager.setCaches(Arrays.asList(\n                new ConcurrentMapCache(\"searches\")\n        ));\n        return simpleCacheManager;\n    }\n}\n```", "```java\npackage masterSpringMvc.search;\n\nimport org.springframework.social.twitter.api.SearchParameters;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class SearchParamsBuilder {\n\n    public static SearchParameters createSearchParam(String searchType, String taste) {\n        SearchParameters.ResultType resultType = getResultType(searchType);\n        SearchParameters searchParameters = new SearchParameters(taste);\n        searchParameters.resultType(resultType);\n        searchParameters.count(3);\n        return searchParameters;\n    }\n\n    private static SearchParameters.ResultType getResultType(String searchType) {\n        for (SearchParameters.ResultType knownType : SearchParameters.ResultType.values()) {\n            if (knownType.name().equalsIgnoreCase(searchType)) {\n                return knownType;\n            }\n        }\n        return SearchParameters.ResultType.RECENT;\n    }\n}\n```", "```java\npublic class LightTweet implements Serializable {\n    // the rest of the code remains unchanged\n}\n```", "```java\npackage masterSpringMvc.search.cache;\n\nimport masterSpringMvc.search.LightTweet;\nimport masterSpringMvc.search.SearchParamsBuilder;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.social.TwitterProperties;\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.social.twitter.api.SearchParameters;\nimport org.springframework.social.twitter.api.Twitter;\nimport org.springframework.social.twitter.api.impl.TwitterTemplate;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@Service\npublic class SearchCache {\n    protected final Log logger = LogFactory.getLog(getClass());\n    private Twitter twitter;\n\n    @Autowired\n    public SearchCache(TwitterProperties twitterProperties) {\n        this.twitter = new TwitterTemplate(twitterProperties.getAppId(), twitterProperties.getAppSecret());\n    }\n\n    @Cacheable(\"searches\")\n    public List<LightTweet> fetch(String searchType, String keyword) {\n        logger.info(\"Cache miss for \" + keyword);\n        SearchParameters searchParam = SearchParamsBuilder.createSearchParam(searchType, keyword);\n        return twitter.searchOperations()\n                .search(searchParam)\n                .getTweets().stream()\n                .map(LightTweet::ofTweet)\n                .collect(Collectors.toList());\n    }\n}\n```", "```java\npackage masterSpringMvc.search;\n\nimport masterSpringMvc.search.cache.SearchCache;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Profile;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@Service\n@Profile(\"!async\")\npublic class SearchService implements TwitterSearch {\n    private SearchCache searchCache;\n\n    @Autowired\n    public SearchService(SearchCache searchCache) {\n        this.searchCache = searchCache;\n    }\n\n    @Override\n    public List<LightTweet> search(String searchType, List<String> keywords) {\n        return keywords.stream()\n                .flatMap(keyword -> searchCache.fetch(searchType, keyword).stream())\n                .collect(Collectors.toList());\n    }\n}\n```", "```java\n2015-08-03 16:04:01.958  INFO 38259 --- [nio-8080-exec-8] m.search.cache.SearchCache               : Cache miss for docker\n2015-08-03 16:04:02.437  INFO 38259 --- [nio-8080-exec-8] m.search.cache.SearchCache               : Cache miss for spring\n2015-08-03 16:04:02.728  INFO 38259 --- [nio-8080-exec-8] m.search.cache.SearchCache               : Cache miss for spring boot\n2015-08-03 16:04:03.098  INFO 38259 --- [nio-8080-exec-8] m.search.cache.SearchCache               : Cache miss for spring mvc\n2015-08-03 16:04:03.383  INFO 38259 --- [nio-8080-exec-8] m.search.cache.SearchCache               : Cache miss for groovy\n2015-08-03 16:04:03.967  INFO 38259 --- [nio-8080-exec-8] m.search.cache.SearchCache               : Cache miss for grails\n\n```", "```java\npackage masterSpringMvc.config;\n\nimport com.google.common.cache.CacheBuilder;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.cache.guava.GuavaCacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.concurrent.TimeUnit;\n\n@Configuration\n@EnableCaching\npublic class CacheConfiguration {\n\n    @Bean\n    public CacheManager cacheManager() {\n        GuavaCacheManager cacheManager = new GuavaCacheManager(\"searches\");\n        cacheManager\n                .setCacheBuilder(\n                        CacheBuilder.newBuilder()\n                                .softValues()\n                                .expireAfterWrite(10, TimeUnit.MINUTES)\n                );\n        return cacheManager;\n    }\n}\n```", "```java\npackage masterSpringMvc.config;\n\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.context.annotation.Profile;\nimport org.springframework.data.redis.cache.RedisCacheManager;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;\n\nimport java.util.Arrays;\n\n@Configuration\n@Profile(\"redis\")\n@EnableRedisHttpSession\npublic class RedisConfig {\n\n    @Bean(name = \"objectRedisTemplate\")\n    public RedisTemplate objectRedisTemplate(RedisConnectionFactory redisConnectionFactory) {\n        RedisTemplate<Object, Object> template = new RedisTemplate<>();\n        template.setConnectionFactory(redisConnectionFactory);\n        return template;\n    }\n\n    @Primary @Bean\n    public CacheManager cacheManager(@Qualifier(\"objectRedisTemplate\") RedisTemplate template) {\n        RedisCacheManager cacheManager = new RedisCacheManager(template);\n        cacheManager.setCacheNames(Arrays.asList(\"searches\"));\n        cacheManager.setDefaultExpiration(36_000);\n        return cacheManager;\n    }\n}\n```", "```java\npackage masterSpringMvc.config;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.scheduling.annotation.AsyncConfigurer;\nimport org.springframework.scheduling.annotation.EnableAsync;\n\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\n\n@Configuration\n@EnableAsync\npublic class AsyncConfiguration implements AsyncConfigurer {\n\n    protected final Log logger = LogFactory.getLog(getClass());\n\n    @Override\n    public Executor getAsyncExecutor() {\n        return Executors.newFixedThreadPool(10);\n    }\n\n    @Override\n    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {\n        return (ex, method, params) -> logger.error(\"Uncaught async error\", ex);\n    }\n}\n```", "```java\n@Component\nprivate static class AsyncSearch {\n    protected final Log logger = LogFactory.getLog(getClass());\n    private SearchCache searchCache;\n\n    @Autowired\n    public AsyncSearch(SearchCache searchCache) {\n        this.searchCache = searchCache;\n    }\n\n    @Async\n    public ListenableFuture<List<LightTweet>> asyncFetch(String searchType, String keyword) {\n        logger.info(Thread.currentThread().getName() + \" - Searching for \" + keyword);\n        return new AsyncResult<>(searchCache.fetch(searchType, keyword));\n    }\n}\n```", "```java\n@Override\npublic List<LightTweet> search(String searchType, List<String> keywords) {\n    CountDownLatch latch = new CountDownLatch(keywords.size());\n    List<LightTweet> allTweets = Collections.synchronizedList(new ArrayList<>());\n    keywords\n            .stream()\n            .forEach(keyword -> asyncFetch(latch, allTweets, searchType, keyword));\n\n    await(latch);\n    return allTweets;\n}\n```", "```java\npackage masterSpringMvc.search;\n\nimport masterSpringMvc.search.cache.SearchCache;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Profile;\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.scheduling.annotation.AsyncResult;\nimport org.springframework.social.twitter.api.SearchParameters;\nimport org.springframework.stereotype.Component;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.concurrent.ListenableFuture;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.CountDownLatch;\n\n@Service\n@Profile(\"async\")\npublic class ParallelSearchService implements TwitterSearch {\n    private final AsyncSearch asyncSearch;\n\n    @Autowired\n    public ParallelSearchService(AsyncSearch asyncSearch) {\n        this.asyncSearch = asyncSearch;\n    }\n\n    @Override\n    public List<LightTweet> search(String searchType, List<String> keywords) {\n        CountDownLatch latch = new CountDownLatch(keywords.size());\n        List<LightTweet> allTweets = Collections.synchronizedList(new ArrayList<>());\n\n        keywords\n                .stream()\n                .forEach(keyword -> asyncFetch(latch, allTweets, searchType, keyword));\n\n        await(latch);\n        return allTweets;\n    }\n\n    private void asyncFetch(CountDownLatch latch, List<LightTweet> allTweets, String searchType, String keyword) {\n        asyncSearch.asyncFetch(searchType, keyword)\n                .addCallback(\n                        tweets -> onSuccess(allTweets, latch, tweets),\n                        ex -> onError(latch, ex));\n    }\n\n    private void await(CountDownLatch latch) {\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            throw new IllegalStateException(e);\n        }\n    }\n\n    private static void onSuccess(List<LightTweet> results, CountDownLatch latch, List<LightTweet> tweets) {\n        results.addAll(tweets);\n        latch.countDown();\n    }\n\n    private static void onError(CountDownLatch latch, Throwable ex) {\n        ex.printStackTrace();\n        latch.countDown();\n    }\n\n    @Component\n    private static class AsyncSearch {\n        protected final Log logger = LogFactory.getLog(getClass());\n        private SearchCache searchCache;\n\n        @Autowired\n        public AsyncSearch(SearchCache searchCache) {\n            this.searchCache = searchCache;\n        }\n\n        @Async\n        public ListenableFuture<List<LightTweet>> asyncFetch(String searchType, String keyword) {\n            logger.info(Thread.currentThread().getName() + \" - Searching for \" + keyword);\n            return new AsyncResult<>(searchCache.fetch(searchType, keyword));\n        }\n    }\n}\n```", "```java\npool-1-thread-3 - Searching groovy\npool-1-thread-1 - Searching spring\npool-1-thread-2 - Searching java\n```", "```java\n@Bean\npublic Filter etagFilter() {\n    return new ShallowEtagHeaderFilter();\n}\n```", "```java\n> http GET 'http://localhost:8080/api/search/mixed;keywords=spring' -a admin:admin\nHTTP/1.1 200 OK\nContent-Length: 1276\nContent-Type: application/json;charset=UTF-8\nDate: Mon, 01 Jun 2015 11:29:51 GMT\nETag: \"00a66d6dd835b6c7c60638eab976c4dd7\"\nServer: Apache-Coyote/1.1\nSet-Cookie: JSESSIONID=662848E4F927EE9A1BA2006686ECFE4C; Path=/; HttpOnly\n\n```", "```java\n> http GET 'http://localhost:8080/api/search/mixed;keywords=spring' If-None-Match:'\"00a66d6dd835b6c7c60638eab976c4dd7\"' -a admin:admin\nHTTP/1.1 304 Not Modified\nDate: Mon, 01 Jun 2015 11:34:21 GMT\nETag: \"00a66d6dd835b6c7c60638eab976c4dd7\"\nServer: Apache-Coyote/1.1\nSet-Cookie: JSESSIONID=CA956010CF268056C241B0674C6C5AB2; Path=/; HttpOnly\n\n```", "```java\ncompile 'org.webjars.bower:lodash:3.9.3'\n```", "```java\n<script src=\"img/lodash.js\"></script>\n```", "```java\n<!DOCTYPE html>\n<html \n\n      layout:decorator=\"layout/default\">\n<head lang=\"en\">\n    <title>Hello twitter</title>\n</head>\n<body>\n<div class=\"row\" layout:fragment=\"content\">\n\n    <h2 class=\"indigo-text center\" th:text=\"|Tweet results for ${search}|\">Tweets</h2>\n\n    <ul id=\"tweets\" class=\"collection\">\n </ul>\n</div>\n</body>\n</html>\n```", "```java\n<script layout:fragment=\"script\" th:inline=\"javascript\">\n    /*<![CDATA[*/\n    var baseUrl = /*[[@{/api/search}]]*/ \"/\";\n    var currentLocation = window.location.href;\n    var search = currentLocation.substr(currentLocation.lastIndexOf('/'));\n    var url = baseUrl + search;\n    /*]]>*/\n</script>\n```", "```java\n$.ajax({\n    url: url,\n    type: \"GET\",\n    beforeSend: setEtag,\n    success: onResponse\n});\n```", "```java\nfunction getLastQuery() {\n    return JSON.parse(localStorage.getItem('lastQuery')) || {};\n}\n\nfunction storeQuery(query) {\n    localStorage.setItem('lastQuery', JSON.stringify(query));\n}\n\nfunction setEtag(xhr) {\n    xhr.setRequestHeader('If-None-Match', getLastQuery().etag)\n}\n```", "```java\nfunction onResponse(tweets, status, xhr) {\n  if (xhr.status == 304) {\n      console.log('Response has not changed');\n      tweets = getLastQuery().tweets\n  }\n\n  var etag = xhr.getResponseHeader('Etag');\n  storeQuery({tweets: tweets, etag: etag});\n\n  displayTweets(tweets);\n}\n\nfunction displayTweets(tweets) {\n  $('#tweets').empty();\n  $.each(tweets, function (index, tweet) {\n      addTweet(tweet);\n  })\n}\n```", "```java\nfunction addTweet(tweet) {\n    var template = _.template('<li class=\"collection-item avatar\">' +\n        '<img class=\"circle\" src=\"img/${tweet.profileImageUrl}\" />' +\n        '<span class=\"title\">${tweet.user}</span>' +\n        '<p>${tweet.text}</p>' +\n        '</li>');\n\n    $('#tweets').append(template({tweet: tweet}));\n}\n```", "```java\ncompile 'org.springframework.boot:spring-boot-starter-websocket'\ncompile 'org.springframework:spring-messaging'\n\ncompile 'org.webjars:sockjs-client:1.0.0'\ncompile 'org.webjars:stomp-websocket:2.3.3'\n```", "```java\n<script src=\"img/sockjs.js\"></script>\n<script src=\"img/stomp.js\"></script>\n```", "```java\n@Configuration\n@EnableWebSocketMessageBroker\npublic class WebSocketConfiguration extends AbstractWebSocketMessageBrokerConfigurer {\n\n    @Override\n    public void configureMessageBroker(MessageBrokerRegistry config) {\n        config.enableSimpleBroker(\"/topic\");\n        config.setApplicationDestinationPrefixes(\"/ws\");\n    }\n\n    @Override\n    public void registerStompEndpoints(StompEndpointRegistry registry) {\n        registry.addEndpoint(\"/twitterSearch\").withSockJS();\n    }\n\n}\n```", "```java\n@Controller\npublic class SearchSocketController {\n    private CachedSearchService searchService;\n    private SimpMessagingTemplate webSocket;\n\n    @Autowired\n    public SearchSocketController(CachedSearchService searchService, SimpMessagingTemplate webSocket) {\n        this.searchService = searchService;\n        this.webSocket = webSocket;\n    }\n\n    @MessageMapping(\"/search\")\n    public void search(@RequestParam List<String> keywords) throws Exception {\n        Consumer<List<LightTweet>> callback = tweet -> webSocket.convertAndSend(\"/topic/searchResults\", tweet);\n        twitterSearch(SearchParameters.ResultType.POPULAR, keywords, callback);\n    }\n\n    public void twitterSearch(SearchParameters.ResultType resultType, List<String> keywords, Consumer<List<LightTweet>> callback) {\n        keywords.stream()\n            .forEach(keyword -> {\n                searchService.search(resultType, keyword)\n                    .addCallback(callback::accept, Throwable::printStackTrace);\n            });\n    }\n}\n```", "```java\nvar currentLocation = window.location.href;\nvar search = currentLocation.substr(currentLocation.lastIndexOf('=') + 1);\n\nfunction connect() {\n  var socket = new SockJS('/hello');\n  stompClient = Stomp.over(socket);\n  // stompClient.debug = null;\n  stompClient.connect({}, function (frame) {\n      console.log('Connected: ' + frame);\n\n      stompClient.subscribe('/topic/searchResults', function (result) {\n          displayTweets(JSON.parse(result.body));\n      });\n\n      stompClient.send(\"/app/search\", {}, JSON.stringify(search.split(',')));\n  });\n}\n```", "```java\nfunction displayTweets(tweets) {\n    $.each(tweets, function (index, tweet) {\n        addTweet(tweet);\n    })\n}\n\nfunction addTweet(tweet) {\n    var template = _.template('<li class=\"collection-item avatar\">' +\n        '<img class=\"circle\" src=\"img/${tweet.profileImageUrl}\" />' +\n        '<span class=\"title\">${tweet.userName}</span>' +\n        '<p>${tweet.text}</p>' +\n        '</li>');\n\n    $('#tweets').append(template({tweet: tweet}));\n}\n```", "```java\n./gradlew assemble\n\n```", "```java\n$ cf login -a api.run.pivotal.io -u <account email> -p <password> -o <organization> -s development\n\nAPI endpoint: api.run.pivotal.io\nAuthenticating...\nOK\n\nTargeted org <account org>\n\nTargeted space development\n\nAPI endpoint:   https://api.run.pivotal.io (API version: 2.33.0) \nUser:           <account email> \nOrg:            <account organization> \nSpace:          <account space>\n\n```", "```java\n$ cf push your-app-name -p build/libs/masterSpringMvc-0.0.1-SNAPSHOT.jar\n\nCreating app msmvc4 in org Northwest / space development as wlund@pivotal.io...\nOK\nCreating route msmvc4.cfapps.io...\nOK\nBinding msmvc4.cfapps.io to msmvc4...\nOK\nUploading msmvc4...\nUploading app files from: build/libs/masterSpringMvc-0.0.1-SNAPSHOT.jar\nUploading 690.8K, 108 files\nDone uploading \nOK\nStarting app msmvc4 in org <Organization> / space development as <account email>\n-----> Downloaded app package (15M)\n-----> Java Buildpack Version: v3.1 | https://github.com/cloudfoundry/java-buildpack.git#7a538fb\n-----> Downloading Open Jdk JRE 1.8.0_51 from https://download.run.pivotal.io/openjdk/trusty/x86_64/openjdk-1.8.0_51.tar.gz (1.5s)\n Expanding Open Jdk JRE to .java-buildpack/open_jdk_jre (1.4s)\n-----> Downloading Open JDK Like Memory Calculator 1.1.1_RELEASE from https://download.run.pivotal.io/memory-calculator/trusty/x86_64/memory-calculator-1.1.1_RELEASE (0.1s)\n Memory Settings: -Xmx768M -Xms768M -XX:MaxMetaspaceSize=104857K -XX:MetaspaceSize=104857K -Xss1M\n-----> Downloading Spring Auto Reconfiguration 1.7.0_RELEASE from https://download.run.pivotal.io/auto-reconfiguration/auto-reconfiguration-1.7.0_RELEASE.jar (0.0s)\n-----> Uploading droplet (59M)\n0 of 1 instances running, 1 starting\n1 of 1 instances running\n\nApp started\nOK\nApp msmvc4 was started using this command `CALCULATED_MEMORY=$($PWD/.java-buildpack/open_jdk_jre/bin/java-buildpack-memory-calculator-1.1.1_RELEASE -memorySizes=metaspace:64m.. -memoryWeights=heap:75,metaspace:10,stack:5,native:10 -totMemory=$MEMORY_LIMIT) && SERVER_PORT=$PORT $PWD/.java-buildpack/open_jdk_jre/bin/java -cp $PWD/.:$PWD/.java-buildpack/spring_auto_reconfiguration/spring_auto_reconfiguration-1.7.0_RELEASE.jar -Djava.io.tmpdir=$TMPDIR -XX:OnOutOfMemoryError=$PWD/.java-buildpack/open_jdk_jre/bin/killjava.sh $CALCULATED_MEMORY org.springframework.boot.loader.JarLauncher`\n\nShowing health and status for app msmvc4 in org <Organization> / space development as <Account Email>\nOK\n\nrequested state: started\ninstances: 1/1\nusage: 1G x 1 instances\nurls: msmvc4.cfapps.io\nlast uploaded: Tue Jul 28 22:04:08 UTC 2015\nstack: cflinuxfs2\nbuildpack: java-buildpack=v3.1-https://github.com/cloudfoundry/java-buildpack.git#7a538fb java-main open-jdk-like-jre=1.8.0_51 open-jdk-like-memory-calculator=1.1.1_RELEASE spring-auto-reconfiguration=1.7.0_RELEASE\n\n state     since                    cpu    memory         disk         details \n#0   running   2015-07-28 03:05:04 PM   0.0%   450.9M of 1G   137M of 1G\n\n```", "```java\nspring.profiles.active=prod,redis\n\nspring.redis.host=${cloud.services.redis.connection.host}\nspring.redis.port=${cloud.services.redis.connection.port}\nspring.redis.password=${cloud.services.redis.connection.password}\n\nupload.pictures.uploadPath=file:/tmp\n```", "```java\n@Bean\n@Profile({\"cloud\", \"heroku\"})\npublic static ConfigureRedisAction configureRedisAction() {\n    return ConfigureRedisAction.NO_OP;\n}\n```", "```java\n> brew install heroku-toolbelt\n\n```", "```java\n> heroku login\nEnter your Heroku credentials.\nEmail: geowarin@mail.com\nPassword (typing will be hidden):\nAuthentication successful.\n\n```", "```java\n> heroku create appname --region eu\nCreating appname... done, region is eu\nhttps://appname.herokuapp.com/ | https://git.heroku.com/appname.git\nGit remote heroku added\n\n```", "```java\n> git remote -v\nheroku    https://git.heroku.com/appname.git (fetch)\nheroku    https://git.heroku.com/appname.git (push)\norigin    https://github.com/Mastering-Spring-MVC-4/mastering-spring-mvc4-code.git (fetch)\norigin    https://github.com/Mastering-Spring-MVC-4/mastering-spring-mvc4-code.git (push)\n\n```", "```java\ntask stage(type: Copy, dependsOn: [clean, build]) {\n    from jar.archivePath\n    into project.rootDir\n    rename {\n        'app.jar'\n    }\n}\nstage.mustRunAfter(clean)\n\nclean << {\n    project.file('app.jar').delete()\n}\n```", "```java\nweb: java -Dserver.port=$PORT -Dspring.profiles.active=heroku,prod -jar app.jar\n```", "```java\nspring.social.twitter.appId=${twitterAppId}\nspring.social.twitter.appSecret=${twitterAppSecret}\n```", "```java\n> heroku config:set twitterAppId=appId\n```", "```java\n> git push heroku master\nCounting objects: 1176, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (513/513), done.\nWriting objects: 100% (1176/1176), 645.63 KiB | 0 bytes/s, done.\nTotal 1176 (delta 485), reused 1176 (delta 485)\nremote: Compressing source files... done.\nremote: Building source:\nremote:\nremote: -----> Gradle app detected\nremote: -----> Installing OpenJDK 1.8... done\nremote: -----> Building Gradle app...\nremote:        WARNING: The Gradle buildpack is currently in Beta.\nremote: -----> executing ./gradlew stage\nremote:        Downloading https://services.gradle.org/distributions/gradle-2.3-all.zip\n\n...\n\nremote:        :check\nremote:        :build\nremote:        :stage\nremote:\nremote:        BUILD SUCCESSFUL\nremote:\nremote:        Total time: 2 mins 36.215 secs\nremote: -----> Discovering process types\nremote:        Procfile declares types -> web\nremote:\nremote: -----> Compressing... done, 130.1MB\nremote: -----> Launching... done, v4\nremote:        https://appname.herokuapp.com/ deployed to Heroku\nremote:\nremote: Verifying deploy.... done.\nTo https://git.heroku.com/appname.git\n* [new branch]      master -> master\n\n```", "```java\nheroku addons:create heroku-redis:test\n\n```", "```java\n> heroku config\n=== masterspringmvc Config Vars\nJAVA_OPTS:        -Xmx384m -Xss512k -XX:+UseCompressedOops\nREDIS_URL:        redis://x:xxx@ec2-xxx-xx-xxx-xxx.eu-west-1.compute.amazonaws.com:6439\n\n```", "```java\n@Configuration\n@Profile(\"redis\")\n@EnableRedisHttpSession\npublic class RedisConfig {\n\n    @Bean\n    @Profile(\"heroku\")\n    public RedisConnectionFactory redisConnectionFactory() throws URISyntaxException {\n        JedisConnectionFactory redis = new JedisConnectionFactory();\n\n        String redisUrl = System.getenv(\"REDIS_URL\");\n        URI redisUri = new URI(redisUrl);\n        redis.setHostName(redisUri.getHost());\n        redis.setPort(redisUri.getPort());\n        redis.setPassword(redisUri.getUserInfo().split(\":\", 2)[1]);\n\n        return redis;\n    }\n\n    @Bean\n         @Profile({\"cloud\", \"heroku\"})\n    public static ConfigureRedisAction configureRedisAction() {\n        return ConfigureRedisAction.NO_OP;\n    }\n}\n```", "```java\nweb: java -Dserver.port=$PORT -Dspring.profiles.active=heroku,redis,prod -jar app.jar\n```"]