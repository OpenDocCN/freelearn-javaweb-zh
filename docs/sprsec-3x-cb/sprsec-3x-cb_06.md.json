["```java\n    <display-name>Vaadin_Project1</display-name>\n    <filter>\n      <filter-name>springSecurityFilterChain</filter-name>\n      <filter-class>org.springframework.web.filter.\n        DelegatingFilterProxy</filter-class>\n    </filter>\n\n    <filter-mapping>\n      <filter-name>springSecurityFilterChain</filter-name>\n      <url-pattern>/*</url-pattern>\n    </filter-mapping>\n\n    <listener>\n      <listener-class>\n        org.springframework.web.context.ContextLoaderListener\n      </listener-class>\n    </listener>\n\n      <context-param>\n        <description>\n        Vaadin production mode</description>\n        <param-name>productionMode</param-name>\n        <param-value>false</param-value>\n      </context-param>\n\n      <servlet>\n        <servlet-name>Vaadin_Project1</servlet-name>\n        <servlet-class>com.vaadin.server.VaadinServlet\n          </servlet-class>\n      <init-param>\n        <description>\n          Vaadin UI class to use</description>\n        <param-name>UI</param-name>\n        <param-value>com.example.vaadin_project1\n          .Vaadin_project1UI</param-value>\n      </init-param>\n      <init-param>\n        <description>\n        Legacy mode to return the value of\n           the property as a string from \n          AbstractProperty.toString()</description>\n        <param-name>legacyPropertyToString</param-name>\n        <param-value>false</param-value>\n      </init-param>\n    </servlet>\n    <servlet-mapping>\n      <servlet-name>Vaadin_Project1</servlet-name>\n      <url-pattern>/*</url-pattern>\n    </servlet-mapping>\n    ```", "```java\n    <http auto-config=\"true\">\n     <intercept-url pattern=\"/Vaadin_Project1/**\"access=\"ROLE_EDITOR\"/> \n     <intercept-url pattern=\"/Vaadin_Project1/*.*\"access=\"ROLE_EDITOR\"/> \n     <intercept-url pattern=\"/**\" access=\"ROLE_EDITOR\" />\n     <http-basic /> \n    </http>\n\n    <authentication-manager>\n      <authentication-provider>\n        <user-service>\n          <user name=\"anjana\" password=\"123456\"authorities=\"ROLE_EDITOR\" />\n        </user-service>\n      </authentication-provider>\n    </authentication-manager>\n    </beans:beans>\n    ```", "```java\n<http auto-config=\"true\">\n  <intercept-url pattern=\"/Vaadin_Project1/**\"\n     access=\"ROLE_EDITOR\"/> \n  <intercept-url pattern=\"/Vaadin_Project1/*.*\"\n     access=\"ROLE_EDITOR\"/> \n  <intercept-url pattern=\"/**\" access=\"ROLE_EDITOR\" />\n</http>\n<authentication-manager>\n  <authentication-provider>\n    <user-service>\n       <user name=\"anjana\" password=\"123456\"\n       authorities=\"ROLE_EDITOR\" />\n    </user-service>\n  </authentication-provider>\n</authentication-manager>\n```", "```java\n    <display-name>Vaadin_Project3</display-name>\n      <context-param>\n        <description>Vaadin production mode</description>\n        <param-name>productionMode</param-name>\n        <param-value>true</param-value>\n      </context-param>\n      <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>\n          /WEB-INF/vaadin-spring-security.xml\n          /WEB-INF/mybeans.xml\n        </param-value>\n\n      </context-param>\n\n      <servlet>\n        <servlet-name>login</servlet-name>\n        <jsp-file>/jsp/login.jsp</jsp-file>\n      </servlet>\n\n      <servlet>\n        <servlet-name>login_error</servlet-name>\n        <jsp-file>/jsp/login_error.jsp</jsp-file>\n      </servlet>\n\n      <servlet-mapping>\n        <servlet-name>login</servlet-name>\n        <url-pattern>/jsp/login</url-pattern>\n      </servlet-mapping>\n\n      <servlet-mapping>\n        <servlet-name>login_error</servlet-name>\n        <url-pattern>/jsp/login_error</url-pattern>\n      </servlet-mapping>\n\n     <servlet>\n     <servlet-name>Vaadin Application Servlet</servlet-name>\n     <servlet-class>packt.vaadin.MyAbstractApplicationServlet</servlet-class>\n     </servlet>\n\n      <servlet-mapping>\n        <servlet-name>Vaadin Application Servlet</servlet-name>\n        <url-pattern>/*</url-pattern>\n\n      </servlet-mapping>\n    ```", "```java\n    <global-method-security pre-post-annotations=\"enabled\" />\n\n    <http auto-config='true'>\n      <intercept-url pattern=\"/jsp/login*\"access=\"IS_AUTHENTICATED_ANONYMOUSLY\" />\n      <intercept-url pattern=\"/jsp/login_error*\"access=\"IS_AUTHENTICATED_ANONYMOUSLY\" />\n      <intercept-url pattern=\"/**\" access=\"ROLE_USER\" />\n      <form-login login-page='/jsp/login'authentication-failure-url=\"/jsp/login_error\" />\n    </http>\n\n    <authentication-manager>\n      <authentication-provider>\n        <user-service>\n          <user name=\"raghu\" password=\"anju\"authorities=\"ROLE_USER,ROLE_ADMIN\" />\n          <user name=\"onju\" password=\"bonju\"authorities=\"ROLE_USER\" />\n        </user-service>\n      </authentication-provider>\n    </authentication-manager>\n    ```", "```java\n    public class MyAbstractApplicationServlet extends AbstractApplicationServlet\n    {\n      private WebApplicationContext appContext;\n      private Class<? extends Application> applicationClass;\n\n      @Override\n      protected Application getNewApplication(HttpServletRequest httpServletRequest) throws ServletException {\n          MainApplication mainApplication = (MainApplication)appContext.getBean(\"applicationBean\");\n          mainApplication.setWebApplicationContext(appContext);\n          return  mainApplication;\n        }\n\n        @Override\n        protected void service(HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException {\n          super.service(request, response); \n        }\n\n        @Override\n        public void init(ServletConfig servletConfig)throws ServletException {\n          super.init(servletConfig);   \n          appContext = WebApplicationContextUtils.getWebApplicationContext(servletConfig.getServletContext());\n        }\n\n        @Override\n        protected Class<? extends Application>getApplicationClass() throws ClassNotFoundException {\n        return MainApplication.class;\n      }\n    }\n    ```", "```java\n    @Component(\"applicationBean\")\n    @Scope(\"prototype\")\n\n    public class MainApplication extends Application {\n\n      public WebApplicationContext webappContext;\n\n      @Override\n      public void init() {\n        Window window;\n        window = new Window(\"My Vaadin Application\");\n        window.addComponent(new HeaderHorizontalLayout(this));\n        window.addComponent(new BodyHorizontalLayout(this));\n        window.addComponent(new FooterHorizontalLayout(this));\n        setMainWindow(window);\n      }\n\n      public void setWebApplicationContext(WebApplicationContext appContext){\n      this.webappContext = webappContext;\n      }\n\n    }\n    ```", "```java\n    public class MyLoginView extends Panel implements View {\n      private Layout mainLayout;\n      Navigator navigator;\n      protected static final String CountView = \"SecuredView\";\n      public MyLoginView() {\n        final FormLayout loginlayout=new FormLayout();\n        final TextField nameField=new TextField(\"name\");\n        final PasswordField passwordField=new PasswordField(\"password\");\n        loginlayout.addComponent(nameField);\n        loginlayout.addComponent(passwordField);\n        Button loginButton = new Button(\"Login\");\n        loginlayout.addComponent(loginButton);\n        mainLayout = new VerticalLayout();\n        mainLayout.addComponent(loginlayout);\n        setContent(mainLayout);\n\n        loginButton.addClickListener(new Button.ClickListener() {\n          public void buttonClick(ClickEvent event) {\n            try{\n              ServletContext servletContext = VaadinRequestHolder.getRequest().getSession().getServletContext();\n              UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(nameField.getValue(),passwordField.getValue());\n                token.setDetails( new WebAuthenticationDetails(VaadinRequestHolder.getRequest()));\n                WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);\n                AuthenticationManager authManager = wac.getBean(AuthenticationManager.class);\n                Authentication authentication = authManager.authenticate(token);\n                SecurityContextHolder.getContext().setAuthentication(authentication);\n                if(authentication.isAuthenticated()){\n                  Notification.show(\"You are authenticated\");\n                navigator = new Navigator(getUI().getCurrent(), mainLayout);\n                navigator.addView(CountView, new SecuredView());\n                navigator.navigateTo(CountView);\n              }\n\n        } catch (BadCredentialsException e) {\n\n          Notification.show(\"Bad credentials\");\n        }\n      }\n    });\n\n    }\n    @Override\n    public void enter(ViewChangeEvent event) {\n    }\n    ```", "```java\n    public class SecuredView extends Panel implements View {\n      public static final String NAME = \"count\";\n      private Layout mainLayout;\n      Navigator navigator;\n      protected static final String MainView = \"LoginView\";\n      public SecuredView() {\n        mainLayout = new VerticalLayout();\n        mainLayout.addComponent(new Label(\"You are seeing a secured page\"));\n        Button logoutButton = new Button(\"Logout\");\n        mainLayout.addComponent(logoutButton);\n        setContent(mainLayout);\n        logoutButton.addClickListener(new Button.ClickListener() {\n        public void buttonClick(ClickEvent event) {\n        try{\n          ServletContext servletContext = VaadinRequestHolder.getRequest().getSession().getServletContext();\n          WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);\n          LogoutHandler logoutHandler = wac.getBean(LogoutHandler.class);\n          Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n          logoutHandler.logout(VaadinRequestHolder.getRequest(), null, authentication);\n\n     Notification.show(\"You are logged out\");\n     navigator = new Navigator(getUI().getCurrent(), mainLayout);\n     navigator.addView(MainView, new MyLoginView());\n     navigator.navigateTo(MainView);\n        } catch (BadCredentialsException e) {\n\n        Notification.show(\"Bad credentials\");\n        }\n      }\n    });\n    }\n\n    public void enter(ViewChangeEvent event) {\n\n    }\n\n    }\n    ```", "```java\n    navigator = new Navigator(getUI().getCurrent(),mainLayout);\n    navigator.addView(MainView, new MyLoginView());\n    navigator.navigateTo(MainView);\n    ```", "```java\n    public class MyVaadinServlet extends VaadinServlet {\n      @Override\n      protected void service(HttpServletRequest request,HttpServletResponse response) throws ServletException,IOException {\n      SecurityContextHolder.setContext(SecurityContextHolder.createEmptyContext());\n      VaadinRequestHolder.setRequest(request);\n      super.service(request, response);\n      VaadinRequestHolder.clean();\n      SecurityContextHolder.clearContext();\n      }\n    }\n    ```", "```java\n    @SuppressWarnings(\"serial\")\n    @Theme(\"vaadin_project5\")\n    public class Vaadin_project5UI extends UI{\n      private Layout mainLayout;\n      Navigator navigator;\n      protected static final String CountView = \"main\";\n      @Override\n      protected void init(VaadinRequest request) {\n        getPage().setTitle(\"Navigation Example\");\n        // Create a navigator to control the views\n        navigator = new Navigator(this, this);\n        // Create and register the views\n        navigator.addView(\"\", new MyLoginView());\n        navigator.addView(CountView, new SecuredView());\n      }\n    }\n    ```", "```java\n    <display-name>Vaadin_Project5</display-name>\n    <context-param>\n      <description>\n      Vaadin production mode</description>\n      <param-name>productionMode</param-name>\n      <param-value>false</param-value>\n    </context-param>\n    <servlet>\n     <servlet-name>Vaadin_project5 Application</servlet-name>\n     <servlet-class>com.example.vaadin_project5.MyVaadinServlet</servlet-class>\n     <init-param>\n     <description>\n     Vaadin UI class to use</description>\n     <param-name>UI</param-name>\n     <param-value>com.example.vaadin_project5.Vaadin_project5UI</param-value>\n     </init-param>\n     <init-param>\n     <description>\n     Legacy mode to return the value of the propertyas a string from AbstractProperty.toString()</description>\n     <param-name>legacyPropertyToString</param-name>\n     <param-value>false</param-value>\n     </init-param>\n    </servlet>\n    <servlet-mapping>\n     <servlet-name>Vaadin_project5 Application</servlet-name>\n     <url-pattern>/*</url-pattern>\n    </servlet-mapping>\n    <listener>\n     <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n    </web-app>\n    ```", "```java\n    <global-method-security pre-post-annotations=\"enabled\" />\n    <authentication-manager>\n      <authentication-provider>\n        <user-service>\n        <user name=\"anjana\" password=\"123456\"authorities=\"ROLE_EDITOR\" />\n        </user-service>\n      </authentication-provider>\n    </authentication-manager>\n    <beans:bean class=\"org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler\">\n      <beans:property name=\"invalidateHttpSession\"value=\"false\" />\n    </beans:bean>\n    </beans:beans>\n    ```"]