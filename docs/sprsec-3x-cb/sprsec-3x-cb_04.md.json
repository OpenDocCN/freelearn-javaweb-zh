["```java\n    cd Grails_Project\n    grails create-app myfirstapp\n    cd myfirstapp\n    grails create-controller MyFirstController\n\n    ```", "```java\n    package myfirstapp\n    class MyFirstController {\n        def index() { }\n    }\n    ```", "```java\n    package myfirstapp\n    class MyFirstController {\n      def index() { \n        render \"Hello PACKT\"\n      }\n    }\n    ```", "```java\n    cd myfirstapp\n\n    ```", "```java\n    grails install-plugin spring-security-core\n    grails  s2-quickstart org.packt SecuredUser SecuredRole\n\n    ```", "```java\n    plugins {\n\n        compile ':spring-security-core:2.0-RC2'\n\n    }\n    ```", "```java\n    import org.packt.SecuredUser;\n    import org.packt.SecuredRole;\n    import org.packt.SecuredUserSecuredRole\n    class BootStrap {\n\n      def springSecurityService\n\n        def init = { servletContext ->\n\n        if(!SecuredUser.count()){\n          /*The default password is 'password'*/\n          def password = 'password'\n          def user = new SecuredUser(username : 'anjana', password:'anjana123',enabled:true,accountExpired : false , accountLocked : false ,passwordExpired : false).save(flush: true, insert: true)\n          def role = new SecuredUser(authority : 'ROLE_USER').save(flush: true, insert: true)\n          /*create the first user role map*/\n          SecuredUserSecuredRole.create user , role , true\n        }\n\n        }\n        def destroy = {\n        }\n    }\n    ```", "```java\nspringSecurity.login.header=Spring Security login\nspringSecurity.login.username.label=UserName\nspringSecurity.login.password.label=Password\nspringSecurity.login.remember.me.label=remember me\nspringSecurity.login.button=Login\nspringSecurity.errors.login.fail=Authentication failed\n```", "```java\n    <!DOCTYPE html>\n    <html>\n      <head>\n      </head>\n      <body>\n        <h1>Welcome to Grails</h1>\n        <sec:ifLoggedIn>Access the <g:link controller='myFirst' action=''>Secured Controller</g:link><br/>\n            <g:link controller='logout' action=''>Spring Logout</g:link>\n        </sec:ifLoggedIn>\n\n        <sec:ifNotLoggedIn>\n        <h2>You are seeing a common page.You can click on login.After login success you will be provided with the links which you can access.</h2>\n        <g:link controller='login' action='auth'>Spring Login</g:link>\n        </sec:ifNotLoggedIn>\n\n      </body>\n    </html>\n    ```", "```java\n    <g:link controller='logout' action=''>Spring Logout</g:link>\n    ```", "```java\n    import org.codehaus.groovy.grails.plugins.springsecurity.SpringSecurityUtils\n\n    class LogoutController {\n\n      /**\n       * Index action. Redirects to the Spring security logout uri.\n       */\n      def index = {\n        // TODO put any pre-logout code here\n        redirect uri: SpringSecurityUtils.securityConfig.logout.filterProcessesUrl // '/j_spring_security_logout'\n      }\n    }\n    ```", "```java\n    grails.plugins.springsecurity.useBasicAuth = true\n    grails.plugins.springsecurity.basic.realmName = \"HTTP Basic Auth Demo\"\n    ```", "```java\n    import com.packt.*;\n    class BootStrap {\n      def init = { servletContext ->\n        def userRole = SecuredRole.findByAuthority(\"ROLE_USER\") ?: new SecuredRole(authority: \"ROLE_USER\").save(flush: true)\n        def user = SecuredUser.findByUsername(\"anjana\") ?: new SecuredUser(username: \"anjana\", password: \"anjana123\", enabled: true).save(flush: true)\n        SecuredUserSecuredRole.create(user, userRole, true)\n      }\n      def destroy = {\n      }\n    }\n    ```", "```java\n    package grailsbasicauthexample\n    import grails.plugins.springsecurity.Secured\n    class GreetingsController {\n      @Secured(['ROLE_USER'])\n      def index() { \n        render \"Hello PACKT\"\n      }\n    }\n    ```", "```java\n    $grails create-app grailsdigestauthexample\n    $cd grailsdigestauthexample\n    $grails install-plug-in spring-security-core\n    $grails s2-quickstart com.packt SecuredUser SecuredRole\n    $grails create-controller SecuredPackt\n\n    ```", "```java\n    import com.packt.*;\n    class BootStrap {\n      def init = { servletContext ->\n        def userRole = SecuredRole.findByAuthority(\"ROLE_USER\") ?: new SecuredRole(authority: \"ROLE_USER\").save(flush: true)\n        def user = SecuredUser.findByUsername(\"anjana\") ?: new SecuredUser(username: \"anjana\", password: \"anjana123\", enabled: true).save(flush: true)\n        SecuredUserSecuredRole.create(user, userRole, true)\n      }\n      def destroy = {\n      }\n    }\n    ```", "```java\n    package grailsdigestauthexample\n    import grails.plugins.springsecurity.Secured\n    class SecuredPacktController {\n      @Secured(['ROLE_USER'])\n      def index() { \n      render \"Hello PACKT\"\n      }\n    }\n    ```", "```java\n    package com.packt\n    class SecuredUser {\n     transient passwordEncoder\n\n      String username\n      String password\n      boolean enabled\n      boolean accountExpired\n      boolean accountLocked\n      boolean passwordExpired\n\n      static constraints = {\n        username blank: false, unique: true\n        password blank: false\n      }\n\n      static mapping = {\n        password column: '`password`'\n      }\n\n      Set<SecuredRole> getAuthorities() {\n        SecuredUserSecuredRole.findAllBySecuredUser(this).collect { it.securedRole } as Set\n      }\n\n      def beforeInsert() {\n        encodePassword()\n      }\n\n      def beforeUpdate() {\n        if (isDirty('password')) {\n          encodePassword()\n        }\n      }\n\n      protected void encodePassword() {\n        password = passwordEncoder.encodePassword(password,       username)\n      }\n    }\n    ```", "```java\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <meta name=\"layout\" content=\"main\"/>\n        <title>Welcome to Grails</title>\n\n      </head>\n      <body>\n\n        <div id=\"page-body\" role=\"main\">\n          <h1>Welcome to Grails</h1>\n\n            <sec:ifLoggedIn>\n            Hello <sec:username/>\n            Access the \n            <g:link controller='securedPackt' action=''>Secured Controller</g:link><br/>\n            <g:link controller='logout' action=''>Spring Logout</g:link>\n            </sec:ifLoggedIn>\n\n            <sec:ifNotLoggedIn>\n              <h2>You are seeing a common page.You can click on login. After login success you will be provided with the links which you can access.</h2>\n            <g:link controller='securedPackt' action=''>Secured Controller</g:link><br/>\n\n            </sec:ifNotLoggedIn>\n        </div>\n        </div>\n      </body>\n    </html>\n    ```", "```java\ngrails.project.dependency.resolution = {\n  ...\n  plugins {\n    compile \":spring-security-ui:0.2\"\"\n  }\n}\n```", "```java\n    package multilevelroledemo\n    import grails.plugins.springsecurity.Secured\n    class SampleController {\n\n      def index = {}\n\n      @Secured(['ROLE_USER'])\n      def user = {\n        render 'Secured for ROLE_USER'\n      }\n\n      @Secured(['ROLE_ADMIN'])\n      def admin = {\n        render 'Secured for ROLE_ADMIN'\n      }\n\n      @Secured(['ROLE_SUPERADMIN'])\n      def superadmin = {\n        render 'Secured for ROLE_SUPERADMIN'\n      }\n    }\n    ```", "```java\n    import com.packt.security.SecuredRole\n    import com.packt.security.SecuredUser\n    import com.packt.security.SecuredUserSecuredRole\n    class BootStrap {\n      def init = { servletContext ->\n        def userRole = SecuredRole.findByAuthority(\"ROLE_USER\") ?: new SecuredRole(authority: \"ROLE_USER\").save(flush: true)\n        def user = SecuredUser.findByUsername(\"anjana\") ?: new SecuredUser(username: \"anjana\", password: \"anjana123\", enabled: true).save(flush: true)\n        SecuredUserSecuredRole.create(user, userRole, true)\n\n        def userRole_admin = SecuredRole.findByAuthority(\"ROLE_ADMIN\") ?: new SecuredRole(authority: \"ROLE_ADMIN\").save(flush: true)\n        def user_admin = SecuredUser.findByUsername(\"raghu\") ?: new SecuredUser(username: \"raghu\", password: \"raghu123\", enabled: true).save(flush: true)\n        SecuredUserSecuredRole.create(user_admin, userRole_admin, true)\n\n        def userRole_superadmin = SecuredRole.findByAuthority(\"ROLE_SUPERADMIN\") ?: new SecuredRole(authority: \"ROLE_SUPERADMIN\").save(flush: true)\n        def user_superadmin = SecuredUser.findByUsername(\"packt\") ?: new SecuredUser(username: \"packt\", password: \"packt123\", enabled: true).save(flush: true)\n        SecuredUserSecuredRole.create(user_superadmin, userRole_superadmin, true)\n      }\n      def destroy = {\n      }\n    }\n    ```", "```java\n    <head>\n      <meta name='layout' content='main' />\n      <title>Multi level  Roles in Grails</title>\n    </head>\n\n    <body>\n      <div class='nav'>\n        <span class='menuButton'><a class='home' href='${createLinkTo(dir:'')}'>Home</a></span>\n      </div>\n      <div class='body'>\n        <g:link action='user'> ROLE_USER</g:link><br/>\n        <g:link action='admin'>ROLE_ADMIN</g:link><br/>\n        <g: link action='superadmin'> ROLE_SUPERADMIN</g:link><br/>\n      </div>\n    </body>\n    ```", "```java\n    security {\n      active = true\n      loginUserDomainClass = 'com.packt.security.SecuredUser'\n      authorityDomainClass = 'com.packt.security.SecuredPackt'\n      useRequestMapDomainClass = false\n      useControllerAnnotations = true\n    }\n    ```", "```java\n    springSecurity.login.header=Spring Security login\n    springSecurity.login.username.label=UserName\n    springSecurity.login.password.label=Password\n    springSecurity.login.remember.me.label=remember me\n    springSecurity.login.button=Login\n    springSecurity.errors.login.fail=Authentication failed\n    ```", "```java\n    grails.plugins.springsecurity.ldap.search.filter = '(mail={0})'\n    grails.plugins.springsecurity.ldap.context.server = 'ldap://localhost:10389/o=sevenSeas'\n    grails.plugins.springsecurity.ldap.context.managerDn = 'uid=admin,ou=system'\n    grails.plugins.springsecurity.ldap.context.managerPassword = 'secret'\n    grails.plugins.springsecurity.ldap.authorities.groupSearchBase ='ou=groups'\n    grails.plugins.springsecurity.ldap.authorities.groupSearchFilter = '(uniqueMember={0})'\n    grails.plugins.springsecurity.ldap.authorities.retrieveDatabaseRoles = false\n    grails.plugins.springsecurity.ldap.authorities.ignorePartialResultException= true\n    grails.plugins.springsecurity.ldap.search.base = 'ou=people'\n    grails.plugins.springsecurity.ldap.search.filter = '(mail={0})'\n    grails.plugins.springsecurity.ldap.search.attributesToReturn = ['cn', 'sn','mail']\n    grails.plugins.springsecurity.ldap.authenticator.attributesToReturn = ['cn', 'sn','mail']\n    ```", "```java\n    package grailssecurityldapexample\n    class SampleController {\n      def index() { \n        render \"Hello PACKT\"\n        }\n    }\n    ```", "```java\n    beans = { \n    ldapUserDetailsMapper(MyUserDetailsContextMapper) { \n    }\n    }\n    ```", "```java\n    <body>\n      <a href=\"#page-body\" class=\"skip\"><g:message code=\"default.link.skip.label\" default=\"Skip to content&hellip;\"/></a>\n\n      <div id=\"page-body\" role=\"main\">\n          <h1>Welcome to Grails</h1>\n          <sec:ifLoggedIn>\n    Your Details<br/>\n          Name:<sec:loggedInUserInfo field=\"fullname\"/> <br/>\n          Email:<sec:loggedInUserInfo field=\"email\"/> <br/>\n          Role:<sec:loggedInUserInfo field=\"title\"/> <br/>\n          <g:link controller='sample' action=''>Sample Controller</g:link><br/>\n          (<g:link controller=\"logout\">Logout</g:link>)\n         </sec:ifLoggedIn> \n         <sec:ifNotLoggedIn>\n          <h2>You are seeing a common page. You can click on login. After login success you will be provided with the links which you can access.</h2>\n          <g:link controller='login' action='auth'>Spring Login</g:link>\n          </sec:ifNotLoggedIn>\n\n        </div>\n      </body>\n    ```", "```java\n    import org.springframework.security.core.GrantedAuthority \n    import org.springframework.security.core.userdetails.User\n\n    class MyUserDetails extends User {   \n     String fullname \n     String email \n     String title \n\n    MyUserDetails(String username, String password, boolean enabled, boolean accountNonExpired, boolean credentialsNonExpired, boolean accountNonLocked, Collection authorities, String fullname,\n    String email, String title) {  \n      super(username, password, enabled, accountNonExpired, credentialsNonExpired, accountNonLocked, authorities)\n    this.fullname = fullname \n    this.email = email \n    this.title = title \n    }\n    }\n    ```", "```java\n    import org.springframework.ldap.core.DirContextAdapter\n    import org.springframework.ldap.core.DirContextOperations\n    import org.springframework.security.core.userdetails.UserDetails\n    import org.springframework.security.ldap.userdetails.UserDetailsContextMapper\n    class MyUserDetailsContextMapper implements UserDetailsContextMapper {\n        UserDetails mapUserFromContext(DirContextOperations ctx, String username, Collection authorities) {\n          String fullname = ctx.originalAttrs.attrs['cn'].values[0]\n          String email = ctx.originalAttrs.attrs['mail'].values[0].toString().toLowerCase() \n          def title = ctx.originalAttrs.attrs['sn']\n          def userDetails = new MyUserDetails(username, '', true, true, true, true,authorities, fullname,email,  title == null ? '' : title.values[0])\n          return userDetails\n        }\n        void mapUserToContext(UserDetails user,\n    \t\tDirContextAdapter ctx) {\n    \t\t\tthrow new IllegalStateException(\"Only retrieving\n    \t\t\t\tdata from LDAP is currently supported\")\n        }\n\n    }\n    ```", "```java\n    grails run-app\n\n    ```"]