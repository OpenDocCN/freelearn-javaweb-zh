["```java\n<xsd:element name=\"security-constraint\" type=\"j2ee:security-constraintType\"/>\n<xsd:element name=\"login-config\"\u00a0type=\"j2ee:login-configType\"/>\n<xsd:element name=\"security-role \"type=\"j2ee:security-roleType\"/>\n```", "```java\n    <%@ page contentType=\"text/html; charset=UTF-8\" %>\n    <%@ page language=\"java\" %>\n    <html >\n      <HEAD>\n        <TITLE>PACKT Login Form</TITLE>\n        <SCRIPT>\n          function submitForm() {\n            var frm = document. myform;\n            if( frm.j_username.value == \"\" ) {\n              alert(\"please enter your username, its empty\");\n              frm.j_username.focus();\n              return ;\n            }\n\n            if( frm.j_password.value == \"\" ) {\n              alert(\"please enter the password,its empty\");\n              frm.j_password.focus();\n              return ;\n            }\n            frm.submit();\n          }\n        </SCRIPT>\n      </HEAD>\n      <BODY>\n        <FORM name=\"myform\" action=\"SecurityCheckerServlet\" METHOD=get>\n        <TABLE width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"1\" bgcolor=\"white\">\n        <TABLE width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"5\">\n        <TR align=\"center\">\n        <TD align=\"right\" class=\"Prompt\"></TD>\n        <TD align=\"left\">\n          <INPUT type=\"text\" name=\"j_username\" maxlength=20>\n        </TD>\n        </TR>\n        <TR align=\"center\">\n        <TD align=\"right\" class=\"Prompt\"> </TD>\n        <TD align=\"left\">\n        <INPUT type=\"password\"name=\"j_password\" maxlength=20 >\n        <BR>\n        <TR align=\"center\">\n        <TD align=\"right\" class=\"Prompt\"> </TD>\n        <TD align=\"left\">\n        <input type=\"submit\" onclick=\"javascript:submitForm();\" value=\"Login\">\n        </TD>\n        </TR>\n        </TABLE>\n        </FORM>\n      </BODY>\n    </html>\n    ```", "```java\n    <display-name>jaas-jboss</display-name>\n     <welcome-file-list>\n        <welcome-file>index.html</welcome-file>\n        <welcome-file>index.htm</welcome-file>\n        <welcome-file>index.jsp</welcome-file>\n        <welcome-file>default.html</welcome-file>\n        <welcome-file>default.htm</welcome-file>\n        <welcome-file>default.jsp</welcome-file>\n     </welcome-file-list>\n\n     <security-constraint>\n        <web-resource-collection>\n         <web-resource-name>something</web-resource-name>\n         <description>Declarative security tests</description>\n         <url-pattern>*.jsp</url-pattern>\n         <http-method>HEAD</http-method>\n         <http-method>GET</http-method>\n         <http-method>POST</http-method>\n         <http-method>PUT</http-method>\n         <http-method>DELETE</http-method>\n        </web-resource-collection>\n        <auth-constraint>\n         <role-name>role1</role-name>\n        </auth-constraint>\n        <user-data-constraint>\n         <description>no description</description>\n         <transport-guarantee>NONE</transport-guarantee>\n        </user-data-constraint>\n     </security-constraint>\n     <login-config>\n        <auth-method>FORM</auth-method>\n        <form-login-config>\n         <form-login-page>/login.jsp</form-login-page>\n         <form-error-page>/logoff.jsp</form-error-page>\n        </form-login-config>\n     </login-config>\n     <security-role>\n        <description>some role</description>\n        <role-name>role1</role-name>\n     </security-role>\n     <security-role>\n        <description>packt managers</description>\n        <role-name>manager</role-name>\n     </security-role>\n     <servlet>\n        <description></description>\n        <display-name>SecurityCheckerServlet</display-name>\n        <servlet-name>SecurityCheckerServlet</servlet-name>\n        <servlet-class>com.servlets.SecurityCheckerServlet</servlet-class>\n     </servlet>\n     <servlet-mapping>\n        <servlet-name>SecurityCheckerServlet</servlet-name>\n        <url-pattern>/SecurityCheckerServlet</url-pattern>\n     </servlet-mapping>\n    ```", "```java\n    package com.servlets;\n    public class SecurityCheckerServlet extends HttpServlet {\n      private static final long serialVersionUID = 1L;\n\n        public SecurityCheckerServlet() {\n          super();\n        }\n\n        protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n           char[] password = null;\n           PrintWriter out=response.getWriter();\n           try\n           {\n\n             SecurityAssociationHandler handler = new SecurityAssociationHandler();\n             SimplePrincipal user = new SimplePrincipal(request.getParameter(\"j_username\"));\n             password=request.getParameter(\"j_password\").toCharArray();\n             handler.setSecurityInfo(user, password);\n             System.out.println(\"password\"+password);\n\n             CallbackHandler myHandler = new UserCredentialHandler(request.getParameter(\"j_username\"),request.getParameter(\"j_password\"));\n             LoginContext lc = new LoginContext(\"other\", handler);\n             lc.login();\n\n             Subject subject = lc.getSubject();\n             Set principals = subject.getPrincipals();\n\n             List l=new ArrayList();\n             Iterator it = lc.getSubject().getPrincipals().iterator();\n             while (it.hasNext()) {\n               System.out.println(\"Authenticated: \" + it.next().toString() + \"<br>\");\n               out.println(\"<b><html><body><font color='green'>Authenticated: \" + request.getParameter(\"j_username\")+\"<br/>\"+it.next().toString() + \"<br/></font></b></body></html>\");\n                  }\n               it = lc.getSubject().getPublicCredentials(Properties.class).iterator();\n               while (it.hasNext()) System.out.println(it.next().toString());\n\n               lc.logout();\n           }     catch (Exception e) {\n                 out.println(\"<b><font color='red'>failed authenticatation.</font>-</b>\"+e);\n\n           }\n        }\n      protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n       }\n\n    }\n    ```", "```java\n    package com.servlets;\n    class UserCredentialHandler implements CallbackHandler {\n      private String user, pass;\n\n      UserCredentialHandler(String user, String pass) {\n        super();\n        this.user = user;\n        this.pass = pass;\n      }\n      @Override\n      public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n          for (int i = 0; i < callbacks.length; i++) {\n            if (callbacks[i] instanceof NameCallback) {\n              NameCallback nc = (NameCallback) callbacks[i];\n              nc.setName(user);\n            } else if (callbacks[i] instanceof PasswordCallback) {\n              PasswordCallback pc = (PasswordCallback) callbacks[i];\n              pc.setPassword(pass.toCharArray());\n            } else {\n            throw new UnsupportedCallbackException(callbacks[i], \"Unrecognized Callback\");\n          }\n        }\n      }\n     }\n    ```", "```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <jboss-web>\n    <security-domain>java:/jaas/other</security-domain>\n    </jboss-web>\n    ```", "```java\n    <application-policy name=\"other\">\n      <!-- A simple server login module, which can be used when the number of users is relatively small. It uses two properties files:\n      users.properties, which holds users (key) and their password (value).\n      roles.properties, which holds users (key) and a comma-separated list of\n      their roles (value).\n      The unauthenticatedIdentity property defines the name of the principal\n      that will be used when a null username and password are presented as is\n      the case for an unauthenticated web client or MDB. If you want to allow such users to be authenticated add the property, e.g.,\n        unauthenticatedIdentity=\"nobody\"\n      -->\n      <authentication>\n      <login-module code=\"org.jboss.security.auth.spi.UsersRolesLoginModule\"\n        flag=\"required\"/>\n        <module-option name=\"usersProperties\">users.properties</module-option>\n        <module-option name=\"rolesProperties\">roles.properties</module-option>\n        <module-option name=\"unauthenticatedIdentity\">nobody</module-option> \n      </authentication>\n    </application-policy>\n    ```", "```java\n    anjana=anjana123\n    ```", "```java\n    anjana=role1\n    ```", "```java\nCallbackHandler myHandler = new UserCredentialHandler(request.getParameter(\"j_username\"),request.getParameter(\"j_password\"));\n  LoginContext lc = new LoginContext(\"other\", handler);\n  lc.login();\n```", "```java\n    public class ProtectedServlets extends HttpServlet {\n      private static final long serialVersionUID = 1L;\n\n      public ProtectedServlets() {\n        super();\n\n      }\n      protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        PrintWriter out=response.getWriter();\n        try\n        {\n          out.println(\"Hello User\");\n          out.println(\"Authtype:\"+request.getAuthType());\n          out.println(\"User Principal:\"+request.getUserPrincipal());\n          out.println(\"User role:\"+request.isUserInRole(\"role1\"));\n        }\n        catch (Exception e) {\n          out.println(\"<b><font color='red'>failed authenticatation</font>-</b>\"+e);\n\n        }\n      }\n\n      protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        // TODO Auto-generated method stub\n      }\n\n    }\n    ```", "```java\n    <web-resource-collection>\n    <web-resource-name>Servlet Protection</web-resource-name>\n    <description>Declarative security tests</description>\n    <url-pattern>/ProtectedServlets</url-pattern>\n    <http-method>HEAD</http-method>\n    <http-method>GET</http-method>\n    <http-method>POST</http-method>\n    <http-method>PUT</http-method>\n    <http-method>DELETE</http-method>\n    </web-resource-collection>\n    ```", "```java\n<login-config>\n   <auth-method>BASIC</auth-method>\n<form-login-config>  \n```", "```java\n    <%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\"\n        pageEncoding=\"ISO-8859-1\"%>\n    <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n    <html>\n    <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n    <title>Insert title here</title>\n    </head>\n    <body>\n    <form method=\"POST\" action=\"j_security_check\">\n    Username:<input type=\"text\" name=\"j_username\">\n    password:<input type=\"password\" name=\"j_password\">\n    <input type=submit>\n    </form>\n    </body>\n    </html>\n    ```", "```java\n    <login-config>\n      <auth-method>FORM</auth-method>\n      <form-login-config>\n        <form-login-page>/Containerform.jsp</form-login-page>\n        <form-error-page>/logoff.jsp</form-error-page>\n      </form-login-config>\n    </login-config>\n    ```", "```java\n    <application-policy name=\"example\">\n     <authentication>\n     <login-module code=\"org.jboss.security.auth.spi.LdapExtLoginModule\" flag=\"required\" >\n     <module-option name=\"java.naming.factory.initial\">com.sun.jndi.ldap.LdapCtxFactory</module-option>\n     <module-option name=\"java.naming.provider.url\">ldap://localhost:389</module-option>\n     <module-option name=\"java.naming.security.authentication\">simple</module-option>\n     <module-option name=\"bindDN\">cn=Manager,dc=maxcrc,dc=com</module-option>\n     <module-option name=\"bindCredential\">secret</module-option>\n     <module-option name=\"baseCtxDN\">ou=People,dc=maxcrc,dc=com</module-option>\n     <module-option name=\"baseFilter\">(uid={0})</module-option>\n\n     <module-option name=\"rolesCtxDN\">ou=Roles,dc=maxcrc,dc=com</module-option>\n      <module-option name=\"rolesCtxDN\">ou=Department,dc=maxcrc,dc=com</module-option>\n     <module-option name=\"roleFilter\">(member={1})</module-option>\n     <module-option name=\"roleAttributeID\">cn</module-option>\n     <module-option name=\"searchScope\">ONELEVEL_SCOPE</module-option>\n     <module-option name=\"allowEmptyPasswords\">true</module-option>\n     </login-module>\n    </authentication>\n    </application-policy>\n    ```", "```java\n    jboss-web.xml\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <jboss-web>\n    <security-domain>java:/jaas/example</security-domain>\n    </jboss-web>\n    ```", "```java\n    <login-config>\n        <auth-method>DIGEST</auth-method>\n        <realm-name>PACKTSecurity</realm-name>\n    </login-config>\n    ```", "```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <!-- <jboss-web> -->\n    <!-- <security-domain>java:/jaas/other</security-domain> -->\n    <!-- </jboss-web> -->\n    <jboss-web>\n    <security-domain>java:/jaas/encryptme</security-domain>\n    </jboss-web>\n    ```", "```java\n    <application-policy name=\"encryptme\">\n        <!--this is used to demonstrate DIGEST Authentication\n        -->\n        <authentication>\n          <login-module code=\"org.jboss.security.auth.spi.UsersRolesLoginModule\"\n            flag=\"required\"/>\n        <module-option name=\"usersProperties\">encrypt-users.properties</module-option>\n        <module-option name=\"rolesProperties\">encrypt-roles.properties</module-option>\n        <module-option name=\"hashAlgorithm\">MD5</module-option>\n        <module-option name=\"hashEncoding\">rfc2617</module-option>\n        <module-option name=\"hashUserPassword\">false</module-option>\n        <module-option name=\"hashStorePassword\">true</module-option>\n        <module-option name=\"passwordIsA1Hash\">true</module-option>\n       <module-option name=\"storeDigestCallback\">\n                    org.jboss.security.auth.spi.RFC2617Digest\n        </module-option>\t\n        </authentication>\n      </application-policy>\n    ```", "```java\n        anjana=e3b6b01ec4b0bdd3fc1ff24d0ccabf1f\n        ```", "```java\n    package com.packt.ws;\n    import javax.jws.WebMethod;\n    import javax.jws.WebService;\n    import javax.jws.soap.SOAPBinding;\n    import javax.jws.soap.SOAPBinding.Style;\n    @WebService\n    @SOAPBinding(style = Style.RPC)\n    public interface EmployeeProfile {\n      @WebMethod\n      String getSalary();\n    }\n    ```", "```java\n    package com.packt.ws;\n    import javax.jws.WebService;\n    import javax.jws.WebMethod;\n    import javax.jws.WebService;\n    @WebService(endpointInterface = \"com.packt.ws.EmployeeProfile\")\n    public class EmployeeProfileImpl implements EmployeeProfile {\n             @Override\n    public String getSalary() {\n        return \"no salary for the month\";\n    }\n    }\n    ```", "```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <endpoints\n\n      version=\"2.0\">\n      <endpoint\n          name=\"EmployeeProfile\"\n          implementation=\"com.packt.EmployeeProfileImpl\"\n          url-pattern=\"/employee\"/>\n    </endpoints>\n    ```", "```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <web-app    xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\" id=\"WebApp_ID\" version=\"2.5\">\n      <display-name>JAX-WS-Authentication-Tomcat</display-name>\n       <listener>\n            <listener-class>\n               com.sun.xml.ws.transport.http.servlet.WSServletContextListener\n            </listener-class>\n        </listener>\n        <servlet>\n            <servlet-name>employee</servlet-name>\n            <servlet-class>\n            com.sun.xml.ws.transport.http.servlet.WSServlet\n            </servlet-class>\n            <load-on-startup>1</load-on-startup>\n        </servlet>\n        <servlet-mapping>\n            <servlet-name>employee</servlet-name>\n            <url-pattern>/employee</url-pattern>\n        </servlet-mapping>\n       <security-role>\n         <description>Normal operator user</description>\n         <role-name>operator</role-name>\n       \t</security-role>\n\n    <security-constraint>\n          <web-resource-collection>\n            <web-resource-name>Operator Roles Security</web-resource-name>\n            <url-pattern>/employee</url-pattern>\n          </web-resource-collection>\n\n          <auth-constraint>\n            <role-name>operator</role-name>\n          </auth-constraint>\n          <user-data-constraint>\n              <transport-guarantee>NONE</transport-guarantee>\n          </user-data-constraint>\n       </security-constraint>\n\n    <login-config>\n          <auth-method>BASIC</auth-method>\n       </login-config>\n\n    </web-app>\n    ```", "```java\n    <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n                 resourceName=\"UserDatabase\"/>\n    ```", "```java\n    <servlet>\n          <servlet-name>default</servlet-name>\n          <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>\n          <init-param>\n             <param-name>debug</param-name>\n             <param-value>0</param-value>\n          </init-param>\n          <init-param>\n             <param-name>listings</param-name>\n             <param-value>false</param-value>\n          </init-param>\n          <load-on-startup>1</load-on-startup>\n       </servlet>\n    ```"]