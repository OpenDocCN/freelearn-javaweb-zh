["```java\n    <global-method-security pre-post-annotations=\"enabled\" />\n\n      <http auto-config=\"false\"  use-expressions=\"true\">\n        <intercept-url pattern=\"/login\" access=\"permitAll\" />\n        <intercept-url pattern=\"/logout\" access=\"permitAll\" />\n        <intercept-url pattern=\"/accessdenied\" access=\"permitAll\" />\n        <intercept-url pattern=\"/**\"access=\"hasRole('ROLE_EDITOR')\" />\n        <form-login login-page=\"/login\" default-target-url=\"/list\" authentication-failure-url=\"/accessdenied\" />\n        <logout logout-success-url=\"/logout\" />\n      </http>\n\n      <authentication-manager alias=\"authenticationManager\">\n        <authentication-provider>\n          <jdbc-user-service data-source-ref=\"tenant1DataSource\"\n            users-by-username-query=\" select username,password ,'true' as enabled from users where username=?\"  \n            authorities-by-username-query=\" \n            select u.username as username, ur.authority as authority from users u, user_roles ur  \n            where u.user_id = ur.user_id and u.username =?\"\n            /> \n        </authentication-provider>\n      </authentication-manager>\n\n      <beans:bean id=\"horrorMovieDAO\" class=\"com.packt.springsecurity.dao.HorrorMovieDaoImpl\" />\n      <beans:bean id=\"horrorMovieManager\" class=\"com.packt.springsecurity.service.HorrorMovieManagerImpl\" />\n      <beans:bean id=\"tenant1DataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n      <beans:property name=\"driverClassName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\" />\n      <beans:property name=\"url\" value=\"jdbc:derby://localhost:1527/client1\" />\n      <beans:property name=\"username\" value=\"client1\" />\n      <beans:property name=\"password\" value=\"client1\" />\n\n    </beans:bean>\n    ```", "```java\n    <global-method-security pre-post-annotations=\"enabled\" />\n\n      <http auto-config=\"true\">\n        <intercept-url pattern=\"/spring-security-wicket/**\" access=\"ROLE_SELLER\"/>\n        <intercept-url pattern=\"/spring-security-wicket/*.*\" access=\"ROLE_SELLER\"/> \n        <intercept-url pattern=\"/**\" access=\"ROLE_SELLER\" />\n      <http-basic />\n    </http>\n    <authentication-manager> \n      <authentication-provider> \n        <jdbc-user-service data-source-ref=\"MySqlDS\" \n          users-by-username-query=\" \n          select username,password, enabled   \n          from users1 where username=?\"  \n          authorities-by-username-query=\" \n          select u.username, ur.role from users1 u, user_roles ur  \n          where u.user_id = ur.user_id and u.username =?  \" /> \n      </authentication-provider>\n    </authentication-manager>\n    ```", "```java\n    @Repository\n    public class HorrorMovieDaoImpl implements HorrorMovieDAO  {\n\n      @Autowired\n      private SessionFactory sessionFactory;\n\n      @PreAuthorize(\"hasRole('ROLE_AUTHOR')\")\n      @Override\n      public void addHorrorMovie(HorrorMovieEntity horrormovie) {\n        this.sessionFactory.getCurrentSession().save(horrormovie);\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      @Override\n      public List<HorrorMovieEntity> getAllHorrorMovies() {\n        return this.sessionFactory.getCurrentSession().createQuery(\"from HORRORMOVIE\").list();\n      }\n\n      @Override\n      public void deleteHorrorMovie(Integer horrorMovieId) {\n        HorrorMovieEntity horrorMovie = (HorrorMovieEntity)sessionFactory.getCurrentSession().load(HorrorMovieEntity.class, horrorMovieId);\n        if (null != horrorMovie) {\n          this.sessionFactory.getCurrentSession().delete(horrorMovie);\n        }\n      }\n    }\n    ```", "```java\n    create table HORRORMOVIE\n     (HORRORMOVIE_ID int generated by default as identity \n     (START WITH 2, INCREMENT BY 1),\n     HORRORMOVIE_NAME char(50),HORRORMOVIE_DIRECTOR char(50));\n\n    insert into HORRORMOVIE values \n     (1, 'EVILDEAD','Fede Alvarez');\n    insert into HORRORMOVIE values \n     (DEFAULT, 'EVILDEAD2','Fede Alvarez');\n\n    ```", "```java\n    <global-method-security pre-post-annotations=\"enabled\" />\n\n    <http auto-config=\"false\"  use-expressions=\"true\">\n      <intercept-url pattern=\"/login\" access=\"permitAll\" />\n      <intercept-url pattern=\"/logout\" access=\"permitAll\" />\n      <intercept-url pattern=\"/accessdenied\" access=\"permitAll\"/>\n      <intercept-url pattern=\"/list\" access=\"hasRole('ROLE_EDITOR')\" />\n      <intercept-url pattern=\"/add\" access=\"hasRole('ROLE_EDITOR')\" />\n      <form-login login-page=\"/login\" default-target-url=\"/list\" authentication-failure-url=\"/accessdenied\" />\n      <logout logout-success-url=\"/logout\" />\n    </http>\n\n      <authentication-manager alias=\"authenticationManager\">\n     <authentication-provider ref=\"MyCustomAuthenticationProvider\" />\n     </authentication-manager>\n\n      <beans:bean id=\"horrorMovieDAO\" class=\"com.packt.springsecurity.dao.HorrorMovieDaoImpl\" />\n      <beans:bean id=\"horrorMovieManager\" class=\"com.packt.springsecurity.service.HorrorMovieManagerImpl\"/>\n\n     <beans:bean id=\"MyCustomAuthenticationProvider\" class=\"com.packt.springsecurity.controller\" />\n    </beans:beans>\n    ```", "```java\n    public class MyCustomAuthenticationProvider implements AuthenticationProvider {\n      @Override\n      public boolean supports(Class<? extends Object>authentication)\n    {\n        return (UsernamePasswordAuthenticationToken.class.isAssignableFrom(authentication));\n        }\n\n     private static Map<String, String> APP_USERS= new HashMap<String, String>(2);\n     private static List<GrantedAuthority> APP_ROLES= new ArrayList<GrantedAuthority>();\n     static\n     {\n     APP_USERS.put(\"ravi\", \"ravi123\");\n     APP_USERS.put(\"chitra\", \"chitra123\");\n     APP_ROLES.add(new SimpleGrantedAuthority(\"ROLE_EDITOR\"));\n     }\n\n      @Override\n      public Authentication authenticate(Authentication auth)\n      {\n     if (APP_USERS.containsKey(auth.getPrincipal())\n     && APP_ROLES.get(auth.getPrincipal()).equals(auth.getCredentials()))\n     {\n     return new UsernamePasswordAuthenticationToken(auth.getName(), auth.getCredentials(),\n     AUTHORITIES);\n     }\n     throw new BadCredentialsException(\"Username/Password does not match for \"\n          + auth.getPrincipal());\n        }\n      }\n    }\n    ```", "```java\n    AddHorrorMovieController\n    @PreAuthorize(\"hasRole('ROLE_EDITOR')\")\n    @RequestMapping(value = \"/add\", method = RequestMethod.POST)\n    public String addHorrorMovie(\n      @ModelAttribute(value = \"horrorMovie\") HorrorMovieEntity horrorMovie,\n        BindingResult result) {\n        horrorMovieManager.addHorrorMovie(horrorMovie);\n        return \"redirect:/list\";\n      }\n    ```", "```java\n    public class MyUserDetails implements UserDetailsService {\n      @Autowired\n      private UsersDAO UsersDAO;\n      public UserDetails loadUserByUsername(String userName)\n      throws UsernameNotFoundException {\n\n        Users users= UsersDAO.findByUserName(userName);\n        boolean enabled = true;\n        boolean accountNonExpired = true;\n        boolean credentialsNonExpired = true;\n        boolean accountNonLocked = true;\n        return new User(\n          users.getUserName(), \n          users.getUserPassword(), \n          enabled, \n          accountNonExpired, \n          credentialsNonExpired, \n          accountNonLocked,\n          getAuthorities(users.getRole().getRoleId().intValue()));\n        }\n\n        public Collection<? extends GrantedAuthority>getAuthorities(Integer role) {\n        List<GrantedAuthority> authList = getGrantedAuthorities(getRoles(role));\n        System.out.println(\"authList----------->\"+authList);\n        return authList;\n      }\n\n      public List<String> getRoles(Integer role) {\n\n        List<String> roles = new ArrayList<String>();\n\n        if (role.intValue() == 1) {\n          roles.add(\"ROLE_EDITOR\");\n        } else if (role.intValue() == 2) {\n          roles.add(\"ROLE_AUTHOR\");\n        }\n        return roles;\n      }\n\n      public static List<GrantedAuthority> getGrantedAuthorities(List<String> roles) {\n      List<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();\n      for (String role : roles) {\n        System.out.println(\"role----------->\"+role);\n        authorities.add(new SimpleGrantedAuthority(role));\n      }\n      return authorities;\n      }\n\n    }\n    ```", "```java\n    <authentication-manager alias=\"authenticationManager\">\n      <authentication-provider user-service-ref=\"MyUserDetails\">\n        <password-encoder hash=\"plaintext\" />\n      </authentication-provider>\n    </authentication-manager>\n\n    <beans:bean id=\"horrorMovieDAO\" class=\"com.packt.springsecurity.dao.HorrorMovieDaoImpl\" />\n    <beans:bean id=\"horrorMovieManager\" class=\"com.packt.springsecurity.service.HorrorMovieManagerImpl\" />\n    <beans:bean id=\"UsersDAO\" class=\"com.packt.springsecurity.dao.UsersDAOImpl\" />\n    <beans:bean id=\"UsersManager\" class=\"com.packt.springsecurity.service.UsersManagerImpl\" />\n    <beans:bean id=\"UserRoleDAO\" class=\"com.packt.springsecurity.dao.UserRoleDAOImpl\" />\n    <beans:bean id=\"UserRoleManager\" class=\"com.packt.springsecurity.service.UserRoleManagerImpl\" />\n\n    <beans:bean id=\"MyUserDetails\" class=\"com.packt.springsecurity.service.MyUserDetails\" />\n    </beans:beans>\n    ```", "```java\n    @PreAuthorize(\"hasRole('ROLE_EDITOR')\")\n    @RequestMapping(value = \"/add\", method = RequestMethod.POST)\n    public String addHorrorMovie(\n      @ModelAttribute(value = \"horrorMovie\")HorrorMovieEntity horrorMovie,\n      BindingResult result) {\n        horrorMovieManager.addHorrorMovie(horrorMovie);\n        return \"redirect:/list\";\n      }\n    ```", "```java\n    db.horrormovie.insert({horrormovie_id:1,horrormovie_name:\n     \"omen\",horrormovie_director:\"Richard Donner\"})\n\n    db.horrormovie.insert({horrormovie_id:2,horrormovie_name:\n     \"the conjuring\",horrormovie_director:\"James Wan\"})\n\n    db.horrormovie.insert({horrormovie_id:3,horrormovie_name:\n     \"The Lords of Salem\",horrormovie_director:\"Rob Zombie\"})\n\n    db.horrormovie.insert({horrormovie_id:4,horrormovie_name:\n     \"Evil Dead\",horrormovie_director: \"Fede Alvarez\"})\n\n    db.users.insert({id:1,username:\"anjana\",password:\n     \"123456\",role:1})\n\n    db.users.insert({id:2,username:\"raghu\",password:\n     \"123456\",role:2})\n\n    db.users.insert({id:3,username:\"shami\",password:\n     \"123456\",role:3})\n\n    ```", "```java\n    @Service\n    public class MongoUserDetailsService implements UserDetailsService {\n\n      @Autowired\n      private UserManager userManager;\n      private static final Logger logger = Logger.getLogger(MongoUserDetailsService.class);\n      private org.springframework.security.core.userdetails.User userdetails;\n      public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n        boolean enabled = true;\n        boolean accountNonExpired = true;\n        boolean credentialsNonExpired = true;\n        boolean accountNonLocked = true;\n        Users users = getUserDetail(username);\n        System.out.println(username);\n        System.out.println(users.getPassword());\n        System.out.println(users.getUsername());\n        System.out.println(users.getRole());\n\n        return new User(users.getUsername(), users.getPassword(),enabled,accountNonExpired,credentialsNonExpired,accountNonLocked,getAuthorities(users.getRole()));\n      }\n\n      public List<GrantedAuthority> getAuthorities(Integer role) {\n        List<GrantedAuthority> authList = new ArrayList<GrantedAuthority>();\n          if (role.intValue() == 1) {\n            authList.add(new SimpleGrantedAuthority(\"ROLE_EDITOR\"));\n\n          } else if (role.intValue() == 2) {\n            authList.add(new SimpleGrantedAuthority(\"ROLE_AUTHOR\"));\n        }\n        return authList;\n      }\n\n      public Users getUserDetail(String username) {\n      Users users = userManager.findByUserName(username);\n      System.out.println(users.toString());\n      return users;\n    }\n    ```", "```java\n    <global-method-security pre-post-annotations=\"enabled\" />\n\n    <http auto-config=\"false\"  use-expressions=\"true\">\n      <intercept-url pattern=\"/login\" access=\"permitAll\" />\n      <intercept-url pattern=\"/logout\" access=\"permitAll\" />\n      <intercept-url pattern=\"/accessdenied\" access=\"permitAll\" />\n      <intercept-url pattern=\"/list\" access=\"hasRole('ROLE_EDITOR')\" />\n    <!--                <http-basic/>-->\n      <form-login login-page=\"/login\" default-target-url=\"/list\" authentication-failure-url=\"/accessdenied\" />\n      <logout logout-success-url=\"/logout\" />\n    </http>\n\n    <authentication-manager alias=\"authenticationManager\">\n    <authentication-provider user-service-ref=\"mongoUserDetailsService\">\n    <password-encoder hash=\"plaintext\" />\n    </authentication-provider>\n    </authentication-manager>\n    ```", "```java\n    <context:annotation-config />\n    <context:component-scan base-package=\"com.packt.springsecurity.mongodb.controller\" />\n    <context:component-scan base-package=\"com.packt.springsecurity.mongodb.manager\" />\n    <context:component-scan base-package=\"com.packt.springsecurity.mongodb.dao\" />\n    <context:component-scan base-package=\"com.packt.springsecurity.mongodb.documententity\" />\n\n    <bean id=\"jspViewResolver\"\n      class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n      <property name=\"viewClass\"\n      value=\"org.springframework.web.servlet.view.JstlView\" />\n      <property name=\"prefix\" value=\"/WEB-INF/view/\" />\n      <property name=\"suffix\" value=\".jsp\" />\n    </bean>\n    <mongo:mongo host=\"127.0.0.1\" port=\"27017\" />\n    <mongo:db-factory dbname=\"horrordb\" />\n\n    <bean id=\"mongoTemplate\" class=\"org.springframework.data.mongodb.core.MongoTemplate\">\n    <constructor-arg name=\"mongoDbFactory\" ref=\"mongoDbFactory\" />\n    </bean>\n\n    <bean id=\"horrorMovieDAO\" class=\"com.packt.springsecurity.mongodb.dao.HorrorMovieDaoImpl\" />\n    <bean id=\"horrorMovieManager\" class=\"com.packt.springsecurity.mongodb.manager.HorrorMovieManagerImpl\" />\n    <bean id=\"UsersDAO\" class=\"com.packt.springsecurity.mongodb.dao.UsersDAOImpl\" />\n    <bean id=\"userManager\" class=\"com.packt.springsecurity.mongodb.manager.UserManagerImpl\" />\n    <bean id=\"mongoUserDetailsService\" class=\"com.packt.springsecurity.mongodb.controller.MongoUserDetailsService\" />\n\n    <bean id=\"HorroMovieController\" class=\"com.packt.springsecurity.mongodb.controller.HorrorMovieController\" />\n    ```", "```java\n    @PreAuthorize(\"hasRole('ROLE_EDITOR')\")\n    @RequestMapping(value = \"/add\", method = RequestMethod.POST)\n    public String addHorrorMovie(\n    @ModelAttribute(value = \"horrorMovie\")HorrorMovieEntity horrorMovie,\n      BindingResult result) {\n      horrorMovieManager.addHorrorMovie(horrorMovie);\n      return \"redirect:/list\";\n    }\n    ```"]