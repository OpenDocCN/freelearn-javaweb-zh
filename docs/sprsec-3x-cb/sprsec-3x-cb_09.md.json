["```java\n      @RequestMapping(value = \"/fbprofile\", method = RequestMethod.GET)\n      public String getfbProfile(ModelMap model,HttpServletRequest request, \n          HttpServletResponse response) {\n        model.addAttribute(\"request.userPrincipal.name\", request.getUserPrincipal().getName());\n        Facebook facebook = connectionRepository.getPrimaryConnection(Facebook.class).getApi();\n        model.addAttribute(\"profileLink\", facebook.userOperations().getUserProfile().getLink());\n        model.addAttribute(\"Gender\", facebook.userOperations().getUserProfile().getGender());\n        model.addAttribute(\"profileInfo\", facebook.userOperations().getUserProfile());\n        model.addAttribute(\"userpermissions\", facebook.userOperations().getUserPermissions());\n        List<Reference> friends = facebook.friendOperations().getFriends();\n        model.addAttribute(\"friends\", friends);\n        model.addAttribute(\"friendlist\", facebook.friendOperations().getFriendLists());\n        return \"facebookprofile\";\n      }\n    ```", "```java\n      <bean id=\"connectionFactoryLocator\" class=\"org.springframework.social.connect.support.ConnectionFactoryRegistry\">\n        <property name=\"connectionFactories\">\n          <list>\n            <bean class=\"org.springframework.social.facebook.connect.FacebookConnectionFactory\">\n              <constructor-arg value=\"${facebook.clientId}\" />\n              <constructor-arg value=\"${facebook.clientSecret}\" />\n            </bean>\n          </list>\n        </property>\n      </bean>\n    ```", "```java\n      <bean id=\"textEncryptor\" class=\"org.springframework.security.crypto.encrypt.Encryptors\" factory-method=\"noOpText\" />\n      <bean id=\"usersConnectionRepository\" class=\"org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository\">\n        <constructor-arg ref=\"mydataSource\" />\n        <constructor-arg ref=\"connectionFactoryLocator\" />\n        <constructor-arg ref=\"textEncryptor\" />\n      </bean>\n      <bean id=\"connectionRepository\" factory-method=\"createConnectionRepository\" factory-bean=\"usersConnectionRepository\" scope=\"request\">\n          <constructor-arg value=\"#{request.userPrincipal.name}\" />\n          <aop:scoped-proxy proxy-target-class=\"false\"/>\n      </bean>\n    ```", "```java\n      <bean class=\"org.springframework.social.connect.web.ConnectController\"\n        p:applicationUrl=\"${application.url}\"/>\n    ```", "```java\n    create table UserConnection (userId varchar(255) not null,\n      providerId varchar(255) not null,\n      providerUserId varchar(255),\n      rank int not null,\n      displayName varchar(255),\n      profileUrl varchar(512),\n      imageUrl varchar(512),\n      accessToken varchar(255) not null,\n      secret varchar(255),\n      refreshToken varchar(255),\n      expireTime bigint,\n      primary key (userId, providerId, providerUserId));\n\n    create unique index UserConnectionRank on UserConnection(userId, providerId, rank);\n    ```", "```java\n    < @RequestMapping(value = \"/posttofb\", method = RequestMethod.GET)\n      public String posttofb(String message, ModelMap model) {\n        try {\n          Facebook facebook = connectionRepository.getPrimaryConnection(Facebook.class).getApi();\n          facebook.feedOperations().updateStatus(message);\n          model.addAttribute(\"status\", \"success\");\n          model.addAttribute(\"message\", message);\n          return \"redirect:/list\";\n        } catch (Exception e) {\n          model.addAttribute(\"status\", \"failure\");\n          return \"/facebook/fbconnect\";\n        }\n      }\n      @RequestMapping(value = \"/twprofile\", method = RequestMethod.GET)\n      public String gettwProfile(ModelMap model) {\n        try{\n          Twitter twitter = connectionRepository.getPrimaryConnection(Twitter.class).getApi();\n          model.addAttribute(\"twprofileLink\", twitter.userOperations().getUserProfile().getUrl());\n          model.addAttribute(\"twprofileInfo\", twitter.userOperations().getUserProfile());\n          model.addAttribute(\"twfollowers\", twitter.friendOperations().getFollowers());\n          model.addAttribute(\"twfriends\", twitter.friendOperations().getFriends());\n          return \"/twitter/twitterprofile\";\n        } catch (Exception e) {\n          model.addAttribute(\"status\", \"failure\");\n          return \"/twitter/twconnect\";\n        }\n      }\n      @RequestMapping(value = \"/posttotw\", method = RequestMethod.GET)\n      public String posttotw(String message, ModelMap model) {\n        try {\n          Twitter twitter = connectionRepository.getPrimaryConnection(Twitter.class).getApi();\n          twitter.timelineOperations().updateStatus(message);\n          model.addAttribute(\"status\", \"success\");\n          model.addAttribute(\"message\", message);\n          return \"redirect:/list\";\n        } catch (Exception e) {\n          model.addAttribute(\"status\", \"failure\");\n          return \"/twitter/twconnect\";\n        }\n      }\n    ```", "```java\n    public class SocialUsersDetailServiceImpl implements SocialUserDetailsService {\n      private UserDetailsService userDetailsService;\n      public SocialUsersDetailServiceImpl(UserDetailsService userDetailsService) {\n        this.userDetailsService = userDetailsService;\n      }\n      @Override\n        public SocialUserDetails loadUserByUserId(String userId) throws UsernameNotFoundException, DataAccessException {\n        UserDetails userDetails = userDetailsService.loadUserByUsername(userId);\n        return new SocialUser(userDetails.getUsername(), userDetails.getPassword(), userDetails.getAuthorities());\n      }}\n    ```", "```java\n      <bean id=\"socialAuthenticationProvider\" class=\"org.springframework.social.security.SocialAuthenticationProvider\"\n        c:_0-ref=\"usersConnectionRepository\"\n        c:_1-ref=\"socialUsersDetailService\" />\n      <bean id=\"socialUsersDetailService\" class=\"org.springframework.social.showcase.security.SocialUsersDetailServiceImpl\"\n        c:_-ref=\"userDetailsService\" />\n    ```", "```java\n      <authentication-manager alias=\"authenticationManager\">\n        <authentication-provider user-service-ref=\"userDetailsService\">\n          <password-encoder ref=\"passwordEncoder\" />\n        </authentication-provider>\n        <!-- Spring Social Security authentication provider -->\n        <authentication-provider ref=\"socialAuthenticationProvider\" />\n     </authentication-manager>\n      <jdbc-user-service id=\"userDetailsService\" data-source-ref=\"dataSource\" users-by-username-query=\"select username, password, true from Account where username = ?\"\n          authorities-by-username-query=\"select username, 'ROLE_USER' from Account where username = ?\"/>\n      <beans:bean id=\"textEncryptor\" class=\"org.springframework.security.crypto.encrypt.Encryptors\"\n        factory-method=\"noOpText\" />\n      <beans:bean id=\"passwordEncoder\" class=\"org.springframework.security.crypto.password.NoOpPasswordEncoder\"\n        factory-method=\"getInstance\" />\n    ```", "```java\n    <bean id=\"socialAuthenticationFilter\" class=\"org.springframework.social.security.SocialAuthenticationFilter\"\n        c:_0-ref=\"authenticationManager\"\n        c:_1-ref=\"userIdSource\"\n        c:_2-ref=\"usersConnectionRepository\"\n        c:_3-ref=\"connectionFactoryLocator\"\n        p:signupUrl=\"/spring-social-showcase/signup\"\n        p:rememberMeServices-ref=\"org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices#0\" />\n    ```", "```java\n    <http use-expressions=\"true\">\n        <!-- Authentication policy -->\n        <form-login login-page=\"/signin\" login-processing-url=\"/signin/authenticate\" authentication-failure-url=\"/signin?param.error=bad_credentials\" />\n        <logout logout-url=\"/signout\" delete-cookies=\"JSESSIONID\" />\n        <intercept-url pattern=\"/favicon.ico\"access=\"permitAll\" />\n        <intercept-url pattern=\"/resources/**\" access=\"permitAll\" />\n        <intercept-url pattern=\"/auth/**\" access=\"permitAll\" />\n        <intercept-url pattern=\"/signin/**\" access=\"permitAll\" />\n        <intercept-url pattern=\"/signup/**\" access=\"permitAll\"/>\n        <intercept-url pattern=\"/disconnect/facebook\" access=\"permitAll\" />\n        <intercept-url pattern=\"/**\" access=\"isAuthenticated()\"/>\n        <remember-me />\n        <!--  Spring Social Security authentication filter -->\n        <custom-filter ref=\"socialAuthenticationFilter\" before=\"PRE_AUTH_FILTER\" />\n      </http>\n    ```", "```java\n    @Controller\n    public class CreateStoryController {\n      @RequestMapping(value=\"/stories\", method=RequestMethod.GET)\n      @ResponseBody\n      public String loadStory() {\n        StringBuilder horrorStory = new StringBuilder();\n        horrorStory.append(\"Story Name -- Conjuring: Author\").append(getAuthorName()).append(\" Story:She and that girl and occasionally another girl went out several times a week, and the rest of the time Connie spent around the house\u2014it was summer vacation\u2014getting in her mother's way and thinking, dreaming about the boys she met. But all the boys fell back and dissolved into a single face that was not even a face but an idea, a feeling, mixed up with the urgent insistent pounding of the music and the humid night air of July. Connie's mother kept dragging her back to the daylight by finding things for her to do or saying suddenly, 'What's this about the Pettinger girl?\");\n        return horrorStory.toString();\n      }\n      private String getAuthorName() {\n        Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n        String author;\n        if (principal instanceof UserDetails) {\n          author = ((UserDetails)principal).getUsername();\n        } else {\n          author = principal.toString();\n        }\n        return author;\n      }\n    }\n    ```", "```java\n    @Controller\n    public class ConfirmAccessController {\n      private ClientAuthenticationCache clientauthenticationCache = new DefaultClientAuthenticationCache();\n      private ClientDetailsService clientDetailsService;\n      public ClientAuthenticationCache getAuthenticationCache() {\n        return clientauthenticationCache;\n      }\n      @RequestMapping(value=\"/oauth/confirm_access\")\n      public ModelAndView accessConfirmation(HttpServletRequest request, HttpServletResponse response) {\n        ClientAuthenticationToken clientAuthtoken = getAuthenticationCache().getAuthentication(request, response);\n        if (clientAuthtoken == null) {\n          throw new IllegalStateException(\"We did not recive any client authentication to authorize\");\n        }\n        ClientDetails client = getClientDetailsService().loadClientByClientId(clientAuthtoken.getClientId());\n        TreeMap<String, Object> model = new TreeMap<String, Object>();\n        model.put(\"auth_request\", clientAuthtoken);\n        model.put(\"client\", client);\n        return new ModelAndView(\"access_confirmation\", model);\n      }\n      public ClientDetailsService getClientDetailsService() {\n        return clientDetailsService;\n      }\n      @Autowired\n      public void setClientDetailsService(\n          ClientDetailsService clientDetailsService) {\n        this.clientDetailsService = clientDetailsService;\n      }\n    }\n    ```", "```java\n    <!-- Root Context: defines shared resources visible to all other web components -->\n      <http auto-config='true'>\n      <intercept-url pattern=\"/**\" access=\"ROLE_EDITOR\" />\n      </http>\n     <authentication-manager>\n     <authentication-provider>\n     <user-service>\n     <user name=\"anju\" password=\"anju123\" authorities=\"ROLE_EDITOR\" />\n     </user-service>\n     </authentication-provider>\n     </authentication-manager>\n     <!--apply the oauth client context -->\n     <oauth:client token-services-ref=\"oauth2TokenServices\" />\n     <beans:bean id=\"oauth2TokenServices\"\n     class=\"org.springframework.security.oauth2.consumer.token.InMemoryOAuth2ClientTokenServices\" />\n     <oauth:resource id=\"story\" type=\"authorization_code\"\n     clientId=\"movie\" accessTokenUri=\"http://localhost:8080/story/oauth/authorize\"\n     userAuthorizationUri=\"http://localhost:8080/story/oauth/user/authorize\" />\n     <beans:bean id=\"storyService\" class=\"org.springsource.oauth.StoryServiceImpl\">\n     <beans:property name=\"storyURL\" value=\"http://localhost:8080/story/stories\"></beans:property>\n     <beans:property name=\"storyRestTemplate\">\n     <beans:bean class=\"org.springframework.security.oauth2.consumer.OAuth2RestTemplate\">\n     <beans:constructor-arg ref=\"story\"/>\n     </beans:bean>\n     </beans:property>\n     <beans:property name=\"tokenServices\" ref=\"oauth2TokenServices\"></beans:property>\n     </beans:bean>\n    </beans:beans>\n\n    ```"]