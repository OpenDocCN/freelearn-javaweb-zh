["```java\n      <authentication-manager alias=\"authentication Manager\">\n        <authentication-provider>\n     <jdbc-user-service data-source-ref=\"tenant1DataSource\"users-by-username-query=\" select username, password ,'true' as enabled from users where username=?\"authorities-by-username-query=\" select u.username as username, ur.authority as authority from users u, user_roles ur where u.user_id = ur.user_id and u.username =?\" />\n        </authentication-provider>\n     <authentication-provider>\n     <user-service>\n     <user name=\"anjana\" password=\"anjana123\" authorities=\"ROLE_EDITOR\"/>\n     <user name=\"raghu\" password=\"raghu123\" authorities=\"ROLE_AUTHOR\"/>\n     <user name=\"shami\" password=\"shami123\" authorities=\"ROLE_EDITOR\"/>\n     </user-service>\n     </authentication-provider>\n      </authentication-manager>\n    ```", "```java\n      public class MultipleInputAuthenticationFilter extends UsernamePasswordAuthenticationFilter{\n        private String extraParameter = \"mobile_no\";\n\n        public String getExtraParameter() {\n            return extraParameter;\n        }\n\n        public void setExtraParameter(String extraParameter) {\n          this.extraParameter = extraParameter;\n        }\n        private String delimiter = \":\";\n\n        @Override\n        protected String obtainUsername(HttpServletRequest request)\n          {\n            String username = request.getParameter(getUsernameParameter());\n            String mobile_no = request.getParameter(getExtraParameter());\n            String combinedUsername = username + getDelimiter() + mobile_no;\n            System.out.println(\"Combined username = \" + combinedUsername);\n            return combinedUsername;\n          }\n\n        public String getDelimiter()\n        {\n          return this.delimiter;\n        }\n        /**\n          * @param delimiter The delimiter string used to separate the username and extra input values in the\n            * string returned by <code>obtainUsername()</code>\n        */\n        public void setDelimiter(String delimiter) {\n          this.delimiter = delimiter;\n        }\n    ```", "```java\n      <global-method-security pre-post-annotations=\"enabled\" />\n        <http auto-config=\"false\"  use-expressions=\"true\" entry-point-ref=\"loginUrlAuthenticationEntryPoint\">\n          <intercept-url pattern=\"/login\" access=\"permitAll\" />\n          <intercept-url pattern=\"/logout\" access=\"permitAll\" />\n          <intercept-url pattern=\"/accessdenied\" access=\"permitAll\" />\n          <intercept-url pattern=\"/list\" access=\"hasRole('ROLE_EDITOR')\" />\n          <intercept-url pattern=\"/add\" access=\"hasRole('ROLE_EDITOR')\" />\n          <custom-filter position=\"FORM_LOGIN_FILTER\" ref=\"multipleInputAuthenticationFilter\" />\n          <!--<form-login login-page=\"/login\" default-target-url=\"/list\" authentication-failure-url=\"/accessdenied\" />-->\n          <logout logout-success-url=\"/logout\" />\n        </http>\n        <authentication-manager alias=\"authenticationManager\">\n          <authentication-provider user-service-ref=\"MyUserDetails\">\n            <password-encoder hash=\"plaintext\" />\n          </authentication-provider>\n        </authentication-manager>\n     <beans:bean id=\"multipleInputAuthenticationFilter\" class=\"com.packt.springsecurity.controller.MultipleInputAuthenticationFilter\">\n     <beans:property name=\"authenticationManager\" ref=\"authenticationManager\" />\n     <beans:property name=\"authenticationFailureHandler\" ref=\"failureHandler\" />\n     <beans:property name=\"authenticationSuccessHandler\" ref=\"successHandler\" />\n     <beans:property name=\"filterProcessesUrl\" value=\"/j_spring_security_check\" />\n     <beans:property name=\"postOnly\" value=\"true\" />\n     <beans:property name=\"extraParameter\" value=\"mobile_no\" />\n     </beans:bean>\n        <beans:bean id=\"horrorMovieDAO\" class=\"com.packt.springsecurity.dao.HorrorMovieDaoImpl\" />\n        <beans:bean id=\"horrorMovieManager\" class=\"com.packt.springsecurity.service.HorrorMovieManagerImpl\" />\n        <beans:bean id=\"UsersDAO\" class=\"com.packt.springsecurity.dao.UsersDAOImpl\" />\n        <beans:bean id=\"UsersManager\" class=\"com.packt.springsecurity.service.UsersManagerImpl\" />\n        <beans:bean id=\"UserRoleDAO\" class=\"com.packt.springsecurity.dao.UserRoleDAOImpl\" />\n        <beans:bean id=\"UserRoleManager\" class=\"com.packt.springsecurity.service.UserRoleManagerImpl\" />\n        <beans:bean id=\"loginUrlAuthenticationEntryPoint\" class=\"org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint\">\n          <beans:property name=\"loginFormUrl\" value=\"/login\" />\n        </beans:bean>\n        <beans:bean id=\"successHandler\" class=\"org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler\">\n          <beans:property name=\"defaultTargetUrl\" value=\"/list\" />\n        </beans:bean>\n\n        <beans:bean id=\"failureHandler\" class=\"org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler\">\n          <beans:property name=\"defaultFailureUrl\" value=\"/accessdenied\" />\n        </beans:bean>\n     <beans:bean id=\"MyUserDetails\" class=\"com.packt.springsecurity.service.MyUserDetails\" />\n     </beans:beans> \n\n    ```", "```java\n    @Override\n     @Transactional\n     public Users findByUserNameMobile(String userName, String mobile_no) {\n     List<Users> userList = new ArrayList<Users>();\n     Query query = (Query) sessionFactory.getCurrentSession().createQuery(\"from Users u where u.userName = :userName and u.mobile_no=:mobile_no\");\n     query.setParameter(\"userName\", userName);\n     query.setInteger(\"mobile_no\", Integer.parseInt(mobile_no));\n     userList = query.list();\n     if (userList.size() > 0) {\n     return userList.get(0);\n     } else {\n     return null;\n     }\n     }\n\n    ```", "```java\n    public UserDetails loadUserByUsername(String str)throws UsernameNotFoundException {\n     String[] splitstring = str.split(\":\");\n     if (splitstring.length < 2) {\n     System.out.println(\"User did not enter both username and mobile number.\");\n     throw new UsernameNotFoundException(\"Must specify both username and mobile number\");\n     }\n     String username = splitstring[0];\n     String mobile = splitstring[1];\n\n     System.out.println(\"Username = \" + username);\n     System.out.println(\"Mobile = \" + mobile);\n\n     Users users = UsersDAO.findByUserNameMobile(username, mobile);\n     boolean enabled = true;\n     boolean accountNonExpired = true;\n     boolean credentialsNonExpired = true;\n     boolean accountNonLocked = true;\n     return new User(\n     users.getUserName(),\n     users.getUserPassword(),\n     enabled,\n     accountNonExpired,\n     credentialsNonExpired,\n     accountNonLocked,\n     getAuthorities(users.getRole().getRoleId().intValue()));\n    }\n\n    ```", "```java\n      <servlet>\n        <servlet-name>Kaptcha</servlet-name>\n        <servlet-class>com.google.code.kaptcha.servlet.KaptchaServlet</servlet-class>\n      </servlet>\n      <servlet-mapping>\n        <servlet-name>Kaptcha</servlet-name>\n        <url-pattern>/kaptcha.jpg</url-pattern>\n      </servlet-mapping>\n    ```", "```java\n      <beans:bean id=\"multipleInputAuthenticationFilter\" class=\"com.packt.springsecurity.controller.MultipleInputAuthenticationFilter\">\n        <beans:property name=\"authenticationManager\" ref=\"authenticationManager\" />\n        <beans:property name=\"authenticationFailureHandler\" ref=\"failureHandler\" />\n        <beans:property name=\"authenticationSuccessHandler\" ref=\"successHandler\" />\n        <beans:property name=\"filterProcessesUrl\" value=\"/j_spring_security_check\" />\n        <beans:property name=\"postOnly\" value=\"true\" />\n        <beans:property name=\"extraParameter\" value=\"kaptcha\" />\n      </beans:bean>\n    ```", "```java\n     @Override\n     @Transactional\n     public Users findByUserNameCaptcha(String userName, String kaptchaReceived, String kaptchaExpected) {\n     List<Users> userList = new ArrayList<Users>();\n     Query query = (Query) sessionFactory.getCurrentSession().createQuery(\"from Users u where u.userName = :userName\");\n     query.setParameter(\"userName\", userName);\n     userList = query.list();\n     if (userList.size()>0 && kaptchaReceived.equalsIgnoreCase(kaptchaExpected)) {\n     return (Users)userList.get(0);\n     }  else {\n     return null;\n     }\n     }\n\n    ```", "```java\n    public UserDetails loadUserByUsername(String str)throws UsernameNotFoundException {\n     String[] splitstring = str.split(\":\");\n     if (splitstring.length < 2) {\n     System.out.println(\"User did not enter both username and captcha code.\");\n     throw new UsernameNotFoundException(\"Must specify both username captcha code\");\n     }\n     String username = splitstring[0];\n     String kaptchaReceived = splitstring[1];\n     String kaptchaExpected = splitstring[2];\n     Users users = UsersDAO.findByUserNameCaptcha(username, kaptchaReceived,kaptchaExpected);\n     boolean enabled = true;\n     boolean accountNonExpired = true;\n     boolean credentialsNonExpired = true;\n     boolean accountNonLocked = true;\n     return new User(\n     users.getUserName(),\n     users.getUserPassword(),\n     enabled,\n     accountNonExpired,\n     credentialsNonExpired,\n     accountNonLocked,\n     getAuthorities(users.getRole().getRoleId().intValue())\n     );\n    }\n\n    ```", "```java\n    @Override\n      protected String obtainUsername(HttpServletRequest request) {\n      String username = request.getParameter(getUsernameParameter());\n      String kaptcha = request.getParameter(getExtraParameter());\n      String kaptchaExpected = (String) request.getSession().getAttribute(com.google.code.kaptcha.Constants.KAPTCHA_SESSION_KEY);\n      String combinedUsername = username + getDelimiter() + kaptcha + getDelimiter() + kaptchaExpected;\n      System.out.println(\"Combined username = \" + combinedUsername);\n      return combinedUsername;\n      }\n    ```", "```java\n    public class AuthorityGranterImpl implements AuthorityGranter {\n      public Set<String> grant(Principal principal) {\n        if (principal.getName().equals(\"publisher\"))\n          return Collections.singleton(\"PUBLISHER\");\n        else\n          return Collections.singleton(\"EDITOR\");\n      }\n    }\n    ```", "```java\n    public class LoginModuleImpl implements LoginModule {\n      private String password;\n      private String username;\n      private Subject subject;\n      public boolean login() throws LoginException {\n        // Check the password against the username \"publisher\" or \"editor\"\n        if (username == null || (!username.equals(\"publisher\") && !username.equals(\"editor\"))) {\n          throw new LoginException(\"User not valid\");\n        }\n        if (password == null || (!password.equals(\"publisher123\") && !password.equals(\"editor123\"))) {\n          throw new LoginException(\"Password not valid\");\n        } else {\n          subject.getPrincipals().add(new UserPrincipal(username));\n          return true;\n        }\n      }\n\n      @Override\n      public boolean abort() throws LoginException {\n        // TODO Auto-generated method stub\n        return false;\n      }\n\n      @Override\n      public boolean commit() throws LoginException {\n        // TODO Auto-generated method stub\n        return true;\n      }\n\n      @Override\n      public boolean logout() throws LoginException {\n        // TODO Auto-generated method stub\n        return false;\n      }\n\n      public void initialize(Subject subject, CallbackHandler callbackHandler,\n        Map<String, ?> state, Map<String, ?> options) {\n        this.subject = subject;\n        try {\n          NameCallback nameCallback = new NameCallback(\"prompt\");\n          PasswordCallback passwordCallback = new PasswordCallback(\"prompt\", false);\n          callbackHandler.handle(new Callback[]{nameCallback,passwordCallback});\n          password = new String(passwordCallback.getPassword());\n          username = nameCallback.getName();\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    ```", "```java\n      <sec:authentication-manager>\n        <sec:authentication-provider ref=\"jaasAuthProvider\" />\n      </sec:authentication-manager>\n      <bean id=\"jaasAuthProvider\" class=\"org.springframework.security.authentication.jaas.DefaultJaasAuthenticationProvider\">\n        <property name=\"configuration\">\n          <bean class=\"org.springframework.security.authentication.jaas.memory.InMemoryConfiguration\">\n            <constructor-arg>\n              <map><entry key=\"SPRINGSECURITY\">\n                <array>\n                  <bean class=\"javax.security.auth.login.AppConfigurationEntry\">\n                    <constructor-arg value=\"org.packt.springsecurityjaas.LoginModuleImpl\" />\n                    <constructor-arg>\n                      <util:constant static-field=\"javax.security.auth.login.AppConfigurationEntry$LoginModuleControlFlag.REQUIRED\" />\n                    </constructor-arg>\n                    <constructor-arg>\n                      <map></map>\n                    </constructor-arg>\n                  </bean>\n                </array>\n              </entry>\n              </map>\n            </constructor-arg>\n          </bean>\n        </property>\n        <property name=\"authorityGranters\">\n          <list>\n            <bean class=\"org.packt.springsecurityjaas.AuthorityGranterImpl\" />\n          </list>\n        </property>\n      </bean>\n    </beans>\n    ```"]