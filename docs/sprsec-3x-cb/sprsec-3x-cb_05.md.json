["```java\n    <filter>\n      <filter-name>springSecurityFilterChain</filter-name>\n      <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n    </filter>\n\n    <filter-mapping>\n      <filter-name>springSecurityFilterChain</filter-name>\n      <url-pattern>/*</url-pattern>\n    </filter-mapping>\n\n    <listener>\n      <listener-class>\n      org.springframework.web.context.ContextLoaderListener\n      </listener-class>\n    </listener>\n    ```", "```java\n    <http auto-config=\"true\">\n      <intercept-url pattern=\"/xyz/**\" access=\"ROLE_AUTHOR\"/>\n      <intercept-url pattern=\"/xyz/**\" access=\"ROLE_AUTHOR\"/>\n      <intercept-url pattern=\"/**/*.html\" access=\"ROLE_AUTHOR\"/>\n      <intercept-url pattern=\"/**\" \n        access=\"IS_AUTHENTICATED_ANONYMOUSLY\" />\n    </http>\n    <beans:bean id=\"packtAuthenticationListener\" \n      class=\"com.demo.xyz.server.PacktAuthenticationListener\"/>\n    <beans:bean id=\"packtGWTAuthenticator\" \n      class=\"com.demo.xyz.server.PacktGWTAuthenticator\" />    \n    <authentication-manager alias=\"authenticationManager\">\n      <authentication-provider ref=\"packtGWTAuthenticator\"/>\n    </authentication-manager>\n    </beans:beans>\n    ```", "```java\n    Package com.demo.xyz.server\n    public class PacktGWTAuthenticator implements AuthenticationProvider{\n      static Users users=new Users();\n      private static Map<String, String> usersMap =users.loadUsers();\n\n      @Override\n      public Authentication authenticate\n        (Authentication authentication) \n      throws AuthenticationException {\n\n        String mylogin_name = (String) authentication.getPrincipal();\n        String mypassword = (String)authentication.getCredentials();\n        //check username\n        if (usersMap.get(mylogin_name)==null)\n        throw new UsernameNotFoundException\n          (mylogin_name+\"credential not found in the UsersMap\");\n    //get password\n        String password = usersMap.get(mylogin_name);\n\n        if (!password.equals(mypassword))\n          throw new BadCredentialsException(\"Incorrect password-\n            or credential not found in the UsersMap\");\n\n          Authentication packtauthenticator =  new \n            PacktGWTAuthentication(\"ROLE_AUTHOR\", authentication);\n          packtauthenticator .setAuthenticated(true);\n\n          return packtauthenticator;\n\n        }\n\n        @Override\n        public boolean supports(Class<? extends Object>\n           authentication) {\n        return UsernamePasswordAuthenticationToken.class\n          .isAssignableFrom(authentication);\n      }\n    }\n    ```", "```java\n    package com.demo.xyz.server;\n    import java.util.HashMap;\n    import java.util.Map;\n    public class Users {\n      public Map<String, String> getUsersMap() {\n        return usersMap;\n      }\n\n      public void setUsersMap(Map<String, String> usersMap) {\n\n        this.usersMap = usersMap;\n      }\n\n      private Map<String, String> usersMap = new HashMap\n        <String, String>();\n\n      public Map<String, String> loadUsers(){\n        usersMap.put(\"rashmi\", \"rashmi123\");\n        usersMap.put(\"shami\", \"shami123\");\n        usersMap.put(\"ravi\", \"ravi123\");\n        usersMap.put(\"ratty\", \"ratty123\");\n        return usersMap;\n      }\n\n    }\n    ```", "```java\n    public class PacktGWTAuthentication implements Authentication{\n\n      private static final long serialVersionUID = -3091441742758356129L;\n\n      private boolean authenticated;\n\n      private GrantedAuthority grantedAuthority;\n      private Authentication authentication;\n\n      public PacktGWTAuthentication(String role, Authentication authentication) {\n        this.grantedAuthority = new GrantedAuthorityImpl(role);\n        this.authentication = authentication;\n      }\n\n      @Override\n      public Object getCredentials() {\n        return authentication.getCredentials();\n      }\n\n      @Override\n      public Object getDetails() {\n        return authentication.getDetails();\n      }\n\n      @Override\n      public Object getPrincipal() {\n        return authentication.getPrincipal();\n      }\n\n      @Override\n      public boolean isAuthenticated() {\n        return authenticated;\n      }\n\n      @Override\n      public void setAuthenticated(boolean authenticated)throws IllegalArgumentException {\n        this.authenticated = authenticated;\n      }\n\n      @Override\n      public String getName() {\n        return this.getClass().getSimpleName();\n      }\n      @Override\n      public Collection<GrantedAuthority> getAuthorities() {\n        Collection<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();\n        authorities.add(granted Authority);\n        return authorities;\n      }\n\n    }\n    ```", "```java\n    package com.demo.xyz.server;\n    public class PacktAuthenticatorServiceImpl extends RemoteServiceServlet  implements PacktAuthenticatorService {\n\n      @Override\n      public String authenticateServer() {\n      Authentication authentication =SecurityContextHolder.getContext().getAuthentication();\n      if (authentication==null){\n        System.out.println(\"looks like you have not logged in.\");\n        return null;\n      }\n      else {\n        System.out.println(authentication.getPrincipal().toString());\n        System.out.println(authentication.getName().toString());\n        System.out.println(authentication.getDetails().toString());\n        return (String) authentication.getPrincipal();\n        }\n\n      }\n\n    }\n    ```", "```java\n    package com.demo.xyz.server;\n    public class PacktAuthenticationListener implements \n      ApplicationListener<AbstractAuthenticationEvent>{\n      @Override\n      public void onApplicationEvent\n        (AbstractAuthenticationEvent event) {\n\n        final StringBuilder mybuilder = new StringBuilder();\n        mybuilder.append(\"AN AUHTHENTICATION EVENT \");\n        mybuilder.append(event.getClass().getSimpleName());\n        mybuilder.append(\"*** \");\n        mybuilder.append(event.getAuthentication().getName());\n        mybuilder.append(\"$$$DETAILS OF THE EVENT: \");\n        mybuilder.append(event.getAuthentication().getDetails());\n\n        if (event instanceof \n          AbstractAuthenticationFailureEvent) {\n          mybuilder.append(\"$$$ EXCEPTION HAS OCCURED: \");\n          mybuilder.append(((AbstractAuthenticationFailureEvent)\n           event).getException().getMessage());\n        }\n        System.out.println(mybuilder.toString());\n      }\n    }\n    ```", "```java\n    package com.demo.xyz.client;\n\n    /**\n     * Entry point classes define <code>onModuleLoad()</code>.\n     */\n    public class Xyz implements EntryPoint {\n    /**\n     * The message displayed to the user when the server cannot be reached or\n     * returns an error.\n     */\n    private static final String SERVER_ERROR = \n      \"An error occurred while \"+ \"attempting to contact\n       the server. Please check your network \"\n      + \"connection and try again.\";\n\n    /**\n     * Create a remote service proxy to talk to the server-side Greeting service.\n     */\n    private final GreetingServiceAsync greetingService = \n      GWT.create(GreetingService.class);\n    private final PacktAuthenticatorServiceAsync \n      packtAuthenticatorService = \n      GWT.create(PacktAuthenticatorService.class);\n    /**\n     * This is the entry point method.\n     */\n    public void onModuleLoad() {\n      final Button sendButton = new Button(\"Send\");\n      final TextBox nameField = new TextBox();\n      nameField.setText(\"GWT User\");\n      final Label errorLabel = new Label();\n      sendButton.addStyleName(\"sendButton\");\n      RootPanel.get(\"nameFieldContainer\").add(nameField);\n      RootPanel.get(\"sendButtonContainer\").add(sendButton);\n      RootPanel.get(\"errorLabelContainer\").add(errorLabel);\n\n    // Focus the cursor on the name field when the app loads\n      nameField.setFocus(true);\n      nameField.selectAll();\n\n      // Create the popup dialog box\n      final DialogBox dialogBox = new DialogBox();\n      dialogBox.setText(\"Remote Procedure Call\");\n      dialogBox.setAnimationEnabled(true);\n      final Button closeButton = new Button(\"Close\");\n    // We can set the id of a widget by accessing its Element\n      closeButton.getElement().setId(\"closeButton\");\n      final Label textToServerLabel = new Label();\n      final HTML serverResponseLabel = new HTML();\n      VerticalPanel dialogVPanel = new VerticalPanel();\n      dialogVPanel.addStyleName(\"dialogVPanel\");\n      dialogVPanel.add(new HTML\n        (\"<b>Sending name to the server:</b>\"));\n      dialogVPanel.add(textToServerLabel);\n      dialogVPanel.add(new HTML(\"<br><b>Server replies:</b>\"));\n      dialogVPanel.add(serverResponseLabel);\n      dialogVPanel.setHorizontalAlignment\n        (VerticalPanel.ALIGN_RIGHT);\n    dialogVPanel.add(closeButton);\n    dialogBox.setWidget(dialogVPanel);\n\n      // Add a handler to close the DialogBox\n      closeButton.addClickHandler(new ClickHandler() {\n        public void onClick(ClickEvent event) {\n          dialogBox.hide();\n          sendButton.setEnabled(true);\n          sendButton.setFocus(true);\n        }\n      });\n\n      // Create a handler for the sendButton and nameField\n      class MyHandler implements ClickHandler, KeyUpHandler {\n\n      public void onClick(ClickEvent event) {\n        sendNameToServer();\n      }\n\n      public void onKeyUp(KeyUpEvent event) {\n        if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {\n          sendNameToServer();\n        }\n      }\n\n      /**\n       * Send the name from the nameField to the server and wait for a response.\n       */\n      private void sendNameToServer() {\n      // First, we validate the input.\n      errorLabel.setText(\"\");\n      String textToServer = nameField.getText();\n      if (!FieldVerifier.isValidName(textToServer)) {\n        errorLabel.setText(\"Please enter at least four \n          characters\");\n        return;\n        }\n\n    // Then, we send the input to the server.\n        sendButton.setEnabled(false);\n        textToServerLabel.setText(textToServer);\n        serverResponseLabel.setText(\"\");\n        greetingService.greetServer(textToServer,\n        new AsyncCallback<String>() {\n          public void onFailure(Throwable caught) {\n            // Show the RPC error message to the user dialogBox\n            setText(\"Remote Procedure Call - Failure\");\n            serverResponseLabel.addStyleName\n              (\"serverResponseLabelError\");\n            serverResponseLabel.setHTML(SERVER_ERROR);\n            dialogBox.center();\n            closeButton.setFocus(true);\n          }\n\n          public void onSuccess(String result) {\n            dialogBox.setText(\"Remote Procedure Call\");\n            serverResponseLabel.removeStyleName\n              (\"serverResponseLabelError\");\n            serverResponseLabel.setHTML(result);\n            dialogBox.center();\n            closeButton.setFocus(true);\n          }\n        });\n      }\n    }\n\n    // Add a handler to send the name to the server\n    MyHandler handler = new MyHandler();\n    sendButton.addClickHandler(handler);\n    nameField.addKeyUpHandler(handler);\n    packtAuthenticatorService.authenticateServer(new AsyncCallback<String>() {\n      public void onFailure(Throwable caught) {\n        dialogBox.setText(\"Remote Procedure Call - Failure\");\n      }\n      public void onSuccess(String result) {\n        nameField.setText(result);\n      }\n    }\n    );\n    }\n    }\n    ```", "```java\n    package com.demo.xyz.client;\n\n    /**\n    * Entry point classes define <code>onModuleLoad()</code>.\n    */\n    public class Xyz implements EntryPoint {\n      /**\n       * The message displayed to the user when the server cannot be reached or\n       * returns an error.\n       */\n      private static final String SERVER_ERROR = \n        \"An error occurred while \"+ \"attempting to contact\n         the server. Please check your network \"\n        + \"connection and try again.\";\n\n      /**\n       * Create a remote service proxy to talk to the server-side Greeting service.\n       */\n      private final GreetingServiceAsync greetingService\n         = GWT.create(GreetingService.class);\n      private final PacktAuthenticatorServiceAsync \n        packtAuthenticatorService = \n        GWT.create(PacktAuthenticatorService.class);\n      /**\n       * This is the entry point method.\n       */\n      public void onModuleLoad() {\n        final Button sendButton = new Button(\"Send\");\n        final TextBox nameField = new TextBox();\n        nameField.setText(\"GWT User\");\n        final Label errorLabel = new Label();\n\n        // We can add style names to widgets\n        sendButton.addStyleName(\"sendButton\");\n\n        // Add the nameField and sendButton to the RootPanel\n        // Use RootPanel.get() to get the entire body element\n        RootPanel.get(\"nameFieldContainer\").add(nameField);\n        RootPanel.get(\"sendButtonContainer\").add(sendButton);\n        RootPanel.get(\"errorLabelContainer\").add(errorLabel);\n\n        // Focus the cursor on the name field when the app loads nameField.setFocus(true);\n        nameField.selectAll();\n\n        // Create the popup dialog box\n        final DialogBox dialogBox = new DialogBox();\n        dialogBox.setText(\"Remote Procedure Call\");\n        dialogBox.setAnimationEnabled(true);\n        final Button closeButton = new Button(\"Close\");\n        //We can set the id of a widget by accessing its Element\n        closeButton.getElement().setId(\"closeButton\");\n        final Label textToServerLabel = new Label();\n        final HTML serverResponseLabel = new HTML();\n        VerticalPanel dialogVPanel = new VerticalPanel();\n        dialogVPanel.addStyleName(\"dialogVPanel\");\n        dialogVPanel.add(new HTML\n          (\"<b>Sending name to the server:</b>\"));\n        dialogVPanel.add(textToServerLabel);\n        dialogVPanel.add(new HTML(\"<br><b>Server replies:</b>\"));\n        dialogVPanel.add(serverResponseLabel);\n        dialogVPanel.setHorizontalAlignment\n          (VerticalPanel.ALIGN_RIGHT);\n        dialogVPanel.add(closeButton);\n        dialogBox.setWidget(dialogVPanel);\n\n        // Add a handler to close the DialogBox\n        closeButton.addClickHandler(new ClickHandler() {\n          public void onClick(ClickEvent event) {\n            dialogBox.hide();\n            sendButton.setEnabled(true);\n            sendButton.setFocus(true);\n          }\n        });\n\n        // Create a handler for the sendButton and nameField\n        class MyHandler implements ClickHandler, KeyUpHandler {\n          /**\n           * Fired when the user clicks on the sendButton.\n           */\n          public void onClick(ClickEvent event) {\n            sendNameToServer();\n          }\n\n          /**\n           * Fired when the user types in the nameField.\n           */\n          public void onKeyUp(KeyUpEvent event) {\n            if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {\n              sendNameToServer();\n            }\n          }\n\n            /**\n             * Send the name from the nameField to the server and wait for a response.\n             */\n            private void sendNameToServer() {\n            // First, we validate the input.\n            errorLabel.setText(\"\");\n            String textToServer = nameField.getText();\n            if (!FieldVerifier.isValidName(textToServer)) {\n              errorLabel.setText(\"Please enter at least\n                 four characters\");\n              return;\n            }\n\n            // Then, we send the input to the server.\n            sendButton.setEnabled(false);\n            textToServerLabel.setText(textToServer);\n            serverResponseLabel.setText(\"\");\n            greetingService.greetServer(textToServer,\n            new AsyncCallback<String>() {\n              public void onFailure(Throwable caught) {\n                // Show the RPC error message to the user\n              dialogBox.setText(\"Remote Procedure Call\n                 - Failure\");\n              serverResponseLabel.addStyleName\n                (\"serverResponseLabelError\");\n              serverResponseLabel.setHTML(SERVER_ERROR);\n              dialogBox.center();\n              closeButton.setFocus(true);\n            }\n\n            public void onSuccess(String result) {\n            dialogBox.setText(\"Remote Procedure Call\");\n            serverResponseLabel.removeStyleName\n              (\"serverResponseLabelError\");\n            serverResponseLabel.setHTML(result);\n            dialogBox.center();\n            closeButton.setFocus(true);\n          }\n        });\n      }\n    }\n\n    // Add a handler to send the name to the server\n    MyHandler handler = new MyHandler();\n    sendButton.addClickHandler(handler);\n    nameField.addKeyUpHandler(handler);\n    packtAuthenticatorService.authenticateServer(new AsyncCallback<String>() {\n      public void onFailure(Throwable caught) {\n      dialogBox.setText(\"Remote Procedure Call - Failure\");\n    }\n    public void onSuccess(String result) {\n      nameField.setText(result);\n    }\n    }\n    );\n    }\n    }\n    ```", "```java\nPacktGWTAuthentication\norg.springframework.security.web.authentication.WebAuthenticationDetails@fffdaa08: RemoteIpAddress: 127.0.0.1; SessionId: 1cdb5kk395o29\n\n```", "```java\n<http auto-config=\"true\" >\n  <intercept-url pattern=\"/basicgwtauth/**\"\n     access=\"ROLE_AUTHOR\"/>\n        <intercept-url pattern=\"/basicgwtauth/**\" access=\"ROLE_AUTHOR\"/>\n        <intercept-url pattern=\"/**/*.html\" access=\"ROLE_AUTHOR\"/>\n        <intercept-url pattern=\"/**\" access=\"IS_AUTHENTICATED_ANONYMOUSLY\" />\n\n</http>\n<authentication-manager>\n  <authentication-provider>\n    <user-service>\n      <user name=\"anjana\" password=\"123456\" \n      authorities=\"ROLE_AUTHOR\" />\n    </user-service>\n  </authentication-provider>\n</authentication-manager>\n```", "```java\n<http auto-config=\"true\" >\n  <intercept-url pattern=\"/basicgwtauth/**\"\n     access=\"ROLE_AUTHOR\"/>\n  <intercept-url pattern=\"/basicgwtauth/**\"\n     access=\"ROLE_AUTHOR\"/>\n  <intercept-url pattern=\"/**/*.html\" access=\"ROLE_AUTHOR\"/>\n  <intercept-url pattern=\"/**\"\n     access=\"IS_AUTHENTICATED_ANONYMOUSLY\" />\n  <http-basic />\n</http>\n<authentication-manager>\n  <authentication-provider>\n    <user-service>\n      <user name=\"anjana\" password=\"123456\" \n        authorities=\"ROLE_AUTHOR\" />\n    </user-service>\n  </authentication-provider>\n</authentication-manager>\n```", "```java\n<http auto-config=\"true\" >\n  <intercept-url pattern=\"/basicgwtauth/**\" access=\"\n     ROLE_EDITOR \"/>\n  <intercept-url pattern=\"/basicgwtauth/**\" access=\"\n     ROLE_EDITOR \"/>\n  <intercept-url pattern=\"/**/*.html\" access=\n    \" ROLE_EDITOR \"/>\n  <intercept-url pattern=\"/**\" access\n    =\"IS_AUTHENTICATED_ANONYMOUSLY\" />\n  <http-basic />\n</http>\n<authentication-manager>\n  <authentication-provider>\n    <password-encoder hash=\"sha\" />\n    <user-service>\n      <user name=\"anjana\" \n        password=\"bde892ed4e131546a2f9997cc94d31e2c8f18b2a\" \n      authorities=\"ROLE_EDITOR\" />\n    </user-service>\n  </authentication-provider>\n</authentication-manager>\n```", "```java\n<http auto-config=\"true\" >\n  <intercept-url pattern=\"/springgwtdbsecurity/**\"\n     access=\"ROLE_AUTHOR\"/>\n  <intercept-url pattern=\"/springgwtdbsecurity/**\"\n     access=\"ROLE_AUTHOR\"/>\n  <intercept-url pattern=\"/**/*.html\" access=\"ROLE_AUTHOR\"/>\n  <intercept-url pattern=\"/**\"\n     access=\"IS_AUTHENTICATED_ANONYMOUSLY\" />\n  <http-basic />\n</http>\n<authentication-manager alias=\"authenticationManager\">\n  <authentication-provider>\n  <jdbc-user-service data-source-ref=\"dataSource\"\n  users-by-username-query=\"\n  select username,password, enabled \n  from users where username=?\" \n\n  authorities-by-username-query=\"\n  select u.username, ur.authority from users u,\n     user_roles ur \n        where u.user_id = ur.user_id and u.username =?\"/>\n  </authentication-provider>\n</authentication-manager>\n```", "```java\n<beans \n\n  xsi:schemaLocation=\"http://www.springframework.org/\n    schema/beans\n  http://www.springframework.org/schema/beans/\n    spring-beans-3.0.xsd\">\n\n  <bean id=\"MySqlDatasource\" class=\"org.springframework.\n    jdbc.datasource.DriverManagerDataSource\">\n    <property name=\"driverClassName\" value=\n      \"com.mysql.jdbc.Driver\" />\n    <property name=\"url\" value=\n      \"jdbc:mysql://localhost:3306/packtdb\" />\n    <property name=\"username\" value=\"root\" />\n  <property name=\"password\" value=\"packt123\" />\n  </bean>\n</beans>\n```", "```java\n<context-param>\n  <param-name>contextConfigLocation</param-name>\n  <param-value>\n    /WEB-INF/spring-security.xml,\n    /WEB-INF/spring-jdbc.xml\n  </param-value>\n</context-param>\n\n<listener>\n  <listener-class>\n    org.springframework.web.context.ContextLoaderListener\n  </listener-class>\n</listener>\n```", "```java\n<http auto-config=\"true\" >\n  <intercept-url pattern=\"/springgwtldapsecurity/**\"\n     access=\"ROLE_AUTHOR\"/>\n  <intercept-url pattern=\"/springgwtldapsecurity/**\"\n     access=\"ROLE_AUTHOR\"/>\n  <intercept-url pattern=\"/**/*.html\" access=\"ROLE_AUTHOR\"/>\n  <intercept-url pattern=\"/**\"\n     access=\"IS_AUTHENTICATED_ANONYMOUSLY\" />\n  <http-basic />\n</http>\n<authentication-manager>\n  <ldap-authentication-provider \n    user-search-filter=\"(mail={0})\" \n    user-search-base=\"ou=people\"\n    group-search-filter=\"(uniqueMember={0})\"\n    group-search-base=\"ou=groups\"\n    group-role-attribute=\"cn\"\n    role-prefix=\"ROLE_\">\n    </ldap-authentication-provider>\n  </authentication-manager>\n\n<ldap-server url=\"ldap://localhost:389/o=example\"\n   manager-dn=\"uid=admin,ou=system\"\n   manager-password=\"secret\" />\n```", "```java\n<context-param>\n  <param-name>contextConfigLocation</param-name>\n  <param-value>\n    /WEB-INF/spring-security.xml\n  </param-value>\n</context-param>\n\n<listener>\n  <listener-class>\n    org.springframework.web.context.ContextLoaderListener\n  </listener-class>\n</listener>\n```"]