["```java\n    package org.springframework.rest;\n    @Controller\n    public class BookController {\n      private static final Map<Integer, Books> books = new HashMap<Integer, Books>();\n      static {\n        try {\n          books.put(1, new Books(1, \"Someone Like You\", \"Penguin\", \"Durjoy Datta-Nikita Singh\"));\n          books.put(2, new Books(2, \"The Secret Wish List\", \"Westland\", \" Preeti Shenoy\"));\n          books.put(3, new Books(3, \"Love Stories That Touched My Heart \", \"Metro Reads\", \" Preeti Shenoy\"));\n        } catch (Exception e) {\n          e.printStackTrace();\n        }\n      }\n      @RequestMapping(value = \"/books/{book_id}\", method = RequestMethod.GET)\n      @ResponseBody\n      public Books findCharacter(@PathVariable int book_id) {\n        return books.get(book_id);\n      }\n    }\n    ```", "```java\n    @JsonAutoDetect\n    public class Books {\n        private int book_id;\n        private String book_name;\n        private String book_publication;\n        private String book_author;\n        public Books(int book_id, String book_name, String book_publication, String book_author) {\n          this.book_id = book_id;\n          this.book_name = book_name;\n          this.book_publication = book_publication;\n          this.book_author = book_author;\n        }\n        public String getBook_author() {\n          return book_author;\n        }\n        public void setBook_author(String book_author) {\n          this.book_author = book_author;\n        }\n        public int getBook_id() {\n          return book_id;\n        }\n        public void setBook_id(int book_id) {\n          this.book_id = book_id;\n        }\n        public String getBook_name() {\n          return book_name;\n        }\n        public void setBook_name(String book_name) {\n          this.book_name = book_name;\n        }\n        public String getBook_publication() {\n          return book_publication;\n        }\n        public void setBook_publication(String book_publication) {\n          this.book_publication = book_publication;\n        }\n    }\n    ```", "```java\n    package org.springframework.booksservice;\n    @Controller\n    public class AccessController {\n      @RequestMapping(value = \"/\", method = RequestMethod.GET)\n      public String defaultPage(ModelMap map) {\n        return \"redirect:/login\";\n      }\n      @RequestMapping(value = \"/login\", method = RequestMethod.GET)\n      public String login(ModelMap model) {\n        return \"login\";\n      }\n      @RequestMapping(value = \"/accessdenied\", method = RequestMethod.GET)\n      public String loginerror(ModelMap model) {\n        model.addAttribute(\"error\", \"true\");\n        return \"denied\";\n      }\n      @RequestMapping(value = \"/logout\", method = RequestMethod.GET)\n      public String logout(ModelMap model) {\n        return \"logout\";\n      }\n    }\n    ```", "```java\n      <http auto-config=\"false\"  use-expressions=\"true\">\n        <intercept-url pattern=\"/login\" access=\"permitAll\" />\n        <intercept-url pattern=\"/logout\" access=\"permitAll\" />\n        <intercept-url pattern=\"/accessdenied\" access=\"permitAll\" />\n        <intercept-url pattern=\"/**\" access=\"hasRole('ROLE_EDITOR')\" />\n        <form-login login-page=\"/login\" default-target-url=\"/books\" authentication-failure-url=\"/accessdenied\" />\n        <logout logout-success-url=\"/logout\" />\n      </http>\n      <authentication-manager>\n        <authentication-provider>\n        <user-service>\n          <user name=\"anjana\" password=\"packt123\" authorities=\"ROLE_EDITOR\" />\n        </user-service>\n      </authentication-provider>\n    </authentication-manager>\n    ```", "```java\n    public final class AuthenticationEntryPointImpl implements AuthenticationEntryPoint {\n      @Override\n      public void commence(final HttpServletRequest request, final HttpServletResponse response, final AuthenticationException authException) throws IOException {\n        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"Unauthorized\");\n      }\n    }\n    ```", "```java\n      public class MySimpleUrlAuthenticationSuccessHandler extends SimpleUrlAuthenticationSuccessHandler {\n        private RequestCache requestCache = new HttpSessionRequestCache();\n        @Override\n        public void onAuthenticationSuccess(final HttpServletRequest request, final HttpServletResponse response, final Authentication authentication) throws ServletException, IOException {\n          final SavedRequest savedRequest = requestCache.getRequest(request, response);\n          if (savedRequest == null) {\n            clearAuthenticationAttributes(request);\n            return;\n          }\n          final String targetUrlParameter = getTargetUrlParameter();\n          if (isAlwaysUseDefaultTargetUrl() || (targetUrlParameter != null && StringUtils.hasText(request.getParameter(targetUrlParameter)))) {\n            requestCache.removeRequest(request, response);\n            clearAuthenticationAttributes(request);\n            return;\n          }\n          clearAuthenticationAttributes(request);\n        }\n        public void setRequestCache(final RequestCache requestCache) {\n          this.requestCache = requestCache;\n        }\n      }\n    ```", "```java\n      <http entry-point-ref=\"authenticationEntryPoint\">\n        <intercept-url pattern=\"/**\" access=\"ROLE_EDITOR\"/>\n        <form-login authentication-success-handler-ref=\"mySuccessHandler\" />\n        <logout />\n      </http>\n      <beans:bean id=\"mySuccessHandler\"class=\"org.springframework.booksservice.MySimpleUrlAuthenticationSuccessHandler\"/>\n      <beans:bean id=\"authenticationEntryPoint\"class=\"org.springframework.booksservice.AuthenticationEntryPointImpl\"/>\n      <authentication-manager>\n        <authentication-provider>\n          <user-service>\n            <user name=\"anjana\" password=\"packt123\" authorities=\"ROLE_EDITOR\" />\n          </user-service>\n        </authentication-provider>\n      </authentication-manager>\n      </beans:beans>\n    ```", "```java\nCommand: curl -i -X POST -d j_username=anjana -d j_password=packt123 http://localhost:8080/booksservice/j_spring_security_check\ncurl -i --header \"Accept:application/json\" -X GET -b cookies.txt http://localhost:8080/booksservice/books/1\n\n```", "```java\n    @XmlRootElement(name = \"book\")\n    public class Book {\n        private int book_id;\n        private String book_name;\n        private String book_publication;\n        private String book_author;\n        public Book(int book_id, String book_name, String book_publication, String book_author) {\n          this.book_id = book_id;\n          this.book_name = book_name;\n          this.book_publication = book_publication;\n          this.book_author = book_author;\n        }\n        public String getBook_author() {\n          return book_author;\n        }\n        public void setBook_author(String book_author) {\n          this.book_author = book_author;\n        }\n        public int getBook_id() {\n          return book_id;\n        }\n        public void setBook_id(int book_id) {\n          this.book_id = book_id;\n        }\n        public String getBook_name() {\n          return book_name;\n        }\n        public void setBook_name(String book_name) {\n          this.book_name = book_name;\n        }\n        public String getBook_publication() {\n          return book_publication;\n        }\n        public void setBook_publication(String book_publication) {\n          this.book_publication = book_publication;\n        }\n    }\n    ```", "```java\n      @XmlType(name = \"BookCollection\")\n      @XmlRootElement\n      public class BookCollection {\n        private Collection books;\n        public BookCollection() {\n        }\n        public BookCollection(Collection books) {\n          this.books = books;\n        }\n        @XmlElement(name=\"books\")\n        @XmlElementWrapper(name=\"books\")\n        public Collection getUsers() {\n          return books;\n        }\n      }\n    ```", "```java\n    public interface BookService {\n        BookCollection getBooks();\n        Book getBook(Integer id);\n        Response add(Book book);\n    }\n    ```", "```java\n      @Path (\"/services/\")\n      public class BookServiceImpl implements BookService {\n        private static final Map<Integer, Book> books = new HashMap<Integer, Book>();\n        private static int index = 4;\n        static {\n          try {\n            books.put(1, new Book(1, \"Someone Like You\", \"Penguin\", \"Durjoy Datta-Nikita Singh\"));\n              books.put(2, new Book(2, \"The Secret Wish List\", \"Westland\", \" Preeti Shenoy\"));\n              books.put(3, new Book(3, \"Love Stories That Touched My Heart \", \"Metro Reads\", \" Preeti Shenoy\"));\n            } catch (Exception e) {\n              e.printStackTrace();\n            }\n        }\n     @Override\n     @POST\n     @Path(\"/book\")\n     @Consumes(\"application/json\")\n        public Response add(Book book) {\n          System.out.println(\"Adding :\" + book.getBook_name());\n          book.setBook_id(index++);\n          return Response.status(Response.Status.OK).build();\n        }\n     @Override\n     @GET\n     @Path(\"/book/{book_id}\")\n     @Produces(\"application/json\")\n        public Book getBook(@PathParam(\"book_id\") Integer book_id) {\n          return books.get(book_id);\n        }\n     @Override\n     @GET\n     @Path(\"/books\")\n     @Produces(\"application/json\")\n        public BookCollection getBooks() {\n          return new BookCollection(books.values());\n        }\n    }\n    ```", "```java\n      <sec:global-method-security pre-post-annotations=\"enabled\" />\n      <sec:http auto-config=\"true\"  use-expressions=\"true\">\n        <sec:intercept-url pattern=\"/**\" access=\"hasRole('ROLE_EDITOR')\"/>\n        <sec:http-basic></sec:http-basic>\n        <sec:logout logout-success-url=\"/logout\" />\n      </sec:http>\n      <import resource=\"classpath:META-INF/cxf/cxf.xml\" />\n      <import resource=\"classpath:META-INF/cxf/cxf-servlet.xml\"/>\n      <jaxrs:server address=\"/\" id=\"myService\">\n        <jaxrs:serviceBeans>\n          <ref bean=\"bookserviceImpl\"/>\n        </jaxrs:serviceBeans>\n        <jaxrs:providers>\n          <ref bean=\"jacksonProvider\"/>\n        </jaxrs:providers>\n      </jaxrs:server>\n      <bean id=\"jacksonProvider\"\n      class=\"org.codehaus.jackson.jaxrs.JacksonJaxbJsonProvider\"/>\n      <bean id=\"bookserviceImpl\"\n      class=\"org.springframework.booksservice.BookServiceImpl\"/>\n      <sec:authentication-manager>\n        <sec:authentication-provider>\n          <sec:user-service>\n            <sec:user name=\"anjana\" password=\"packt123\" authorities=\"ROLE_EDITOR\" />\n          </sec:user-service>\n        </sec:authentication-provider>\n      </sec:authentication-manager>\n    </beans>\n    ```", "```java\n        <!-- The definition of the Root Spring Container shared by all Servlets and Filters -->\n      <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>/WEB-INF/spring/application-security.xml</param-value>\n      </context-param>\n      <!-- Creates the Spring Container shared by all Servlets and Filters -->\n      <listener>\n      <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n      </listener>\n      <!-- Processes application requests -->\n      <servlet>\n        <servlet-name>cxf</servlet-name>\n        <servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>\n        <load-on-startup>1</load-on-startup>\n      </servlet>\n      <servlet-mapping>\n        <servlet-name>cxf</servlet-name>\n        <url-pattern>/services/*</url-pattern>\n      </servlet-mapping>\n      <!-- Spring child -->\n      <!-- <servlet>\n      <servlet-name>bookservice_cxf</servlet-name>\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n        <load-on-startup>1</load-on-startup>\n      </servlet>\n      <servlet-mapping>\n        <servlet-name>bookservice_cxf</servlet-name>\n        <url-pattern>/bookservice_cxf/*</url-pattern>\n      </servlet-mapping>-->\n      <filter>\n        <filter-name>springSecurityFilterChain</filter-name>\n        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n      </filter>\n      <filter-mapping>\n        <filter-name>springSecurityFilterChain</filter-name>\n        <url-pattern>/*</url-pattern>\n      </filter-mapping>\n    </web-app>\n    ```", "```java\n    package org.packt.cxf.domain;\n    public class Book {\n      private int book_id;\n      private String book_name;\n      private String book_publication;\n      private String book_author;\n      public Book() {\n      }\n      public Book(int book_id, String book_name, String book_publication, String book_author) {\n        this.book_id = book_id;\n        this.book_name = book_name;\n        this.book_publication = book_publication;\n        this.book_author = book_author;\n      }\n      public String getBook_author() {\n        return book_author;\n        }\n        public void setBook_author(String book_author) {\n            this.book_author = book_author;\n      }\n      public int getBook_id() {\n        return book_id;\n      }\n      public void setBook_id(int book_id) {\n        this.book_id = book_id;\n      }\n      public String getBook_name() {\n        return book_name;\n      }\n      public void setBook_name(String book_name) {\n        this.book_name = book_name;\n      }\n      public String getBook_publication() {\n        return book_publication;\n      }\n      public void setBook_publication(String book_publication) {\n        this.book_publication = book_publication;\n      }\n    }\n    ```", "```java\n    package org.packt.cxf.service;\n    import javax.jws.WebService;\n    import org.packt.cxf.domain.Book;\n    @WebService\n    public interface BookService {\n      public Book getBookDetails(int book_id);\n    }\n    ```", "```java\n    import java.util.HashMap;\n    import java.util.Map;\n    import javax.jws.WebService;\n    import org.packt.cxf.domain.Book;\n    @WebService(endpointInterface = \"org.packt.cxf.service.BookService\")\n    public class BookServiceImpl implements BookService{\n        private static final Map<Integer, Book> books = new HashMap<Integer, Book>();\n        private static int index = 4;\n        static {\n          try {\n            books.put(1, new Book(1, \"Someone Like You\", \"Penguin\", \"Durjoy Datta-Nikita Singh\"));\n            books.put(2, new Book(2, \"The Secret Wish List\", \"Westland\", \" Preeti Shenoy\"));\n            books.put(3, new Book(3, \"Love Stories That Touched My Heart \", \"Metro Reads\", \" Preeti Shenoy\"));\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n        }\n        @Override\n        public Book getBookDetails(int book_id) {\n          return books.get(book_id);\n        }}\n    ```", "```java\n      <beans \n\n      xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsdhttp://cxf.apache.org/jaxwshttp://cxf.apache.org/schemas/jaxws.xsd\">\n      <import resource=\"classpath:META-INF/cxf/cxf.xml\" />\n      <import resource=\"classpath:META-INF/cxf/cxf-servlet.xml\" />\n      <import resource=\"classpath:META-INF/cxf/cxf-extension-http.xml\" />\n      <import resource=\"classpath:META-INF/cxf/cxf-extension-soap.xml\" />\n      <jaxws:endpoint id=\"bookService\"implementor=\"org.packt.cxf.service.BookServiceImpl\" address=\"/BookService\" />\n      </beans>\n    ```", "```java\n      <web-app version=\"2.5\"   xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\">\n        <display-name>SampleWSCxf</display-name>\n        <listener>\n          <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n        </listener>\n        <context-param>\n          <param-name>contextConfigLocation</param-name>\n          <param-value>WEB-INF/cxf-servlet.xml</param-value>\n        </context-param>\n        <servlet>\n          <servlet-name>CXFServlet</servlet-name>\n          <servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>\n          <load-on-startup>1</load-on-startup>\n        </servlet>\n        <servlet-mapping>\n          <servlet-name>CXFServlet</servlet-name>\n          <url-pattern>/*</url-pattern>\n        </servlet-mapping>\n      </web-app>\n    ```", "```java\n<wsdl:definitions    name=\"BookServiceImplService\" targetNamespace=\"http://service.cxf.packt.org/\">\n  <wsdl:types>\n  <xs:schema elementFormDefault=\"unqualified\" targetNamespace=\"http://service.cxf.packt.org/\" version=\"1.0\">\n  <xs:element name=\"getBookDetails\"type=\"tns:getBookDetails\"/>\n  <xs:element name=\"getBookDetailsResponse\" type=\"tns:getBookDetailsResponse\"/>\n  <xs:complexType name=\"getBookDetails\">\n    <xs:sequence>\n      <xs:element name=\"arg0\" type=\"xs:int\"/>\n    </xs:sequence>\n  </xs:complexType>\n  <xs:complexType name=\"getBookDetailsResponse\">\n    <xs:sequence>\n      <xs:element minOccurs=\"0\" name=\"return\"type=\"tns:book\"/>\n    </xs:sequence>\n  </xs:complexType>\n  <xs:complexType name=\"book\">\n    <xs:sequence>\n      <xs:element minOccurs=\"0\" name=\"book_author\" type=\"xs:string\"/>\n      <xs:element name=\"book_id\" type=\"xs:int\"/>\n      <xs:element minOccurs=\"0\" name=\"book_name\" type=\"xs:string\"/>\n      <xs:element minOccurs=\"0\" name=\"book_publication\" type=\"xs:string\"/>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:schema>\n  </wsdl:types>\n  <wsdl:message name=\"getBookDetails\">\n    <wsdl:part element=\"tns:getBookDetails\" name=\"parameters\"></wsdl:part>\n  </wsdl:message>\n  <wsdl:message name=\"getBookDetailsResponse\">\n    <wsdl:part element=\"tns:getBookDetailsResponse\" name=\"parameters\"></wsdl:part>\n    </wsdl:message>\n  <wsdl:portType name=\"BookService\">\n    <wsdl:operation name=\"getBookDetails\">\n      <wsdl:input message=\"tns:getBookDetails\"name=\"getBookDetails\"></wsdl:input>\n      <wsdl:outputmessage=\"tns:getBookDetailsResponse\"name=\"getBookDetailsResponse\"></wsdl:output>\n    </wsdl:operation>\n  </wsdl:portType>\n  <wsdl:bindingname=\"BookServiceImplServiceSoapBinding\"type=\"tns:BookService\">\n    <soap:bindingstyle=\"document\"transport=\"http://schemas.xmlsoap.org/soap/http\"/>\n      <wsdl:operationname=\"getBookDetails\">\n        <soap:operationsoapAction=\"\"style=\"document\"/>\n      <wsdl:inputname=\"getBookDetails\">\n        <soap:bodyuse=\"literal\"/>\n      </wsdl:input>\n      <wsdl:outputname=\"getBookDetailsResponse\">\n        <soap:bodyuse=\"literal\"/>\n      </wsdl:output>\n    </wsdl:operation>\n  </wsdl:binding>\n  <wsdl:servicename=\"BookServiceImplService\">\n    <wsdl:portbinding=\"tns:BookServiceImplServiceSoapBinding\"name=\"BookServiceImplPort\">\n      <soap:addresslocation=\"http://localhost:8080/bookservice/BookService\"/>\n    </wsdl:port>\n  </wsdl:service>\n</wsdl:definitions>\n```", "```java\n      <spring-security:http realm=\"User Access Realm\">\n        <spring-security:intercept-url pattern=\"/apachecamel/**\"     access=\"ROLE_EDITOR\"/>\n        <spring-security:http-basic/>\n        <spring-security:remember-me/>\n      </spring-security:http>\n      <spring-security:authentication-manager alias=\"authenticationManager\">\n        <spring-security:authentication-provider user-service-ref=\"userDetailsService\"/>\n      </spring-security:authentication-manager>\n      <spring-security:user-service id=\"userDetailsService\">\n        <spring-security:user name=\"anju\" password=\"anju123\" authorities=\"ROLE_EDITOR,ROLE_AUTHOR\"/>\n        <spring-security:user name=\"shami\" password=\"shami123\" authorities=\"ROLE_EDITOR\"/>\n      </spring-security:user-service>\n      <bean id=\"accessDecisionManager\" class=\"org.springframework.security.access.vote.AffirmativeBased\">\n        <property name=\"allowIfAllAbstainDecisions\" value=\"true\"/>\n        <property name=\"decisionVoters\">\n          <list>\n            <bean class=\"org.springframework.security.access.vote.RoleVoter\"/>\n          </list>\n        </property>\n      </bean>\n      <!-- The Policy for checking the authentication role of AUTHOR -->\n      <authorizationPolicy id=\"author\" access=\"ROLE_AUTHOR\"\n        authenticationManager=\"authenticationManager\"\n        accessDecisionManager=\"accessDecisionManager\"\n        />\n      <!-- The Policy for checking the authentication role of EDITOR -->\n      <authorizationPolicy id=\"editor\" access=\"ROLE_EDITOR\"/>\n      <camelContext id=\"myCamelContext\" >\n        <!-- Catch the authorization exception and set the Access Denied message back -->\n        <onException>\n        <exception>org.apache.camel.CamelAuthorizationException</exception>\n        <handled>\n          <constant>true</constant>\n        </handled>\n        <transform>\n          <simple>Access Denied with the Policy of ${exception.policyId} !</simple>\n          </transform>\n        </onException>\n     <route>\n     <from uri=\"servlet:///editor\"/>\n     <!-- wrap the route in the policy which enforces security check -->\n     <policy ref=\"editor\">\n     <transform>\n     <simple>Normal user can access this service</simple>\n     </transform>\n     </policy>\n     </route>\n     <route>\n     <from uri=\"servlet:///author\"/>\n     <!-- wrap the route in the policy which enforces security check -->\n     <policy ref=\"author\">\n     <transform>\n     <simple>Call the admin operation OK</simple>\n     </transform>\n     </policy>\n     </route>\n      </camelContext>\n    </beans>\n    ```", "```java\n    <!-- location of spring xml files -->\n      <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>classpath:camel-context.xml</param-value>\n      </context-param>\n      <!-- the listener that kick-starts Spring -->\n      <listener>\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n      </listener>\n      <filter>\n        <filter-name>springSecurityFilterChain</filter-name>\n        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n      </filter>\n      <filter-mapping>\n        <filter-name>springSecurityFilterChain</filter-name>\n        <url-pattern>/*</url-pattern>\n      </filter-mapping>\n      <servlet>\n        <servlet-name>CamelServlet</servlet-name>\n        <servlet-class>org.apache.camel.component.servlet.CamelHttpTransportServlet</servlet-class>\n        <load-on-startup>1</load-on-startup>\n      </servlet>\n      <servlet-mapping>\n        <servlet-name>CamelServlet</servlet-name>\n        <url-pattern>/apachecamel/*</url-pattern>\n      </servlet-mapping>\n    </web-app>\n    ```"]