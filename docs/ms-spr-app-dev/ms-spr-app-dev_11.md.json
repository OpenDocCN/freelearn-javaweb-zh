["```java\n    <p th:text=\"#{msg.greet}\">Helloo Good Morning!</p>\n    ```", "```java\n    <li th:each=\"product : ${products}\" th:text=\"${product.title}\">XYZLLDD</li>\n    ```", "```java\n    <form th:action=\"@{/buyBook}\">\n    ```", "```java\n    <input type=\"button\" th:value=\"#{form.submit}\" />\n    ```", "```java\n@Configuration\n@ComponentScan(basePackageClasses = PacktController.class)\npublic class CutomPacktConfiguration {\n  @Bean public ViewResolver viewResolver() {\n    ClassLoaderTemplateResolver templateResolver = new ClassLoaderTemplateResolver();\n    templateResolver.setTemplateMode(\"XHTML\");\n    templateResolver.setPrefix(\"views/\");\n    templateResolver.setSuffix(\".html\");\n    SpringTemplateEngine engine = new SpringTemplateEngine();\n    engine.setTemplateResolver(templateResolver);\n    ThymeleafViewResolver thymeleafviewResolver = new ThymeleafViewResolver();\n    thymeleafviewResolver.setTemplateEngine(engine);\n    return thymeleafviewResolver;\n    }\n  }\n\n@Controller\npublic class MyPacktControllerController {\n  @Autowired private PacktService packtService;\n  @RequestMapping(\"/authors\")\n  public String authors(Model model) {\n    model.addAttribute(\"authors\",packtService.getAuthors));\n    return \"authors\";\n  }\n\n}\n```", "```java\n    package demo.packt.thymeleaf.controller;\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.stereotype.Controller;\n    import org.springframework.ui.Model;\n    import org.springframework.web.bind.annotation.ExceptionHandler;\n    import org.springframework.web.bind.annotation.ModelAttribute;\n    import org.springframework.web.bind.annotation.PathVariable;\n    import org.springframework.web.bind.annotation.RequestMapping;\n    import org.springframework.web.bind.annotation.RequestMethod;\n    import org.springframework.web.servlet.ModelAndView;\n    import demo.packt.thymeleaf.exception.AuthorFoundException;\n    import demo.packt.thymeleaf.model.Author;\n    import demo.packt.thymeleaf.model.AuthorData;\n    import demo.packt.thymeleaf.service.AuthorService;\n\n    @Controller\n    public class AuthorController {\n      private static final String HOME_VIEW = \"home\";\n      private static final String RESULTS_FRAGMENT = \"results :: resultsList\";\n\n      @Autowired\n      private AuthorService authorService;\n\n      @ModelAttribute(\"author\")\n      public Author prepareAuthorModel() {\n        return new Author();\n      }\n\n      @ModelAttribute(\"authorData\")\n      public AuthorData prepareAuthorDataModel() {\n        return authorService.getAuthorData();\n      }\n\n      @RequestMapping(value = \"/home\", method = RequestMethod.GET)\n      public String showHome(Model model) {\n        prepareAuthorDataModel();\n        prepareAuthorModel();\n        return HOME_VIEW;\n      }\n\n      @RequestMapping(value = \"/authors/{surname}\", method = RequestMethod.GET)\n      public String showAuthorListwithSurname(Model model, @PathVariable(\"surname\") String surname) {\n        model.addAttribute(\"authors\", authorService.getAuthorsList(surname));\n        return RESULTS_FRAGMENT;\n      }\n\n      @RequestMapping(value = \"/authors\", method = RequestMethod.GET)\n      public String showAuthorList(Model model) {\n        model.addAttribute(\"authors\", authorService.getAuthorsList());\n        return RESULTS_FRAGMENT;\n      }\n\n      @RequestMapping(value = \"/authors/insert\", method = RequestMethod.POST)\n      public String insertAuthor(Author newAuthor, Model model) {\n        authorService.insertNewAuthor(newAuthor);\n        return showHome(model);\n      }\n\n      @ExceptionHandler({AuthorFoundException.class})\n      public ModelAndView handleDatabaseError(AuthorFoundException e) {\n        ModelAndView modelAndView = new ModelAndView();\n        modelAndView.setViewName(\"home\");\n        modelAndView.addObject(\"errorMessage\", \"error.user.exist\");\n        modelAndView.addObject(\"Author\", prepareAuthorModel());\n        modelAndView.addObject(\"authorData\", prepareAuthorDataModel());\n\n        return modelAndView;\n      }\n    }\n    ```", "```java\n    package demo.packt.thymeleaf.exception;\n    public class AuthorFoundException extends RuntimeException {\n      private static final long serialVersionUID = -3845574518872003019L;\n      public AuthorFoundException() {\n        super();\n      }\n      public AuthorFoundException(String message) {\n        super(message);\n      }\n    }\n    ```", "```java\n        package demo.packt.thymeleaf.service;\n        import java.util.List;\n        import demo.packt.thymeleaf.model.Author;\n        import demo.packt.thymeleaf.model.AuthorData;\n        public interface AuthorService {\n          HotelData getAuthorData();\n          List<Author> getAuthorsList();\n          List<Author> getAuthorList(String surname);\n          void insertNewAuthor(Author newAuthor);\n        }\n        ```", "```java\n        package demo.packt.thymeleaf.service;\n        import java.util.List;\n        import org.springframework.beans.factory.annotation.Autowired;\n        import org.springframework.stereotype.Service;\n        import demo.packt.thymeleaf.exception.AuthorFoundException;\n        import demo.packt.thymeleaf.model.Author;\n        import demo.packt.thymeleaf.model.AuthorData;\n        import demo.packt.thymeleaf.repository.AuthorRepository;\n\n        @Service(\"authorServiceImpl\")\n        public class AuthorServiceImpl implements AuthorService {\n          @Autowired\n          AuthorRepository authorRepository;\n          @Override\n          public AuthorData getAuthorData() {\n            AuthorData data = new AuthorData();\n            data.setAddress(\"RRNAGAR, 225\");\n            data.setName(\"NANDA\");\n            return data;\n          }\n          @Override\n          public List<Author> getAuthorsList() {\n            return authorRepository.findAll();\n          }\n          @Override\n          public List<Author> getAuthorsList(String surname) {\n            return authorRepository.findAuthorsBySurname(surname);\n          }\n\n          @Override\n          public void insertNewGuest(Author newAuthor) {\n            if (authorRepository.exists(newAuthor.getId())) {\n              throw new AuthorFoundException();\n            }\n            authorRepository.save(newAuthor);\n          }\n        }\n        ```", "```java\n    package demo.packt.thymeleaf.repository;\n    import java.util.List;\n    import org.springframework.data.mongodb.repository.MongoRepository;\n    import org.springframework.data.mongodb.repository.Query;\n    import demo.packt.thymeleaf.model.Guest;\n    public interface AuthorRepository extends MongoRepository<Author, Long> {\n      @Query(\"{ 'surname' : ?0 }\")\n      List<Author> findAuthorsBySurname(String surname);\n    }\n    ```", "```java\n        package demo.packt.thymeleaf.model;\n        import java.io.Serializable;\n        import org.springframework.data.annotation.Id;\n        import org.springframework.data.mongodb.core.mapping.Document;\n        @Document(collection = \"authors\")\n        public class Author implements Serializable {\n          private static final long serialVersionUID = 1L;\n          @Id\n          private Long id;\n          private String name;\n          private String surname;\n          private String country;\n\n          /**\n           * @return the name\n           */\n          public String getName() {\n            return name;\n          }\n          /**\n           * @param name the name to set\n           */\n          public void setName(String name) {\n            this.name = name;\n          }\n          /**\n           * @return the surname\n           */\n          public String getSurname() {\n            return surname;\n          }\n          /**\n           * @param surname the surname to set\n           */\n          public void setSurname(String surname) {\n            this.surname = surname;\n          }\n          /**\n           * @return the id\n           */\n          public Long getId() {\n            return id;\n          }\n          /**\n           * @param id the id to set\n           */\n          public void setId(Long id) {\n            this.id = id;\n          }\n          /**\n           * @return the country\n           */\n          public String getCountry() {\n            return country;\n          }\n          /**\n           * @param country the country to set\n           */\n          public void setCountry(String country) {\n            this.country = country;\n          }\n        }\n        ```", "```java\n        package demo.packt.thymeleaf.model;\n        import java.io.Serializable;\n        public class AuthorData implements Serializable {\n          private static final long serialVersionUID = 1L;\n          private String name;\n          private String address;\n          public String getName() {\n            return name;\n          }\n          public void setName(String name) {\n            this.name = name;\n          }\n          public String getAddress() {\n            return address;\n          }\n          public void setAddress(String address) {\n            this.address = address;\n          }\n        }\n        ```", "```java\n    import org.springframework.context.annotation.Configuration;\n    import org.springframework.data.mongodb.config.AbstractMongoConfiguration;\n    import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;\n    import com.mongodb.Mongo;\n    @Configuration\n    @EnableMongoRepositories(\u00abdemo.packt.thymeleaf.repository\u00bb)\n    public class MongoDBConfiguration extends AbstractMongoConfiguration {\n      @Override\n      protected String getDatabaseName() {\n        return \"author-db\";\n      }\n      @Override\n      public Mongo mongo() throws Exception {\n        return new Mongo();\n      }\n    }\n    ```", "```java\n    package demo.packt.thymeleaf.configuration;\n\n    import org.springframework.context.annotation.Bean;\n    import org.springframework.context.annotation.ComponentScan;\n    import org.springframework.context.annotation.Configuration;\n    import org.springframework.context.annotation.Description;\n    import org.springframework.context.annotation.Import;\n    import org.springframework.context.support.ResourceBundleMessageSource;\n    import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n    import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\n    import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n    import org.thymeleaf.spring3.SpringTemplateEngine;\n    import org.thymeleaf.spring3.view.ThymeleafViewResolver;\n    import org.thymeleaf.templateresolver.ServletContextTemplateResolver;\n\n    @EnableWebMvc\n    @Configuration\n    @ComponentScan(\"demo.packt.thymeleaf\")\n    @Import(MongoDBConfiguration.class)\n    public class WebAppConfiguration extends WebMvcConfigurerAdapter {\n\n      @Bean\n      @Description(\"Thymeleaf template resolver serving HTML 5\")\n      public ServletContextTemplateResolver templateResolver() {\n        ServletContextTemplateResolver templateResolver = new ServletContextTemplateResolver();\n        templateResolver.setPrefix(\"/WEB-INF/html/\");\n        templateResolver.setSuffix(\".html\");\n        templateResolver.setTemplateMode(\"HTML5\");\n\n        return templateResolver;\n      }\n\n      @Bean\n      @Description(\"Thymeleaf template engine with Spring integration\")\n      public SpringTemplateEngine templateEngine() {\n        SpringTemplateEngine templateEngine = new SpringTemplateEngine();\n        templateEngine.setTemplateResolver(templateResolver());\n\n        return templateEngine;\n      }\n\n      @Bean\n      @Description(\"Thymeleaf view resolver\")\n      public ThymeleafViewResolver viewResolver() {\n        ThymeleafViewResolver viewResolver = new ThymeleafViewResolver();\n        viewResolver.setTemplateEngine(templateEngine());\n\n        return viewResolver;\n      }\n\n      @Bean\n      @Description(\"Spring message resolver\")\n      public ResourceBundleMessageSource messageSource() {\n        ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();  \n        messageSource.setBasename(\"i18n/messages\");\n\n        return messageSource;  \n      }\n\n      @Override\n      public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        registry.addResourceHandler(\"/resources/**\").addResourceLocations(\"/WEB-INF/resources/\");\n      }\n    }\n    ```", "```java\n    <!DOCTYPE html>\n    <html \n           lang=\"en\">\n\n    <head>\n    <meta charset=\"UTF-8\"/>\n    <title>Thymeleaf example</title>\n    <link rel=\"stylesheet\" th:href=\"@{/spring/resources/css/styles.css}\" type=\"text/css\" media=\"screen\"/>\n    <script th:src=\"img/functions.js}\" type=\"text/javascript\"></script>\n    <script th:src=\"img/jquery-min-1.9.1.js}\" type=\"text/javascript\"></script>\n    </head>\n\n    <body>\n    <div style=\"width:800px; margin:0 auto;\">\n\n    <h1 th:text=\"#{home.title}\">Thymeleaf example</h1>\n\n    <div class=\"generic-info\">\n      <h3 th:text=\"#{author.information}\">Author Information</h3>\n\n      <span th:text=\"${authorData.name}\">Author name</span><br />\n      <span th:text=\"${authorData.address}\">Author address</span><br />\n    </div>\n\n    <div class=\"main-block\">\n      <!-- Insert new Author -->\n      <span class=\"subtitle\">Add Author form</span>\n      <form id=\"guestForm\" th:action=\"@{/spring/authors/insert}\" th:object=\"${Author}\" method=\"post\">\n        <div class=\"insertBlock\">\n        <span class=\"formSpan\">\n        <input id=\"authorId\" type=\"text\" th:field=\"*{id}\" required=\"required\"/>\n        <br />\n        <label for=\"authorId\" th:text=\"#{insert.id}\">id:</label>\n        </span>\n        <span class=\"formSpan\" style=\"margin-bottom:20px\">\n        <input id=\"authorName\" type=\"text\" th:field=\"*{name}\" required=\"required\"/>\n          <br />\n          <label for=\"authorName\" th:text=\"#{insert.name}\">name:</label>\n        </span>\n\n        <span class=\"formSpan\">\n        <input id=\"authorSurname\" type=\"text\" th:field=\"*{surname}\" required=\"required\"/>\n        <br />\n        <label for=\"authorSurname\" th:text=\"#{insert.surname}\">surname:</label>\n        </span>\n        <span class=\"formSpan\" style=\"margin-bottom:20px\">\n        <input id=\"authorCountry\" type=\"text\" th:field=\"*{country}\" required=\"required\"/>\n        <br />\n        <label for=\"authorCountry\" th:text=\"#{insert.country}\">country:</label>\n        </span>\n\n        <input type=\"submit\" value=\"add\" th:value=\"#{insert.submit}\"/>\n        <span class=\"messageContainer\" th:unless=\"${#strings.isEmpty(errorMessage)}\" th:text=\"#{${errorMessage}}\"></span>\n        </div>\n      </form>\n      <!-- Guests list -->\n      <form>\n        <span class=\"subtitle\">Author list form</span>\n        <div class=\"listBlock\">\n        <div class=\"search-block\">\n        <input type=\"text\" id=\"searchSurname\" name=\"searchSurname\"/>\n        <br />\n        <label for=\"searchSurname\" th:text=\"#{search.label}\">Search label:</label>\n\n        <button id=\"searchButton\" name=\"searchButton\" onclick=\"retrieveAuthors()\" type=\"button\" th:text=\"#{search.button}\">Search button</button>\n        </div>\n\n        <!-- Results block -->\n        <div id=\"resultsBlock\">\n\n        </div>\n        </div>\n\n      </form>\n    </div>\n\n    </div>\n    </body>\n    </html>\n    ```", "```java\n    <!DOCTYPE html>\n    <html \n       lang=\"en\">\n    <head>\n    </head>\n    <body>\n      <div th:fragment=\"resultsList\" th:unless=\"${#lists.isEmpty(authors)}\" class=\"results-block\">\n      <table>\n      <thead>\n      <tr>\n      <th th:text=\"#{results.author.id}\">Id</th>\n      <th th:text=\"#{results.author.surname}\">Surname</th>\n      <th th:text=\"#{results.author.name}\">Name</th>\n      <th th:text=\"#{results.author.country}\">Country</th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr th:each=\"author : ${authors}\">\n      <td th:text=\"${author.id}\">id</td>\n      <td th:text=\"${author.surname}\">surname</td>\n      <td th:text=\"${author.name}\">name</td>\n      <td th:text=\"${author.country}\">country</td>\n      </tr>\n      </tbody>\n      </table>\n      </div>\n    </body>\n    </html>\n    ```", "```java\nmvn \u2013version\n\n```", "```java\n    mvn archetype:generate -DarchetypeArtifactId=maven-archetype-quickstart -DgroupId=com.packt.demo -DartifactId=spring-boot-thymeleaf -interactiveMode=false\n\n    ```", "```java\n    <parent>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-parent</artifactId>\n      <version>1.1.8.RELEASE</version>\n    </parent>\n    ```", "```java\n    <dependencies>\n      <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n      </dependency>\n      <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-thymeleaf</artifactId>\n      </dependency>\n    </dependencies>\n    ```", "```java\n    <build>\n      <plugins>\n      <plugin>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-maven-plugin</artifactId>\n      </plugin>\n      </plugins>\n    </build>\n    ```", "```java\n    package com.packt.demo\n    import org.springframework.boot.SpringApplication;\n    import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n    import org.springframework.context.annotation.ComponentScan;\n    import org.springframework.context.annotation.Configuration;\n\n    @EnableAutoConfiguration\n    @Configuration\n    @ComponentScan\n    public class App {\n      public static void main(String[] args) {\n        SpringApplication.run(App.class);\n      }\n    }\n    ```", "```java\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <title>Hello Spring Boot!</title>\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n    </head>\n    <body>\n    <p>Hello Spring Boot!</p>\n    </body>\n    <html>\n    ```", "```java\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <title>Hello Spring Boot!</title>\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n      <link href=\"../static/css/core.css\"\n        th:href=\"@{/css/core.css}\"\n        rel=\"stylesheet\" media=\"screen\" />\n    </head>\n    <body>\n    <p>Hello Spring Boot!</p>\n    </body>\n    </html>\n    ```", "```java\n    <dependency>\n      <groupId>org.webjars</groupId>\n      <artifactId>bootstrap</artifactId>\n      <version>3.2.0</version>\n    </dependency>\n    <dependency>\n      <groupId>org.webjars</groupId>\n      <artifactId>jquery</artifactId>\n      <version>2.1.1</version>\n    </dependency>\n    ```", "```java\n    <link href=\"http://cdn.jsdelivr.net/webjars/bootstrap/3.2.0/css/bootstrap.min.css\"\n      th:href=\"@{/webjars/bootstrap/3.2.0/css/bootstrap.min.css}\"\n      rel=\"stylesheet\" media=\"screen\" />\n\n    <script src=\"img/jquery.min.js\"\n      th:src=\"img/jquery.min.js}\"></script>\n    ```", "```java\n<packaging>war</packaging>\n```", "```java\npackage com.packt.demo;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\nclass HomeController {\n\n  @RequestMapping(\"/\")\n  String index() {\n    return \"index\";\n  }\n}\n```", "```java\npackage packt.demo;\nimport org.springframework.boot.builder.SpringApplicationBuilder;\nimport org.springframework.boot.context.web.SpringBootServletInitializer;\n\npublic class ServletInitializer extends SpringBootServletInitializer {\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n    return application.sources(App.class);\n  }\n}\n```", "```java\nBuilding war: C:\\Projects\\demos\\spring-boot-thymeleaf\\target\\spring-boot-thymeleaf-1.0-SNAPSHOT.war\n\n```", "```java\njava-jar target\\spring-boot-thymeleaf-1.0-SNAPSHOT.war\n\n```", "```java\n?\n<div sec:authorize=\"hasRole('ROLE_ADMIN')\">\n  This content is only shown to administrators.\n</div>\n<div sec:authorize=\"hasRole('ROLE_USER')\">\n  This content is only shown to users.\n</div>\n  The attribute sec:authentication is used to print logged user name and roles:\n?\n  Logged user: <span sec:authentication=\"name\">Bob</span>\n  Roles: <span sec:authentication=\"principal.authorities\">[ROLE_USER, ROLE_ADMIN]</span>\n```", "```java\n    <?\n    <http auto-config=\"true\">\n      <form-login login-page=\"/login.html\" authentication-failure-url=\"/login-error.html\" />\n      <logout />\n      ...\n    </http>\n    ```", "```java\n    @Controller\n    public class MySpringController {\n\n      ...\n\n      // Login form\n      @RequestMapping(\"/login.html\")\n      public String login() {\n        return \"login.html\";\n      }\n\n      // Login form with error\n      @RequestMapping(\"/login-error.html\")\n      public String loginError(Model model) {\n        model.addAttribute(\"loginError\", true);\n        return \"login.html\";\n      }\n    }\n    ```", "```java\n    <!DOCTYPE html>\n    <html  >\n      <head>\n      <title>Login page</title>\n      </head>\n      <body>\n      <h1>Login page</h1>\n      <p th:if=\"${loginError}\">Wrong user or password</p>\n      <form th:action=\"@{/j_spring_security_check}\" method=\"post\">\n      <label for=\"j_username\">Username</label>:\n      <input type=\"text\" id=\"j_username\" name=\"j_username\" /> <br />\n      <label for=\"j_password\">Password</label>:\n      <input type=\"password\" id=\"j_password\" name=\"j_password\" /> <br />\n      <input type=\"submit\" value=\"Log in\" />\n      </form>\n      </body>\n    </html>\n\n    /*Error.html file*/\n    ?\n    <!DOCTYPE html>\n    <html  >\n      <head>\n      <title>Error page</title>\n      </head>\n      <body>\n      <h1 th:text=\"${errorCode}\">500</h1>\n      <p th:text=\"${errorMessage}\">java.lang.NullPointerException</p>\n      </body>\n    </html>\n    ```", "```java\n    <error-page>\n      <exception-type>java.lang.Throwable</exception-type>\n      <location>/error.html</location>\n    </error-page>\n    <error-page>\n      <error-code>500</error-code>\n      <location>/error.html</location>\n    </error-page>\n    ```", "```java\n    @RequestMapping(\"/error.html\")\n    public String error(HttpServletRequest request, Model model) {\n      model.addAttribute(\"errorCode\", request.getAttribute(\"javax.servlet.error.status_code\"));\n      Throwable throwable = (Throwable) request.getAttribute(\"javax.servlet.error.exception\");\n      String errorMessage = null;\n      if (throwable != null) {\n        errorMessage = throwable.getMessage();\n      }\n      model.addAttribute(\"errorMessage\", errorMessage);\n      return \"error.html\";\n      }\n    }\n    ```"]