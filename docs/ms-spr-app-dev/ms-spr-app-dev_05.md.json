["```java\n<dependency>\n  <groupId>org.springframework.integration</groupId>\n  <artifactId>spring-integration-ftp</artifactId>\n  <version>4.0.0.RELEASE</version>\n  <scope>compile</scope>\n</dependency>\n\n<dependency>\n  <groupId>org.springframework.integration</groupId>\n  <artifactId>spring-integration-test</artifactId>\n  <version>4.0.0.RELEASE</version>\n  <scope>test</scope>\n</dependency>\n\n<dependency>\n  <groupId>org.apache.ftpserver</groupId>\n  <artifactId>ftpserver-core</artifactId>\n  <version>1.0.6</version>\n  <scope>compile</scope>\n</dependency>\n```", "```java\n<xsd:element name=\"outbound-channel-adapter\">...</xsd:element>\n<xsd:element name=\"inbound-channel-adapter\">...</xsd:element>\n<xsd:complexType name=\"base-ftp-adapter-type\">...</xsd:complexType>\n</xsd:schema>\n```", "```java\n    <xsd:attribute name=\"remote-directory-expression\"type=\"xsd:string\">\n    ```", "```java\n    <xsd:attribute name=\"auto-create-directory\" type=\"xsd:string\" default=\"false\">\n    ```", "```java\n    <xsd:attribute name=\"temporary-file-suffix\" type=\"xsd:string\">\n    ```", "```java\n    <xsd:attribute name=\"remote-filename-generator\" type=\"xsd:string\">\n    ```", "```java\n    <xsd:attribute name=\"remote-filename-generator-expression\" type=\"xsd:string\">\n    ```", "```java\n    <xsd:attribute name=\"auto-create-local-directory\" type=\"xsd:string\">\n      <xsd:annotation>\n        <xsd:documentation>Tells this adapter if local directory must be auto-created if it doesn't exist. Default is TRUE.</xsd:documentation> \n      </xsd:annotation>\n    </xsd:attribute>\n    ```", "```java\n    <xsd:attribute name=\"delete-remote-files\" type=\"xsd:string\">\n      <xsd:annotation>\n        <xsd:documentation>Specify whether to delete the remote source file after copying. By default, the remote files will NOT be deleted.</xsd:documentation> \n      </xsd:annotation>\n    </xsd:attribute>\n    ```", "```java\n    <xsd:attribute name=\"comparator\" type=\"xsd:string\">\n    <xsd:annotation>\n    ```", "```java\n    </xsd:documentation>\n      </xsd:annotation>\n      </xsd:attribute>\n    ```", "```java\n    <xsd:attribute name=\"cache-sessions\" type=\"xsd:string\" default=\"true\">\n      <xsd:annotation>\n      <xsd:documentation>\n    <![CDATA[ \n    ```", "```java\n    </xsd:documentation>\n    </xsd:annotation>\n    </xsd:attribute>\n    ```", "```java\n    <int-ftp:inbound-channel-adapter id=\"ftpInbound\"\n                     channel=\"ftpChannel\" \n                     session-factory=\"ftpSessionFactory\"\n                     charset=\"UTF-8\"\n                     auto-create-local-directory=\"true\"\n                     delete-remote-files=\"true\"\n                     filename-pattern=\"*.txt\"\n                     remote-directory=\"some/remote/path\"\n                     local-directory=\".\">\n      <int:poller fixed-rate=\"1000\"/>\n    </int-ftp:inbound-channel-adapter>\n    ```", "```java\n        **\n          * Sets the mode of the connection. Only local modes are supported.\n          */\n          private void setClientMode(FTPClient client) {\n            switch (clientMode ) {\n              case FTPClient.ACTIVE_LOCAL_DATA_CONNECTION_MODE:\n              client.enterLocalActiveMode();\n              break;\n              case FTPClient.PASSIVE_LOCAL_DATA_CONNECTION_MODE:\n              client.enterLocalPassiveMode();\n              break;\n              default:\n              break;\n            }\n          }\n        ```", "```java\npublic static final int ASCII_FILE_TYPE = 0;\npublic static final int EBCDIC_FILE_TYPE = 1;\npublic static final int BINARY_FILE_TYPE = 2;\npublic static final int LOCAL_FILE_TYPE = 3;\n```", "```java\n<bean id=\"ftpClientFactory\" class=\"org.springframework.integration.ftp.session.DefaultFtpSessionFactory\">\n  <property name=\"host\" value=\"localhost\"/>\n  <property name=\"port\" value=\"22\"/>\n  <property name=\"username\" value=\"anjana\"/>\n  <property name=\"password\" value=\"raghu\"/>\n  <property name=\"clientMode\" value=\"0\"/>\n  <property name=\"fileType\" value=\"1\"/>\n</bean>\n```", "```java\n<bean id=\"ftpClientFactory\" class=\"org.springframework.integration.ftp.client.DefaultFtpsClientFactory\">\n  <property name=\"host\" value=\"localhost\"/>\n  <property name=\"port\" value=\"22\"/>\n  <property name=\"username\" value=\"anju\"/>\n  <property name=\"password\" value=\"raghu\"/>\n  <property name=\"clientMode\" value=\"1\"/>\n  <property name=\"fileType\" value=\"2\"/>\n  <property name=\"useClientMode\" value=\"true\"/>\n  <property name=\"cipherSuites\" value=\"a,b.c\"/>\n  <property name=\"keyManager\" ref=\"keyManager\"/>\n  <property name=\"protocol\" value=\"SSL\"/>\n  <property name=\"trustManager\" ref=\"trustManager\"/>\n  <property name=\"prot\" value=\"P\"/>\n  <property name=\"needClientAuth\" value=\"true\"/>\n  <property name=\"authValue\" value=\"anju\"/>\n  <property name=\"sessionCreation\" value=\"true\"/>\n  <property name=\"protocols\" value=\"SSL, TLS\"/>\n  <property name=\"implicit\" value=\"true\"/>\n</bean>\n```", "```java\n\n  xmlns:int-ftp=\"http://www.springframework.org/schema/integration/ftp\"\n```", "```java\n<beans \n\n  xmlns:int-ftp=\"http://www.springframework.org/schema/integration/ftp\"\n  xsi:schemaLocation=\"http://www.springframework.org/schema/integration/ftp http://www.springframework.org/schema/integration/ftp/spring-integration-ftp.xsd\n  http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd\n  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n  <bean id=\"ftpClientFactory\" class=\"org.springframework.integration.ftp.session.DefaultFtpSessionFactory\">\n    <property name=\"host\" value=\"localhost\"/>\n    <property name=\"port\" value=\"21\"/>\n    <property name=\"username\" value=\"myftpusername\"/>\n    <property name=\"password\" value=\"myftppassword\"/>\n    <property name=\"clientMode\" value=\"0\"/>\n    <property name=\"fileType\" value=\"2\"/>\n    <property name=\"bufferSize\" value=\"100000\"/>\n  </bean>\n\n  <int:channel id=\"ftpChannel\" />\n\n  <int-ftp:outbound-channel-adapter id=\"ftpOutbound\"\n                    channel=\"ftpChannel\"\n                    remote-directory=\"D:/folder2\"\n                    session-factory=\"ftpClientFactory\"/>\n\n</beans>\n```", "```java\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport org.springframework.integration.Message;\nimport org.springframework.integration.MessageChannel;\nimport org.springframework.integration.support.MessageBuilder;\nimport java.io.File;\n\npublic class SendFileSpringFTP {\n  public static void main(String[] args) throws InterruptedException {\n    ConfigurableApplicationContext ctx =\n    new ClassPathXmlApplicationContext(\"/applicationContext.xml\");\n    MessageChannel ftpChannel = ctx.getBean(\"ftpChannel\", MessageChannel.class);\n    File file = new File(\"D:/folder2/report-Jan.txt\");\n    final Message<File> messageFile = MessageBuilder.withPayload(file).build();\n    ftpChannel.send(messageFile);\n    Thread.sleep(2000);\n  }\n\n}\n```", "```java\n<int-ftp:outbound-gateway id=\"gatewayLS\" cache-sessions=\"false\"\n  session-factory=\"ftpSessionFactory\"\n  request-channel=\"inbound\"\n  command=\"ls\"\n  command-options=\"-1\"\n  expression=\"'reports/*/*'\"\n  reply-channel=\"toSplitter\"/>\n\n<int:channel id=\"toSplitter\" />\n\n<int:splitter id=\"splitter\" input-channel=\"toSplitter\" output-channel=\"toGet\"/>\n\n<int-ftp:outbound-gateway id=\"gatewayGET\" cache-sessions=\"false\"\n  local-directory=\"localdir\"\n  session-factory=\"ftpSessionFactory\"\n  request-channel=\"toGet\"\n  reply-channel=\"toRemoveChannel\"\n  command=\"get\"\n  command-options=\"-P\"\n  expression=\"payload.filename\"/>\n```", "```java\n<channel id=\"inputChannel\"/>\n<splitter id=\"splitter\" \n  ref=\"splitterBean\" \n  method=\"split\" \n  input-channel=\"inputChannel\" \n  output-channel=\"outputChannel\" />\n<channel id=\"outputChannel\"/>\n<beans:bean id=\"splitterBean\" class=\"sample.PojoSplitter\"/>\n```", "```java\nimport org.springframework.integration.file.remote.session.SessionFactory;\nimport org.springframework.integration.ftp.session.DefaultFtpSessionFactory;\n@Configuration\npublic class MyApplicationConfiguration {\n  @Autowired\n  @Qualifier(\"myFtpSessionFactory\")\n  private SessionFactory myFtpSessionFactory;\n  @Bean\n  public SessionFactory myFtpSessionFactory()\n  {\n    DefaultFtpSessionFactory ftpSessionFactory = new DefaultFtpSessionFactory();\n    ftpSessionFactory.setHost(\"ftp.abc.org\");\n    ftpSessionFactory.setClientMode(0);\n    ftpSessionFactory.setFileType(0);\n    ftpSessionFactory.setPort(21);\n    ftpSessionFactory.setUsername(\"anjju\");\n    ftpSessionFactory.setPassword(\"raghu\");\n    return ftpSessionFactory;\n  }\n\n}\n```", "```java\npublic void sendFilesOverFTP() throws Exception{\n\n  ConfigurableApplicationContext ctx = new ClassPathXmlApplicationContext(\"META-INF/spring/integration/FtpOutboundChannelAdapterSample-context.xml\");\n\n  MessageChannel ftpChannel = ctx.getBean(\"ftpChannel\", MessageChannel.class);\n\n  baseFolder.mkdirs();\n  final File fileToSendOrders = new File(baseFolder, \"orders.txt\");\n  final File fileToSendVendors = new File(baseFolder, \"vendore.txt\");\n\n  final InputStream inputStreamOrders = FtpOutboundChannelAdapterSample.class.getResourceAsStream(\"/test-files/orders.txt\");\n  final InputStream inputStreamVendors = FtpOutboundChannelAdapterSample.class.getResourceAsStream(\"/test-files/vendors.txt\");\n  FileUtils.copyInputStreamToFile(inputStreamOrders, fileToSendOrders);\n  FileUtils.copyInputStreamToFile(inputStreamVendors, fileToSendVendors);\n  assertTrue(fileToSendOrders.exists());\n  assertTrue(fileToSendVendors.exists());\n  final Message<File> messageOrders = MessageBuilder.withPayload(fileToSendOrders).build();\n  final Message<File> messageVendors = MessageBuilder.withPayload(fileToSendVendors).build();\n  ftpChannel.send(messageOrders);\n  ftpChannel.send(messageVendors);\n  Thread.sleep(2000);\n  assertTrue(new File(TestSuite.FTP_ROOT_DIR + File.separator + \"orders.txt\").exists());\n  assertTrue(new File(TestSuite.FTP_ROOT_DIR + File.separator + \"vendors.txt\").exists());\n  LOGGER.info(\"Successfully transfered file 'orders.txt' and 'vendors.txt' to a remote FTP location.\");\n  ctx.close();\n}\n```", "```java\n    @Configuration\n    public class ApplicationConfiguration {\n      //Below is the set of instance variables that will be configured.\n      //configuring the jdbc driver\n      @Value(\"${batch.jdbc.driver}\")\n      private String driverClassName;\n      //configuring the jdbc url\n      @Value(\"${batch.jdbc.url}\")\n      private String driverUrl;\n\n      //configuring the jdbc username\n      @Value(\"${batch.jdbc.user}\")\n      private String driverUsername;\n\n      //configuring the jdbc passowrd\n      @Value(\"${batch.jdbc.password}\")\n      private String driverPassword;\n\n      //configuring the jobrepository autowiring the bean\n      @Autowired\n      @Qualifier(\"jobRepository\")\n      private JobRepository jobRepository;\n\n      //configuring the  ftpsessionfactory\n      @Autowired\n      @Qualifier(\"myFtpSessionFactory\")\n      private SessionFactory myFtpSessionFactory;\n\n      @Bean\n      public DataSource dataSource() {\n        BasicDataSource dataSource = new BasicDataSource();\n        dataSource.setDriverClassName(driverClassName);\n        dataSource.setUrl(driverUrl);\n        dataSource.setUsername(driverUsername);\n        dataSource.setPassword(driverPassword);\n        return dataSource;\n      }\n      //setting the ftp as a batch job\n      @Bean\n      @Scope(value=\"step\")\n      public FtpGetRemoteFilesTasklet myFtpGetRemoteFilesTasklet(){\n        FtpGetRemoteFilesTasklet  ftpTasklet = new FtpGetRemoteFilesTasklet();\n        ftpTasklet.setRetryIfNotFound(true);\n        ftpTasklet.setDownloadFileAttempts(3);\n        ftpTasklet.setRetryIntervalMilliseconds(10000);\n        ftpTasklet.setFileNamePattern(\"README\");\n        //ftpTasklet.setFileNamePattern(\"TestFile\");\n        ftpTasklet.setRemoteDirectory(\"/\");\n        ftpTasklet.setLocalDirectory(new File(System.getProperty(\"java.io.tmpdir\")));\n        ftpTasklet.setSessionFactory(myFtpSessionFactory);\n\n        return ftpTasklet;\n      }\n      //setting the  ftp sessionfactory\n\n      @Bean\n      public SessionFactory myFtpSessionFactory() {\n        DefaultFtpSessionFactory ftpSessionFactory = new DefaultFtpSessionFactory();\n        ftpSessionFactory.setHost(\"ftp.gnu.org\");\n        ftpSessionFactory.setClientMode(0);\n        ftpSessionFactory.setFileType(0);\n        ftpSessionFactory.setPort(21);\n        ftpSessionFactory.setUsername(\"anonymous\");\n        ftpSessionFactory.setPassword(\"anonymous\");\n\n        return ftpSessionFactory;\n      }\n\n      //Configuring the simple JobLauncher\n      @Bean\n      public SimpleJobLauncher jobLauncher() {\n        SimpleJobLauncher jobLauncher = new SimpleJobLauncher();\n        jobLauncher.setJobRepository(jobRepository);\n        return jobLauncher;\n      }\n\n      @Bean\n      public PlatformTransactionManager transactionManager() {\n        return new DataSourceTransactionManager(dataSource());\n      }\n\n    }\n    ```", "```java\n    batch.jdbc.driver=org.hsqldb.jdbcDriver\n    batch.jdbc.url=jdbc:hsqldb:mem:anjudb;sql.enforce_strict_size=true batch.jdbc.url=jdbc:hsqldb:hsql://localhost:9005/anjdb\n    batch.jdbc.user=anjana\n    batch.jdbc.password=raghu\n    ```", "```java\n    <batch:job id=\"ftpJob\">\n      <batch:step id=\"step1\"  >\n      <batch:tasklet ref=\"myApplicationFtpGetRemoteFilesTasklet\" />\n      </batch:step>\n    </batch:job>\n    ```", "```java\n    public class MyApplicationFtpGetRemoteFilesTasklet implements Tasklet, InitializingBean {\n      private File localDirectory;\n      private AbstractInboundFileSynchronizer<?> ftpInboundFileSynchronizer;\n      private SessionFactory sessionFactory;\n      private boolean autoCreateLocalDirectory = true;\n      private boolean deleteLocalFiles = true;\n      private String fileNamePattern;\n      private String remoteDirectory;\n      private int downloadFileAttempts = 12;\n      private long retryIntervalMilliseconds = 300000;\n      private boolean retryIfNotFound = false;\n      /**All the above instance variables have setters and getters*/\n\n      /*After properties are set it just checks for certain instance variables for null values and calls the setupFileSynchronizer method.\n        It also checks for local directory if it doesn't exits it auto creates the local directory.\n      */\n      public void afterPropertiesSet() throws Exception {\n        Assert.notNull(sessionFactory, \"sessionFactory attribute cannot be null\");\n        Assert.notNull(localDirectory, \"localDirectory attribute cannot be null\");\n        Assert.notNull(remoteDirectory, \"remoteDirectory attribute cannot be null\");\n        Assert.notNull(fileNamePattern, \"fileNamePattern attribute cannot be null\");\n\n        setupFileSynchronizer();\n\n        if (!this.localDirectory.exists()) {\n          if (this.autoCreateLocalDirectory) {\n            if (logger.isDebugEnabled()) {\n              logger.debug(\"The '\" + this.localDirectory + \"' directory doesn't exist; Will create.\");\n            }\n            this.localDirectory.mkdirs();\n          }\n          else\n          {\n            throw new FileNotFoundException(this.localDirectory.getName());\n          }\n        }\n      }\n    /*This method is called in afterpropertiesset() method. This method checks if we need to transfer files using FTP or SFTP.\n    If it is SFTP then it initializes ftpInbounFileSynchronizer using SFTPinbounfFileSynchronizer which has a constructor which takes sessionFactory as the argument and has setter method to set file Filter details with FileNamesPatterns.The method also sets the remoteDirectory location..\n    */\n      private void setupFileSynchronizer() {\n        if (isSftp()) {\n          ftpInboundFileSynchronizer = new SftpInboundFileSynchronizer(sessionFactory);\n          ((SftpInboundFileSynchronizer) ftpInboundFileSynchronizer).setFilter(new SftpSimplePatternFileListFilter(fileNamePattern));\n        }\n        else\n        {\n          ftpInboundFileSynchronizer = new FtpInboundFileSynchronizer(sessionFactory);\n          ((FtpInboundFileSynchronizer) ftpInboundFileSynchronizer).setFilter(new FtpSimplePatternFileListFilter(fileNamePattern));\n        }\n        ftpInboundFileSynchronizer.setRemoteDirectory(remoteDirectory);\n      }\n    /*This method is called during the file synchronization process this will delete the files in the directory after copying..\n    */\n      private void deleteLocalFiles() {\n        if (deleteLocalFiles) {\n          SimplePatternFileListFilter filter = new SimplePatternFileListFilter(fileNamePattern);\n          List<File> matchingFiles = filter.filterFiles(localDirectory.listFiles());\n          if (CollectionUtils.isNotEmpty(matchingFiles)) {\n            for (File file : matchingFiles) {\n              FileUtils.deleteQuietly(file);\n            }\n          }\n        }\n      }\n    /*This is a batch execute method which operates with FTP ,it synchronizes the local directory with the remote directory.\n    */\n      /* (non-Javadoc)\n      * @see org.springframework.batch.core.step.tasklet.Tasklet#execute(org.springframework.batch.core.StepContribution, org.springframework.batch.core.scope.context.ChunkContext)\n      */\n      public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception {\n        deleteLocalFiles();\n\n        ftpInboundFileSynchronizer.synchronizeToLocalDirectory(localDirectory);\n\n        if (retryIfNotFound) {\n          SimplePatternFileListFilter filter = new SimplePatternFileListFilter(fileNamePattern);\n          int attemptCount = 1;\n          while (filter.filterFiles(localDirectory.listFiles()).size() == 0 && attemptCount <= downloadFileAttempts) {\n            logger.info(\"File(s) matching \" + fileNamePattern + \" not found on remote site.  Attempt \" + attemptCount + \" out of \" + downloadFileAttempts);\n            Thread.sleep(retryIntervalMilliseconds);\n            ftpInboundFileSynchronizer.synchronizeToLocalDirectory(localDirectory);\n            attemptCount++;\n          }\n\n          if (attemptCount >= downloadFileAttempts && filter.filterFiles(localDirectory.listFiles()).size() == 0) {\n            throw new FileNotFoundException(\"Could not find remote file(s) matching \" + fileNamePattern + \" after \" + downloadFileAttempts + \" attempts.\");\n          }\n        }\n\n        return null;\n      }\n    ```"]