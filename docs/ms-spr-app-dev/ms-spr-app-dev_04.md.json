["```java\n<dependency>\n  <groupId>org.springframework.batch</groupId>\n  <artifactId>spring-batch-core</artifactId>\n  <version>3.0.0.RELEASE</version>\n</dependency>\n<dependency>\n  <groupId>org.springframework</groupId>\n  <artifactId>spring-core</artifactId>\n  <version>${spring.version}</version>\n</dependency>\n\n<dependency>\n  <groupId>org.springframework</groupId>\n  <artifactId>spring-context</artifactId>\n  <version>${spring.version}</version>\n</dependency>\n```", "```java\n    public SimpleJobRepository(JobInstanceDao jobInstanceDao,\n      JobExecutionDao jobExecutionDao,\n      StepExecutionDao stepExecutionDao,\n      ExecutionContextDao ecDao) \n    ```", "```java\n    public interface JobLauncher {\n      public JobExecution run(Job job, JobParameters jobParameters)\n      throws JobExecutionAlreadyRunningException, JobRestartException;\n    }\n    ```", "```java\n    public void setJobRepository(JobRepository jobRepository)\n    ```", "```java\n    public interface ItemReader<T> {\n      T read() throws Exception, UnexpectedInputException, ParseException;\n    }\n    ```", "```java\n    public interface ItemProcessor<I, O> {\n      O process(I item) throws Exception;\n    }\n    public class ProductBean {}\n\n    public class RelatedProductsBean {\n      public RelatedProductsBean(ProductBean productBean) {}\n    }\n    public class ProductBeanProcessor implements ItemProcessor<ProductBean, RelatedProductsBean >{\n      public RelatedProductsBean process(ProductBean productBean) throws Exception {\n        //Perform simple transformation, convert a ProductBean to a RelatedProductsBean\n        return new RelatedProductsBean(productBean);\n      }\n    }\n    public class ProductBeanWriter implements ItemWriter<ProductBean>{\n      public void write(List<? extends ProductBean> productBeans) throws Exception {\n        //write productBeans\n      }\n    }\n    ```", "```java\n    <job id=\"ioSampleJob\">\n      <step name=\"step1\">\n      <tasklet>\n      <chunk reader=\"ProductReader\" processor=\"ProductProcessor\" writer=\"RelatedProductsWriter\" commit-interval=\"2\"/>\n      </tasklet>\n      </step>\n    </job>\n    ```", "```java\n    StaxEventItemWriter: This is an implementation of ItemWriter that uses StAX and Marshaller for serializing objects to XML.\n    ```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans \n\n  xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\">\n  <bean id=\"transactionManager\" class=\"org.springframework.batch.support.transaction.ResourcelessTransactionManager\"/>\n  <bean id=\"jobLauncher\" class=\"org.springframework.batch.core.launch.support.SimpleJobLauncher\">\n    <property name=\"jobRepository\" ref=\"jobRepository\"/>\n  </bean>\n  <bean id=\"jobRepository\" class=\"org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean\">\n    <property name=\"transactionManager\" ref=\"transactionManager\"/>\n  </bean>\n  <bean id=\"simpleJob\" class=\"org.springframework.batch.core.job.SimpleJob\" abstract=\"true\">\n    <property name=\"jobRepository\" ref=\"jobRepository\" />\n  </bean>\n</beans>\n```", "```java\n    package com.packt.batchjob;\n    import java.util.List;\n    import org.springframework.batch.item.ItemReader;\n    import org.springframework.batch.item.ParseException;\n    import org.springframework.batch.item.UnexpectedInputException;\n    public class CustomItemReader implements ItemReader {\n      private int index = 0;\n      private List<String> itemList;\n      public Object read() throws Exception, UnexpectedInputException,\n        ParseException {\n        if (index < itemList.size()) {\n          String str = itemList.get(index++);\n          System.out.println(\"Read[ \" + index + \" ] = \" + str);\n          return str;\n        } else {return null;}\n      }\n      public List<String> getItemList() {\n        return itemList;\n      }\n      public void setItemList(List<String> itemList) {\n        this.itemList = itemList;}\n    }\n    ```", "```java\n    package com.packt.batchjob;\n    import org.springframework.batch.item.ItemProcessor;\n    public class CustomItemProcessor implements ItemProcessor {\n      public Object process(Object arg0) throws Exception {\n        String input = (String) arg0;\n        if (input.contains(\"$$\")) {\n          input = input.substring(3, input.length());\n          input = \"<font colour=\"red\">(.Non-Veg)</font> \" + input;\n        } else if (input.contains(\"##\")) {\n        input = input.substring(3, input.length());\n        input = \"<font colour=\"green\">(.Veg)</font> \" + input;\n        } else\n        return null;\n        System.out.println(\"Process : \" + input);\n        return input;\n      }\n    }\n    ```", "```java\n    import java.util.List;\n    import org.springframework.batch.item.ItemWriter;\n    public class CustomItemWriter implements ItemWriter {\n      public void write(List arg0) throws Exception {\n        System.out.println(\"Write   : \" + arg0 + \"\\n\");\n      }\n    }\n    ```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans \n\n  xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n  http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n  http://www.springframework.org/schema/context\n  http://www.springframework.org/schema/context/spring-context-2.5.xsd\">\n  <import resource=\"applicationContext.xml\"/>\n  <bean id=\"customReader\" class=\"com.packt.batchjob.CustomItemReader\" >\n    <property name=\"itemList\" >\n    <list>\n    <value>$$Chicken65</value>\n    <value>$$ChickenTikkaMasala</value>\n    <value>$$GingerChicken</value>\n    <value>$$GarlicChicken</value>\n    <value>##Dal Makani</value>\n    <value>##Stuffed Capsicum</value>\n    <value>##Bendi Fry</value>\n    <value>##Alo Bartha</value>\n    </list>\n    </property>\n  </bean>\n  <bean id=\"customProcessor\" class=\"com.packt.batchjob.CustomItemProcessor\" />\n  <bean id=\"customWriter\" class=\"com.packt.batchjob.CustomItemWriter\" />    \n  <bean id=\"simpleStep\" class=\"org.springframework.batch.core.step.item.SimpleStepFactoryBean\">\n    <property name=\"transactionManager\" ref=\"transactionManager\" />\n    <property name=\"jobRepository\" ref=\"jobRepository\" />\n    <property name=\"itemReader\" ref=\"customReader\"/>\n    <property name=\"itemProcessor\" ref=\"customProcessor\"/>\n    <property name=\"itemWriter\" ref=\"customWriter\"/>\n    <property name=\"commitInterval\" value=\"2\" />\n  </bean>\n  <bean id=\"readerWriterJob\" parent=\"simpleJob\">\n    <property name=\"steps\">\n    <list>\n    <ref bean=\"simpleStep\"/>\n    </list>\n    </property>\n  </bean>\n</beans>\n```", "```java\nD:\\SpringBatch\\receipeMarker>java -classpath \"lib\\*;src\"\norg.springframework.batch.core.launch.support.CommandLineJobRunner\n  itemReaderWriter.xml readerWriterJob\n```", "```java\nOUTPUT:\nRead[ 1 ] = $$Chicken65\nRead[ 2 ] = $$ChickenTikkaMasala\nProcess : \"<font colour=\"red\">(.Non-Veg)</font> $$Chicken65\nProcess : \"<font colour=\"red\">(.Non-Veg)</font>$$ChickenTikkaMasala\nWrite   : [<font colour=\"red\">(.Non-Veg)</font>$$Chicken65 , <font colour=\"red\">(.Non-Veg)</font> $$ChickenTikkaMasala\nRead[ 3 ] = $$GingerChicken\nRead[ 4 ] = $$GarlicChicken\nProcess : \"<font colour=\"red\">(.Non-Veg)</font> $$GingerChicken\nProcess : \"<font colour=\"red\">(.Non-Veg)</font>$$GarlicChicken\nWrite   : [<font colour=\"red\">(.Non-Veg)</font>$$GingerChicken , <font colour=\"red\">(.Non-Veg)</font> $$GarlicChicken\nRead[ 5 ] = ##Dal Makani\nRead[ 6 ] = ##Stuffed Capsicum\nProcess : \"<font colour=\"green\">(. Veg)</font> ##Dal Makani\nProcess : \"<font colour=\" green \">(.Non-Veg)</font>##Stuffed Capsicum\nWrite   : [<font colour=\" green \">(.Veg)</font>##Dal Makani , <font colour=\" green \">(. Veg)</font> ##Stuffed Capsicum\nRead[ 7 ] = ##Bendi Fry\nRead[ 8 ] = ##Alo Bartha\nProcess : \"<font colour=\" green \">(. Veg)</font> ##Bendi Fry\nProcess : \"<font colour=\" green \">(. Veg)</font>##Alo Bartha\nWrite   : [<font colour=\" green \">(. Veg)</font>##Bendi Fry , <font colour=\"red\">(.Non-Veg)</font> ##Alo Bartha\n```", "```java\nRepeatStatus execute(StepContribution contribution,\n                     ChunkContext chunkContext)\n              throws java.lang.Exception\nRepeatStatus: CONTINUABLE and FINISHED\n```", "```java\n    import org.springframework.batch.core.step.tasklet.Tasklet;\n    import org.springframework.batch.repeat.ExitStatus;\n    public class TaskletImpl implements Tasklet{\n      private String message;\n      public void setMessage(String message) {\n        this.message = message;\n      }\n      public ExitStatus execute() throws Exception {\n        System.out.print(message);\n        return ExitStatus.FINISHED;\n      }\n    }\n    ```", "```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <beans \n\n      xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\">\n      <import resource=\"applicationContext.xml\"/>\n\n      <bean id=\"object1\" class=\"com.packt.example.TaskletImpl\">\n        <property name=\"message\" value=\"Dad not well\"/>\n      </bean>\n\n      <bean id=\"object2\" class=\"com.packt.example.TaskletImpl\">\n        <property name=\"message\" value=\"Call the doctor\"/>\n      </bean>\n\n      <bean id=\"object3\" class=\"com.packt.example.TaskletImpl\">\n        <property name=\"message\" value=\"He is sweating\"/>\n      </bean>\n\n      <bean id=\"taskletStep\" abstract=\"true\" class=\"org.springframework.batch.core.step.tasklet.TaskletStep\">\n        <property name=\"jobRepository\" ref=\"jobRepository\"/>\n      </bean>\n\n      <bean id=\"simpleJob\" class=\"org.springframework.batch.core.job.SimpleJob\">\n        <property name=\"name\" value=\"simpleJob\" />\n        <property name=\"steps\">\n        <list>\n        <bean parent=\"taskletStep\">\n        <property name=\"tasklet\" ref=\"object1\"/>\n        </bean>\n        <bean parent=\"taskletStep\">\n        <property name=\"tasklet\" ref=\"object2\"/>\n        </bean>\n        <bean parent=\"taskletStep\">\n        <property name=\"tasklet\" ref=\"object3\"/>\n        </bean>\n        </list>\n        </property>\n        <property name=\"jobRepository\" ref=\"jobRepository\"/>\n      </bean>\n    </beans>\n    ```", "```java\n      <bean id=\"jobLauncher\" class=\"org.springframework.batch.core.launch.support.SimpleJobLauncher\">\n        <property name=\"jobRepository\" ref=\"jobRepository\"/>\n      </bean>\n      <bean id=\"jobRepository\" class=\"org.springframework.batch.core.repository.support.SimpleJobRepository\">\n        <constructor-arg>\n          <bean class=\"org.springframework.batch.core.repository.dao.MapJobInstanceDao\"/>\n        </constructor-arg>\n        <constructor-arg>\n          <bean class=\"org.springframework.batch.core.repository.dao.MapJobExecutionDao\" />\n        </constructor-arg>\n        <constructor-arg>\n          <bean class=\"org.springframework.batch.core.repository.dao.MapStepExecutionDao\"/>\n        </constructor-arg>\n      </bean>\n    ```", "```java\n    mvn clean compile exec:java -Dexec.mainClass=org.springframework.batch.core.launch.support.CommandLineJobRunner -Dexec.args=\"simpleJob.xml simpleJob\"\n    OUTPUT:\n    Dad not well\n    Call the Doctor\n    He is sweating\n\n    ```", "```java\n    package com.packt;\n    public class Employee {\n\n      int empId;\n      String name;\n      public int getEmpId() {\n        return empId;\n      }\n      public void setEmpId(int empId) {\n        this.empId = empId;\n      }\n      public String getName() {\n        return name;\n      }\n      public void setName(String name) {\n        this.name = name;\n      }\n    }\n    ```", "```java\n    package com.packt;\n    import java.util.List;\n    import org.springframework.batch.item.ItemWriter;\n    public class CustomItemWriter<T> implements ItemWriter<T> {\n      @Override\n      public void write(List<? extends T> items) throws Exception {\n        for (int i = 0; items.size() > i; i++) {\n          Employee obj = (Employee) items.get(i);\n          System.out.println(obj.getEmpId() + \":\" + obj.getName());\n        }\n\n      }\n\n    }\n    ```", "```java\n    public class Main {\n      public static void main(String[] args) {\n        Main obj = new Main();\n        obj.run();\n      }\n\n      private void run() {\n        /*config files are present in the resource folder*/\n        String[] springConfig = { \"spring/batch/config/context.xml\", \"spring/batch/jobs/job-read-files.xml\" };\n\n        ApplicationContext context = new ClassPathXmlApplicationContext(springConfig);\n\n        JobLauncher jobLauncher = (JobLauncher) context.getBean(\"jobLauncher\");\n        Job job = (Job) context.getBean(\"readMultiFileJob\");\n        try {\n          JobExecution execution = jobLauncher.run(job, new JobParameters());\n          System.out.println(\"Exit Status : \" + execution.getStatus());\n          System.out.println(\"Exit Status : \" + execution.getAllFailureExceptions());\n\n        } catch (Exception e) {\n          e.printStackTrace();\n\n        }\n\n        System.out.println(\"COMPLETED\");\n\n      }\n    }\n    /*config files are present in the resource folder*/\n    ```", "```java\n    <bean id=\"jobRepository\" class=\"org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean\">\n      <property name=\"transactionManager\" ref=\"transactionManager\" />\n    </bean>\n\n    <bean id=\"transactionManager\" class=\"org.springframework.batch.support.transaction.ResourcelessTransactionManager\" />\n\n    <bean id=\"jobLauncher\" class=\"org.springframework.batch.core.launch.support.SimpleJobLauncher\">\n    <property name=\"jobRepository\" ref=\"jobRepository\" />\n    </bean>\n\n    /*\n    ```", "```java\npublic class FlatFileItemReader<T> extends AbstractItemCountingItemStreamItemReader<T>\nimplements ResourceAwareItemReaderItemStream<T>, org.springframework.beans.factory.InitializingBean\n```", "```java\npublic class FlatFileItemWriter<T>\nextends AbstractItemStreamItemWriter<T>\nimplements ResourceAwareItemWriterItemStream<T>, org.springframework.beans.factory.InitializingBean\n```", "```java\npublic class MultiResourceItemReader<T>extends AbstractItemStreamItemReader<T>\n```", "```java\n<import resource=\"../config/context.xml\"/>\n  <bean id=\"employee\" class=\"com.packt.Employee\" />\n  <job id=\"readMultiFileJob\" >\n\n    <step id=\"step1\">\n    <tasklet>\n    <chunk reader=\"multiResourceReader\" writer=\"flatFileItemWriter\" commit-interval=\"1\" />\n    </tasklet>\n    </step>\n\n  </job>\n<! --create folder structure in the project root csv/inputsand add the csv files-->\n  <bean id=\"multiResourceReader\"class=\" org.springframework.batch.item.file.MultiResourceItemReader\">\n    <property name=\"resources\" value=\"file:csv/inputs/employee-*.csv\" /> \n    <property name=\"delegate\" ref=\"flatFileItemReader\" />\n  </bean>\n\n  <bean id=\"flatFileItemReader\" class=\"org.springframework.batch.item.file.FlatFileItemReader\">\n\n    <property name=\"lineMapper\">\n    <bean class=\"org.springframework.batch.item.file.mapping.DefaultLineMapper\">\n\n      <property name=\"lineTokenizer\">\n      <bean class=\"org.springframework.batch.item.file.transform.DelimitedLineTokenizer\">\n        <property name=\"names\" value=\"id, name\" />\n      </bean>\n      </property>\n      <property name=\"fieldSetMapper\">\n      <bean class=\"org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper\">\n        <property name=\"prototypeBeanName\" value=\"domain\" />\n      </bean>\n      </property>\n    </bean>\n    </property>\n\n  </bean>\n\n  <bean id=\"flatFileItemWriter\" class=\"org.springframework.batch.item.file.FlatFileItemWriter\" >\n    <!--create folder structure in the project root csv/outputs -->\n\n    <property name=\"resource\" value=\"file:csv/outputs/employee.all.csv\" /> \n    <property name=\"appendAllowed\" value=\"true\" />\n    <property name=\"lineAggregator\">\n    <bean class=\"org.springframework.batch.item.file.transform.DelimitedLineAggregator\">\n      <property name=\"delimiter\" value=\",\" />\n      <property name=\"fieldExtractor\">\n      <bean class=\"org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor\">\n        <property name=\"names\" value=\"id, domain\" />\n      </bean>\n      </property>\n    </bean>\n    </property>\n\n  </bean> \n```", "```java\n<bean class=\"org.springframework.batch.item.file.transform.DelimitedLineAggregator\">\n  <property name=\"delimiter\" value=\",\" />\n  <property name=\"fieldExtractor\">\n  <bean class=\"org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor\">\n    <property name=\"names\" value=\"id, domain\" />\n  </bean>\n  </property>\n```", "```java\n<task:scheduled-tasks>\n  <task:scheduled ref=\"MyJobScheduler\" method=\"run\" cron=\"*/600 * * * * *\" />\n</task:scheduled-tasks>\n```", "```java\n@Component\npublic class MyJobScheduler {\n  @Autowired\n  private JobLauncher jobLauncher;\n  @Autowired\n  private Job job;\n  public void run() {\n    try {\n      String dateParam = new Date().toString();\n      JobParameters param = new JobParametersBuilder().addString(\"date\", dateParam).toJobParameters();\n      JobExecution execution = jobLauncher.run(job, param);\n      System.out.println(\"Exit Status  of the Job: \" + execution.getStatus());\n\n    } catch (Exception e) {\n    e.printStackTrace();\n    }\n\n  }\n}\n```", "```java\n    <quartz.version>1.8.6</quartz.version>\n    ```", "```java\n    <dependency>\n      <groupId>org.quartz-scheduler</groupId>\n      <artifactId>quartz</artifactId>\n      <version>${quartz.version}</version>\n    </dependency>\n    ```", "```java\n<bean class=\"org.springframework.scheduling.quartz.SchedulerFactoryBean\">\n  <property name=\"triggers\">\n  <bean id=\"cronTrigger\" class=\"org.springframework.scheduling.quartz.CronTriggerBean\">\n  <property name=\"jobDetail\" ref=\"jobDetail\" />\n  <property name=\"cronExpression\" value=\"*/60 * * * * ?\" />\n  </bean>\n  </property>\n</bean>\n```", "```java\n<bean id=\"jobDetailBean\" class=\"org.springframework.scheduling.quartz.JobDetailBean\">\n  <property name=\" jobQuartzLauncherDetails \" value=\"com.packt.quartz.JobQuartzLauncherDetails\" />\n  <property name=\"group\" value=\"quartz-batch\" />\n  <property name=\"jobDataAsMap\">\n  <map>\n    <entry key=\"jobName\" value=\"reportJob\" />\n    <entry key=\"jobLocator\" value-ref=\"jobRegistry\" />\n    <entry key=\"jobLauncher\" value-ref=\"jobLauncher\" />\n    <entry key=\"param1\" value=\"anjana\" />\n    <entry key=\"param2\" value=\"raghu\" />\n  </map>\n  </property>\n</bean>\n```", "```java\npublic class JobQuartzLauncherDetails extends QuartzJobBean {\n  static final String JOB_NAME = \"jobName\";\n  private JobLocator jobLocator;\n  private JobLauncher jobLauncher;\n  public void setJobLocator(JobLocator jobLocator) {\n    this.jobLocator = jobLocator;\n  }\n  public void setJobLauncher(JobLauncher jobLauncher) {\n    this.jobLauncher = jobLauncher;\n  }\n```", "```java\nprivate JobParameters getJobParametersFromJobMap(Map<String, Object> jobDataMap) {\n  JobParametersBuilder builder = new JobParametersBuilder();\n  for (Entry<String, Object> entry : jobDataMap.entrySet()) {\n    String key = entry.getKey();\n    Object value = entry.getValue();\n    if (value instanceof String && !key.equals(JOB_NAME)) {\n      builder.addString(key, (String) value);\n    } else if (value instanceof Float || value instanceof Double){\n      builder.addDouble(key, ((Number) value).doubleValue());\n    } else if (value instanceof Integer || value instanceof Long){\n      builder.addLong(key, ((Number) value).longValue());\n    } else if (value instanceof Date) {\n      builder.addDate(key, (Date) value);\n    } else {\n\n    }\n  }\n\n  builder.addDate(\"run date\", new Date());\n  return builder.toJobParameters();\n}\n```", "```java\nprotected void executeInternal(JobExecutionContext context) {\n  Map<String, Object> jobDataMap = context.getMergedJobDataMap();\n  String jobName = (String) jobDataMap.get(JOB_NAME);\n  JobParameters jobParameters = getJobParametersFromJobMap(jobDataMap);\n\n  try {\n    jobLauncher.run(jobLocator.getJob(jobName), jobParameters);\n  } catch (JobExecutionException e) {\n    e.printStackTrace();\n  }\n}\n```", "```java\npublic class Product {\n  private int id;\n  private String name;\n  public int getId() {\n    return id;\n  }\n  public void setId(int id) {\n    this.id = id;\n  }\n  public String getName() {\n    return name;\n  }\n  public void setName(String name) {\n    name = name;\n  }\n  @Override\n  public String toString() {\n    return \"Product [id=\" + id + \", name=\" + name + \"]\";\n  }\n}\n```", "```java\npublic class CustomItemWriter implements ItemWriter<Product> {\n  @Override\n  public void write(List<? extends Product> items) throws Exception {\n    System.out.println(\"writer...\" + items.size());\n    for(Product item : items){\n      System.out.println(item);\n    }\n  }\n}\n```", "```java\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\npublic class Main {\n  public static void main(String[] args) {\n    String springConfig = \"spring/batch/jobs/job-quartz.xml\";\n    ApplicationContext context = new ClassPathXmlApplicationContext(springConfig);\n  }\n}\n```", "```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n    <Products>\n      <product id=\"1\">\n        <categoryId>3</categoryId>\n        <brandId>1</brandId>\n        <name>computer</name>\n        <price>15000</price>\n      </product>\n      <product id=\"2\">\n      <categoryId>4</categoryId>\n      <brandId>1</brandId>\n      <name>mouse</name>\n      <price>250</price>\n      </record>\n      </ product>\n      < product id=\"3\">\n        <categoryId>5</categoryId>\n        <brandId>1</brandId>\n        <name>mouse</name>\n        <price>23000</price>\n      </ product>\n    </Products>\n    ```", "```java\n    public class Product {\n      private int id;\n      private int categoryId;\n      private int brandId;\n      private String name;\n      private int price;\n      public int getId() {\n        return id;\n      }\n      public void setId(int id) {\n        this.id = id;\n      }\n      public int getCategoryId() {\n        return categoryId;\n      }\n      public void setCategoryId(int categoryId) {\n        this.categoryId = categoryId;\n      }\n      public int getBrandId() {\n        return brandId;\n      }\n      public void setBrandId(int brandId) {\n        this.brandId = brandId;\n      }\n      public String getName() {\n        return name;\n      }\n      public void setName(String name) {\n        this.name = name;\n      }\n      public int getPrice() {\n        return price;\n      }\n      public void setPrice(int price) {\n        this.price = price;\n      }\n\n    }\n    ```", "```java\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-oxm</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.mongodb</groupId>\n      <artifactId>mongo-java-driver</artifactId>\n      <version>${mongodb.driver.version}</version>\n    </dependency>\n\n      <!-- Spring data mongodb -->\n    <dependency>\n      <groupId>org.springframework.data</groupId>\n      <artifactId>spring-data-mongodb</artifactId>\n      <version>${spring.data.version}</version>\n    </dependency>\n    ```", "```java\n      <mongo:mongo host=\"127.0.0.1\" port=\"27017\" />\n      <mongo:db-factory dbname=\"eshopdb\" />\n\n      <bean id=\"mongoTemplate\" class=\"org.springframework.data.mongodb.core.MongoTemplate\">\n      <constructor-arg name=\"mongoDbFactory\" ref=\"mongoDbFactory\" />\n      </bean>\n    ```", "```java\n<bean id=\"xmlItemReader\" class=\"org.springframework.batch.item.xml.StaxEventItemReader\">\n  <property name=\"fragmentRootElementName\" value=\"product\" />\n  <property name=\"resource\" value=\"classpath:xml/product.xml\" />\n  <property name=\"unmarshaller\" ref=\"productUnmarshaller\" />\n</bean>\n```", "```java\n<bean id=\"productUnmarshaller\" class=\"org.springframework.oxm.xstream.XStreamMarshaller\">\n\n  <property name=\"aliases\">\n  <util:map id=\"aliases\">\n  <entry key=\"product\" value=\"com.packt.model.Product\" />\n  </util:map>\n  </property>\n  <property name=\"converters\">\n  <array>\n  <ref bean=\"productXMLConverter\" />\n  </array>\n  </property>\n</bean>\n\n<bean id=\"productXMLConverter\" class=\"com.packt.converter. ProductXMLConverter>\t\n```", "```java\n    @Override\n    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n      Product obj = new Product();\n      obj.setId(Integer.valueOf(reader.getAttribute(\"id\")));\n      reader.moveDown(); //get id\n      obj.setCategoryId(Integer.valueOf(reader.getAttribute(\"categoryId\")));\n      reader.moveDown(); //get categoryId\n      obj.setBrandId(Integer.valueOf(reader.getAttribute(\"brandId\")));\n      reader.moveDown(); //get brandId\n      obj.setName(String.valueOf(reader.getAttribute(\"name\")));\n      reader.moveDown(); //get name\n      obj.setPrice(Integer.valueOf(reader.getAttribute(\"price\")));\n      reader.moveDown(); //get name\n      return obj;\n    }\n    ```", "```java\n    <bean id=\"mongodbItemWriter\" class=\"org.springframework.batch.item.data.MongoItemWriter\">\n      <property name=\"template\" ref=\"mongoTemplate\" />\n      <property name=\"collection\" value=\"product\" />\n    </bean>\n    ```", "```java\n    <batch:job id=\"productJob\">\n      <batch:step id=\"step1\">\n      <batch:tasklet>\n      <batch:chunk reader=\"xmlItemReader\" writer=\"mongodbItemWriter\" commit-interval=\"1\">\n      </batch:chunk>\n      </batch:tasklet>\n      </batch:step>\n    </batch:job>\n    ```", "```java\n    public class Main {\n      public static void main(String[] args) {\n        String[] springConfig  = {\"spring/batch/config/mongodatabase.xml\", \"spring/batch/config/context.xml\", \"spring/batch/jobs/job-product.xml\" \n      };\n\n      ApplicationContext context = new ClassPathXmlApplicationContext(springConfig);\n\n      JobLauncher jobLauncher = (JobLauncher) context.getBean(\"jobLauncher\");\n      Job job = (Job) context.getBean(\"productJob\");\n\n      try {\n\n        JobExecution execution = jobLauncher.run(job, new JobParameters());\n        System.out.println(\"Exit Status of the ProductJOB: \" + execution.getStatus());\n\n        } catch (Exception e) {\n          e.printStackTrace();\n        }\n\n        System.out.println(\"YES COMPLETED\");\n\n      }\n    }\n    ```", "```java\npublic class MyJobPartioner implements Partitioner {\n  @Override\n  public Map<String, ExecutionContext> partition(int gridSize) {\n    Map<String, ExecutionContext> result = new HashMap<String, ExecutionContext>();\n    int range = 100;\n    int start_range = 1;\n    int end_range = range;\n    for (int i = 1; i <= gridSize; i++) {\n      ExecutionContext execution_context = new ExecutionContext();\n      System.out.println(\"\\Name: Thread\" + i+\"start_range : \" + start_range+\"end_range\", end_range);\n      execution_context.putInt(\"start_range\", start_range);\n      execution_context.putInt(\"end_range\", end_range);\n      execution_context.putString(\"name\", \"Thread\" + i);\n      result.put(\"partition\" + i, execution_context);\n      start_range = end_range + 1;\n      end_range += range;\n    }\n    return result;\n  }\n\n}\n```", "```java\n    @Component(\"itemProcessor\")\n    @Scope(value = \"step\")\n    public class EmployeeProcessor implements ItemProcessor<Employee, Employee> {\n      @Value(\"#{stepExecutionContext[name]}\")\n      private String threadName;\n      @Override\n      public Employee process(Employee emp) throws Exception {\n        System.out.println(threadName + \" processing : \" + emp.getId() + \" : \" + emp.getName());\n        return emp;\n      }\n      public String getThreadName() {\n        return threadName;\n      }\n      public void setThreadName(String threadName) {\n        this.threadName = threadName;\n      }\n\n    }\n    ```", "```java\n    <job id=\"partitionJob\" >\n      <step id=\"masterStep\">\n      <partition step=\"slave\" partitioner=\"myJobPartioner\">\n      <handler grid-size=\"100\" task-executor=\"taskExecutor\" />\n      </partition>\n      </step>\n\n    </job>\n    <step id=\"slave\" >\n      <tasklet>\n      <chunk reader=\"pagingItemReader\" writer=\"flatFileItemWriter\"\n      processor=\"itemProcessor\" commit-interval=\"1\" />\n      </tasklet>\n    </step>\n\n    <!\u2014below is the configuration of MyJobPartioner bean-->\n\n    <bean id=\"myJobPartioner\" class=\"com.packt.partition.MyJobPartioner\" />\n    <bean id=\"taskExecutor\" class=\"org.springframework.core.task.SimpleAsyncTaskExecutor\" />\n\n    <!\u2014below is the configuration of EmployeeProcesser bean-->\n\n    <bean id=\"itemProcessor\" class=\"com.packt.processor.EmployeeProcessor\" scope=\"step\">\n      <property name=\"threadName\" value=\"#{stepExecutionContext[name]}\" />\n    </bean>\n    ```", "```java\n    <bean id=\"pagingItemReader\" class=\"org.springframework.batch.item.database.JdbcPagingItemReader\"scope=\"step\">\n      <property name=\"dataSource\" ref=\"dataSource\" />\n      <property name=\"queryProvider\">\n      <bean class=\"org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean\">\n        <property name=\"dataSource\" ref=\"dataSource\" />\n        <property name=\"selectClause\" value=\"select emp_id, emp_name, emp_pass, emp_salary\" />\n        <property name=\"fromClause\" value=\"from users\" />\n        <property name=\"whereClause\" value=\"where emp_id &gt;= :fromId and id &lt;= :toId\" />\n        <property name=\"sortKey\" value=\"emp_id\" />\n      </bean>\n      </property>\n     <!-- Inject via the ExecutionContext in MyJobPartioner -->\n      <property name=\"parameterValues\">\n      <map>\n        <entry key=\"fromId\" value=\"#{stepExecutionContext[start_range]}\" />\n        <entry key=\"toId\" value=\"#{stepExecutionContext[end_range]}\" />\n      </map>\n      </property>\n      <property name=\"pageSize\" value=\"100\" />\n      <property name=\"rowMapper\">\n      <bean class=\"com.packt.EmployeeRowMapper\" />\n      </property>\n      </bean>\n\n    <!--After reading it writes to  csv file using FlatfileItemwriter class-->\n\n      <bean id=\"flatFileItemWriter\" class=\"org.springframework.batch.item.file.FlatFileItemWriter\" scope=\"step\" >\n        <property name=\"resource\"\n        value=\"file:csv/outputs/employee.processed#{stepExecutionContext[fromId]}-#{stepExecutionContext[toId]}.csv\" />\n        <property name=\"appendAllowed\" value=\"false\" />\n        <property name=\"lineAggregator\">\n        <bean class=\"org.springframework.batch.item.file.transform.DelimitedLineAggregator\">\n          <property name=\"delimiter\" value=\",\" />\n          <property name=\"fieldExtractor\">\n          <bean class=\"org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor\">\n            <property name=\"names\" value=\"emp_id, emp_name, emp_pass, emp_salary\" />\n          </bean>\n          </property>\n        </bean>\n        </property>\n      </bean>\n    <!--Configuring FlatfileItemwriter class- ends-->\n    ```", "```java\n    public class Main {\n      public static void main(String[] args) {\n        Main obj = new Main();\n        obj.run();\n      }\n      private void run() {\n        String[] springConfig = { \"spring/batch/jobs/job-partitioner.xml\" };\n        ApplicationContext context = new ClassPathXmlApplicationContext(springConfig);\n        JobLauncher jobLauncher = (JobLauncher) context.getBean(\"jobLauncher\");\n        Job job = (Job) context.getBean(\"partitionJob\");\n        try {\n          JobExecution execution = jobLauncher.run(job, new JobParameters());\n          System.out.println(\"Exit Status : \" + execution.getStatus());\n          System.out.println(\"Exit Status : \" + execution.getAllFailureExceptions());\n        } catch (Exception e) {\n          e.printStackTrace();\n        }\n        System.out.println(\"COMPLETED\");\n      }\n\n    }\n    ```", "```java\n    public interface ChunkListener extends StepListener {\n      void beforeChunk();\n      void afterChunk();\n    }\n    <step id=\"step1\">\n      <tasklet>\n      <chunk reader=\"reader\" writer=\"writer\" commit-interval=\"10\"/>\n      <listeners>\n        <listener ref=\"chunkListener\"/>\n      </listeners>\n      </tasklet>\n    </step>\n    ```", "```java\n    <bean id=\"packtStepListener\" class=\"com.packt.listeners.PacktStepListener\" />\n    <bean id=\"packtItemReaderListener\" class=\"com.packt.listeners.PacktItemReaderListener\" />\n    <bean id=\"packtItemWriterListener\" class=\"com.packt.listeners.PacktItemWriterListener\" />\n\n    <job id=\"readFileJob\" >\n      <step id=\"step1\">\n      <tasklet>\n      <chunk reader=\"multiResourceReader\" writer=\"flatFileItemWriter\" commit-interval=\"1\" />\n      <listeners>\n        <listener ref=\"packtStepListener\" />\n        <listener ref=\"packtItemReaderListener\" />\n        <listener ref=\"packtItemWriterListener\" />\n      </listeners>\n      </tasklet>\n      </step>\n    </job>\n    ```", "```java\n        public class PacktItemReaderListener implements ItemReadListener<Product> {\n\n          @Override\n          public void beforeRead() {\n            System.out.println(\"ItemReadListener - beforeRead\");\n          }\n\n          @Override\n          public void afterRead(Product product) {\n            System.out.println(\"ItemReadListener - afterRead\");\n          }\n\n          @Override\n          public void onReadError(Exception ex) {\n            System.out.println(\"ItemReadListener - onReadError\");\n          }\n\n        }\n        ```", "```java\n        public class PacktItemWriterListener implements ItemWriteListener<Product> {\n          @Override\n          public void beforeWrite(List<? extends Product> products) {\n            System.out.println(\"ItemWriteListener - beforeWrite\");\n          }\n          @Override\n          public void afterWrite(List<? extends Product> products) {\n            System.out.println(\"ItemWriteListener - afterWrite\");\n          }\n          @Override\n          public void onWriteError(Exception exception, List<? extends Product> products) {\n            System.out.println(\"ItemWriteListener - onWriteError\");\n          }\n        }\n        ```", "```java\n    public class Product {\n      int id;\n      String name;\n      public int getId() {\n        return id;\n      }\n      public void setId(int id) {\n        this.id = id;\n      }\n      public String getName() {\n        return name;\n      }\n      public void setName(String Name) {\n        this.name = name;\n      }\n    }\n    ```", "```java\n      <bean id=\"product\" class=\"com.packt.Product\" />\n    ```", "```java\n    <bean id=\"fileDeletingTasklet\" class=\"com.packt.tasklet.FileDeletingTasklet\" >\n      <property name=\"directory\" value=\"file:csv/inputs/\" />\n    </bean>\n    ```", "```java\n    public class FileDeletingTasklet implements Tasklet, InitializingBean {\n      private Resource directory;\n      @Override\n      public void afterPropertiesSet() throws Exception {\n        Assert.notNull(directory, \"directory must be set\");\n      }\n\n      @Override\n      public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception {\n        File dir = directory.getFile();\n        Assert.state(dir.isDirectory());\n        File[] files = dir.listFiles();\n        for (int i = 0; i < files.length; i++) {\n          boolean deleted = files[i].delete();\n          if (!deleted) {\n            throw new UnexpectedJobExecutionException(\"Could not delete file \" + files[i].getPath());\n          } else {\n            System.out.println(files[i].getPath() + \" is deleted!\");\n          }\n        }\n        return RepeatStatus.FINISHED;\n      }\n      public Resource getDirectory() {\n        return directory;\n      }\n      public void setDirectory(Resource directory) {\n        this.directory = directory;\n      }\n    }\n    ```", "```java\n    <bean id=\"fileDeletingTasklet\" class=\"com.packt.tasklet.FileDeletingTasklet\" >\n      <property name=\"directory\" value=\"file:csv/inputs/\" />\n    </bean>\n    ```", "```java\n<bean id=\"multiResourceReader\" class=\" org.springframework.batch.item.file.MultiResourceItemReader\">\n  <property name=\"resources\" value=\"file:csv/inputs/product-*.csv\" />\n  <property name=\"delegate\" ref=\"flatFileItemReader\" />\n</bean>\n```", "```java\n<bean id=\"flatFileItemReader\" class=\"org.springframework.batch.item.file.FlatFileItemReader\">\n  <property name=\"lineMapper\">\n  <bean class=\"org.springframework.batch.item.file.mapping.DefaultLineMapper\">\n    <property name=\"lineTokenizer\">\n    <bean class=\"org.springframework.batch.item.file.transform.DelimitedLineTokenizer\">\n      <property name=\"names\" value=\"id, name\" />\n    </bean>\n    </property>\n    <property name=\"fieldSetMapper\">\n    <bean class=\"org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper\">\n      <property name=\"prototypeBeanName\" value=\"product\" />\n    </bean>\n    </property>\n  </bean>\n  </property>\n\n</bean>\n```", "```java\n<bean id=\"flatFileItemWriter\" class=\"org.springframework.batch.item.file.FlatFileItemWriter\">\n  <property name=\"resource\" value=\"file:csv/outputs/product.all.csv\" />\n  <property name=\"appendAllowed\" value=\"true\" />\n  <property name=\"lineAggregator\">\n  <bean class=\"org.springframework.batch.item.file.transform.DelimitedLineAggregator\">\n    <property name=\"delimiter\" value=\",\" />\n    <property name=\"fieldExtractor\">\n    <bean class=\"org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor\">\n      <property name=\"names\" value=\"id, name\" />\n    </bean>\n    </property>\n  </bean>\n  </property>\n\n</bean>\n```", "```java\npublic class Main {\n  public static void main(String[] args) {\n    Main obj = new Main();\n    obj.run();\n\n  }\n\n  private void run() {\n    String[] springConfig = { \"spring/batch/jobs/job-read-files.xml\" };\n    ApplicationContext context = new ClassPathXmlApplicationContext(springConfig);\n    JobLauncher jobLauncher = (JobLauncher) context.getBean(\"jobLauncher\");\n    Job job = (Job) context.getBean(\"readMultiFileJob\");\n\n    try {\n      JobExecution execution = jobLauncher.run(job, new JobParameters());\n      System.out.println(\"Exit Status : \" + execution.getStatus());\n      System.out.println(\"Exit Status : \" + execution.getAllFailureExceptions());\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n    System.out.println(\"COMPLTED CHECK THE OUTPUT DIRECTORY\");\n  }\n}\n```", "```java\n<dependency>\n  <groupId>org.springframework.batch</groupId>\n  <artifactId>spring-batch-test</artifactId>\n  <version>2.2.0.RELEASE</version>\n</dependency>\n\n<!-- Junit -->\n<dependency>\n  <groupId>junit</groupId>\n  <artifactId>junit</artifactId>\n  <version>4.11</version>\n  <scope>test</scope>\n</dependency>\n```", "```java\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.batch.core.BatchStatus;\nimport org.springframework.batch.core.JobExecution;\nimport org.springframework.batch.test.JobLauncherTestUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations = {\n  \"classpath:spring/batch/jobs/job-report.xml\",\n  \"classpath:spring/batch/config/context.xml\",\n  \"classpath:spring/batch/config/database.xml\",\n  \"classpath:spring/batch/config/test-context.xml\"})\npublic class MainTest {\n  @Autowired\n  private JobLauncherTestUtils jobLauncherTestUtils;\n\n  @Test\n  public void launchJob() throws Exception {\n    JobExecution jobExecution = jobLauncherTestUtils.launchStep(\"step1\");\n\n    assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus());\n\n  }\n}\n```"]