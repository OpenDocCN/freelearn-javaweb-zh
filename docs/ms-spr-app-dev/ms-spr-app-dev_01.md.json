["```java\n    >mongod.exe -dbpath e:\\mongodata\\db \n\n    ```", "```java\n    >show databaseExecute\n\n    ```", "```java\n    >use new-eshopdb\n\n    ```", "```java\n    db.eshopdb.insert({cust_id:1,name:\"kishore\",address:\"jayangar\"})\n    db.eshopdb.insert({cust_id:2,name:\"bapi\",address:\"HAL Layout\"})\n    db.eshopdb.insert({cust_id:3,name:\"srini\",address:\"abbigere street\"})\n    db.eshopdb.insert({cust_id:4,name:\"sangamesha\",address: \"Kattarigupee layout\"})\n\n    ```", "```java\n    cd E:\\MONGODB\\mongo\\bin\n    mongod -dbpath e:\\mongodata\\db \n\n    ```", "```java\n    mvn archetype:generate -DgroupId=com.packtpub.spring -DartifactId=spring-mongo -DarchetypeArtifactId=maven-archetype-webapp\n\n    ```", "```java\n    <!-- Spring dependencies -->\n    <dependency>\n    <groupId>org.mongodb</groupId>\n    <artifactId>mongo-java-driver</artifactId>\n    <version>2.9.1</version>\n    </dependency>\n    <dependency>\n    <groupId>org.springframework.data</groupId>\n    <artifactId>spring-data-mongodb</artifactId>\n    <version>1.2.0.RELEASE</version>\n    </dependency>\n    <dependency>\n    <groupId>org.springframework.data</groupId>\n    <artifactId>spring-data-mongodb</artifactId>\n    <version>1.2.0.RELEASE</version>\n    </dependency>\n    <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-core</artifactId>\n    <version>${spring.version}</}</version>\n    <scope>runtime</scope>\n    </dependency>\n    <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-context</artifactId>\n    <version>4.0.2.RELEASE </version>\n    <scope>runtime</scope>\n    </dependency>\n    <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-context-support</artifactId>\n    <version>4.0.2.RELEASE </version>\n    <scope>runtime</scope>\n    </dependency>\n    <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-beans</artifactId>\n    <version>4.0.2.RELEASE </version>\n    <scope>runtime</scope>\n    </dependency>\n    <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-web</artifactId>\n    <version>4.0.2.RELEASE </version>\n    <scope>runtime</scope>\n    </dependency>\n    <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-webmvc</artifactId>\n    <version>4.0.2.RELEASE </version>\n    <scope>runtime</scope>\n    </dependency>\n    ```", "```java\n@Controller\npublic class ProductController {\n  @Autowired\n  private ProductRepository respository;\n  private List <Product>productList;\n  public ProductController() {\n    super();\n  }\n  @PostConstruct\n  public void init(){\n    this.productList=respository.getAllObjects();\n  }\n  //to get the list of products\n  @RequestMapping(value=\"/product\", method = RequestMethod.GET)\n  public String getaddproduct(Model model) {\n    model.addAttribute(\"productList\", productList);\n    model.addAttribute(\"productAttribute\", new Product());\n    return \"product\";\n  }\n  //to save the product\n  @RequestMapping(value=\"/product/save\", method = RequestMethod.POST)\n  public String addproduct(@ModelAttribute Product prod,Model model) {\n    if(StringUtils.hasText(prod.getProdid())) {\n      respository.updateObject(prod);\n    } else {\n      respository.saveObject(prod);\n    }\n    this.productList=respository.getAllObjects();\n    model.addAttribute(\"productList\", productList);\n    return \"product\";\n  }\n  //to update the edited product\n  @RequestMapping(value=\"/product/update\", method = RequestMethod.POST)\n  public String updatecustomer(@ModelAttribute Product prod,Model model) {\n    respository.updateObject(prod);\n    this.productList=respository.getAllObjects();\n    model.addAttribute(\"productList\", productList);\n    return \"product\";\n  }\n  //to edit a product based on ID\n  @RequestMapping(value = \"/product/geteditproduct\", method = RequestMethod.GET)\n  public String geteditproduct(\n  @RequestParam(value = \"prodid\", required = true) String prodid,\n  Model model) {\n    model.addAttribute(\"productList\", productList);\n    model.addAttribute(\"productAttribute\", respository.getObject(prodid));\n    return \"editproduct\";\n  }\n  //to delete a product based on ID\n  @RequestMapping(value=\"/product/deleteproduct\", method = RequestMethod.GET)\n  public String deleteproduct(\n  @RequestParam(value = \"prodid\", required = true) String prodid,Model model) {\n    respository.deleteObject(prodid);\n    this.productList=respository.getAllObjects();\n    model.addAttribute(\"productList\", this.productList);\n    return \"product\";\n  }\n  //to get all the products\n  @RequestMapping(value = \"/product/getallproducts\", method = RequestMethod.GET)\n  public String getallproducts(Model model) {\n    this.productList=respository.getAllObjects();\n    model.addAttribute(\"productList\", this.productList);\n    return \"allproducts\";\n  }\n}\n```", "```java\n@Document\npublic class Product {\n  /*Bean class product with getter and setters*/\n  @Id\n  private String prodid;\n  private Double price;\n  private String name;\n  public Product() {\n    super();\n  }\n  public String getProdid() {\n    return prodid;\n  }\n  public void setProdid(String prod_id) {\n    this.prodid = prod_id;\n  }\n  public Double getPrice() {\n    return price;\n  }\n  public void setPrice(Double price) {\n    this.price = price;\n  }\n  public String getName() {\n    return name;\n  }\n  public void setName(String name) {\n    this.name = name;\n  }\n}\n```", "```java\n@Repository\npublic class ProductRepository {\n  @Autowired\n  MongoTemplate mongoTemplate;\n  public void setMongoTemplate(MongoTemplate mongoTemplate) {\n    this.mongoTemplate = mongoTemplate;\n  }\n\n  public List<Product> getAllObjects() {\n    return mongoTemplate.findAll(Product.class);\n  }\n\n  /**\n  * Saves a {@link Product}.\n  */\n  public void saveObject(Product Product) {\n    Product.setProdid(UUID.randomUUID().toString());\n    mongoTemplate.insert(Product);\n  }\n\n  /**\n  * Gets a {@link Product} for a particular id.\n  */\n  public Product getObject(String id) {\n    return mongoTemplate.findOne(new Query(Criteria.where(\"_id\").is(id)),\n    Product.class);\n  }\n\n  /**\n  * Updates a {@link Product} name for a particular id.\n  */\n  public void updateObject(Product object) {\n    Query query = new Query();\n    query.addCriteria(Criteria.where(\"_id\").is(object.getProdid()));\n    Product prod_tempObj = mongoTemplate.findOne(query, Product.class);\n    System.out.println(\"cust_tempObj - \" + prod_tempObj);\n    //modify and update with save()\n    prod_tempObj.setName(object.getName());\n    prod_tempObj.setPrice(object.getPrice());\n    mongoTemplate.save(prod_tempObj);\n  }\n\n  /**\n  * Delete a {@link Product} for a particular id.\n  */\n  public void deleteObject(String id) {\n    mongoTemplate.remove(new Query(Criteria.where(\"_id\").is(id)),Product.class);\n  }\n\n  /**\n  * Create a {@link Product} collection if the collection does not already\n  * exists\n  */\n  public void createCollection() {\n    if (!mongoTemplate.collectionExists(Product.class)) {\n      mongoTemplate.createCollection(Product.class);\n    }\n  }\n\n  /**\n  * Drops the {@link Product} collection if the collection does already exists\n  */\n  public void dropCollection() {\n    if (mongoTemplate.collectionExists(Product.class)) {\n      mongoTemplate.dropCollection(Product.class);\n    }\n  }\n}\n```", "```java\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<%@ taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\" %>\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Register Product</title>\n</head>\n<body>\n\n<h1>Register Product</h1>\n<ul>\n<li><a href=\"/Spring4MongoDB_Chapter1/customer\">Customer</a>\n</li>\n<li>r<a href=\"/Spring4MongoDB_Chapter1/order\">Product</a>\n</li></ul>\n<form  method=\"post\" action=\"/Spring4MongoDB_Chapter1/product/save\">\n  <table>\n    <tr>\n      <td> Name:</td>\n      <td><input type=text name=\"name\"/></td>\n    </tr>\n    <tr>\n      <td>Price</td>\n      <td><input type=text name=\"price\"/></td>\n    </tr>\n      </table>\n  <input type=\"hidden\" name=\"prod_id\"  >\n  <input type=\"submit\" value=\"Save\" />\n</form>\n<%@ include file=\"allproducts.jsp\" %>\n</body>\n</html>\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans \n\n  xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n  http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n  http://www.springframework.org/schema/data/mongo\n  http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd\n\n  http://www.springframework.org/schema/context \n  http://www.springframework.org/schema/context/spring-context-4.0.xsd\">\n\n  <context:component-scan base-package=\"com.packt\" />\n\n  <!-- Factory bean that creates the Mongo instance -->\n    <bean id=\"mongo\" class=\"org.springframework.data.mongodb.core.MongoFactoryBean\">\n      <property name=\"host\" value=\"localhost\" />\n    </bean>\n    <mongo:mongo host=\"127.0.0.1\" port=\"27017\" />\n    <mongo:db-factory dbname=\"eshopdb\" />\n\n  <bean id=\"mongoTemplate\" class=\"org.springframework.data.mongodb.core.MongoTemplate\">\n    <constructor-arg name=\"mongoDbFactory\" ref=\"mongoDbFactory\" />\n  </bean>\n\n  <!-- Use this post processor to translate any MongoExceptions thrown in @Repository annotated classes -->\n    <bean class=\"org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor\" />\n    <bean id=\"jspViewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"\n      p:prefix=\"/WEB-INF/myviews/\"\n      p:suffix=\".jsp\" /> \n\n</beans>\n```", "```java\npackage com.packt.bean;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\n@Document\npublic class Order {\n  private String order_id;\n  private Customer customer;\n  private Product product;\n  private String date;\n  private String order_status;\n  private int quantity;\n\n  public Order() {\n    super();\n  // TODO Auto-generated constructor stub\n  }\n\n  @Id\n  public String getOrder_id() {\n    return order_id;\n  }\n  public void setOrder_id(String order_id) {\n    this.order_id = order_id;\n  }\n\n  public String getDate() {\n    return date;\n  }\n  public void setDate(String date) {\n    this.date = date;\n  }\n  public int getQuantity() {\n    return quantity;\n  }\n  public void setQuantity(int quantity) {\n    this.quantity = quantity;\n  }\n  public String getOrder_status() {\n    return order_status;\n  }\n  public void setOrder_status(String order_status) {\n    this.order_status = order_status;\n  }\n\n  public Customer getCustomer() {\n    return customer;\n  }\n  public void setCustomer(Customer customer) {\n    this.customer = customer;\n  }\n  public Product getProduct() {\n    return product;\n  }\n  public void setProduct(Product product) {\n    this.product = product;\n  }\n}\n```", "```java\npublic void updateObject(Order order) {\n  Query query = new Query();\n  query.addCriteria(Criteria.where(\"_id\").is(order.getOrder_id()));\n  Order order_tempObj = mongoTemplate.findOne(query, Order.class);\n    order_tempObj.setCustomer(order.getCustomer());\n    order_tempObj.setProduct(order.getProduct());\n    order_tempObj.setQuantity(order.getQuantity());\n    mongoTemplate.save(order_tempObj);\n}\n```", "```java\npublic void saveObject(Order Order) {\n  Order.setOrder_id(UUID.randomUUID().toString());\n  mongoTemplate.insert(Order);\n}\n```", "```java\n@Controller\npublic class OrderController {\n  @Autowired\n  private OrderRepository respository;\n  @Autowired\n  private CustomerRepository customerRespository;\n  @Autowired\n  private ProductRepository productRespository;\n  private List<Order> orderList;\n  private List<Customer> customerList;\n  private List<Product> productList;\n\n  public OrderController() {\n    super();\n  }\n}\n```", "```java\n@ModelAttribute(\"orderList\")\n  public List<Order> populateOrderList() {\n    this.orderList = respository.getAllObjects();\n    return this.orderList;\n  }\n  @ModelAttribute(\"productList\")\n  public List<Product> populateProductList() {\n    this.productList = productRespository.getAllObjects();\n    return this.productList;\n  }\n  @ModelAttribute(\"customerList\")\n  public List<Customer> populateCstomerList() {\n    this.customerList = customerRespository.getAllObjects();\n    return this.customerList;\n  }\n```", "```java\n@RequestMapping(value = \"/order\", method = RequestMethod.GET)\n  // request show add order page\n  public String addOrder(@ModelAttribute(\"Order\") Order order,Map<String, Object> model) {\n    model.put(\"customerList\", customerList);\n    model.put(\"productList\", productList);\n    return \"order\";\n  }\n  @RequestMapping(value = \"/order/save\", method = RequestMethod.POST)\n  // request to insert the record\n  public String addorder(@ModelAttribute(\"Order\") Order order,Map<String, Object> model) {\n    order.setCustomer(customerRespository.getObject(order.getCustomer().getCust_id()));\n    order.setProduct(product_respository.getObject(order.getProduct().getProdid()));\n    respository.saveObject(order);\n    model.put(\"customerList\", customerList);\n    model.put(\"productList\", productList);\n    return \"order\";\n  }\n\n  @RequestMapping(value = \"/orde`r/update\", method = RequestMethod.POST)\n  public String updatecustomer(@ModelAttribute(\"Order\") Order order,\n    Map<String, Object> model) {\n    order.setCustomer(customerRespository.getObject(order.getCustomer().getCust_id()));\n    order.setProduct(product_respository.getObject(order.getProduct().getProdid()));\n    respository.updateObject(order);\n    model.put(\"customerList\", customerList);\n    model.put(\"productList\", productList);\n    return \"order\";\n  }\n  @RequestMapping(value = \"/order/geteditorder\", method = RequestMethod.GET)\n  public String editOrder(@RequestParam(value = \"order_id\", required = true) String order_id, @ModelAttribute(\"Order\") Order order,Map<String, Object> model) {\n    model.put(\"customerList\", customerList);\n    model.put(\"productList\", productList);\n    model.put(\"Order\",respository.getObject(order_id));\n    return \"editorder\";\n  }\n  @RequestMapping(value = \"/order/deleteorder\", method = RequestMethod.GET)\n  public String deleteorder(@RequestParam(value = \"order_id\", required = true) String order_id, @ModelAttribute(\"Order\") Order order,Map<String, Object> model) {\n    respository.deleteObject(order_id);\n    model.put(\"customerList\", customerList);\n    model.put(\"productList\", productList);\n    return \"order\";\n  }\n}\n```", "```java\n<h1>Orders </h1>\n<ul>\n<li><a href=\"/Spring4MongoDB_Chapter1/customer\">Customer</a>\n</li>\n<li>r<a href=\"/Spring4MongoDB_Chapter1/product\">Product</a>\n</li></ul>\n\n<form:form action=\"/Spring4MongoDB_Chapter1/order/save\" modelAttribute=\"Order\"> \n  <table>\n    <tr>\n      <td>Add your Order:</td>\n      <td><form:input path=\"quantity\" size=\"3\"/></td>\n    </tr>\n    <tr>\n      <td>Select Product:</td>\n      <td> \n        <form:select path=\"product.prodid\">\n        <form:option value=\"\" label=\"--Please Select\"/>\n        <form:options items=\"${productList}\" itemValue=\"prodid\" itemLabel=\"name\"/>\n        </form:select>\n      </td>\n    </tr>\n    <tr>\n      <td>Select Customer:</td>\n      <td> \n        <form:select path=\"customer.cust_id\">\n        <form:option value=\"\" label=\"--Please Select\"/>\n        <form:options items=\"${customerList}\" itemValue=\"cust_id\" itemLabel=\"name\"/>\n        </form:select>\n      </td>\n    </tr>\n    <tr>\n      <td colspan=\"2\" align=\"center\">\n        <input type=\"submit\" value=\"Submit\" />\t\n      </td>\n    </tr>\n  </table>\n</form:form>\n\n<%@ include file=\"allorders.jsp\" %>\n</body>\n</html>\n```", "```java\n<h1> E-shop Orders</h1>\n<table style=\"border: 1px solid; width: 500px; text-align:center\">\n  <thead style=\"background:#fffcc\">\n    <tr>\n      <th>Order Id</th>\n      <th>Customer Name</th>\n      <th>Customer Address</th>\n      <th>Product Address</th>\n      <th>Product Price</th>\n      <th>Product Quantity</th>\n      <th colspan=\"2\"></th>\n    </tr>\n  </thead>\n  <tbody>\n\n  <c:forEach items=\"${orderList}\" var=\"order\">\n    <c:url var=\"editUrl\" value=\"/order/geteditorder?order_id=${order.order_id}\" />\n    <c:url var=\"deleteUrl\" value=\"/order/deleteorder?order_id=${order.order_id}\" />\n    <c:url var=\"addUrl\" value=\"/order/\" />\t\n    <tr>\n    <td><c:out value=\"${order.order_id}\" /></td>\n      <td><c:out value=\"${order.customer.name}\" /></td>\n      <td><c:out value=\"${order.customer.address}\" /></td>\n        <td><c:out value=\"${order.product.name}\" /></td>\n        <td><c:out value=\"${order.product.price}\" /></td>\n        <td><c:out value=\"${order.quantity}\" /></td>\n      <td><a href=\"${editUrl}\">Edit</a></td>\n      <td><a href=\"${deleteUrl}\">Delete</a></td>\n      <td><a href=\"${addUrl}\">Add</a></td>\n    </tr>\n  </c:forEach>\n  </tbody>\n```"]