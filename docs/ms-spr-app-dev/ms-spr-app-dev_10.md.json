["```java\n@Cacheable(value = \"product\")\npublic class ProductDAO {\n\n  public Product findProduct(String Name, int price) {\n\n    return new Product(Name,price);\n  }\n  public Product findAnotherProduct(String Name, int price) {\n\n     return new Product(Name,price);\n  }\n}\n```", "```java\npublic class ProductDAO {\n\n  public Product findProduct(String productName, int price) {\n\n    return new Product(productName,price);\n  }\n\n@Cacheable(value = \"product\" ,key=\"#productName\")\n  public Product findAnotherProduct(String productName, int price) {\n\n     return new Product(productName,price);\n  }\n}\n```", "```java\n@Cacheable(value = \"product\", condition = \"#price>1000\")\n  public Product findProductByPrice(String productName, int price) {\n\n    return new Product(String productName, int price);\n  }\n```", "```java\n@Transactional\n@CacheEvict(value=\"products\", key=\"#rating.producttId\")\npublic ItemRatingResponse addRatingForproduct(Rating rating, Integer currentNumberOfRatings, Float currentRating) {\n  return addRatingForItem(rating, currentNumberOfRatings, currentRating);\n}\n```", "```java\n@Caching(evict = {\n    @CacheEvict(value=\"referenceData\", allEntries=true),\n    @CacheEvict(value=\"product\", allEntries=true),\n    @CacheEvict(value=\"searchResults\", allEntries=true),\n    @CacheEvict(value=\"newestAndRecommendedproducts\", allEntries=true),\n    @CacheEvict(value=\"randomAndTopRatedproducts\", allEntries=true)\t    \n  })\npublic void flushAllCaches() {\n  LOG.warn(\"All caches have been completely flushed\");\n}\n```", "```java\n  <bean id=\"cacheManager\" class=\"org.springframework.cache.support.SimpleCacheManager\">\n    <property name=\"caches\">\n     <set>\n       <bean class=\"org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean\" p:name=\"task\" />\n     </set>\n    </property>\n       </bean>\n```", "```java\n  <groupId>net.sf.ehcache</groupId>\n  <artifactId>ehcache</artifactId>\n  <version>2.7.4</version>\n</dependency>\n```", "```java\n<ehcache \n  xsi:noNamespaceSchemaLocation=\"ehcache.xsd\" \n  updateCheck=\"true\" \n  monitoring=\"autodetect\" \n  dynamicConfig=\"true\"\n  maxBytesLocalHeap=\"150M\"\n  >\n  <diskStore path=\"java.io.tmpdir\"/>\n\n  <cache name=\"searchResults\"\n        maxBytesLocalHeap=\"100M\"\n        eternal=\"false\"\n        timeToIdleSeconds=\"300\"\n        overflowToDisk=\"true\"\n        maxElementsOnDisk=\"1000\"      \n        memoryStoreEvictionPolicy=\"LRU\"/>      \n\n  <cache name=\"Products\"\n        maxBytesLocalHeap=\"40M\"\n        eternal=\"false\"\n        timeToIdleSeconds=\"300\"\n        overflowToDisk=\"true\"\n        maxEntriesLocalDisk=\"1000\"\n        diskPersistent=\"false\"\n        diskExpiryThreadIntervalSeconds=\"120\"\n        memoryStoreEvictionPolicy=\"LRU\"/>       \n\n  <cache name=\"referenceData\"\n        maxBytesLocalHeap=\"5M\"\n        eternal=\"true\"\n        memoryStoreEvictionPolicy=\"LRU\">\n        <pinning store=\"localMemory\"/>\n  </cache>\n\n  <cache name=\"newestAndRecommendedProducts\"\n              maxBytesLocalHeap=\"3M\"\n        eternal=\"true\"\n        memoryStoreEvictionPolicy=\"LRU\">\n        <pinning store=\"localMemory\"/>\n  </cache>\n\n  <cache name=\"randomAndTopRatedProducts\"\n              maxBytesLocalHeap=\"1M\"\n        timeToLiveSeconds=\"300\"\n        memoryStoreEvictionPolicy=\"LRU\">      \n   </cache> \n\n</ehcache>\n```", "```java\n<beans  \n\nxsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\nhttp://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd\">\n<cache:annotation-driven />\n//your beans\n</beans>\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans \n\nxsi:schemaLocation=\"\n http://www.springframework.org/schema/beans\n http://www.springframework.org/schema/beans/spring-beans.xsd\nhttp://www.springframework.org/schema/cache\nhttp://www.springframework.org/schema/cache/spring-cache.xsd\nhttp://www.springframework.org/schema/context\nhttp://www.springframework.org/schema/context/spring-context.xsd\">\n<!-- Scans within the base package of the application for @Components to configure as beans -->\n<context:component-scan base-package=\"com\" />\n<!-- Process cache annotations -->\n<cache:annotation-driven />\n\n<!-- Configuration for using Ehcache as the cache manager-->\n<bean id=\"cacheManager\" p:cache-manager-ref=\"ehcache\"/>\n<bean id=\"ehcache\" p:config-location=\"classpath:ehcache.xml\"/>\n<bean id=\"author\" class=\"com.packt.model.Author\"/>\n</beans>\n```", "```java\n<ehcache>\n<diskStore path=\"java.io.tmpdir\"/>\n<cache name=\"authorCache\"\nmaxElementsInMemory=\"10000\"\neternal=\"false\"\ntimeToIdleSeconds=\"120\"\ntimeToLiveSeconds=\"120\"\noverflowToDisk=\"true\"\nmaxElementsOnDisk=\"10000000\"\ndiskPersistent=\"false\"\ndiskExpiryThreadIntervalSeconds=\"120\"\nmemoryStoreEvictionPolicy=\"LRU\"/>\n</ehcache>\n```", "```java\npackage com.packt.model;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.cache.annotation.Cacheable;\n\npublic class Author {\n Logger logger = LoggerFactory.getLogger(getClass());\n @Cacheable(value=\"authorCache\", key = \"#id\")\npublic String getAuthor(Integer id){\nlogger.info(\"get author called\");\nreturn \"author\"+id;\n}\n}\n```", "```java\npackage com.packt.web;\nimport java.util.HashMap;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport com.packt.model.Author;\n@Controller\npublic class WebController {\n\n@Autowired\nAuthor author;\n@RequestMapping(\"/index.htm\")\npublic String authorPage(@RequestParam(required= false) Integer id, HashMap<String, String> map){\nmap.put(\"message\", author.getAuthor(id));\nreturn \"index\";\n}\n}\n```", "```java\n<%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\"\npageEncoding=\"ISO-8859-1\"%>\n\n<%@taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<title>Cache Example</title>\n</head>\n<body>\n<h1>This is ${message }</h1>\n</body>\n</html>\n```", "```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class FibonacciCache {\n  private Map<Long, Long> cachemap = new HashMap<>();\n  public FibonacciCache() {\n    // The base case for the Fibonacci Sequence\n    cachemap.put(0L, 1L);\n    cachemap.put(1L, 1L);\n  }\n  public Long getNumber(long index) {\n    // Check if value is in cache\n    if (cachemap.containsKey(index)) {\n     return cachemap.get(index);\n    }\n\n    // Compute value and save it in cache\n    long value = getNumber(index - 1) + getNumber(index - 2);\n    cachemap.put(index, value);\n    return value;\n  }\n}\n```", "```java\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class FibonacciConncurentCache {\n  private Map<Long, Long> concurrent_cachemap = new ConcurrentHashMap<>();\n  public FibonacciCache() {\n    // The base case for the Fibonacci Sequence\n   concurrent_cachemap.put(0L, 1L);\n    concurrent_cachemap.put(1L, 1L);\n  }\n  public Long getNumber(long index) {\n    // Check if value is in cache\n    if (concurrent_cachemap.containsKey(index)) {\n      return concurrent_cachemap.get(index);\n    }\n    // Compute value and save it in concurrent_cachemap\n    long value = getNumber(index - 1) + getNumber(index - 2);\n    concurrent_cachemap.put(index, value);\n    return value; }}\n```", "```java\n    import java.util.concurrent.Callable;\n    import java.util.concurrent.ConcurrentHashMap;\n    import java.util.concurrent.ConcurrentMap;\n    import java.util.concurrent.ExecutionException;\n    import java.util.concurrent.Future;\n    import java.util.concurrent.FutureTask;\n\n    public class MyCache<K, V> {\n\n      private final ConcurrentMap<K, Future<V>> cache = new ConcurrentHashMap<>();\n\n      private Future<V> createFutureIfAbsent(final K key, final Callable<V> callable) {\n        Future<V> future = cache.get(key);\n        if (future == null) {\n          final FutureTask<V> futureTask = new FutureTask<V>(callable);\n          future = cache.putIfAbsent(key, futureTask);\n          if (future == null) {\n            future = futureTask;\n            futureTask.run();\n          }\n        }\n        return future;\n      }\n\n      public V getValue(final K key, final Callable<V> callable) throws InterruptedException, ExecutionException {\n        try {\n          final Future<V> future = createFutureIfAbsent(key, callable);\n          return future.get();\n        } catch (final InterruptedException e) {\n          cache.remove(key);\n          throw e;\n        } catch (final ExecutionException e) {\n          cache.remove(key);\n          throw e;\n        } catch (final RuntimeException e) {\n          cache.remove(key);\n          throw e;\n        }\n      }\n      public void setValueIfAbsent(final K key, final V value) {\n        createFutureIfAbsent(key, new Callable<V>() {\n          @Override\n          public V call() throws Exception {\n            return value;\n          } }); \n    }}\n    ```", "```java\n    import java.util.concurrent.Callable;\n    import org.slf4j.Logger;\n    import org.slf4j.LoggerFactory;\n\n    public class MyFibonacci {\n\n      private static final Logger LOGGER = LoggerFactory.getLogger(MyFibonacci.class);\n\n      public static void main(final String[] args) throws Exception {\n        final long index = 12;\n        final MyFibonacci myfibi = new MyFibonacci();\n        final long fn = myfibi.getNumber(index);\n        MyFibonacci.LOGGER.debug(\"The {}th Fibonacci number is: {}\", index, fn);\n      }\n\n      private final MyCache<Long, Long> cache = new MyCache<>();\n\n      public MyFibonacci() {\n        cache.setValueIfAbsent(0L, 1L);\n        cache.setValueIfAbsent(1L, 1L);\n      }\n\n      public long getNumber(final long index) throws Exception {\n        return cache.getValue(index, new Callable<Long>() {\n          @Override\n          public Long call() throws Exception {\n            MyFibonacci.LOGGER.debug(\"Computing the {} MyFibonacci number\", index);\n            return getNumber(index - 1) + getNumber(index - 2);\n          }\n        });\n      }\n    }\n    ```", "```java\nimport java.util.concurrent.Callable;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.util.StopWatch;\n\npublic class LongRunningTaskExample {\n\n  private static final Logger LOGGER = \n  public static void main(final String[] args) throws Exception {\n    final LongRunningTaskExample task = new LongRunningTaskExample();\n\n    final StopWatch stopWatch = new StopWatch(\" Long Running Task\");\n    stopWatch.start(\"First Run\");\n    task.computeLongTask(\"a\");\n    stopWatch.stop();\n\n    stopWatch.start(\"Other Runs\");\n    for (int i = 0; i < 100; i++) {\n      task.computeLongTask(\"a\");\n    }\n    stopWatch.stop();\n\n    LongRunningTaskExample.LOGGER.debug(\"{}\", stopWatch);\n  }\n\n  private final MyCache<String, Long> cache = new MyCache<>();\n\n  public long computeLongTask(final String key) throws Exception {\n    return cache.getValue(key, new Callable<Long>() {\n      @Override\n      public Long call() throws Exception {\n        FictitiousLongRunningTask.LOGGER.debug(\"Computing  Long Running Task: {}\", key);\n        Thread.sleep(10000); // 10 seconds\n        return System.currentTimeMillis();\n      }\n    });\n  }\n}\n```", "```java\n[main] DEBUG LongRunningTask.java:36 - Computing  Long Running Task: a\n[main] DEBUG LongRunningTask.java:27 - StopWatch ' Long Running Task': running time (millis) = 10006; [First Run] took 10005 = 100%; [Other Runs] took 1 = 0%\n\n```", "```java\nImport org.springframework.context.support.ClassPathXmlApplicationContext;\npublic class Main {\n  public static void main(final String[] args) {\n    final String xmlFile = \"META-INF/spring/app-context.xml\";\n    try (ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(xmlFile)) {\n      final Worker worker = context.getBean(Worker.class);\n      worker.longTask(1);\n      worker.longTask(1);\n      worker.longTask(1);\n      worker.longTask(2);\n      worker.longTask(2);\n    }\n  }\n\nimport org.springframework.stereotype.Component;\n@Component\npublic class Worker {\n  public String longTask(final long id) {\n    System.out.printf(\"Running long task for id: %d...%n\", id);\n    return \"Long task for id \" + id + \" is done\";\n  }\n  public String shortTask(final long id) {\n    System.out.printf(\"Running short task for id: %d...%n\", id);\n    return \"Short task for id \" + id + \" is done\";\n  }\n}\n```", "```java\nimport org.springframework.stereotype.Component;\n@Component\npublic class Worker {\n@Cacheable(\"task\")\n  public String longTask(final long id) {\n    System.out.printf(\"Running long task for id: %d...%n\", id);\n    return \"Long task for id \" + id + \" is done\";\n  }\n  public String shortTask(final long id) {\n    System.out.printf(\"Running short task for id: %d...%n\", id);\n    return \"Short task for id \" + id + \" is done\";\n  }\n}\n```"]