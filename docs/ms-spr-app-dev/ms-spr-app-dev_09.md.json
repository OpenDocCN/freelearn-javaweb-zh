["```java\nbuildscript {\n  repositories {\n    maven { url \"http://repo.spring.io/libs-milestone\" }\n    mavenLocal()\n  }\n  dependencies {\n    classpath(\"org.springframework.boot:spring-boot-gradle-plugin:1.1.3.RELEASE\")\n  }\n}\n\n  apply plugin: 'java'\n  apply plugin: 'war'\n  apply plugin: 'spring-boot'\n  jar {\n    baseName = PacktSpringBootMVCDemo '\n    version =  '1.0'\n  }\n  repositories {\n    mavenCentral()\n    maven { url \"http://repo.spring.io/libs-milestone\" }\n  }\n\n  configurations {\n    providedRuntime\n  }\n  dependencies {\n    compile (\"org.springframework.boot:spring-boot-starter-web\")\n    providedRuntime(\"org.apache.tomcat.embed:tomcat-embed-jasper\")\n\n  }\n  task wrapper(type: Wrapper) {\n    gradleVersion = '2.0'\n  }\n```", "```java\nserver.contextPath=/PacktSpringBootMVCDemo\nserver.port=8080\n```", "```java\n    package com.packt.controller;\n    import org.springframework.stereotype.Controller;\n    import org.springframework.web.bind.annotation.RequestMapping;\n    import org.springframework.web.bind.annotation.RequestMethod;\n    import org.springframework.web.servlet.ModelAndView;\n    @Controller\n    public class PacktController{\n      @RequestMapping(value = \"/saygoodmorning  method = RequestMethod.GET)\n      public ModelAndView getGoodmorning() {\n        return new ModelAndView(\"greet\").addObject(\"greet\", \"goodmorning\");\n      }\n      @RequestMapping(value = \"/saygoodafternoon  method = RequestMethod.GET)\n      public ModelAndView getGoodmorning() {\n        return new ModelAndView(\"greet\").addObject(\"greet \", \"goodafternoon\");\n      }\n      @RequestMapping(value = \"/saygoodnight  method = RequestMethod.GET)\n      public ModelAndView getGoodmorning() {\n        return new ModelAndView(\"greet\").addObject(\"greet \", \"goodnight\");\n      }\n    }\n    ```", "```java\n    package com.packt.config;\n    import org.springframework.context.annotation.Bean;\n    import org.springframework.context.annotation.Configuration;\n    import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;\n    import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n    import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n    import org.springframework.web.servlet.view.InternalResourceViewResolver;\n\n    @Configuration\n    @EnableWebMvc\n    public class ApplicationConfigurerAdapter extends WebMvcConfigurerAdapter{\n      @Override\n      public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {\n        configurer.enable();\n      }\n\n      @Bean\n      public InternalResourceViewResolver viewResolver() {\n        InternalResourceViewResolver resolver = new InternalResourceViewResolver();\n        resolver.setPrefix(\"WEB-INF/jsp/\");\n        resolver.setSuffix(\".jsp\");\n        return resolver;\n      }\n\n    }\n    ```", "```java\n<html>\n  <head><title>Hello world Example</title></head>\n  <body>\n    <h1>Hello ${name}, How are you?</h1>\n  </body>\n</html>\n```", "```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@EnableAutoConfiguration\n@ComponentScan\npublic class Application {\n  public static void main(String[] args) {\n    SpringApplication.run(Application.class, args);\n  }\n\n}\n```", "```java\n    <dependency>\n        <groupId>org.apache.tomcat.embed</groupId>\n        <artifactId>tomcat-embed-jasper</artifactId>\n        <scope>provided</scope>\n    </dependency>\n    <dependency>\n        <groupId>javax.servlet</groupId>\n        <artifactId>jstl</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-actuator</artifactId>\n    </dependency>\n    ```", "```java\n        - javaagent:/<provide the path to the jar>/springloaded-1.2.0.RELEASE.jar -noverify\n        ```", "```java\nspring.thymeleaf.cache: false.\n```", "```java\n@ComponentScan\n@EnableAutoConfiguration\npublic class Application {\n  public static void main(String[] args) {\n    ApplicationContext ctx = SpringApplication.run(Application.class, args);\n    System.out.println(\"---------------------------LIST BEANS PROVIDED BY SPRING BOOT_---------------------\");\n    String[] beanNames = ctx.getBeanDefinitionNames();\n    Arrays.sort(beanNames);\n    for (String beanName : beanNames) {\n      System.out.println(beanName);\n    }\n\n  }\n}\n```", "```java\n---------------------------LIST BEANS PROVIDED BY SPRING BOOT_---------------------\nJSPController\napplication\napplicationContextIdFilter\nauditEventRepository\nauditListener\nautoConfigurationAuditEndpoint\nbasicErrorController\nbeanNameHandlerMapping\nbeanNameViewResolver\n....\nmappingJackson2HttpMessageConverter\nmessageConverters\nmessageSource\ntomcatEmbeddedServletContainerFactory\ntraceEndpoint\ntraceRepository\nviewControllerHandlerMapping\nviewResolver\nwebRequestLoggingFilter\n```", "```java\n@Configuration\n@EnableAutoConfiguration\npublic class MyPacktApplication {\n\n  // ... Bean definitions\n\n  public static void main(String[] args) throws Exception {\n    SpringApplication.run(MyPacktApplication.class, args);\n  }\n```", "```java\n@Configuration\n@EnableAutoConfiguration\npublic class MyPacktApplication {\n  // ... Bean definitions\n  public static void main(String[] args) throws Exception {\n    SpringApplication app = new SpringApplication(MyPacktApplication.class);\n    // ... customize app settings here\n    app.run(args)\n  }\n}\n```", "```java\n    @RestController\n    public class MyPacktController {\n\n      @RequestMapping(\"/\")\n      public String index() {\n        return \"Greetings \";\n      }\n\n      @RequestMapping(\"/greetjsontest\") \n      public @ResponseBody Map<String, String> callSomething () {\n\n        Map<String, String> map = new HashMap<String, String>();\n        map.put(\"afternoon\", \" Good afternoon\");\n        map.put(\"morning\", \" Good Morning\");\n        map.put(\"night\", \" Good Night\");\n        return map;\n      }\n    }\n    ```", "```java\n    @Controller\n    public class SpringBootJSPController {\n      @RequestMapping(\"/calljsp\")\n      public String test(ModelAndView modelAndView) {\n\n        return \"myjsp\";\n      }\n    }\n    ```", "```java\n    spring.view.prefix: /WEB-INF/jsp/\n    spring.view.suffix: .jsp\n    ```", "```java\n    <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n    <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n    <html>\n      <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n        <title>Insert title here</title>\n      </head>\n      <body>\n        <h1>Hello world</h1>\n      </body>\n    </html>\n    ```", "```java\n@ComponentScan\n@EnableAutoConfiguration\n\npublic class Application implements EmbeddedServletContainerCustomizer {\n  @Value(\"${someproperty:webapp/whereever }\")\n  private String documentRoot;\n  @Override\n  public void customize(ConfigurableEmbeddedServletContainerFactory factory) {\n    factory.setDocumentRoot(new File(documentRoot));\n  }\n}\n```", "```java\n    @Bean\n    EmbeddedServletContainerCustomizer containerCustomizer (\n      @Value(\"${https.port}\") final int port, \n      @Value(\"${keystore.file}\") Resource keystoreFile,\n      @Value(\"${keystore.alias}\") final String alias, \n      @Value(\"${keystore.password}\") final String keystorePass,\n      @Value(\"${keystore.type}\") final String keystoreType) throws Exception {\n        final String absoluteKeystoreFile = keystoreFile.getFile().getAbsolutePath();\n        return new EmbeddedServletContainerCustomizer() {\n          public void customize(ConfigurableEmbeddedServletContainer container) {\n            TomcatEmbeddedServletContainerFactory tomcat = (TomcatEmbeddedServletContainerFactory) container;\n            tomcat.addConnectorCustomizers(new TomcatConnectorCustomizer() {\n              public void customize(Connector connector) {\n                connector.setPort(port);\n                connector.setSecure(true);\n                connector.setScheme(\"https\");\n                Http11NioProtocol proto = (Http11NioProtocol) connector.getProtocolHandler();\n                proto.setSSLEnabled(true);\n                proto.setKeystoreFile(absoluteKeystoreFile);\n                proto.setKeyAlias(alias);\n                proto.setKeystorePass(keystorePass);\n                proto.setKeystoreType(keystoreType);\n              }\n            });\n          }\n        };\n      }\n    ```", "```java\n    @Configuration\n    @EnableWebMvcSecurity\n    public class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n      @Value(\"${ldap.domain}\")\n      private String DOMAIN;\n\n      @Value(\"${ldap.url}\")\n      private String URL;\n\n      @Value(\"${http.port}\")\n      private int httpPort;\n\n      @Value(\"${https.port}\")\n      private int httpsPort;\n\n      @Override\n      protected void configure(HttpSecurity http) throws Exception {\n        /*\n        * Set up your spring security config here. For example...\n        */\n        http.authorizeRequests().anyRequest().authenticated().and().formLogin().loginUrl(\"/login\").permitAll();\n          /*\n          * Use HTTPs for ALL requests\n          */\n          http.requiresChannel().anyRequest().requiresSecure();\n          http.portMapper().http(httpPort).mapsTo(httpsPort);\n        }\n\n        @Override\n        protected void configure(AuthenticationManagerBuilder authManagerBuilder) throws Exception {\n        authManagerBuilder.authenticationProvider(activeDirectoryLdapAuthenticationProvider()).userDetailsService(userDetailsService());\n        }\n\n        @Bean\n        public AuthenticationManager authenticationManager() {\n          return new ProviderManager(Arrays.asList(activeDirectoryLdapAuthenticationProvider()));\n        }\n        @Bean\n        public AuthenticationProvider activeDirectoryLdapAuthenticationProvider() {\n          ActiveDirectoryLdapAuthenticationProvider provider = new ActiveDirectoryLdapAuthenticationProvider(DOMAIN, URL);\n            provider.setConvertSubErrorCodesToExceptions(true);\n            provider.setUseAuthenticationRequestCredentials(true);\n            return provider;\n        }\n      }\n    ```", "```java\n<project  \n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>com.packt.restfulApp</groupId>\n  <artifactId>restfulSpringBootApp</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <packaging>jar</packaging>\n\n  <parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.0.1.RELEASE</version>\n  </parent>\n\n  <name>Example Spring Boot REST Service</name>\n\n  <properties>\n    <java.version>1.7</java.version>\n    <guava.version>16.0.1</guava.version>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n  </properties>\n\n</project>\n```", "```java\n<dependencies>\n  <!-- Spring Boot -->\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-test</artifactId>\n    <scope>test</scope>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\n  </dependency>\n\n  <!-- Hibernate validator -->\n\n  <dependency>\n    <groupId>org.hibernate</groupId>\n    <artifactId>hibernate-validator</artifactId>\n  </dependency>\n\n  <!-- HSQLDB -->\n\n  <dependency>\n    <groupId>org.hsqldb</groupId>\n    <artifactId>hsqldb</artifactId>\n    <scope>runtime</scope>\n  </dependency>\n\n  <!-- Guava -->\n\n  <dependency>\n    <groupId>com.google.guava</groupId>\n    <artifactId>guava</artifactId>\n    <version>${guava.version}</version>\n  </dependency>\n\n  <!-- Java EE -->\n\n  <dependency>\n    <groupId>javax.inject</groupId>\n    <artifactId>javax.inject</artifactId>\n    <version>1</version>\n  </dependency>\n</dependencies>\n```", "```java\n    <build>\n      <plugins>\n\n      <!-- Spring Boot Maven -->\n\n        <plugin>\n          <groupId>org.springframework.boot</groupId>\n          <artifactId>spring-boot-maven-plugin</artifactId>\n        </plugin>\n\n      </plugins>\n    </build>\n    ```", "```java\n    @Entity\n    public class Product {\n      @Id\n      @Column(name = \"id\", nullable = false, updatable = false)\n      @NotNull \n      private Long product_id;\n      @Column(name = \"password\", nullable = false)\n      @NotNull\n      @Size(max = 64)\n      private String product_name;\n\n      public Action(Long product_id, String product_name) {\n\n        this. produc_id = product_id;\n        this. produc_name = produc_name;\n      }\n    ```", "```java\n    public interface ProductRepository extends JpaRepository<Product, String>{\n\n    }\n    ```", "```java\n    public interface ProductService {\n\n      Product save(Product product);\n\n    }\n    ```", "```java\n    @Service\n    public class ProductServiceImpl implements ProductService {\n\n      private final ProductRepository repository;\n\n      @Inject\n      public ProductServiceImpl(final ProductRepository repository) {\n        this.repository = repository;\n      }\n\n      @Override\n      @Transactional\n      public Product save(final Product product) {\n        Product existing = repository.findOne(Product.getId());\n        if (existing != null) {\n          throw new ProductAlreadyExistsException(\n            String.format(\"There already exists a Product with id=%s\", product.getId()));\n        }\n        return repository.save(product);\n      }\n    ```", "```java\n    @RunWith(MockitoJUnitRunner.class)\n    public class ProductControllerTest {\n\n      @Mock\n      private ProductService ProductService;\n\n      private ProductController ProductController;\n\n      @Before\n      public void setUp() {\n        ProductController = new ProductController(ProductService);\n      }\n\n      @Test\n      public void shouldCreateProduct() throws Exception {\n        final Product savedProduct = stubServiceToReturnStoredProduct();\n        final Product Product = new Product();\n        Product returnedProduct = ProductController.createProduct(Product);\n        // verify Product was passed to ProductService\n        verify(ProductService, times(1)).save(Product);\n        assertEquals(\"Returned Product should come from the service\", savedProduct, returnedProduct);\n      }\n\n      private Product stubServiceToReturnStoredProduct() {\n        final Product Product = new Product();\n        when(ProductService.save(any(Product.class))).thenReturn(Product);\n        return Product;\n      }\n    ```", "```java\n        @RestsController\n        public class ProductController {\n          private final ProductService ProductService;\n          @Inject\n          public ProductController(final ProductService ProductService) {\n            this.ProductService = ProductService;\n          }\n          @RequestMapping(value = \"/Product\", method = RequestMethod.POST)\n          public Product createProduct(@RequestBody @Valid final Product Product) {\n            return ProductService.save(Product);\n          }\n        }\n        ```", "```java\n    @Configuration\n    @EnableAutoConfiguration\n    @ComponentScan\n    public class Application extends SpringBootServletInitializer {\n\n      public static void main(final String[] args) {\n        SpringApplication.run(Application.class, args);\n      }\n\n      @Override\n      protected final SpringApplicationBuilder configure(final SpringApplicationBuilder application) {\n        return application.sources(Application.class);\n      }\n    }\n    ```", "```java\n    mvn package\n    java -jar target/restfulSpringBootApp.jar\n    ```", "```java\n    curl -X POST -d '{ \"id\": \"45\", \"password\": \"samsung\" }' http://localhost:8080/Product\n    ```", "```java\n    { \"id\": \"45\", \"password\": \"samsung\" }\n    ```"]