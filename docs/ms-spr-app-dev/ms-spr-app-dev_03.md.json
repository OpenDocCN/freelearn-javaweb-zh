["```java\n    mail.protocol=smtp\n    mail.host=localhost\n    mail.port=25\n    mail.smtp.auth=false\n    mail.smtp.starttls.enable=false\n    mail.from=me@localhost\n    mail.username=\n    mail.password=\n\n    @Configuration\n    @PropertySource(\"classpath:mail.properties\")\n    public class MailConfiguration {\n      @Value(\"${mail.protocol}\")\n      private String protocol;\n      @Value(\"${mail.host}\")\n      private String host;\n      @Value(\"${mail.port}\")\n      private int port;\n      @Value(\"${mail.smtp.auth}\")\n      private boolean auth;\n      @Value(\"${mail.smtp.starttls.enable}\")\n      private boolean starttls;\n      @Value(\"${mail.from}\")\n      private String from;\n      @Value(\"${mail.username}\")\n      private String username;\n      @Value(\"${mail.password}\")\n      private String password;\n\n      @Bean\n      public JavaMailSender javaMailSender() {\n        JavaMailSenderImpl mailSender = new JavaMailSenderImpl();\n        Properties mailProperties = new Properties();\n        mailProperties.put(\"mail.smtp.auth\", auth);\n        mailProperties.put(\"mail.smtp.starttls.enable\", starttls);\n        mailSender.setJavaMailProperties(mailProperties);\n        mailSender.setHost(host);\n        mailSender.setPort(port);\n        mailSender.setProtocol(protocol);\n        mailSender.setUsername(username);\n        mailSender.setPassword(password);\n        return mailSender;\n      }\n    }\n    ```", "```java\n    @RestController\n    class MailSendingController {\n      private final JavaMailSender javaMailSender;\n      @Autowired\n      MailSubmissionController(JavaMailSender javaMailSender) {\n        this.javaMailSender = javaMailSender;\n      }\n      @RequestMapping(\"/mail\")\n      @ResponseStatus(HttpStatus.CREATED)\n      SimpleMailMessage send() { \n        SimpleMailMessage mailMessage = new SimpleMailMessage();\n        mailMessage.setTo(\"packt@localhost\");\n        mailMessage.setReplyTo(\"anjana@localhost\");\n        mailMessage.setFrom(\"Sonali@localhost\");\n        mailMessage.setSubject(\"Vani veena Pani\");\n        mailMessage.setText(\"MuthuLakshmi how are you?Call Me Please [...]\");\n        javaMailSender.send(mailMessage);\n        return mailMessage;\n      }\n    }\n    ```", "```java\n    <dependency>\n      <groupId>org.springframework.integration</groupId>\n      <artifactId>spring-integration-mail</artifactId>\n      <version>3.0.2.RELEASE</version>\n      <scope>runtime</scope>\n    </dependency>\n    <dependency>\n      <groupId>javax.activation</groupId>\n      <artifactId>activation</artifactId>\n      <version>1.1-rev-1</version>\n      <scope>runtime</scope>\n    </dependency>\n    <dependency>\n      <groupId>javax.mail</groupId>\n      <artifactId>mail</artifactId>\n      <version>1.4.3</version>\n    </dependency>\n\n    ```", "```java\n    public class MailSenderService {\n      @Autowired\n      private MailSender mailSender;\n      @AutoWired \n      private SimpleMailMessage simplemailmessage;\n      public void sendmail(String from, String to, String subject, String body){\n        /*Code */\n      }\n\n    }\n    ```", "```java\n    public void sendmail(String from, String to, String subject, String body){\n      SimpleMailMessage message=new SimpleMailMessage();\n      message.setFrom(from);\n      message.setSubject(subject);\n      message.setText(body);\n      mailSender.send(message);\n    }\n    ```", "```java\n    <bean id=\"mailSender\" class=\"org.springframework.mail.javamail.JavaMailSenderImpl\">\n      <property name=\"host\" value=\"smtp.gmail.com\" />\n      <property name=\"port\" value=\"587\" />\n      <property name=\"username\" value=\"username\" />\n      <property name=\"password\" value=\"password\" />\n\n      <property name=\"javaMailProperties\">\n      <props>\n        <prop key=\"mail.smtp.auth\">true</prop>\n        <prop key=\"mail.smtp.starttls.enable\">true</prop>\n      </props>\n    </property>\n    </bean>\n\n    <bean id=\"mailSenderService\" class=\" com.packt.mailserviceMailSenderService \">\n      <property name=\"mailSender\" ref=\"mailSender\" />\n    </bean>\n\n    </beans>\n    ```", "```java\n    @RequestMapping(value = \"/order/save\", method = RequestMethod.POST)\n      // request insert order recordh\n      public String addorder(@ModelAttribute(\"Order\") Order order,Map<String, Object> model) {\n        Customer cust=new Customer();\n        cust=customer_respository.getObject(order.getCustomer().getCust_id());\n\n        order.setCustomer(cust);\n        order.setProduct(product_respository.getObject(order.getProduct().getProdid()));\n        respository.saveObject(order);\n        mailSenderService.sendmail(\"anjana.mprasad@gmail.com\",cust.getEmail(),\n          \"Dear\"+cust.getName()+\"Your order details\",order.getProduct().getName()+\"-price-\"+order.getProduct().getPrice());\n        model.put(\"customerList\", customerList);\n        model.put(\"productList\", productList);\n        return \"order\";\n      }\n    ```", "```java\npublic class MailSenderService {\n  @Autowired\n  private MailSender mailSender;\n  @AutoWired \n  private SimpleMailMessage simplemailmessage;\n  public void sendmail(String from, String to, String subject, String body){\n    /*Code */\n  }\n\n  public void sendmail(String from, String []to, String subject, String body){\n    /*Code */\n  }\n\n}\n```", "```java\n  public List<Customer> getAllObjectsby_emailsubscription(String status) {\n    return mongoTemplate.find(query(where(\"email_subscribe\").is(\"yes\")), Customer.class);\n  }\n```", "```java\npublic class MailSenderService {\n  @Autowired\n  private MailSender mailSender;\n  @AutoWired \n  private SimpleMailMessage simplemailmessage;\n\n  public void sendmail(String from, String to, String subject, String body){\n    /*Code */\n  }\n  public void sendmail(String from, String []to, String subject, String body){\n    /*Code */\n  }\n  public void sendmime_mail(final String from, final String to, final String subject, final String body) throws MailException{\n    MimeMessagePreparator message = new MimeMessagePreparator() {\n      public void prepare(MimeMessage mimeMessage) throws Exception {\n        mimeMessage.setRecipient(Message.RecipientType.TO,new InternetAddress(to));\n        mimeMessage.setFrom(new InternetAddress(from));\n        mimeMessage.setSubject(subject);\n        mimeMessage.setText(msg);\n    }\n  };\n  mailSender.send(message);\n}\n```", "```java\npublic class SendMailwithAttachment {\n  public static void main(String[] args) throws MessagingException {\n    AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n    ctx.register(AppConfig.class);\n    ctx.refresh();\n    JavaMailSenderImpl mailSender = ctx.getBean(JavaMailSenderImpl.class);\n    MimeMessage mimeMessage = mailSender.createMimeMessage();\n    //Pass true flag for multipart message\n    MimeMessageHelper mailMsg = new MimeMessageHelper(mimeMessage, true);\n    mailMsg.setFrom(\"ANJUANJU02@gmail.com\");\n    mailMsg.setTo(\"RAGHY03@gmail.com\");\n    mailMsg.setSubject(\"Test mail with Attachment\");\n    mailMsg.setText(\"Please find Attachment.\");\n    //FileSystemResource object for Attachment\n    FileSystemResource file = new FileSystemResource(new File(\"D:/cp/ GODGOD. jpg\"));\n    mailMsg.addAttachment(\"GODGOD.jpg\", file);\n    mailSender.send(mimeMessage);\n    System.out.println(\"---Done---\");\n  }\n\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\nhttp://www.springframework.org/schema/beans/spring-beans-3.0.xsd\nhttp://www.springframework.org/schema/context\nhttp://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n<context:component-scan base-package=\"com.packt\" />\n<!-- SET default mail properties -->\n<bean id=\"mailSender\" class=\"org.springframework.mail.javamail.JavaMailSenderImpl\">\n  <property name=\"host\" value=\"smtp.gmail.com\"/>\n  <property name=\"port\" value=\"25\"/>\n  <property name=\"username\" value=\"anju@gmail.com\"/>\n  <property name=\"password\" value=\"password\"/>\n  <property name=\"javaMailProperties\">\n  <props>\n    <prop key=\"mail.transport.protocol\">smtp</prop>\n    <prop key=\"mail.smtp.auth\">true</prop>\n    <prop key=\"mail.smtp.starttls.enable\">true</prop>\n    <prop key=\"mail.debug\">true</prop>\n  </props>\n  </property>\n</bean>\n\n<!-- You can have some pre-configured messagess also which are ready to send -->\n<bean id=\"preConfiguredMessage\" class=\"org.springframework.mail.SimpleMailMessage\">\n  <property name=\"to\" value=\"packt@gmail.com\"></property>\n  <property name=\"from\" value=\"anju@gmail.com\"></property>\n  <property name=\"subject\" value=\"FATAL ERROR- APPLICATION AUTO MAINTENANCE STARTED-BUILD FAILED!!\"/>\n</bean>\n</beans>\n```", "```java\npublic class MyMailer {\n  public static void main(String[] args){\n    try{\n      //Create the application context\n      ApplicationContext context = new FileSystemXmlApplicationContext(\"application-context.xml\");\n        //Get the mailer instance\n      ApplicationMailer mailer = (ApplicationMailer) context.getBean(\"mailService\");\n      //Send a composed mail\n      mailer.sendMail(\"nikhil@gmail.com\", \"Test Subject\", \"Testing body\");\n    }catch(Exception e){\n      //Send a pre-configured mail\n      mailer.sendPreConfiguredMail(\"build failed exception occured check console or logs\"+e.getMessage());\n    }\n  }\n}\n```", "```java\n<bean id=\"velocityEngine\" class=\"org.springframework.ui.velocity.VelocityEngineFactoryBean\">\n  <property name=\"velocityProperties\">\n  <value>\n    resource.loader=class    class.resource.loader.class=org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader\n  </value>\n  </property>\n</bean>\n```", "```java\n    <html>\n    <body>\n    <h3> Dear Customer,<h3>\n    <p>${customer.firstName} ${customer.lastName}</p>\n    <p>We have dispatched your order at address.</p>\n    ${Customer.address}\n    </body>\n    </html>\n    ```", "```java\n    <dependency>\n      <groupId>org.apache.velocity</groupId>\n      <artifactId>velocity</artifactId>\n      <version>1.7</version>\n    </dependency>\n    ```", "```java\n    import java.io.IOException;\n    import java.util.Properties;\n\n    import org.apache.velocity.app.VelocityEngine;\n    import org.apache.velocity.exception.VelocityException;\n    import org.springframework.context.annotation.Bean;\n    import org.springframework.context.annotation.Configuration;\n    import org.springframework.ui.velocity.VelocityEngineFactory;\n    @Configuration\n    public class VelocityConfiguration {\n      @Bean\n      public VelocityEngine getVelocityEngine() \n      throws VelocityException, IOException{\n        VelocityEngineFactory velocityEngineFactory = new VelocityEngineFactory();\n        Properties props = new Properties();\n        props.put(\"resource.loader\", \"class\");\n        props.put(\"class.resource.loader.class\", \"org.apache.velocity.runtime.resource.loader.\" + \"ClasspathResourceLoader\");\n        velocityEngineFactory.setVelocityProperties(props);\n        return factory.createVelocityEngine();\n      }\n    }\n    ```", "```java\n    public void sendmail(final Customer customer){\n      MimeMessagePreparator preparator = new MimeMessagePreparator() {\n        public void prepare(MimeMessage mimeMessage) \n        throws Exception {\n          MimeMessageHelper message = new MimeMessageHelper(mimeMessage);\n          message.setTo(user.getEmailAddress());\n          message.setFrom(\"webmaster@packt.com\"); // could be parameterized\n          Map model = new HashMap();\n          model.put(\"customer\", customer);\n          String text = VelocityEngineUtils.mergeTemplateIntoString(velocityEngine, \"com/packt/velocity/templates/orderconfirmation.vm\", model);\n          message.setText(text, true);\n        }\n      };\n      this.mailSender.send(preparator);\n    }\n    ```", "```java\n    @RequestMapping(value = \"/order/save\", method = RequestMethod.POST)\n    // request insert order recordh\n    public String addorder(@ModelAttribute(\"Order\") Order order,Map<String, Object> model) {\n      Customer cust=new Customer();\n      cust=customer_respository.getObject(order.getCustomer().getCust_id());\n\n      order.setCustomer(cust);\n      order.setProduct(product_respository.getObject(order.getProduct().getProdid()));\n      respository.saveObject(order);\n      // to send mail using velocity template.\n      mailSenderService.sendmail(cust);\n\n      return \"order\";\n    }\n    ```", "```java\n    public class MailSenderAsyncService implements MailSender{\n      @Resource(name = \"mailSender\")\n      private MailSender mailSender;\n\n      private TaskExecutor taskExecutor;\n\n      @Autowired\n      public MailSenderAsyncService(TaskExecutor taskExecutor){\n        this.taskExecutor = taskExecutor;\n      }\n      public void send(SimpleMailMessage simpleMessage) throws MailException {\n        taskExecutor.execute(new MailRunnable(simpleMessage));\n      }\n\n      public void send(SimpleMailMessage[] simpleMessages) throws MailException {\n        for (SimpleMailMessage message : simpleMessages) {\n          send(message);\n        }\n      }\n\n      private class SimpleMailMessageRunnable implements Runnable {\n        private SimpleMailMessage simpleMailMessage;\n        private SimpleMailMessageRunnable(SimpleMailMessage simpleMailMessage) {\n          this.simpleMailMessage = simpleMailMessage;\n        }\n\n        public void run() {\n        mailSender.send(simpleMailMessage);\n        }\n      }\n      private class SimpleMailMessagesRunnable implements Runnable {\n        private SimpleMailMessage[] simpleMessages;\n        private SimpleMailMessagesRunnable(SimpleMailMessage[] simpleMessages) {\n          this.simpleMessages = simpleMessages;\n        }\n\n        public void run() {\n          mailSender.send(simpleMessages);\n        }\n      }\n    }\n    ```", "```java\n    <bean id=\"taskExecutor\" class=\"org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor\" p:corePoolSize=\"5\"\n      p:maxPoolSize=\"10\" p:queueCapacity=\"100\" p:waitForTasksToCompleteOnShutdown=\"true\"/>\n    ```", "```java\n    import javax.annotation.Resource;\n\n    import org.springframework.mail.MailSender;\n    import org.springframework.mail.SimpleMailMessage;\n    import org.springframework.test.context.ContextConfiguration;\n\n    @ContextConfiguration\n    public class MailSenderAsyncService {\n      @Resource(name = \" mailSender \")\n      private MailSender mailSender;\n      public void testSendMails() throws Exception {\n        SimpleMailMessage[] mailMessages = new SimpleMailMessage[5];\n\n        for (int i = 0; i < mailMessages.length; i++) {\n          SimpleMailMessage message = new SimpleMailMessage();\n          message.setSubject(String.valueOf(i));\n          mailMessages[i] = message;\n        }\n        mailSender.send(mailMessages);\n      }\n      public static void main (String args[]){\n        MailSenderAsyncService asyncservice=new MailSenderAsyncService();\n        Asyncservice. testSendMails();\n      }\n    }\n    ```", "```java\n    public class MailAdvice {\n      public void advice (final ProceedingJoinPoint proceedingJoinPoint) {\n        new Thread(new Runnable() {\n        public void run() {\n          System.out.println(\"proceedingJoinPoint:\"+proceedingJoinPoint);\n          try {\n            proceedingJoinPoint.proceed();\n          } catch (Throwable t) {\n            // All we can do is log the error.\n            System.out.println(t);\n          }\n        }\n      }).start();\n      }\n    }\n    ```", "```java\n    xmlns:aop=http://www.springframework.org/schema/aop\n    ```", "```java\n    xsi:schemaLocation=\"http://www.springframework.org/\n      schema/aop http://www.springframework.org/\n      schema/aop/spring-aop-2.5.xsd\n\n    ```", "```java\n    <aop:config>\n      <aop:aspect ref=\"advice\">\n      <aop:around method=\"fork\" pointcut=\"execution(* org.springframework.mail.javamail.JavaMailSenderImpl.send(..))\"/>\n      </aop:aspect>\n    </aop:config>\n    ```"]