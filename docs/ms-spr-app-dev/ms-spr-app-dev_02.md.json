["```java\n<project  \n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.packt.web</groupId>\n  <artifactId>Spring4JMS_Chapter2</artifactId>\n  <packaging>war</packaging>\n  <version>0.0.1-SNAPSHOT</version>\n  <name>Spring4JMS_Chapter2</name>\n  <url>http://maven.apache.org</url>\n  <properties>\n  <spring.version>4.0.3.RELEASE</spring.version>\n  </properties>\n\n  <dependencies>\n\n  <!-- Spring JMS dependencies -->\n    <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-jms</artifactId>\n    <version>${spring.version}</version>\n    <scope>runtime</scope>\n    </dependency>\n\n    <dependency>\n    <groupId>org.apache.activemq</groupId>\n    <artifactId>activemq-core</artifactId>\n    <version>5.3.1</version>\n    <scope>runtime</scope>\n    </dependency>\n    <dependency>\n    <groupId>org.apache.xbean</groupId>\n    <artifactId>xbean-spring</artifactId>\n    <version>3.5</version>\n    <scope>runtime</scope>\n    </dependency>\n    <dependency>\n    <groupId>org.apache.geronimo.specs</groupId>\n    <artifactId>geronimo-jms_1.1_spec</artifactId>\n    <version>1.1.1</version>\n    <scope>runtime</scope>\n    </dependency> \n  </dependencies>\n  <build>\n    <finalName>Spring4JMS_Chapter2</finalName>\n  </build>\n</project>\n```", "```java\n    <bean id=\"destination\" class=\"org.apache.activemq.command.ActiveMQQueue\">\n      <constructor-arg value=\"orderQueue\"/>\n    </bean>\n    ```", "```java\n      <bean id=\"jmsTemplate\" class=\"org.springframework.jms.core.JmsTemplate\">\n        <property name=\"connectionFactory\" ref=\"connectionFactory\" />\n        <property name=\"defaultDestination\" ref=\"destination\" />\n      </bean>\n    ```", "```java\n    <bean id=\"orderSender\" class=\"com.packt.jms.OrderSender\" />\n    ```", "```java\n    <bean id=\"orderReceiver\" class=\"com.packt.jms.OrderReceiver\" />\n\n    <jms:listener-container  connection-factory=\"connectionFactory\">\n    <jms:listener destination=\"orderQueue\" ref=\"orderReceiver\" method=\"orderReceived\" />\n    </jms:listener-container>\n    ```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans \n\n  xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n  http://www.springframework.org/schema/beans/spring-beans-3.2.xsd \n  http://www.springframework.org/schema/data/mongo\n  http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd\n\n  http://www.springframework.org/schema/context \n  http://www.springframework.org/schema/context/spring-context-3.2.xsd \n  http://www.springframework.org/schema/jms \n  http://www.springframework.org/schema/jms/spring-jms.xsd\n  http://activemq.apache.org/schema/core \n  http://activemq.apache.org/schema/core/activemq-core.xsd\">\n  <context:component-scan base-package=\"com.packt\" />\n    <!-- JMS Active MQQueue configuration -->\n    <bean id=\"connectionFactory\" class=\"org.apache.activemq.ActiveMQConnectionFactory\">\n    <property name=\"brokerURL\">\n      <value>tcp://localhost:61616</value>\n    </property>\n    </bean>\n\n    <bean id=\"destination\" class=\"org.apache.activemq.command.ActiveMQQueue\">\n    <constructor-arg value=\"orderQueue\"/>\n    </bean>\n\n    <bean id=\"jmsTemplate\" class=\"org.springframework.jms.core.JmsTemplate\">\n    <property name=\"connectionFactory\" ref=\"connectionFactory\" />\n    <property name=\"defaultDestination\" ref=\"destination\" />\n    </bean>\n  <bean id=\"orderSender\" class=\"com.packt.jms.OrderSender\" />\n  <bean id=\"orderReceiver\" class=\"com.packt.jms.OrderReceiver\" />\n  <jms:listener-container  connection-factory=\"connectionFactory\">\n  <jms:listener destination=\"orderQueue\" ref=\"orderReceiver\" method=\"orderReceived\" />\n  </jms:listener-container>\n\n  <!-- Factory bean that creates the Mongo instance -->\n  <bean id=\"mongo\" class=\"org.springframework.data.mongodb.core.MongoFactoryBean\">\n    <property name=\"host\" value=\"localhost\" />\n  </bean>\n  <mongo:mongo host=\"127.0.0.1\" port=\"27017\" />\n  <mongo:db-factory dbname=\"eshopdb\" />\n\n  <bean id=\"mongoTemplate\" class=\"org.springframework.data.mongodb.core.MongoTemplate\">\n    <constructor-arg name=\"mongoDbFactory\" ref=\"mongoDbFactory\" />\n  </bean>\n  <!-- Use this post processor to translate any MongoExceptions thrown in @Repository annotated classes -->\n  <bean class=\"org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor\" />\n\n    <bean id=\"jspViewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"\n      p:prefix=\"/WEB-INF/myviews/\"\n      p:suffix=\".jsp\" /> \n</beans>\n```", "```java\npackage com.packt.bean;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\n@Document\npublic class Order {\n  private String order_id;\n  private Customer customer;\n  private Product product;\n  private String date;\n  private String order_status;\n  private int quantity;\n\n  public Order() {\n    super();\n    // TODO Auto-generated constructor stub\n  }\n\n  @Id\n  public String getOrder_id() {\n    return order_id;\n  }\n  public void setOrder_id(String order_id) {\n    this.order_id = order_id;\n  }\n\n  public String getDate() {\n    return date;\n  }\n  public void setDate(String date) {\n    this.date = date;\n  }\n  public int getQuantity() {\n    return quantity;\n  }\n  public void setQuantity(int quantity) {\n    this.quantity = quantity;\n  }\n  public String getOrder_status() {\n    return order_status;\n  }\n  public void setOrder_status(String order_status) {\n    this.order_status = order_status;\n  }\n\n  public Customer getCustomer() {\n    return customer;\n  }\n  public void setCustomer(Customer customer) {\n    this.customer = customer;\n  }\n  public Product getProduct() {\n    return product;\n  }\n  public void setProduct(Product product) {\n    this.product = product;\n  }\n}\n```", "```java\nOrder details is saved with JMS.The Order Object is passed to orderSender, which will store the order details in the queue.\n@RequestMapping(value = \"/order/save\", method = RequestMethod.POST)\n  // request insert order recordhrecord\n  public String addorder(@ModelAttribute(\"Order\") Order order,Map<String, Object> model) {\n    orderSender.sendOrder(order);\n    model.put(\"customerList\", customerList);\n    model.put(\"productList\", productList);\n    return \"order\";\n  }\n```", "```java\npackage com.packt.jms;\n\nimport javax.jms.JMSException;\nimport javax.jms.MapMessage;\nimport javax.jms.Message;\nimport javax.jms.Session;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jms.core.JmsTemplate;\nimport org.springframework.jms.core.MessageCreator;\nimport com.packt.bean.Order;\n\npublic class OrderSender {\n\n  @Autowired\n  private JmsTemplate jmsTemplate;\n  public void sendOrder(final Order order){\n    jmsTemplate.send(\n    new MessageCreator() {\n      public Message createMessage(Session session) throws JMSException {\n        MapMessage mapMessage = session.createMapMessage();\n        mapMessage.setInt(\"quantity\", order.getQuantity());\n        mapMessage.setString(\"customerId\", order.getCustomer().getCust_id());\n        mapMessage.setString(\"productId\", order.getProduct().getProdid());\n        return mapMessage;\n\n      }\n    }\n    );\n    System.out.println(\"Order: \"+ order);\n  }\n}\n```", "```java\n    PacktMessageListener:\n    package com.packt.jms;\n\n    import javax.jms.JMSException;\n    import javax.jms.Message;\n    import javax.jms.MessageListener;\n    import javax.jms.TextMessage;\n\n    public class  PacktMessageListener implements MessageListener{\n      private PacktMessageSender packtmessagesender;\n      public void onMessage(Message message){\n        if (message instanceof TextMessage){\n          try{\n            String msgText = ((TextMessage) message).getText();\n            packtmessagesender.sendMessage(msgText);\n          }\n          catch (JMSException jmsexception){\n            System.out.println(jmsexception.getMessage());\n          }\n        }\n        else{\n          throw new RuntimeException(\"exception runtime\");  \n        }\n      }\n\n      public void setTestMessageSender(PacktMessageSender packtmessagesender){\n        this.packtmessagesender = packtmessagesender;\n      }\n    }\n    ```", "```java\n    package com.packt.jms;\n    import javax.jms.MessageListener;\n    import javax.jms.Queue;\n    import org.springframework.jms.core.JmsTemplate;\n\n    public class PacktMessageSender {\n      private JmsTemplate jmsTemplate;\n      private Queue queue;\n      public void setJmsTemplate(JmsTemplate jmsTemplate){\n        this.jmsTemplate = jmsTemplate;\n      }\n      public void setQueue(Queue queue) {\n        this.queue = queue;\n      }\n      public void sendMessage(String msgText) {\n      jmsTemplate.convertAndSend(queue, msgText);\n      }\n    }\n    ```", "```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <Context>\n    <!\u2014connection factory details-->\n    <Resource name=\"jms/mqConnectionFactory\" auth=\"Container\" type=\"org.apache.activemq.ActiveMQConnectionFactory\" description=\"JMS Connection Factory\" factory=\"org.apache.activemq.jndi.JNDIReferenceFactory\" brokerURL=\"tcp://localhost:61616\" />\n\n    <!\u2014queue details-->\n\n    <Resource name=\"jms/PacktTestQueue1\" auth=\"Container\" type=\"org.apache.activemq.command.ActiveMQQueue\" factory=\"org.apache.activemq.jndi.JNDIReferenceFactory\" physicalName=\"PacktTestQueue1\"/>\n\n    <!\u2014queue details-->\n\n    <Resource name=\"jms/PacktTestQueue2\" auth=\"Container\" type=\"org.apache.activemq.command.ActiveMQQueue\" factory=\"org.apache.activemq.jndi.JNDIReferenceFactory\" physicalName=\"PacktTestQueue2\"/>\n    </Context>\n    ```", "```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <beans \n\n      xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n      http://www.springframework.org/schema/context\n      http://www.springframework.org/schema/context/spring-context-4.0.xsd\n      http://www.springframework.org/schema/beans\n      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n      http://www.springframework.org/schema/jee\n      http://www.springframework.org/schema/jee/spring-jee-4.0.xsd\">\n\n      <jee:jndi-lookup id=\"apachemqConnectionFactory\" jndi-name=\"java:comp/env/jms/mqConnectionFactory\" />\n      <jee:jndi-lookup id=\"PacktTestQueue1\" jndi-name=\"java:comp/env/jms/PacktTestQueue1\" />\n      <jee:jndi-lookup id=\"PacktTestQueue2\" jndi-name=\"java:comp/env/jms/PacktTestQueue2\" />\n\n      <bean id=\"packtMessageListener\" class=\"com.packt.jms.PacktMessageListener\">\n        <property name=\"packtMessageSender\" ref =\"packtMessageSender\" />\n      </bean>\n\n      <bean id=\"defaultMessageListenerContainer\" class=\"org.springframework.jms.listener.DefaultMessageListenerContainer\">\n        <property name=\"connectionFactory\" ref =\"apachemqConnectionFactory\" />\n        <property name=\"destination\" ref =\"PacktTestQueue1\"/>\n        <property name=\"messageListener\" ref =\"packtMessageListener\"/>\n        <property name=\"concurrentConsumers\" value=\"2\" />\n      </bean>\n\n      <bean id=\"packtMessageSender\" class=\"com.packt.jms.PacktMessageSender\">\n        <property name=\"jmsTemplate\" ref=\"jmsTemplate\"/>\n        <property name=\"queue\" ref=\"PacktTestQueue2\"/>\n      </bean>\n\n      <bean id=\"jmsTemplate\" class=\"org.springframework.jms.core.JmsTemplate\">\n        <property name=\"connectionFactory\" ref=\"apachemqConnectionFactory\" />\n      </bean>\n\n    </beans>\n    ```", "```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <web-app \n\n      xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\n      http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\"\n      id=\"WebApp_ID\"\n      version=\"2.5\">\n      <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>\n          /WEB-INF/configuration/spring-configuration.xml\n        </param-value>\n      </context-param>\n      <listener>\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n      </listener>\n    </web-app>\n    ```", "```java\n    <property name=\"redeliveryPolicy\">\n      <bean class=\"org.apache.activemq.RedeliveryPolicy\">\n    <property name=\"maximumRedeliveries\" value=\"3\"/>\n      </bean>\n    </property>\n    ```", "```java\n    <jms:listener-container connection-factory=\"connectionFactory\" acknowledge=\"transacted\">\n      <jms:listener destination=\"orderQueue\" ref=\"orderReceiver\" method=\"orderReceived\" />\n    </jms:listener-container>\n    ```", "```java\n<bean id=\"jmsMessageAdapter\" class=\"org.springframework.jms.listener.adapter.MessageListenerAdapter\">\n<property name=\"delegate\" ref=\"jmsMessageReceiverDelegate\" />\n<property name=\"defaultListenerMethod\" value=\"processMessage\" />\n</bean>\n\n<jms:listener-container container-type=\"default\"\n  connection-factory=\"connectionFactory\" acknowledge=\"auto\"> \n<jms:listener destination=\"queue1\"\n  ref=\"jmsMessageReceiverDelegate\" method=\"processMessage\" /> \n<jms:listener destination=\"queue2\"\n  ref=\"jmsMessageReceiverDelegate\" method=\"processMessage\" /> \n</jms:listener-container>\n```", "```java\n    @Test\n    public void testCorrectMessage() throws InterruptedException {\n      Order order = new Order(0, \"notification to deliver correctly\");\n      ordersender.convertAndSendMessage(QUEUE_INCOMING, order);\n\n      Thread.sleep(6000);\n      printResults();\n\n      assertEquals(1, getSavedOrders());\n      assertEquals(0, getMessagesInQueue(QUEUE_INCOMING));\n      assertEquals(0, getMessagesInQueue(QUEUE_DLQ));\n    }\n    ```", "```java\n    @Test\n    public void testFailedAfterReceiveMessage() throws InterruptedException {\n      Order order = new Order(1, \"ordernotification to fail after receiving\");\n      ordersender.convertAndSendMessage(QUEUE_INCOMING, order);\n      Thread.sleep(6000);\n      printResults();\n      assertEquals(0, getSavedOrders());\n      assertEquals(0, getMessagesInQueue(QUEUE_INCOMING));\n      assertEquals(1, getMessagesInQueue(QUEUE_DLQ));\n      //Empty the dead letter queue\n      jmsTemplate.receive(QUEUE_DLQ);\n    }\n    ```", "```java\n    @Test\n    public void testFailedAfterProcessingMessage() throws InterruptedException {\n      Order order = new Order(2, \"ordernotification to fail after processing\");\n      ordersender.convertAndSendMessage(QUEUE_INCOMING, order);\n      Thread.sleep(6000);\n      printResults();\n      assertEquals(2, getSavedOrders());\n      assertEquals(0, getMessagesInQueue(QUEUE_INCOMING));\n      assertEquals(0, getMessagesInQueue(QUEUE_DLQ));\n    }\n    ```"]