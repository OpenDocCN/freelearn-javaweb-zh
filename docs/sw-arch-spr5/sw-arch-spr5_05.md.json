["```java\nimport org.springframework.stereotype.Controller;\n\n@Controller\npublic class DemoController \n{\n  ...\n}\n```", "```java\n@RequestMapping(value = \"/ABC\", method = RequestMethod.GET)\npublic String handleRequestForPathABC() {\n    // do something\n    return \"ui-template\";\n}\n```", "```java\n@RequestMapping(value = \"/ABC\", method = RequestMethod.GET)\npublic String passDataToTheView(Model Model) {\n    Model.addAttribute(\"attributeName\", \"attributeValue\");\n    // do something\n    return \"ui-template\";\n}\n```", "```java\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <title>Title</title>\n    </head>\n```", "```java\n    <body>\n        ${attributeName} \n    </body>\n</html>\n```", "```java\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <title>Title</title>\n    </head>\n    <body>\n        <form action=\"#\" th:action=\"@{/process}\"   \n        th:object=\"${myObject}\">\n            <label for=\"name\">Name:</label>\n            <input type=\"text\" id=\"name\" th:field=\"*{name}\"/>\n            <button type=\"submit\">OK</button>\n         </form>\n    </body>\n</html>\n```", "```java\n@RequestMapping(value = \"/process\", method = POST)\npublic String processForm(@ModelAttribute MyObject myObject) {\n    String name = myObject.getName();\n    // do something\n    return \"ui-template\";\n}\n```", "```java\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class ContextAwareTest {\n\n    @Autowired\n    ClassUnderTest classUnderTest;\n\n    @Test\n    public void validateAutowireWorks() throws Exception {\n        Assert.assertNotNull(classUnderTest);\n    }\n}\n```", "```java\n@RunWith(SpringRunner.class)\n@SpringBootTest\n@AutoConfigureMockMvc\npublic class RedirectionTest \n{\n  @Autowired\n private MockMvc mockMvc;\n  @Test\n  public void contentAndRedirectionTest() throws Exception \n  {\n this.mockMvc.perform(get(\"/urlPage\"))\n .andExpect(redirectedUrl(\"/expectedUrlPage\") .andDo(print()).andExpect(status().isOk())\n    .andExpect(\n      content().string(containsString(\"SomeText\")))\n    );\n  }\n}\n```", "```java\napply plugin: \"jacoco\"\njacoco \n{\n  toolVersion = \"VERSION\"\n} \n```", "```java\n<plugin>\n  <groupId>org.jacoco</groupId>\n  <artifactId>jacoco-maven-plugin</artifactId>\n  <version>VERSION</version>\n</plugin>\n```", "```java\n$ ./gradlew test jacocoTestReport\n```", "```java\n@RunWith(MockitoJUnitRunner.class)\npublic class BankingUserDetailServiceTest \n{\n  @Mock\n  CustomerRepository customerRepository;\n  @InjectMocks\n  BankingUsersDetailService bankingUsersDetailService;\n @Test(expected = UsernameNotFoundException.class)\n  public void whenTheUserIsNotFoundAnExceptionIsExpected() \n  throws Exception \n  {\n    String username = \"foo\";\n    Mockito.when(customerRepository.findByUsername(username))\n    .thenReturn(Optional.empty());\n    bankingUsersDetailService.loadUserByUsername(username);\n  }\n  @Test\n  public void theUserDetailsContainsTheInformationFromTheFoundCustomer\n  () throws Exception \n  {\n    String username = \"foo\";\n    String password = \"bar\";\n    Customer customer = \n    new Customer(username, password, NotificationType.EMAIL);\n    Mockito.when(customerRepository.findByUsername(username))\n    .thenReturn(Optional.of(customer));\n    UserDetails userDetails = bankingUsersDetailService\n    .loadUserByUsername(username);\n Assert.assertEquals(userDetails.getUsername(), username);\n    Assert.assertEquals(userDetails.getPassword(), password);\n    Assert.assertEquals(userDetails.getAuthorities()\n .iterator().next().getAuthority(), \"ROLE_CUSTOMER\");\n  }\n}\n```", "```java\ncompile('org.springframework.boot:spring-boot-starter-thymeleaf')\n```", "```java\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n```", "```java\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\"/>\n    <title>Default title</title>\n    <meta name=\"viewport\" content=\"width=device-width, \n    initial-scale=1\"/>\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/\n    bootstrap/3.3.7/css/bootstrap.min.css\"/>\n    <script src=\"img/jquery.min.js\"></script>\n    <script src=\"img/bootstrap.min.js\"></script>\n  </head>\n  <body>\n    <nav class=\"navbar navbar-inverse\">\n      <div class=\"container-fluid\">\n        <div class=\"navbar-header\">\n          <a class=\"navbar-brand\" href=\"#\">MVC Demo</a>\n        </div>\n        <ul class=\"nav navbar-nav\">\n          <li><a href=\"/index\">Home</a></li>\n          <li><a href=\"/notifications\">My notification channels</a> \n          </li>\n        </ul>\n        <ul class=\"nav navbar-nav navbar-right\">\n          <li>\n            <a href=\"/login\"><span class=\"glyphicon glyphicon-user\"> \n            </span>  Login</a>\n          </li>\n          <li>\n            <a href=\"/logout\">\n              <span class=\"glyphicon glyphicon-log-in\"></span>\n                Logout\n            </a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-md-3\"></div>\n        <div class=\"col-md-6\">\n          Page content goes here\n        </div>\n        <div class=\"col-md-3\"></div>\n      </div>\n    </div>\n  </body>\n</html>\n```", "```java\ncompile('org.thymeleaf.extras:thymeleaf-extras-springsecurity4')\n```", "```java\n<dependency>\n    <groupId>org.thymeleaf.extras</groupId>\n    <artifactId>thymeleaf-extras-springsecurity4</artifactId>\n</dependency>\n```", "```java\n<html lang=\"en\"\n\n      >\n```", "```java\n<ul class=\"nav navbar-nav navbar-right\">\n    <li sec:authorize=\"!isAuthenticated()\">\n        <a href=\"/login\"><span class=\"glyphicon glyphicon-user\"></span>  Login</a>\n    </li>\n    <li sec:authorize=\"isAuthenticated()\">\n        <a href=\"/logout\">\n            <span class=\"glyphicon glyphicon-log-in\"></span>\n              Logout\n        </a>\n    </li>\n</ul>\n```", "```java\n<li sec:authorize=\"hasRole('ROLE_ADMIN')\"><a href=\"/a\">Admins only</a></li>\n<li sec:authorize=\"hasRole('ROLE_EDITOR')\"><a href=\"/b\">Editors only</a></li>\n```", "```java\n<p>Hello, <span sec:authentication=\"name\"></span>!</p>\n```", "```java\n<div class=\"col-md-6\" layout:fragment=\"content\">\n    Page content goes here\n</div>\n```", "```java\n<!DOCTYPE html>\n<html lang=\"en\"\n\n layout:decorator=\"default-layout\">\n<head>\n    <title>Home</title>\n</head>\n<body>\n<div layout:fragment=\"content\">\n    // Content here\n</div>\n</body>\n</html>\n```", "```java\ncompile('org.springframework.boot:spring-boot-starter-security')\n```", "```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n```", "```java\n@Service\npublic class MyCustomUsersDetailService implements UserDetailsService {\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        Optional<Customer> customerFound = findByUsername(username);\n        if (customerFound.isPresent()) {\n            Customer customer = customerFound.get();\n            User.UserBuilder builder = User\n                    .withUsername(username)\n                    .password(customer.getPassword())\n                    .roles(ADD_YOUR_ROLES_HERE);\n            return builder.build();\n        } else {\n            throw new UsernameNotFoundException(\"User not found.\");\n        }\n    }\n}\n```", "```java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Override\n    protected void configure(HttpSecurity httpSecurity) throws Exception {\n         httpSecurity.authorizeRequests()\n             .antMatchers(\"/index\").permitAll()\n             .antMatchers(\"/guest/**\").permitAll()\n .antMatchers(\"/customers/**\").hasAuthority(\"ROLE_CUSTOMER\")\n             .anyRequest().authenticated()\n             .and()\n             .formLogin()\n .loginPage(\"/login\")\n            .failureUrl(\"/login?error\")\n            .successForwardUrl(\"/home\")\n             .usernameParameter(\"username\").passwordParameter(\"password\")\n                .permitAll()\n             .and()\n .logout().logoutSuccessUrl(\"/logout\")\n             .and()\n             .csrf(); \n    }\n}\n```", "```java\nserver.port: 8443\nserver.ssl.key-store: keystore.p12\nserver.ssl.key-store-password: spring\nserver.ssl.keyStoreType: PKCS12\nserver.ssl.keyAlias: tomcat\n```"]