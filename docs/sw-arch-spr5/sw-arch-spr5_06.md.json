["```java\n<dependency>\n   <groupId>org.springframework.cloud</groupId> \n   <artifactId>spring-cloud-stream-binder-rabbit</artifactId> </dependency>\n```", "```java\n<dependency> \n    <groupId>org.springframework.cloud</groupId> \n    <artifactId>spring-cloud-stream</artifactId> \n</dependency>\n```", "```java\npublic interface EventNotificationChannel \n{\n @Output  MessageChannel moneyTransferredChannel();\n}\n```", "```java\n@RestController\npublic class TransferController \n{\n  private final MessageChannel moneyTransferredChannel;\n  public TransferController(EventNotificationChannel channel) \n  {\n    this.moneyTransferredChannel = channel.moneyTransferredChannel();\n  }\n  @PostMapping(\"/transfer\")\n  public void doTransfer(@RequestBody TransferMoneyDetails\n  transferMoneyDetails) \n  {\n    log.info(\"Transferring money with details: \" +\n    transferMoneyDetails);\n    Message<String> moneyTransferredEvent = MessageBuilder\n .withPayload\n    (\"Money transferred for client with id: \" + transferMoneyDetails.getCustomerId()).build();\n    this.moneyTransferredChannel.send(moneyTransferredEvent);\n  }\n}\n```", "```java\npublic interface EventNotificationChannel \n{\n  @Input\n  SubscribableChannel subscriptionOnMoneyTransferredChannel();\n}\n```", "```java\n@Bean\nIntegrationFlow integrationFlow(\n            EventNotificationChannel eventNotificationChannel) {\n    return IntegrationFlows.from\n        (eventNotificationChannel\n            .subscriptionOnMoneyTransferredChannel()).\n                handle(String.class, new GenericHandler<String>() {\n            @Override\n            public Object handle(String payload, \n            Map<String, Object> headers) {\n\n // Use the payload to find the transaction and determine\n            // if a notification should be sent to external banks \n     }\n         }).get();\n}\n```", "```java\n@RestController\npublic class TransferController \n{\n  private final MessageChannel moneyTransferredChannel;\n  public TransferController(EventNotificationChannel channel) \n  {\n    this.moneyTransferredChannel = channel.moneyTransferredChannel();\n  }\n  @PostMapping(\"/transfer\")\n  public void doTransfer(@RequestBody TransferMoneyDetails \n  transferMoneyDetails) \n  {\n    // Do something\n Message<TransferMoneyDetails> moneyTransferredEvent = \n MessageBuilder.withPayload(transferMoneyDetails).build();\n this.moneyTransferredChannel.send(moneyTransferredEvent);\n  }\n}\n```", "```java\n@Bean\nIntegrationFlow integrationFlow(EventNotificationChannel eventNotificationChannel) \n{\n  return IntegrationFlows\n  .from(eventNotificationChannel\n  .subscriptionOnMoneyTransferredChannel())\n  .handle(TransferMoneyDetails.class, new GenericHandler\n  <TransferMoneyDetails>() \n  {\n    @Override\n    public Object handle(TransferMoneyDetails payload, Map<String, \n    Object> map) \n    {\n      // Do something with the payload\n      return null;\n    }\n  }).get();\n}\n```", "```java\npublic class CreateCustomerCommand extends Command {\n\n    public void execute() {\n\n        String commandId = UUID.randomUUID().toString();\n        CommandMetadata commandMetadata \n            = new CommandMetadata(commandId, getName(), this.data);\n commandRepository.save(commandMetadata);\n\n        String customerUuid = UUID.randomUUID().toString();\n\n        JSONObject customerInformation = getCustomerInformation();\n        customerInformation.put(\"customer_id\", customerUuid);\n\n        // CustomerCreated event creation EventMetadata customerCreatedEvent \n = new EventMetadata(customerInformation, ...);        // CustomerCreated event saved eventRepository.save(customerCreatedEvent);        // CustomerCreated event sent to process eventProcessor.process(customerCreatedEvent);\n\n        JSONObject accountInformation = getAccountInformation();\n        accountInformation.put(\"customer_id\", customerUuid);\n\n        // AccountCreated event creation\n EventMetadata accountCreatedEvent \n = new EventMetadata(accountInformation, ...);        // AccountCreated event saved eventRepository.save(accountCreatedEvent);        // AccountCreated event sent to process eventProcessor.process(accountCreatedEvent);\n\n    }\n    ...\n}\n```", "```java\n@Component\npublic class EventProcessor {\n\n    public void process(EventMetadata event) {\n        if (\"CustomerCreated\".equals(event.getEventName())) {\n            Customer customer = new Customer(event);\n            customerRepository.save(customer);\n        } else if (\"AccountCreated\".equals(event.getEventName())) {\n            Account account = new Account(event);\n            accountRepository.save(account);\n        }\n    }\n    ...\n}\n```", "```java\n$ curl -H \"Content-Type: application/json\" \\\n -X POST \\\n -d '{\"account_type\": \"savings\", \"name\": \"Rene\", \"last_name\": \"Enriquez\", \"initial_amount\": 1000}' \\\n http://localhost:8080/customer\n```", "```java\nCOMMAND INFORMATION\nid: 8782e12e-92e5-41e0-8241-c0fd83cd3194 , name: CreateCustomer , data: {\"account_type\":\"savings\",\"name\":\"Rene\",\"last_name\":\"Enriquez\",\"initial_amount\":1000} \nEVENT INFORMATION\nid: 71931e1b-5bce-4fe7-bbce-775b166fef55 , name: CustomerCreated , command id: 8782e12e-92e5-41e0-8241-c0fd83cd3194 , data: {\"name\":\"Rene\",\"last_name\":\"Enriquez\",\"customer_id\":\"2fb9161e-c5fa-44b2-8652-75cd303fa54f\"} \nid: 0e9c407c-3ea4-41ae-a9cd-af0c9a76b8fb , name: AccountCreated , command id: 8782e12e-92e5-41e0-8241-c0fd83cd3194 , data: {\"account_type\":\"savings\",\"account_id\":\"d8dbd8fd-fa98-4ffc-924a-f3c65e6f6156\",\"balance\":1000,\"customer_id\":\"2fb9161e-c5fa-44b2-8652-75cd303fa54f\"}\n```", "```java\nDELETE FROM CUSTOMER;\nDELETE FROM ACCOUNT;\n```", "```java\n$ curl -X POST http://localhost:8080/events/<EVENT_ID> \n```"]