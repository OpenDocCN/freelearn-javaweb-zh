["```java\ndocker run IMAGE_NAME\n```", "```java\ndocker run nginx\n```", "```java\n\u22ca> ~ docker run nginx\n Unable to find image 'nginx:latest' locally\n latest: Pulling from library/nginx\n f2aa67a397c4: Downloading [==================================> ] 15.74MB/22.5MB\n 3c091c23e29d: Downloading [=======> ] 3.206MB/22.11MB\n 4a99993b8636: Download complete\n```", "```java\ndocker run -p 32888:80 -d nginx\n```", "```java\n\u22ca> ~ docker run -it nginx /bin/bash\n# Now you're inside the container here\nroot@0c546aef5ad9:/#\n```", "```java\ndocker ps\n```", "```java\ndocker restart <CONTAINER ID> \n```", "```java\ndocker stop <CONTAINER ID> \n```", "```java\ndocker start <CONTAINER ID> \n```", "```java\ndocker rm <CONTAINER ID>\n```", "```java\n\u22ca> ~ docker images\nREPOSITORY TAG IMAGE ID CREATED SIZE\nnginx latest ae513a47849c 4 weeks ago 109MB\n```", "```java\n\u22ca> ~ docker rmi nginx\nUntagged: nginx:latest\nUntagged: nginx@sha256:0fb320e2a1b1620b4905facb3447e3d84ad36da0b2c8aa8fe3a5a81d1187b884\nDeleted: sha256:ae513a47849c895a155ddfb868d6ba247f60240ec8495482eca74c4a2c13a881\nDeleted: sha256:160a8bd939a9421818f499ba4fbfaca3dd5c86ad7a6b97b6889149fd39bd91dd\nDeleted: sha256:f246685cc80c2faa655ba1ec9f0a35d44e52b6f83863dc16f46c5bca149bfefc\nDeleted: sha256:d626a8ad97a1f9c1f2c4db3814751ada64f60aed927764a3f994fcd88363b659\n```", "```java\n\u22ca> ~ docker pull <IMAGE NAME>\n```", "```java\nFROM debian:stretch-slim \n```", "```java\nMAINTAINER  Your Name <your@email.com>\n```", "```java\nRUN \\ \n echo oracle-java8-installer shared/accepted-oracle-license-v1-1 \n select true | debconf-set-selections && \\ \n add-apt-repository -y ppa:webupd8team/java && \\ \n apt-get update && \\ \n apt-get install -y oracle-java8-installer && \\ \n rm -rf /var/lib/apt/lists/* && \\ \n rm -rf /var/cache/oracle-jdk8-installer\n```", "```java\nENV JAVA_HOME /usr/lib/jvm/java-8-oracle\n```", "```java\nEXPOSE 80 32777\n```", "```java\nCMD java - jar your-application.jar\n```", "```java\ndocker build -t <docker-image-name>\n```", "```java\nFROM java:8 \nWORKDIR / \nARG JAR_FILE \nCOPY ${JAR_FILE} app.jar \nEXPOSE 8080 \nENTRYPOINT [\"java\",\"-jar\",\"app.jar\"]\n```", "```java\n./gradlew clean bootRepackage\n```", "```java\n$ docker build -t spring-boot:1.0 . --build-arg JAR_FILE=build/libs/banking-app-1.0.jar\n```", "```java\n$ docker run -p 8081:8080 -d --name banking-app spring-boot:1.0\n```", "```java\nbuildscript \n{\n  ...\n  repositories \n  {\n    ...\n    maven \n    {\n      url \"https://plugins.gradle.org/m2/\"\n    }\n  }\n  dependencies \n  {\n    ...\n    classpath('gradle.plugin.com.palantir.gradle.docker:gradledocker:\n    0.13.0')\n  }\n}\n```", "```java\napply plugin: 'com.palantir.docker'\n```", "```java\ndocker \n{\n  name \"enriquezrene/spring-boot-${jar.baseName}:${version}\"\n  files jar.archivePath\n  buildArgs(['JAR_FILE': \"${jar.archiveName}\"])\n}\n```", "```java\n$ ./gradlew build docker\n```", "```java\n$ docker login \nLogin with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.\nUsername: enriquezrene\nPassword:\nLogin Succeeded\n```", "```java\n$ docker push <docker-hub-username/docker-image:tag-version>\n```", "```java\ndocker \n{\n  name \"enriquezrene/spring-boot-${jar.baseName}:${version}\"\n  files jar.archivePath\n  buildArgs(['JAR_FILE': \"${jar.archiveName}\"])\n}\n```", "```java\n# Login into Docker Hub\n$ docker login\nLogin with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.\nUsername: <username>\nPassword: <password>\nLogin Succeeded\n# Push the image\n$ docker push enriquezrene/spring-boot-banking-app:1.0\n```", "```java\n$ docker run enriquezrene/spring-boot:1.0\n```", "```java\nmysql:\n image: mysql\n ports:\n - \"3306:3306\"\n environment:\n - MYSQL_ROOT_PASSWORD=my-password\n\nrabbitmq:\n image: rabbitmq:management\n ports:\n - \"5672:5672\"\n - \"15672:15672\"\n```", "```java\n$ docker-compose up\n```", "```java\nversion: '3.1'\nservices:\n    database:\n        image: mysql:5\n        ports:\n            - \"3306:3306\"\n        volumes:\n          # Use this option to persist the MySQL data in a shared \n          volume.\n            - db-data:/host/absolute/path/.mysql\n        environment:\n            - MYSQL_ROOT_PASSWORD=example\n            - MYSQL_DATABASE=demo\n\n    application:\n        image: enriquezrene/docker-compose-banking-app:1.0\n        ports:\n            - \"8081:8080\"\n depends_on:\n            - database\n        environment:\n            - spring.datasource.url=jdbc:mysql://database:3306/demo\n            - spring.datasource.password=example\n links:\n            - database\n\nvolumes:\n db-data:\n```", "```java\nspring.thymeleaf.cache=false\nspring.jpa.hibernate.ddl-auto=create-drop\nspring.datasource.username=root\nspring.datasource.url=jdbc:mysql://localhost:3306/demo\nspring.datasource.password=root\n```", "```java\ndocker-compose up\n```", "```java\n$ docker-compose up database\n```", "```java\n$ docker-compose ps\n```", "```java\n$ docker-compose stop\n```", "```java\napiVersion: v1\nkind: Pod\nmetadata:\n    name: application-xyz\nspec:\n    containers:\n        - name: nginx\n          image: nginx\n          ports:\n            - containerPort: 80 \n\n        - name: database\n          image: mysql\n          volumeMounts:\n            - name: mysql-data\n              mountPath: /path\n\n        - name: api\n          image: <your-api-image>\n```", "```java\nkubectl create -f <file-name.yaml>\n```", "```java\napiVersion: v1\nkind: Pod\nmetadata:\n    name: application-xyz\n labels:\n environment:production\n otherLabelName: otherLabelValue\nspec:\n    containers:\n        - name: nginx\n          image: nginx\n          ports:\n            - containerPort: 80 \n\n        - name: database\n          image: mysql\n          volumeMounts:\n            - name: mysql-data\n              mountPath: /path\n\n        - name: api\n          image: <your-api-image>\n```", "```java\nkubectl create -f application-xyz-pod.yaml \n```", "```java\nkubectl get pod -l environment=production\n```", "```java\napiVersion: v1\nkind: ReplicationController\nmetadata:\n    name: application-xyz-rc\nspec:\n    replicas: 3\n    selector:\n tier:front-end    template:\n        metadata: \n            label:\n                env:production\n        spec:\n            containers:             \n               ...\n```", "```java\nkubectl create -f application-xyz-rc.yaml \n```", "```java\nkubectl delete pod <pod-name>\n```", "```java\nkubectl get pod\n```", "```java\napiVersion: v1\nkind: Service\nmetadata:\n    name: application-xyz-service\nspec:\n    ports: \n        port:80\n        targetPort: 80\n        protocol: TCP\n    selector:\n tier:front-end\n```", "```java\nkubectl create -f application-xyz-service.yaml\n```", "```java\nkubectl expose rc application-xyz-rc\n```"]