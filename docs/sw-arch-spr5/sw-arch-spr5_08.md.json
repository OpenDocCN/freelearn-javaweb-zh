["```java\nmiddleware:\n  apiKey: ABCD-1234\n  port: 8081\n\nevent-bus:\n  domain: event-bus.api.com\n  protocol: http\n```", "```java\n@Data\n@Component\n@ConfigurationProperties(\"middleware\")\npublic class Middleware \n{\n  private String apiKey;\n  private int port;\n}\n```", "```java\n@Data\n@Component\n@ConfigurationProperties(\"event-bus\")\npublic class EventBus \n{\n  private String domain;\n  private String protocol;\n}\n```", "```java\nEventBus(domain=event-bus.api.com, protocol=http)\nMiddleware(apiKey=ABCD-1234, port=8081)\n```", "```java\n$ java -Dmiddleware.port=9091 -jar target/configuration-demo-0.0.1-SNAPSHOT.jar\n```", "```java\nEventBus(domain=event-bus.api.com, protocol=http)\nMiddleware(apiKey=ABCD-1234, port=9091)\n```", "```java\ncompile('org.springframework.cloud:spring-cloud-config-server')\n```", "```java\n@SpringBootApplication\n@EnableConfigServer\npublic class ConfigServerApplication \n{\n  public static void main(String[] args) \n  {\n    SpringApplication.run(ConfigServerApplication.class, args);\n  }\n}\n```", "```java\nspring:\n  cloud:\n    config:\n      server:\n        git:\n          uri: https://github.com/enriquezrene/spring-architectures-config-server.git\n```", "```java\nspring:\n  application:\n name: configuration-demo\n  cloud:\n    config:\n uri: http://localhost:9000\n```", "```java\n@RestController\n@RefreshScope\npublic class ConfigurationDemoController {\n\n @Value(\"${configuration.dynamicValue}\")\n    private String dynamicValue;\n\n    @GetMapping(path = \"/dynamic-value\")\n    public ResponseEntity<String> readDynamicValue() {\n        return new ResponseEntity<>(this.dynamicValue, HttpStatus.OK);\n    }\n}\n```", "```java\n$ curl http://localhost:8080/dynamic-value \nOld Dynamic Value\n```", "```java\n$ curl -X POST http://localhost:8080/actuator/refresh\n[\"config.client.version\",\"configuration.dynamicValue\"]\n```", "```java\n$ curl http://localhost:8080/dynamic-value\nNew Dynamic Value\n```", "```java\ncompile\n ('org.springframework.cloud:spring-cloud-starter-netflix-eureka-server')\n```", "```java\n@EnableEurekaServer\n@SpringBootApplication\npublic class ServiceRegistryApplication \n{\n  public static void main(String[] args) \n  {\n    SpringApplication.run(ServiceRegistryApplication.class, args);\n  }\n}\n```", "```java\ncompile\n ('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')\n```", "```java\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class MoviesServiceApplication \n{\n  public static void main(String[] args) \n  {\n    SpringApplication.run(MoviesServiceApplication.class, args);\n  }\n}\n```", "```java\n# This name will appear in Eureka\nspring.application.name=movies-service\neureka.client.serviceUrl.defaultZone=http://localhost:8901/eureka\n```", "```java\ncompile('org.springframework.cloud:spring-cloud-starter-netflix-ribbon')\n```", "```java\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class CinemaServiceApplication \n{\n  public static void main(String[] args) \n  {\n    SpringApplication.run(CinemaServiceApplication.class, args);\n  }\n @LoadBalanced\n  @Bean\n  RestTemplate restTemplate() \n  {\n return new RestTemplate();\n  }\n}\n```", "```java\n@RestController\npublic class CinemasController \n{\n  private final CinemaRepository cinemaRepository;\n private final RestTemplate restTemplate;\n  public CinemasController(CinemaRepository cinemaRepository,\n  RestTemplate restTemplate) \n  {\n    this.cinemaRepository = cinemaRepository;\n this.restTemplate = restTemplate;\n  }\n  @GetMapping(\"/cinemas/{cinemaId}/movies\")\n  public ResponseEntity<Cinema> queryCinemaMovies   \n  (@PathVariable(\"cinemaId\") Integer cinemaId) \n  {\n    Cinema cinema = cinemaRepository.findById(cinemaId).get();\n    Movie[] movies = restTemplate\n    .getForObject(\n \"http://movies-service/movies\", Movie[].class);\n    cinema.setAvailableMovies(movies);\n    return new ResponseEntity<>(cinema, HttpStatus.OK);\n  }\n}\n```", "```java\npublic abstract class ZuulFilter \nimplements IZuulFilter, Comparable<ZuulFilter> \n{\n  public abstract String filterType();\n  public abstract int filterOrder();\n public abstract boolean shouldFilter();\n  public abstract Object run() throws ZuulException;\n  ...\n}\n```", "```java\n@Override\npublic String filterType() \n{\n  return FilterConstants.PRE_TYPE;\n}\n```", "```java\npublic class FilterConstants \n{ \n  ...\n  public static final String ERROR_TYPE = \"error\";\n  public static final String POST_TYPE = \"post\";\n  public static final String PRE_TYPE = \"pre\";\n  public static final String ROUTE_TYPE = \"route\";\n}\n```", "```java\npackage org.springframework.core;\npublic interface Ordered \n{\n  int HIGHEST_PRECEDENCE = -2147483648;\n  int LOWEST_PRECEDENCE = 2147483647;\n  ...\n}\n```", "```java\nRequestContext ctx = RequestContext.getCurrentContext();\n// do something with ctx \n```", "```java\ncurl http://localhost:8701/cinemas-service/cinemas/1/movies\n```", "```java\n@Override\npublic Object run() throws ZuulException {\n    RequestContext ctx = RequestContext.getCurrentContext();\n    HttpServletRequest request = ctx.getRequest();\n    log.info(\"Requested Method: {}\", request.getMethod());\n    log.info(\"Requested URL: {}\", request.getRequestURL());\n    return null;\n}\n```", "```java\nPRE FILTER\nRequested Method: GET\nRequested URL: http://localhost:8701/cinemas-service/cinemas/1/movies\n```", "```java\n@Service\npublic class MoviesService {\n\n    private final RestTemplate restTemplate;\n\n    public MoviesService(RestTemplate restTemplate) {\n        this.restTemplate = restTemplate;\n    }\n\n    @HystrixCommand(fallbackMethod = \"emptyMoviesArray\")\n    public Movie[] getMovies(){\n        return restTemplate.getForObject\n            (\"http://movies-service/movies\", Movie[].class);\n    }\n\n    public Movie[] emptyMoviesArray(){\n        Movie movie = new Movie();\n        movie.setId(-1);\n        movie.setName(\"Coming soon\");\n        return new Movie[]{movie};\n    }\n}\n```"]