["```java\ncurl https://start.Spring.io/starter.zip -o Spring-boot-demo.zip\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  ...\n  <parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>Spring-boot-starter-parent</artifactId>\n    <version>1.5.8.RELEASE</version>\n    <relativePath/>\n  </parent>\n  ...\n  <dependencies>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>Spring-boot-starter</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>Spring-boot-starter-test</artifactId>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n  ...\n</project>\n```", "```java\n@SpringBootApplication\npublic class DemoApplication \n{\n  public static void main(String[] args) \n  {\n    SpringApplication.run(DemoApplication.class, args);\n  }\n}\n```", "```java\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class DemoApplicationTests \n{\n  @Test\n  public void contextLoads() \n  {\n  }\n}\n```", "```java\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-devtools</artifactId>\n  <optional>true</optional>\n</dependency>\n```", "```java\n@Component\npublic interface CountryRepository extends CrudRepository<Country, Integer> {\n}\n```", "```java\n@SpringBootApplication\npublic class SpringDataDemoApplication \n{\n  @Bean\n  InitializingBean populateDatabase(CountryRepository\n  countryRepository) \n  {\n    return () -> \n    {\n      countryRepository.save(new Country(1, \"USA\"));\n      countryRepository.save(new Country(2, \"Ecuador\"));\n    };\n  }\n  @Bean\n  CommandLineRunner queryDatabase(CountryRepository \n  countryRepository) \n  {\n    return args -> \n    {\n      countryRepository.findAll()\n      .forEach(System.out::println);\n    };\n  }\n  public static void main(String[] args) \n  {\n    SpringApplication.run(SpringDataDemoApplication.class,args);\n  }\n}\n```", "```java\n...\nCountry [id: 1 name: USA ]\nCountry [id: 2 name: Ecuador ]\n...\n```", "```java\n@Component\npublic interface CountryRepository extends CrudRepository<Country, Integer> \n{\n List<Country> findByName(String name); }\n```", "```java\ncountryRepository.findByName(\"USA\")\n```", "```java\n@Component\npublic class CustomAuthenticationProvider \nimplements AuthenticationProvider \n{\n  @Override\n  public Authentication authenticate(Authentication \n  authentication)\n  throws AuthenticationException \n  {\n    // get the entered credentials\n    String username = authentication.getName();\n    String password = authentication.getCredentials().toString();\n    // check the entered data\n    if (\"user\".equals(username) && \"password\".\n    equals(password)) \n    {\n      return new UsernamePasswordAuthenticationToken(\n      username, password, new ArrayList<>());\n    }\n    ...\n  }\n  ...\n}\n```", "```java\n[\n  {\n    \"accountStatusId\": 1,\n    \"information\": \"Some information here\"\n  },\n  {\n    \"accountStatusId\": 2,\n    \"information\": \"Some information here\"\n  }\n]\n```", "```java\n{\n  \"_embedded\": \n  {\n    \"bankStatementList\": \n    [\n      {\n        \"bankStatementId\": 1,\n        \"information\": \"Some information here\",\n        \"_links\": \n        {\n          \"markAsFailed\": \n          [\n            {\n              \"href\": \"http://localhost:8080/customer/\n              1/bankStatements/1/markAsFailed\"\n            }, \n            {\n              \"href\": \"http://localhost:8080/customer/\n              1/bankStatements/1/markAsFailed\"\n            }\n          ],\n          \"resend\": \n          [\n            {\n              \"href\": \"http://localhost:8080/customer/\n              1/bankStatements/1/resend\"\n            }, \n            {\n              \"href\": \"http://localhost:8080/customer/\n              1/bankStatements/1/resend\"\n            }\n          ]\n        }\n      }, \n      ...\n        }\n      }\n    ]\n  }\n}\n```", "```java\npublic interface Publisher<T> \n{\n  public void subscribe(Subscriber<? super T> s);\n}\n```", "```java\npublic interface Subscriber<T> \n{\n  public void onSubscribe(Subscription s);\n  public void onNext(T t);\n  public void onError(Throwable t);\n  public void onComplete();\n}\n```", "```java\npublic interface Subscription \n{\n  public void request(long n);\n  public void cancel();\n}\n```", "```java\n@Test\npublic void givenAnEmptyMono_WhenTheDefaultIfEmptyOperatorIsUsed_ \nThenTheDefaultValueIsDeliveredAsResult() throws Exception \n{\n  String defaultMessage = \"Hello world\";\n  Mono<String> emptyMonoMessageProduced = Mono.empty();\n  Mono<String> monoMessageDelivered = emptyMonoMessageProduced\n  .defaultIfEmpty(defaultMessage);\n  monoMessageDelivered.subscribe(messageDelivered ->\n  Assert.assertEquals(defaultMessage, messageDelivered));\n}\n```", "```java\n@Test\npublic void givenAListOfCapitalizedStrings_WhenThe\nFlatMapConvertsToUpperCaseTheStrings_ThenTheStringsAre\nInUpperCase() throws Exception \n{\n  List<String> namesCapitalized = Arrays.asList(\"John\", \n  \"Steve\", \"Rene\");\n  Iterator<String> namesCapitalizedIterator = namesCapitalized.\n  iterator();\n  Flux<String> fluxWithNamesCapitalized = Flux.fromIterable\n  (namesCapitalized);\n  Flux<String> fluxWithNamesInUpperCase = fluxWithNamesCapitalized\n  .map(name -> name.toUpperCase());\n  fluxWithNamesInUpperCase.subscribe \n  (\n    nameInUpperCase -> \n    {\n      String expectedString =namesCapitalizedIterator.\n      next().toUpperCase();                \n Assert.assertEquals(expectedString, nameInUpperCase);\n    }\n  );\n}\n```", "```java\n@Test\npublic void givenAFluxWith10Elements_WhenBack\nPressureAsksForChunksOf3Elements_ThenYouHave4Chunks()\nthrows Exception \n{\n  List<Integer> digitsArray = Arrays.asList(1, 2, 3, 4, \n  5, 6, 7, 8, 9, 0);\n  Flux<Integer> fluxWithDigits = Flux.fromIterable\n  (digitsArray);\n  fluxWithDigits.buffer(3)\n  .log()\n  .subscribe\n  (\n    elements -> \n    {\n Assert.assertTrue(elements.size() <= 3);\n    }\n  );\n}\n```", "```java\n[ INFO] (main) onSubscribe(FluxBuffer.BufferExactSubscriber)\n[ INFO] (main) request(unbounded)\n[ INFO] (main) onNext([1, 2, 3])\n[ INFO] (main) onNext([4, 5, 6])\n[ INFO] (main) onNext([7, 8, 9])\n[ INFO] (main) onNext([0])\n[ INFO] (main) onComplete()\n```", "```java\n@Test\npublic void findAllShouldFindTheTotalAmountOfRecordsInserted() \n{\n  int quantityOfEntitiesToPersistAsFlux = 100;\n  // Saving a Flux with 100 items\n  repository.saveAll\n  (\n    Flux.just(generateArrayWithElements\n    (quantityOfEntitiesToPersistAsFlux))\n  )\n  .then()\n  .block();\n  // Saving a Mono\n  repository.saveAll(Mono.just(new Customer(\"Rene\")))\n  .then()\n  .block();\n  List<String> customerIds = repository.findAll()\n  .map(customer -> customer.getId())\n  .collectList()\n  .block();\n  int totalAmountOfInserts = quantityOfEntitiesTo\n  PersistAsFlux + 1;\n Assert.assertEquals(totalAmountOfInserts, customerIds.size());\n}\n```", "```java\n@GetMapping(value = \"/{singer}/comments\", produces = \nMediaType.TEXT_EVENT_STREAM_VALUE)\npublic Flux<Comment> querySingerComments(@PathVariable \nString singer) \n{\n  // generate one flux element per second\n  Flux<Long> intervalToGenerateComments = \n Flux.interval(Duration.ofSeconds(1));\n  Flux<Comment> comments = Flux.fromStream(Stream.generate(()\n  ->new Comment(composeComment(singer), new Date())));\n  return Flux.zip(intervalToGenerateComments, comments)\n  .map(fluxTuple -> fluxTuple.getT2());\n}\n```", "```java\ncurl http://localhost:8080/jlo/comments\n```"]