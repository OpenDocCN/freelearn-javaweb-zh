["```java\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-batch</artifactId>\n</dependency>\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-test</artifactId>\n  <scope>test</scope>\n</dependency>\n<dependency>\n  <groupId>org.springframework.batch</groupId>\n  <artifactId>spring-batch-test</artifactId>\n  <scope>test</scope>\n</dependency>\n```", "```java\n<dependency>\n   <groupId>org.hsqldb</groupId>\n   <artifactId>hsqldb</artifactId>\n   <scope>runtime</scope>\n</dependency>\n```", "```java\n\n@SpringBootApplication\n@EnableBatchProcessing @Configuration\npublic class SimpleBatchApplication {\n\n```", "```java\n@Autowired\nprivate JobBuilderFactory jobBuilderFactory;\n\n@Autowired\nprivate StepBuilderFactory stepBuilderFactory;\n```", "```java\n@Bean\npublic Job job(Step ourBatchStep) throws Exception {\n   return jobBuilderFactory.get(\"jobPackPub1\")\n         .incrementer(new RunIdIncrementer())\n         .start(ourBatchStep)\n         .build();\n}\n```", "```java\n@Bean\npublic Step ourBatchStep() {\n   return stepBuilderFactory.get(\"stepPackPub1\")\n         .tasklet(new Tasklet() {\n            public RepeatStatus execute(StepContribution contribution, \n            ChunkContext chunkContext) {\n               return null;\n```", "```java\n            }\n         })\n         .build();\n}\n```", "```java\n@EnableBatchProcessing\n@SpringBootApplication\n@Configuration\npublic class SimpleBatchApplication {\n\n   public static void main(String[] args) {\n      SpringApplication.run(SimpleBatchApplication.class, args);\n   }\n\n   @Autowired\n   private JobBuilderFactory jobBuilderFactory;\n\n   @Autowired\n   private StepBuilderFactory stepBuilderFactory;\n\n   @Bean\n   public Step ourBatchStep() {\n      return stepBuilderFactory.get(\"stepPackPub1\")\n            .tasklet(new Tasklet() {\n               public RepeatStatus execute\n                (StepContribution contribution, \n                    ChunkContext chunkContext) {\n                  return null;\n               }\n            })\n            .build();\n   }\n\n   @Bean\n   public Job job(Step ourBatchStep) throws Exception {\n      return jobBuilderFactory.get(\"jobPackPub1\")\n            .incrementer(new RunIdIncrementer())\n            .start(ourBatchStep)\n            .build();\n   }\n}\n```", "```java\n$ mvn spring-boot:run\n```", "```java\n$ mvn install\n```", "```java\n$ java -jar target/simple-batch-0.0.1-SNAPSHOT.jar\n```", "```java\n<dependency>\n   <groupId>org.hsqldb</groupId>\n   <artifactId>hsqldb</artifactId>\n   <scope>runtime</scope>\n</dependency>\n```", "```java\n0401343844,USD,1582.66,SAVING,3550891500,PAYROLL MARCH 2018,JAIME PRADO\n1713430133,USD,941.21,SAVING,2200993002,PAYROLL MARCH 2018,CAROLINA SARANGO\n1104447619,USD,725.20,SAVING,2203128508,PAYROLL MARCH 2018,MADALAINE RODRIGUEZ\n0805676117,USD,433.79,SAVING,5464013600,PAYROLL MARCH 2018,BELEN CALERO\n1717654933,USD,1269.10,SAVING,5497217100,PAYROLL MARCH 2018,MARIA VALVERDE\n1102362626,USD,1087.80,SAVING,2200376305,PAYROLL MARCH 2018,VANESSA ARMIJOS\n1718735793,USD,906.50,SAVING,6048977500,PAYROLL MARCH 2018,IGNACIO BERRAZUETA\n1345644970,USD,494.90,SAVING,6099018000,PAYROLL MARCH 2018,ALBERTO SALAZAR\n0604444602,USD,1676.40,SAVING,5524707700,PAYROLL MARCH 2018,XIMENA JARA\n1577777593,USD,3229.75,SAVING,3033235300,PAYROLL MARCH 2018,HYUN WOO\n1777705472,USD,2061.27,SAVING,3125662300,PAYROLL MARCH 2018,CARLOS QUIROLA\n1999353121,USD,906.50,SAVING,2203118265,PAYROLL MARCH 2018,PAUL VARELA\n1878363820,USD,1838.30,SAVING,4837838200,PAYROLL MARCH 2018,LEONARDO VASQUEZ\n```", "```java\nDROP TABLE PAYROLL IF EXISTS;\n\nCREATE TABLE PAYROLL  (\n    transaction_id BIGINT IDENTITY NOT NULL PRIMARY KEY,\n    person_identification VARCHAR(20),\n    currency VARCHAR(20),\n    tx_ammount DOUBLE,\n    account_type VARCHAR(20),\n    account_id VARCHAR(20),\n    tx_description VARCHAR(20),\n    first_last_name VARCHAR(20)\n);\n```", "```java\npackage com.packpub.payrollprocess;\n\npublic class PayrollTo {\n\n    private Integer identification;\n\n    private String currency;\n\n    private Double ammount;\n\n    private String accountType;\n\n    private String accountNumber;\n\n    private String description;\n\n    private String firstLastName;\n\n    public PayrollTo() {\n    }\n\n    public PayrollTo(Integer identification, String currency, Double ammount, String accountType, String accountNumber, String description, String firstLastName) {\n        this.identification = identification;\n        this.currency = currency;\n        this.ammount = ammount;\n        this.accountType = accountType;\n        this.accountNumber = accountNumber;\n        this.description = description;\n        this.firstLastName = firstLastName;\n    }\n\n    // getters and setters\n\n    @Override\n    public String toString() {\n        return \"PayrollTo{\" +\n                \"identification=\" + identification +\n                \", currency='\" + currency + '\\'' +\n                \", ammount=\" + ammount +\n                \", accountType='\" + accountType + '\\'' +\n                \", accountNumber='\" + accountNumber + '\\'' +\n                \", description='\" + description + '\\'' +\n                \", firstLastName='\" + firstLastName + '\\'' +\n                '}';\n    }\n}\n```", "```java\npackage com.packpub.payrollprocess;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.batch.item.ItemProcessor;\n\npublic class PayRollItemProcessor implements \n                    ItemProcessor<PayrollTo, PayrollTo> {\n\n    private static final Logger log = LoggerFactory\n                    .getLogger(PayRollItemProcessor.class);\n\n    @Override\n    public PayrollTo process(PayrollTo payrollTo) throws Exception {\n\n        final PayrollTo resultTransformation = new PayrollTo();\n        resultTransformation.setFirstLastName\n            (payrollTo.getFirstLastName().toUpperCase());\n        resultTransformation.setDescription\n            (payrollTo.getDescription().toUpperCase());\n        resultTransformation.setAccountNumber\n            (payrollTo.getAccountNumber());\n        resultTransformation.setAccountType(payrollTo.getAccountType());\n        resultTransformation.setCurrency(payrollTo.getCurrency());\n        resultTransformation.setIdentification\n            (payrollTo.getIdentification());\n\n        // Data Type Transform\n        final double ammountAsNumber = payrollTo.getAmmount()\n                                                    .doubleValue();\n        resultTransformation.setAmmount(ammountAsNumber);\n\n        log.info\n            (\"Transforming (\" + payrollTo + \") into (\" \n                                + resultTransformation + \")\");\n        return resultTransformation;\n    }\n}\n```", "```java\n@Configuration\n@EnableBatchProcessing\npublic class BatchConfig {\n\n    @Autowired\n    public JobBuilderFactory jobBuilderFactory;\n\n    @Autowired\n    public StepBuilderFactory stepBuilderFactory;\n\n // READ THE INPUT DATA\n    @Bean\n    public FlatFileItemReader<PayrollTo> reader() {\n        return new FlatFileItemReaderBuilder<PayrollTo>()\n                .name(\"payrollItemReader\")\n                .resource(new ClassPathResource(\"payroll-data.csv\"))\n                .delimited()\n                .names(\n                    new String[]{\n                        \"identification\", \"currency\", \"ammount\",\n                        \"accountType\", \"accountNumber\", \"description\",\n                        \"firstLastName\"})\n                .fieldSetMapper(\n                    new BeanWrapperFieldSetMapper<PayrollTo>() {{\n                    setTargetType(PayrollTo.class);\n                }})\n                .build();\n    }\n\n // PROCESS THE DATA\n    @Bean\n    public PayRollItemProcessor processor() {\n        return new PayRollItemProcessor();\n    }\n\n // WRITE THE PRODUCED DATA\n    @Bean\n    public JdbcBatchItemWriter<PayrollTo> writer(DataSource dataSource) {\n        return new JdbcBatchItemWriterBuilder<PayrollTo>()\n                .itemSqlParameterSourceProvider(\n                    new BeanPropertyItemSqlParameterSourceProvider<>())\n                .sql(\n                    \"INSERT INTO PAYROLL (PERSON_IDENTIFICATION,\n                        CURRENCY, TX_AMMOUNT, ACCOUNT_TYPE, ACCOUNT_ID, \n                        TX_DESCRIPTION, FIRST_LAST_NAME) VALUES \n                    (:identification,:currenxcy,:ammount,:accountType,\n                     :accountNumber, :description, :firstLastName)\")\n                .dataSource(dataSource)\n                .build();\n    }\n\n    @Bean\n    public Job importPayRollJob(JobCompletionPayRollListener listener, Step step1) {\n        return jobBuilderFactory.get(\"importPayRollJob\")\n                .incrementer(new RunIdIncrementer())\n                .listener(listener)\n                .flow(step1)\n                .end()\n                .build();\n    }\n\n    @Bean\n    public Step step1(JdbcBatchItemWriter<PayrollTo> writer) {\n        return stepBuilderFactory.get(\"step1\")\n                .<PayrollTo, PayrollTo> chunk(10)\n                .reader(reader())\n                .processor(processor())\n                .writer(writer)\n                .build();\n    }\n}\n```", "```java\n@Bean\n    public Step step1(JdbcBatchItemWriter<PayrollTo> writer)\n {\n        return stepBuilderFactory.get(\"step1\")\n                .<PayrollTo, PayrollTo> chunk(10)\n                .reader(reader())\n .processor(processor())\n .writer(writer)\n                .build();\n }\n```", "```java\n\n@Component\npublic class JobCompletionPayRollListener \n            extends JobExecutionListenerSupport {\n\n    private static final Logger log = \n        LoggerFactory.getLogger(JobCompletionPayRollListener.class);\n\n    private final JdbcTemplate jdbcTemplate;\n\n    @Autowired\n    public JobCompletionPayRollListener(JdbcTemplate jdbcTemplate) {\n        this.jdbcTemplate = jdbcTemplate;\n    }\n\n    @Override\n    public void afterJob(JobExecution jobExecution) {\n        if (jobExecution.getStatus() == BatchStatus.COMPLETED) {\n log.info(\">>>>> PAY ROLL JOB FINISHED! \");\n\n            jdbcTemplate\n            .query(\n                \"SELECT PERSON_IDENTIFICATION, CURRENCY, TX_AMMOUNT,                          ACCOUNT_TYPE, ACCOUNT_ID, TX_DESCRIPTION, \n                        FIRST_LAST_NAME FROM PAYROLL\",\n                    (rs, row) -> new PayrollTo(\n                            rs.getInt(1),\n                            rs.getString(2),\n                            rs.getDouble(3),\n                            rs.getString(4),\n                            rs.getString(5),\n                            rs.getString(6),\n                            rs.getString(7))\n            ).forEach(payroll -> \n                log.info(\"Found <\" + payroll + \"> in the database.\")\n                );\n        }\n    }\n}\n```", "```java\n$ mvn spring-boot:run\n```", "```java\n$ mvn install\n```", "```java\n$ java -jar target/payroll-process-0.0.1-SNAPSHOT.jar\n```"]