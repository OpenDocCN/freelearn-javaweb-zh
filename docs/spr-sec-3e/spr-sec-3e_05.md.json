["```java\n    //build.gradle\n\n    dependencies {\n       ...\n    // REMOVE: compile('org.springframework.boot:spring-boot-starter-jdbc')\n compile('org.springframework.boot:spring-boot-starter-data-jpa')       ...\n    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/\n    dataaccess/JdbcCalendarUserDao.java\n\n    public int createUser(final CalendarUser userToAdd) {\n    if (userToAdd == null) {\n         throw new IllegalArgumentException(\"userToAdd cannot be null\");\n    }\n    if (userToAdd.getId() != null) {\n         throw new IllegalArgumentException(\"userToAdd.getId() must be \n         null when creating a \n         \"+CalendarUser.class.getName());\n    }\n KeyHoldener keyHolder = new GeratedKeyHolder(); this.jdbcOperations.update(new PreparedStatementCreator() { public PreparedStatement createPreparedStatement\n       (Connection connection)\n       throws SQLException { PreparedStatement ps = connection.prepareStatement(\"insert into \n         calendar_users (email, password, first_name, last_name) \n         values (?, ?, ?, ?)\", new String[] {  \n          \"id\" });\n ps.setString(1, userToAdd.getEmail()); ps.setString(2, userToAdd.getPassword()); ps.setString(3, userToAdd.getFirstName()); ps.setString(4, userToAdd.getLastName()); return ps; } }, keyHolder);    return keyHolder.getKey().intValue();\n    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/dataaccess/JpaCalendarUserDao.java\n\n    public int createUser(final CalendarUser userToAdd) {\n    if (userToAdd == null) {\n         throw new IllegalArgumentException(\"userToAdd cannot be null\");\n    }\n    if (userToAdd.getId() != null) {\n         throw new IllegalArgumentException(\"userToAdd.getId() \n         must be null when creating a \"+CalendarUser.class.getName());\n    }\n Set<Role> roles = new HashSet<>(); roles.add(roleRepository.findOne(0)); userToAdd.setRoles(roles); CalendarUser result = repository.save(userToAdd); repository.flush();     return result.getId();\n    }\n```", "```java\n    //src/main/resources/data.sql:\n```", "```java\n        insert into calendar_users(id,username,email,password,\n        first_name,last_name) \n        values(0,'user1@example.com','user1@example.com',\n        '$2a$04$qr7RWyqOnWWC1nwotUW1nOe1RD5.\n        mKJVHK16WZy6v49pymu1WDHmi','User','1');\n```", "```java\n        insert into calendar_users(id,username,email,password,\n        first_name,last_name) \n        values (1,'admin1@example.com','admin1@example.com',\n        '$2a$04$0CF/Gsquxlel3fWq5Ic/ZOGDCaXbMfXYiXsviTNMQofWRXhvJH3IK',\n        'Admin','1');\n```", "```java\n        insert into calendar_users(id,username,email,password,first_name,\n        last_name)\n        values (2,'user2@example.com','user2@example.com',\n        '$2a$04$PiVhNPAxunf0Q4IMbVeNIuH4M4ecySWHihyrclxW..PLArjLbg8CC',\n        'User2','2');\n```", "```java\n        insert into role(id, name) values (0, 'ROLE_USER');\n        insert into role(id, name) values (1, 'ROLE_ADMIN');\n```", "```java\n        insert into user_role(user_id,role_id) values (0, 0);\n```", "```java\n        insert into user_role(user_id,role_id) values (1, 0);\n        insert into user_role(user_id,role_id) values (1, 1);\n```", "```java\n        insert into events (id,when,summary,description,owner,attendee)\n        values (100,'2017-07-03 20:30:00','Birthday Party',\n        'This is going to be a great birthday',0,1);\n        insert into events (id,when,summary,description,owner,attendee) \n        values (101,'2017-12-23 13:00:00','Conference Call','Call with \n        the client',2,0);\n        insert into events (id,when,summary,description,owner,attendee) \n        values (102,'2017-09-14 11:30:00','Vacation',\n        'Paragliding in Greece',1,2);\n```", "```java\n    # Embedded Database\n    datasource:\n    url: jdbc:h2:mem:dataSource;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE\n    driverClassName: org.h2.Driver\n    username: sa\n    password:\n    continue-on-error: true\n jpa: database-platform: org.hibernate.dialect.H2Dialect show-sql: true hibernate: ddl-auto: create-drop\n```", "```java\n//src/main/java/com/packtpub/springsecurity/domain/Event.java\n\nimport javax.persistence.*; @Entity @Table(name = \"events\") public class Event implements Serializable{\n @Id @GeneratedValue(strategy = GenerationType.AUTO) private Integer id;\n@NotEmpty(message = \"Summary is required\")\nprivate String summary;\n@NotEmpty(message = \"Description is required\")\nprivate String description;\n@NotNull(message = \"When is required\")\nprivate Calendar when;\n@NotNull(message = \"Owner is required\")\n @ManyToOne(fetch = FetchType.LAZY) @JoinColumn(name=\"owner\", referencedColumnName=\"id\") private CalendarUser owner;\n @ManyToOne(fetch = FetchType.LAZY) @JoinColumn(name=\"attendee\", referencedColumnName=\"id\") private CalendarUser attendee;\n```", "```java\n//src/main/java/com/packtpub/springsecurity/domain/Role.java\n\nimport javax.persistence.*;\n@Entity @Table(name = \"role\") public class Role implements Serializable {\n @Id @GeneratedValue(strategy = GenerationType.AUTO) private Integer id;\nprivate String name;\n @ManyToMany(fetch = FetchType.EAGER, mappedBy = \"roles\") private Set<CalendarUser> users;\n```", "```java\n//src/main/java/com/packtpub/springsecurity/domain/CalendarUser.java\n\nimport javax.persistence.*;\nimport java.io.Serializable;\nimport java.util.Set;\n@Entity @Table(name = \"calendar_users\") public class CalendarUser implements Serializable {\n @Id @GeneratedValue(strategy = GenerationType.AUTO)   private Integer id;\n   private String firstName;\n   private String lastName;\n   private String email;\n   private String password;\n @ManyToMany(fetch = FetchType.EAGER) @JoinTable(name = \"user_role\", joinColumns = @JoinColumn(name = \"user_id\"), inverseJoinColumns = @JoinColumn(name = \"role_id\")) private Set<Role> roles;\n```", "```java\n        //com/packtpub/springsecurity/repository/CalendarUserRepository.java\n\n        package com.packtpub.springsecurity.repository;\n        import com.packtpub.springsecurity.domain.CalendarUser;\n        import org.springframework.data.jpa.repository.JpaRepository;\n\n        public interface CalendarUserRepository\n               extends JpaRepository<CalendarUser, Integer> {\n           CalendarUser findByEmail(String email);\n        }\n```", "```java\n            //com/packtpub/springsecurity/repository/EventRepository.java\n\n            package com.packtpub.springsecurity.repository;\n            import com.packtpub.springsecurity.domain.Event;\n            import org.springframework.data.jpa.repository.JpaRepository;\n\n            public interface EventRepository extends JpaRepository<Event, \n            Integer> {}\n```", "```java\n            //com/packtpub/springsecurity/repository/\n\n            package com.packtpub.springsecurity.repository;\n            import com.packtpub.springsecurity.domain.Event;\n            import org.springframework.data.jpa.repository.JpaRepository;\n\n            public interface RoleRepository extends JpaRepository<Role, \n            Integer> {}\n```", "```java\n        //com/packtpub/springsecurity/dataaccess/JpaEventDao.java\n\n        package com.packtpub.springsecurity.dataaccess;\n        import com.packtpub.springsecurity.domain.CalendarUser;\n        import com.packtpub.springsecurity.domain.Event;\n import com.packtpub.springsecurity.repository.EventRepository;        import org.springframework.beans.factory.annotation.Autowired;\n        import org.springframework.data.domain.Example;\n        import org.springframework.stereotype.Repository;\n        import org.springframework.transaction.annotation.Transactional;\n        ...\n        @Repository\n         public class JpaEventDao implements EventDao {\n private EventRepository repository;           @Autowired\n public JpaEventDao(EventRepository repository) { if (repository == null) { throw new IllegalArgumentException(\"repository \n                    cannot be null\"); } this.repository = repository;           }\n           @Override\n           @Transactional(readOnly = true)\n           public Event getEvent(int eventId) {\n return repository.findOne(eventId);           }\n           @Override\n           public int createEvent(final Event event) {\n               ...\n               final Calendar when = event.getWhen();\n               if(when == null) {\n                   throw new IllegalArgumentException(\"event.getWhen() \n                   cannot be null\");\n               }\n Event newEvent = repository.save(event);              ...\n           }\n           @Override\n           @Transactional(readOnly = true)\n           public List<Event> findForUser(final int userId) {\n                Event example = new Event();\n CalendarUser cu = new CalendarUser(); cu.setId(userId); example.setOwner(cu);               return repository.findAll(Example.of(example));\n           }\n           @Override\n           @Transactional(readOnly = true)\n           public List<Event> getEvents() {\n return repository.findAll();           }\n        }\n```", "```java\n        //com/packtpub/springsecurity/dataaccess/JpaCalendarUserDao.java\n\n        package com.packtpub.springsecurity.dataaccess;\n        ... omitted for brevity ...\n        @Repository\n        public class JpaCalendarUserDao\n               implements CalendarUserDao {\n private CalendarUserRepository userRepository; private RoleRepository roleRepository; @Autowired public JpaCalendarUserDao(CalendarUserRepository repository, RoleRepository roleRepository) { if (repository == null) { throw new IllegalArgumentException(\"repository \n                   cannot be null\"); } if (roleRepository == null) { throw new IllegalArgumentException(\"roleRepository \n                   cannot be null\"); } this. userRepository = repository; this.roleRepository = roleRepository; }           @Override\n           @Transactional(readOnly = true)\n           public CalendarUser getUser(final int id) {\n return userRepository.findOne(id);           }\n           @Override\n           @Transactional(readOnly = true)\n           public CalendarUser findUserByEmail(final String email) {\n               if (email == null) {\n                   throw new IllegalArgumentException\n                   (\"email cannot be null\");\n               }\n               try {\n return userRepository.findByEmail(email);               } catch (EmptyResultDataAccessException notFound) {\n                  return null;\n               }\n           }\n           @Override\n           @Transactional(readOnly = true)\n           public List<CalendarUser> findUsersByEmail(final String email) {\n               if (email == null) {\n                  throw new IllegalArgumentException(\"email \n                  cannot be null\");\n               }\n               if (\"\".equals(email)) {\n                   throw new IllegalArgumentException(\"email \n                   cannot be empty string\");\n               } return userRepository.findAll();         }\n           @Override\n           public int createUser(final CalendarUser userToAdd) {\n               if (userToAdd == null) {\n                   throw new IllegalArgumentException(\"userToAdd \n                   cannot be null\");\n               }\n               if (userToAdd.getId() != null) {\n                   throw new IllegalArgumentException(\"userToAdd.getId() \n                   must be null when creating a \"+\n                   CalendarUser.class.getName());\n               }\n Set<Role> roles = new HashSet<>(); roles.add(roleRepository.findOne(0)); userToAdd.setRoles(roles); CalendarUser result = userRepository.save(userToAdd); userRepository.flush();              return result.getId();\n           }\n        }\n```", "```java\n//com/packtpub/springsecurity/dataaccess/JpaEventDao.java\n\npackage com.packtpub.springsecurity.dataaccess;\n... omitted for brevity ...\n@Repository\npublic class JpaEventDao implements EventDao {\n private EventRepository repository;   @Autowired\n public JpaEventDao(EventRepository repository) { if (repository == null) { throw new IllegalArgumentException(\"repository \n           cannot be null\"); } this.repository = repository; }   @Override\n   @Transactional(readOnly = true)\n   public Event getEvent(int eventId) {\n return repository.findOne(eventId);   }\n   @Override\n   public int createEvent(final Event event) {\n       if (event == null) {\n           throw new IllegalArgumentException(\"event cannot be null\");\n      }\n       if (event.getId() != null) {\n           throw new IllegalArgumentException\n           (\"event.getId() must be null when creating a new Message\");\n       }\n       final CalendarUser owner = event.getOwner();\n        if (owner == null) {\n           throw new IllegalArgumentException(\"event.getOwner() \n           cannot be null\");\n       }\n       final CalendarUser attendee = event.getAttendee();\n       if (attendee == null) {\n           throw new IllegalArgumentException(\"attendee.getOwner() \n           cannot be null\");\n       }\n       final Calendar when = event.getWhen();\n       if(when == null) {\n           throw new IllegalArgumentException\n           (\"event.getWhen()cannot be null\");\n       }\n Event newEvent = repository.save(event);       return newEvent.getId();\n   }\n      @Override\n   @Transactional(readOnly = true)\n   public List<Event> findForUser(final int userId) {\n Event example = new Event(); CalendarUser cu = new CalendarUser(); cu.setId(userId); example.setOwner(cu); return repository.findAll(Example.of(example));   }\n     @Override\n   @Transactional(readOnly = true)\n   public List<Event> getEvents() {\n return repository.findAll();   }\n}\n```", "```java\n    //com/packtpub/springsecurity/service/DefaultCalendarService.java\n\n    package com.packtpub.springsecurity.service;\n    ... omitted for brevity ...\n    @Repository\n    public class DefaultCalendarService implements CalendarService {\n       @Override\n       public int createUser(CalendarUser user) {\n           String encodedPassword = passwordEncoder.encode(user.getPassword());\n           user.setPassword(encodedPassword);\n           int userId = userDao.createUser(user);   \n //jdbcOperations.update(\"insert into         \n           calendar_user_authorities(calendar_user,authority) \n           values (?,?)\", userId, //\"ROLE_USER\");           return userId;\n       }\n    }\n```", "```java\n        //com/packtpub/springsecurity/service/UserDetailsServiceImpl.java\n\n        package com.packtpub.springsecurity.service;\n        ... omitted for brevity ...\n        @Service\n        public class UserDetailsServiceImpl\n             implements UserDetailsService {\n @Autowired private CalendarUserRepository userRepository; @Override @Transactional(readOnly = true) public UserDetails loadUserByUsername(final String username)           throws UsernameNotFoundException {            CalendarUser user = userRepository.findByEmail(username);\n           Set<GrantedAuthority> grantedAuthorities = new HashSet<>();\n for (Role role : user.getRoles()){ grantedAuthorities.add(new SimpleGrantedAuthority\n               (role.getName())); } return new org.springframework.security.core.userdetails.User( user.getEmail(), user.getPassword(), grantedAuthorities); }        }\n\n```", "```java\n       //com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n        package com.packtpub.springsecurity.configuration;\n        ... omitted for brevity ...\n        @Configuration\n        @EnableWebSecurity\n        public class SecurityConfig extends WebSecurityConfigurerAdapter {\\\n @Autowired private UserDetailsService userDetailsService;           @Override\n          public void configure(AuthenticationManagerBuilder auth) \n          throws Exception {\n          auth\n .userDetailsService(userDetailsService)           .passwordEncoder(passwordEncoder());\n           }\n @Bean @Override public UserDetailsService userDetailsService() { return new UserDetailsServiceImpl(); }           ...\n        }\n```", "```java\n    //build.gradle\n    // JPA / ORM / Hibernate:\n    //compile('org.springframework.boot:spring-boot-starter-data-jpa')\n    // H2 RDBMS\n    //runtime('com.h2database:h2')\n    // MongoDB:\n\n compile('org.springframework.boot:spring-boot-starter-data-mongodb') compile('de.flapdoodle.embed:de.flapdoodle.embed.mongo')\n```", "```java\n    //src/main/resources/application.yml\n\n    spring\n    # MongoDB\n data: mongodb:         host: localhost\n database: dataSource\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/\n    MongoDataInitializer.java\n\n    ¦\n    @Configuration\n    public class MongoDataInitializer {\n       @Autowired\n       private RoleRepository roleRepository;\n       @Autowired\n       private CalendarUserRepository calendarUserRepository;\n       @Autowired\n       private EventRepository eventRepository;\n @PostConstruct       public void setUp() {\n calendarUserRepository.deleteAll(); roleRepository.deleteAll(); eventRepository.deleteAll(); seedRoles(); seedCalendarUsers(); seedEvents();       }\n       CalendarUser user1, admin, user2;\n       {\n user1 = new CalendarUser(0, \"user1@example.com\",\n           \"$2a$04$qr7RWyqOnWWC1nwotUW1nOe1RD5.mKJVHK16WZy6v49pymu1WDHmi\",\n           \"User\",\"1\"); admin = new   CalendarUser(1,\"admin1@example.com\",\n           \"$2a$04$0CF/Gsquxlel3fWq5Ic/ZOGDCaXbMfXYiXsviTNMQofWRXhvJH3IK\",\n           \"Admin\",\"1\"); user2 = new CalendarUser(2,\"user2@example.com\",\n           \"$2a$04$PiVhNPAxunf0Q4IMbVeNIuH4M4ecySWHihyrclxW..PLArjLbg8CC\",\n           \"User2\",\"2\");       }\n       Role user_role, admin_role;\n       private void seedRoles(){\n           user_role = new Role(0, \"ROLE_USER\");\n           admin_role = new Role(1, \"ROLE_ADMIN\");\n           user_role = roleRepository.save(user_role);\n           admin_role = roleRepository.save(admin_role);\n       }\n       private void seedEvents(){\n // Event 1           Event event1 = new Event(100, \"Birthday Party\", \"This is \n           going to be a great birthday\", new \n           GregorianCalendar(2017,6,3,6,36,00), user, admin);\n // Event 2           Event event2 = new Event(101, \"Conference Call\", \n           \"Call with the client\",new \n           GregorianCalendar(2017,11,23,13,00,00),user2, user);\n // Event 3           Event event3 = new Event(102, \"Vacation\",\n           \"Paragliding in Greece\",new GregorianCalendar(2017,8,14,11,30,00),\n           admin, user2);\n           // Save Events\n eventRepository.save(event1); eventRepository.save(event2); eventRepository.save(event3);       }\n       private void seedCalendarUsers(){\n           // user1\n           user1.addRole(user_role);\n          // admin2\n           admin.addRole(user_role);\n           admin.addRole(admin_role);\n           // user2\n           user2.addRole(user_role);\n calendarUserRepository.save(user1); calendarUserRepository.save(admin); calendarUserRepository.save(user2);       }\n    }\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/domain/Event.java\n\n         ...\n import javax.persistence.*; @Entity @Table(name = \"events\")        public class Event implements Serializable{\n @Id @GeneratedValue(strategy = GenerationType.AUTO)           private Integer id;\n           private String summary;\n           private String description;\n           private Calendar when;\n @ManyToOne(fetch = FetchType.LAZY) @JoinColumn(name=\"owner\", referencedColumnName=\"id\")           private CalendarUser owner;\n @ManyToOne(fetch = FetchType.LAZY) @JoinColumn(name=\"attendee\", referencedColumnName=\"id\")           private CalendarUser attendee;\n           ¦\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/domain/Event.java\n\n import org.springframework.data.annotation.Id; import org.springframework.data.annotation.PersistenceConstructor; import org.springframework.data.domain.Persistable; import org.springframework.data.mongodb.core.mapping.DBRef; import org.springframework.data.mongodb.core.mapping.Document;        ...\n @Document(collection=\"events\")        public class Event implements Persistable<Integer>, Serializable{\n @Id             private Integer id;\n             private String summary;\n             private String description;\n             private Calendar when;\n @DBRef           private CalendarUser owner;\n @DBRef           private CalendarUser attendee;\n @PersistenceConstructor           public Event(Integer id,\n                 String summary,\n                 String description,\n                 Calendar when,\n                 CalendarUser owner,\n                 CalendarUser attendee) {\n                  ...\n          }\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/domain/Role.java\n\n        ...\n        import org.springframework.data.annotation.Id;\n        import org.springframework.data.annotation.PersistenceConstructor;\n        import org.springframework.data.domain.Persistable;\n        import org.springframework.data.mongodb.core.mapping.Document;\n @Document(collection=\"role\")        public class Role implements Persistable<Integer>, Serializable {\n @Id            private Integer id;\n            private String name;\n            public Role(){}\n @PersistenceConstructor        public Role(Integer id, String name) {\n            this.id = id;\n            this.name = name;\n         }\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/domain/CalendarUser.java\n\n        ...\n        import org.springframework.data.annotation.Id;\n        import org.springframework.data.annotation.PersistenceConstructor;\n        import org.springframework.data.domain.Persistable;\n        import org.springframework.data.mongodb.core.mapping.DBRef;\n        import org.springframework.data.mongodb.core.mapping.Document;\n @Document(collection=\"calendar_users\")        public class CalendarUser implements Persistable<Integer>, \n        Serializable {\n @Id           private Integer id;\n           private String firstName;\n           private String lastName;\n           private String email;\n           private String password;\n @DBRef(lazy = false)          private Set<Role> roles = new HashSet<>(5);\n          public CalendarUser() {}\n @PersistenceConstructor          public CalendarUser(Integer id,String email, String password,\n          String firstName,String lastName) {\n             this.id = id;\n             this.firstName = firstName;\n             this.lastName = lastName;\n             this.email = email;\n             this.password = password;\n           }\n```", "```java\n    //com/packtpub/springsecurity/repository/CalendarUserRepository.java\n\n    ...\n import org.springframework.data.mongodb.repository.MongoRepository;    public interface CalendarUserRepository extends MongoRepository\n    <CalendarUser, Integer> {\n       ...\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/dataaccess/MongoEventDao.java\n\n    ...\n import java.util.concurrent.atomic.AtomicInteger;    @Repository\n    public class MongoEventDao implements EventDao {\n      // Simple Primary Key Generator\n private AtomicInteger eventPK = new AtomicInteger(102);       ...\n       @Override\n       public int createEvent(Event event) {\n           ...\n           // Get the next PK instance\n event.setId(eventPK.incrementAndGet()); Event newEvent = repository.save(event);           return newEvent.getId();\n       }\n       ...\n```", "```java\n    @Repository\n    public class MongoCalendarUserDao implements CalendarUserDao {\n```"]