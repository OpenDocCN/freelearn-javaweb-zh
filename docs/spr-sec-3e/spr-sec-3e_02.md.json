["```java\n    build.gradle:\n    dependencies {\n        compile \"org.springframework.security:spring-security-  \n        config:${springSecurityVersion}\"\n        compile \"org.springframework.security:spring-security- \n        core:${springSecurityVersion}\"\n        compile \"org.springframework.security:spring-security- \n        web:${springSecurityVersion}\"\n        ...\n    }\n```", "```java\n    build.gradle\n    // Spring Security IO with ensures correct Springframework versions\n    dependencyManagement {\n         imports {\n            mavenBom 'io.spring.platform:platform-bom:Brussels-${springIoVersion}'\n        }\n    }\n    dependencies {\n        ...\n    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/\n    SecurityConfig.java\n\n    @Configuration\n    @EnableWebSecurity\n    public class SecurityConfig extends WebSecurityConfigurerAdapter {\n        @Override\n        public void configure(final AuthenticationManagerBuilder auth) throws Exception     \n        {\n            auth.inMemoryAuthentication().withUser(\"user1@example.com\")\n            .password(\"user1\").roles(\"USER\");\n        }\n        @Override\n        protected void configure(final HttpSecurity http) throws Exception {\n            http.authorizeRequests()\n                    .antMatchers(\"/**\").access(\"hasRole('USER')\")\n                    // equivalent to <http auto-config=\"true\">\n                    .and().formLogin()\n                    .and().httpBasic()\n                    .and().logout()\n                    // CSRF is enabled by default (will discuss later)\n                    .and().csrf().disable();\n        }\n    }\n```", "```java\n    //src/main/java/c/p/s/web/configuration/WebAppInitializer\n\n    public class WebAppInitializer extends   \n    AbstractAnnotationConfigDispatcherServletInitializer {\n        @Override\n        protected Class<?>[] getRootConfigClasses() {\n            return new Class[] { JavaConfig.class, SecurityConfig.class,    \n            DataSourceConfig.class };\n        }\n        ...\n    }\n```", "```java\n    //src/main/java/c/p/s/web/configuration/WebAppInitializer\n\n    public class WebAppInitializer extends     \n    AbstractAnnotationConfigDispatcherServletInitializer {\n        ...\n        @Override\n        protected Class<?>[] getServletConfigClasses() {\n            return new Class[] { WebMvcConfig.class };\n        }\n        ...\n        @Override\n        public void onStartup(final ServletContext servletContext) throws  \n        ServletException {\n            // Registers DispatcherServlet\n            super.onStartup(servletContext);\n        }\n    }\n```", "```java\n    //src/main/java/c/p/s/web/configuration/SecurityWebAppInitializer\n\n    @Order(1)\n    public class SecurityWebAppInitializer extends     \n AbstractSecurityWebApplicationInitializer {\n        public SecurityWebAppInitializer() {\n            super();\n        }\n    }\n```", "```java\n    public class DelegatingFilterProxy implements Filter {\n      void doFilter(request, response, filterChain) {\n        Filter delegate = applicationContet.getBean(\"springSecurityFilterChain\")\n        delegate.doFilter(request,response,filterChain);\n      }\n    }\n```", "```java\n    public class FilterChainProxy implements Filter {\n  void doFilter(request, response, filterChain) {\n    // lookup all the Filters for this request\n    List<Filter> delegates =       lookupDelegates(request,response)\n    // invoke each filter unless the delegate decided to stop\n    for delegate in delegates {\n      if continue processing\n        delegate.doFilter(request,response,filterChain)\n    }\n    // if all the filters decide it is ok allow the \n    // rest of the application to run\n    if continue processing\n      filterChain.doFilter(request,response)  }\n    }\n\n```", "```java\n        auth.inMemoryAuthentication().withUser(\"user1@example.com\")\n        .password(\"user1\").roles(\"USER\");\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/configuration/\n        SecurityConfig.java\n\n        http.authorizeRequests()\n        ...\n       .logout()\n       .logoutUrl(\"/logout\")\n       .logoutSuccessUrl(\"/login?logout\");\n```", "```java\n        //src/main/webapp/WEB-INF/templates/fragments/header.html\n\n        <div id=\"navbar\" ...>\n         ...\n           <ul class=\"nav navbar-nav pull-right\">\n             <li><a id=\"navLogoutLink\" th:href=\"@{/logout}\">\n               Logout</a></li>\n           </ul>\n            ...\n        </div>\n```", "```java\n        //src/main/webapp/WEB-INF/templates/login.html\n\n        <div th:if=\"${param.logout != null}\" class=\"alert \n        alert-success\"> You have been logged out.</div>\n          <label for=\"username\">Username</label>\n          ...\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/\n    SecurityConfig.java\n\n    http.authorizeRequests()\n        .antMatchers(\"/\").access(\"hasAnyRole('ANONYMOUS', 'USER')\")\n        .antMatchers(\"/login/*\").access(\"hasAnyRole('ANONYMOUS', 'USER')\")\n        .antMatchers(\"/logout/*\").access(\"hasAnyRole('ANONYMOUS', 'USER')\")\n        .antMatchers(\"/admin/*\").access(\"hasRole('ADMIN')\")\n        .antMatchers(\"/events/\").access(\"hasRole('ADMIN')\")\n        .antMatchers(\"/**\").access(\"hasRole('USER')\")\n```", "```java\n        //build.gradle\n\n           dependency{\n              ...\n              compile 'org.thymeleaf.extras:thymeleaf-\n              extras-springsecurity4'\n         }\n```", "```java\n        //src/com/packtpub/springsecurity/web/configuration/\n        ThymeleafConfig.java\n\n            @Bean\n            public SpringTemplateEngine templateEngine(\n             final ServletContextTemplateResolver resolver)   \n            {\n                SpringTemplateEngine engine = new SpringTemplateEngine();\n               engine.setTemplateResolver(resolver);\n engine.setAdditionalDialects(new HashSet<IDialect>() {{ add(new LayoutDialect()); add(new SpringSecurityDialect()); }});                return engine;\n            }\n```", "```java\n        //src/main/webapp/WEB-INF/templates/fragments/header.html\n\n            <html xmlns:th=\"http://www.thymeleaf.org\" \n xmlns:sec=\"http://www.thymeleaf.org/thymeleaf- \n            extras-springsecurity4\">\n            ...\n        <div id=\"navbar\" class=\"collapse navbar-collapse\">\n            ...\n            <ul class=\"nav navbar-nav pull-right\" \n sec:authorize=\"isAuthenticated()\">\n                <li>\n                    <p class=\"navbar-text\">Welcome <div class=\"navbar-text\"  \n                    th:text=\"${#authentication.name}\">User</div></p>\n                </li>\n                <li>\n                    <a id=\"navLogoutLink\" class=\"btn btn-default\" \n                    role=\"button\" th:href=\"@{/logout}\">Logout</a>\n                </li>\n                <li>&nbsp;|&nbsp;</li>\n            </ul>\n            <ul class=\"nav navbar-nav pull-right\" \n sec:authorize=\" ! isAuthenticated()\">\n                <li><a id=\"navLoginLink\" class=\"btn btn-default\" \n                role=\"button\"  \n                th:href=\"@{/login/form}\">Login</a></li>\n                <li>&nbsp;|&nbsp;</li>\n            </ul>\n            ...\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/configuration/\n        SecurityConfig.java\n\n          .formLogin()\n                      .loginPage(\"/login/form\")\n                      .loginProcessingUrl(\"/login\")\n                      .failureUrl(\"/login/form?error\")\n                      .usernameParameter(\"username\")\n                      .passwordParameter(\"password\")\n .defaultSuccessUrl(\"/default\")                      .permitAll()\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/web/controllers/\n        DefaultController.java\n\n            // imports omitted\n            @Controller \n            public class DefaultController {\n           @RequestMapping(\"/default\") \n             public String defaultAfterLogin(HttpServletRequest request) { \n                 if (request.isUserInRole(\"ADMIN\")) { \n                     return \"redirect:/events/\"; \n                 } \n                 return \"redirect:/\"; \n             }\n        }\n```", "```java\n        .defaultSuccessUrl(\"/default\", true)\n```"]