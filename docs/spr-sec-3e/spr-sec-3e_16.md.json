["```java\n     List<ConfigAttribute> attrs = SecurityConfig.createSingleAttributeList\n     (\"ROLE_USER\");\n```", "```java\n    List<ConfigAttribute> attrs = SecurityConfig.createList(\"ROLE_USER\");\n```", "```java\n@Bean\npublic AuthenticationManager authenticationManager(List<AuthenticationProvider> providers) {\n      return new ProviderManager(providers);\n}\n@Bean\npublic AuthenticationProvider authenticationProvider(UserDetailsServiceWrapper userDetailsService) {\n      DaoAuthenticationProvider provider = new DaoAuthenticationProvider();\n      provider.setUserDetailsService(userDetailsService);\n      return provider;\n}\n@Bean\npublic UserDetailsServiceWrapper userDetailsServiceWrapper(RoleHierarchy roleHierarchy) {\n      UserDetailsServiceWrapper wrapper = new UserDetailsServiceWrapper();\n      wrapper.setRoleHierarchy(roleHierarchy);\n      wrapper.setUserDetailsService(userDetailsService());\n      return wrapper;\n}\n```", "```java\n@Bean\npublic AuthenticationManager authenticationManager(List<AuthenticationProvider> providers) {\n      return new ProviderManager(providers);\n}\n@Bean\npublic AuthenticationProvider authenticationProvider(UserDetailsService userDetailsService, GrantedAuthoritiesMapper authoritiesMapper) {\n      DaoAuthenticationProvider provider = new DaoAuthenticationProvider();\n      provider.setUserDetailsService(userDetailsService);\n      provider.setAuthoritiesMapper(authoritiesMapper);\n      return provider;\n}\n@Bean\npublic RoleHierarchyAuthoritiesMapper roleHierarchyAuthoritiesMapper(RoleHierarchy roleHierarchy) {\n      return new RoleHierarchyAuthoritiesMapper(roleHierarchy);\n}\n```", "```java\n    UserDetailsWrapper authenticate = new UserDetailsWrapper\n    (userDetails, roleHiearchy);\n```", "```java\n    Collection<GrantedAuthority> allAuthorities = roleHiearchy.\n    getReachableGrantedAuthorities(userDetails.getAuthorities());\n    UserDetails authenticate = new User(userDetails.getUsername(), \n    userDetails.getPassword(), allAuthorities);\n```", "```java\n    AffirmativeBased adm = new AffirmativeBased();\n    adm.setDecisionVoters(voters);\n```", "```java\n    AffirmativeBased adm = new AffirmativeBased(voters);\n```", "```java\n    public AccountExpiredException(String msg, Object extraInformation) {\n      ...\n    }\n```", "```java\n    new LockedException(\"Message\", userDetails);\n```", "```java\n    new LockedException(\"Message\");\n```", "```java\n    AnonymousAuthenticationProvider provider = new \n    AnonymousAuthenticationProvider();\n    provider.setKey(key);\n```", "```java\n    AnonymousAuthenticationProvider provider = new \n    AnonymousAuthenticationProvider(key);\n```", "```java\n    AuthenticationDetailsSourceImpl source = new \n    AuthenticationDetailsSourceImpl();\n    source.setClazz(CustomWebAuthenticationDetails.class);\n```", "```java\npublic class CustomWebAuthenticationDetailsSource implements AuthenticationDetailsSource<HttpServletRequest, WebAuthenticationDetails> {\n      public WebAuthenticationDetails buildDetails(HttpServletRequest context) {\n            return new CustomWebAuthenticationDetails(context);\n      }\n}\n```", "```java\nProviderManager provider = new ProviderManager();\nprovider.setParent(parent);\nprovider.setProviders(providers);\nprovider.setClearExtraInformation(true);\n```", "```java\nProviderManager provider = new ProviderManager(providers, parent);\n```", "```java\n    RememberMeAuthenticationProvider provider = new \n    RememberMeAuthenticationProvider();\n    provider.setKey(key);\n```", "```java\n    RememberMeAuthenticationProvider provider = new \n    RememberMeAuthenticationProvider(key);\n```", "```java\n    new GrantedAuthorityImpl(role);\n```", "```java\n    new SimpleGrantedAuthority(role);\n```", "```java\nInMemoryDaoImpl uds = new InMemoryDaoImpl();\nuds.setUserProperties(properties);\n```", "```java\nInMemoryUserDetailsManager uds = new InMemoryUserDetailsManager(properties);\nspring-security-web\n```", "```java\nFilterChainProxy filter = new FilterChainProxy();\nfilter.setFilterChainMap(filterChainMap);\n```", "```java\nFilterChainProxy filter = new FilterChainProxy(securityFilterChains);\n```", "```java\n    FilterChainProxy securityFilterChain = ...\n    Map<RequestMatcher,List<Filter>> mappings = \n    securityFilterChain.getFilterChainMap();\n    for(Map.Entry<RequestMatcher, List<Filter>> entry : mappings.entrySet()) {\n          RequestMatcher matcher = entry.getKey();\n          boolean matches = matcher.matches(request);\n          List<Filter> filters = entry.getValue();\n    }\n```", "```java\n    FilterChainProxy securityFilterChain = ...\n    List<SecurityFilterChain> mappings = securityFilterChain.getFilterChains();\n    for(SecurityFilterChain entry : mappings) {\n          boolean matches = entry.matches(request);\n          List<Filter> filters = entry.getFilters();\n    }\n```", "```java\nExceptionTranslationFilter filter = new ExceptionTranslationFilter();\nfilter.setAuthenticationEntryPoint(entryPoint);\nfilter.setRequestCache(requestCache);\n```", "```java\n    ExceptionTranslationFilter filter = new \n    ExceptionTranslationFilter(entryPoint, requestCache);\n```", "```java\n    protected void successfulAuthentication(HttpServletRequest request, \n    HttpServletResponse response, Authentication authResult) throws IOException,    \n    ServletException {\n    }\n```", "```java\n    protected void successfulAuthentication(HttpServletRequest request,\n     HttpServletResponse response, FilterChain chain, Authentication \n     authResult) throws IOException, ServletException {\n    }\n```", "```java\n    AnonymousAuthenticationFilter filter = new \n    AnonymousAuthenticationFilter();\n    filter.setKey(key);\n    filter.setUserAttribute(attrs);\n```", "```java\n    AnonymousAuthenticationFilter filter = new   \n    AnonymousAuthenticationFilter(key,attrs.getPassword(),\n    attrs.getAuthorities());\n```", "```java\n    LoginUrlAuthenticationEntryPoint entryPoint = new \n    LoginUrlAuthenticationEntryPoint();\n    entryPoint.setLoginFormUrl(\"/login\");\n```", "```java\n    LoginUrlAuthenticationEntryPoint entryPoint = new   \n    LoginUrlAuthenticationEntryPoint(loginFormUrl);\n```", "```java\n{\n      @Override\n      protected UserDetails createuserDetails(Authentication token,\n                  Collection<? extends GrantedAuthority> authorities) {\n            // customize\n      }\n}\n```", "```java\npublic class SubclassPreAuthenticatedGrantedAuthoritiesUserDetailsService extends PreAuthenticatedGrantedAuthoritiesUserDetailsService {\n      @Override\n      protected UserDetails createUserDetails(Authentication token,\n                  Collection<? extends GrantedAuthority> authorities) {\n            // customize\n      }\n}\n```", "```java\nPersistentTokenBasedRememberMeServices services = new PersistentTokenBasedRememberMeServices();\nservices.setKey(key);\nservices.setUserDetailsService(userDetailsService);\nservices.setTokenRepository(tokenRepository);\n```", "```java\nPersistentTokenBasedRememberMeServices services = new PersistentTokenBasedRememberMeServices(key, userDetailsService, tokenRepository);\n```", "```java\nRememberMeAuthenticationFilter filter = new RememberMeAuthenticationFilter();\nfilter.setAuthenticationManager(authenticationManager);\nfilter.setRememberMeServices(rememberMeServices);\n```", "```java\nRememberMeAuthenticationFilter filter = new RememberMeAuthenticationFilter(authenticationManager,rememberMeServices);\n```", "```java\nTokenBasedRememberMeServices services = new TokenBasedRememberMeServices();\nservices.setKey(key);\nservices.setUserDetailsService(userDetailsService);\n```", "```java\nTokenBasedRememberMeServices services = new TokenBasedRememberMeServices(key, userDetailsService);\n```", "```java\nConcurrentSessionControlStrategy strategy = new ConcurrentSessionControlStrategy(sessionRegistry);\n```", "```java\nList<SessionAuthenticationStrategy> delegates = new ArrayList<SessionAuthenticationStrategy>();\ndelegates.add(new ConcurrentSessionControlAuthenticationStrategy(sessionRegistry));\ndelegates.add(new SessionFixationProtectionStrategy());\ndelegates.add(new RegisterSessionAuthenticationStrategy(sessionRegistry));\nCompositeSessionAuthenticationStrategy strategy = new CompositeSessionAuthenticationStrategy(delegates);\n```", "```java\nSessionFixationProtectionStrategy strategy = new SessionFixationProtectionStrategy();\nstrategy.setRetainedAttributes(attrsToRetain);\n```", "```java\npublic class AttrsSessionFixationProtectionStrategy extends SessionFixationProtectionStrategy {\n      private final Collection<String> attrsToRetain;\n      public AttrsSessionFixationProtectionStrategy(\n                  Collection<String> attrsToRetain) {\n            this.attrsToRetain = attrsToRetain;\n      }\n      @Override\n      protected Map<String, Object> extractAttributes(HttpSession session) {\n            Map<String,Object> attrs = new HashMap<String, Object>();\n            for(String attr : attrsToRetain) {\n                  attrs.put(attr, session.getAttribute(attr));\n            }\n            return attrs;\n      }\n}\nSessionFixationProtectionStrategy strategy = new AttrsSessionFixationProtectionStrategy(attrsToRetain);\n```", "```java\nBasicAuthenticationFilter filter = new BasicAuthenticationFilter();\nfilter.setAuthenticationManager(authenticationManager);\nfilter.setAuthenticationEntryPoint(entryPoint);\nfilter.setIgnoreFailure(true);\n```", "```java\nBasicAuthenticationFilter filter = new BasicAuthenticationFilter(authenticationManager,entryPoint);\n```", "```java\nSecurityContextPersistenceFilter filter = new SecurityContextPersistenceFilter();\nfilter.setSecurityContextRepository(securityContextRepository);\n```", "```java\nSecurityContextPersistenceFilter filter = new SecurityContextPersistenceFilter(securityContextRepository);\n```", "```java\nRequestCacheAwareFilter filter = new RequestCacheAwareFilter();\nfilter.setRequestCache(requestCache);\n```", "```java\nRequestCacheAwareFilter filter = new RequestCacheAwareFilter(requestCache);\n```", "```java\nConcurrentSessionFilter filter = new ConcurrentSessionFilter();\nfilter.setSessionRegistry(sessionRegistry);\nfilter.setExpiredUrl(\"/expired\");\n```", "```java\nConcurrentSessionFilter filter = new ConcurrentSessionFilter(sessionRegistry,\"/expired\");\n```", "```java\nSessionManagementFilter filter = new SessionManagementFilter(securityContextRepository);\nfilter.setSessionAuthenticationStrategy(sessionAuthenticationStrategy);\n```", "```java\nSessionManagementFilter filter = new SessionManagementFilter(securityContextRepository, sessionAuthenticationStrategy);\n```", "```java\norg.springframework.security.web.util.RequestMatcher  org.springframework.security.web.util.matcher.RequestMatcher\norg.springframework.security.web.util.AntPathRequestMatcher org.springframework.security.web.util.matcher.AntPathRequestMatcher\norg.springframework.security.web.util.AnyRequestMatcher org.springframework.security.web.util.matcher.AnyRequestMatcher.INSTANCE\norg.springframework.security.web.util.ELRequestMatcher org.springframework.security.web.util.matcher.ELRequestMatcher\norg.springframework.security.web.util.IpAddressMatcher org.springframework.security.web.util.matcher.IpAddressMatcher\norg.springframework.security.web.util.RequestMatcherEditor  org.springframework.security.web.util.matcher.RequestMatcherEditor\norg.springframework.security.web.util.RegexRequestMatcher org.springframework.security.web.util.matcher.RegexRequestMatcher\n```", "```java\nWebSecurityExpressionHandler handler = ...\n```", "```java\nSecurityExpressionHandler<FilterInvocation> handler = ...\n```", "```java\npublic class CustomWebSecurityExpressionHandler implements WebSecurityExpressionHandler {\n      ...\n}\n```", "```java\npublic class CustomWebSecurityExpressionHandler implements SecurityExpressionHandler<FilterInvocation> {\n     ...\n}\n```", "```java\nimport org.springframework.security.web.bind.annotation.AuthenticationPrincipal;\n// ...\n\n@RequestMapping(\"/messages/inbox\")\npublic ModelAndView findMessagesForUser(@AuthenticationPrincipal CustomUser customUser) {\n      // .. find messages for this user and return them ...\n}\n```", "```java\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\n// ...\n\n@RequestMapping(\"/messages/inbox\")\npublic ModelAndView findMessagesForUser(@AuthenticationPrincipal CustomUser customUser) {\n      // .. find messages for this user and return them ...\n}\n```"]