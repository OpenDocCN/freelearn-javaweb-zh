["```java\n    //build.gradle\n    // Required for JSR-250 based security:\n    // JSR-250 Annotations\n\n compile ('javax.annotation:javax.annotation-api:1.3')    // Already provided by Spring Boot\n *// compile('cglib:cglib-nodep')*    // Already provided by Spring Boot\n    // Required for protect-pointcut\n *// compile('org.aspectj:aspectjweaver')*\n```", "```java\n    .antMatchers(\"/events/\").hasRole(\"ADMIN\")\n```", "```java\n    // allow users with ROLE_ADMIN\n\n    hasRole('ADMIN')\n\n    // allow users that do not have the ROLE_ADMIN\n\n     !hasRole('ADMIN')\n\n    // allow users that have ROLE_ADMIN or ROLE_ROOT and\n    // did not use the remember me feature to login\n\n    fullyAuthenticated() and hasAnyRole('ADMIN','ROOT')\n\n    // allow if Authentication.getName() equals admin\n\n    authentication.name == 'admin'\n```", "```java\n    // allows only HTTP GETrequest.method == 'GET'\n    // allow anyone to perform a GET, but\n    // other methods require ROLE_ADMIN\n\n    request.method == 'GET' ? permitAll : hasRole('ADMIN')\n```", "```java\n    hasIpAddress('192.168.1.93')\n```", "```java\n    hasIpAddress('192.168.1.0/24')\n```", "```java\n$ ifconfig wlan0     Link encap:Ethernet HWaddr a0:88:b4:8b:26:64 inet addr:192.168.1.93 Bcast:192.168.1.255 Mask:255.255.255.0\n```", "```java\n    .antMatchers(\"/events/\").hasRole(\"ADMIN\")\n```", "```java\n//src/main/resources/templates/fragments/header.html\n\n<html xmlns:th=\"http://www.thymeleaf.org\" xmlns:sec=\"http://www.thymeleaf.org/thymeleaf-extras-springsecurity4\">\n...\n<li sec:authorize-url=\"/events/\">\n<a id=\"navEventsLink\" th:href=\"@{/events/}\">All Events</a></li>\n```", "```java\n    <li sec:authorize-url=\"GET /events/\">\n    <a id=\"navEventsLink\" th:href=\"@{/events/}\">All Events</a></li>\n```", "```java\n    //src/main/resources/templates/fragments/header.html\n\n    <li sec:authorize=\"isAuthenticated()\"> \n    <a id=\"navMyEventsLink\" th:href=\"@{/events/my}\">My Events</a></li>\n```", "```java\n//src/main/java/com/packtpub/springsecurity/web/controllers/WelcomeController.java\n\n    @ModelAttribute (\"showCreateLink\")\n    public boolean showCreateLink(Authentication authentication) {\n      return authentication != null && \n      authentication.getName().contains(\"user\");\n    }\n```", "```java\n    //src/main/resources/templates/header.html\n\n    <li th:if=\"${showCreateLink}\"><a id=\"navCreateEventLink\"   \n    th:href=\"@{events/form}\">...</li>\n```", "```java\n//src/main/java/com/packtpub/springsecurity/web/controllers/WelcomeController.java\n\n    @ModelAttribute (\"showAdminLink\")\n    public boolean showAdminLink(Authentication authentication) {\n       return webInvocationPrivilegeEvaluator.\n       isAllowed(\"/admin/\", authentication);\n    }\n```", "```java\n    ApplicationContext context = WebApplicationContextUtils\n     .getRequiredWebApplicationContext(servletContext);\n    WebInvocationPrivilegeEvaluator privEvaluator =\n    context.getBean(WebInvocationPrivilegeEvaluator.class)\n```", "```java\n//src/main/resources/templates/header.html\n\n    <li th:if=\"${showAdminLink}\">\n     <a id=\"h2Link\" th:href=\"@{admin/h2/}\" target=\"_blank\">\n     H2 Database Console</a>\n    ...\n    </li>\n```", "```java\n    import org.springframework.security.access.prepost.PreAuthorize;\n    ...\n    public interface CalendarService {\n       ...\n     @PreAuthorize(\"hasRole('ADMIN')\")\n      List<Event> getEvents();\n    }\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n@Configuration\n@EnableWebSecurity\n@EnableGlobalMethodSecurity(prePostEnabled = true)\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n```", "```java\n    DEBUG ExceptionTranslationFilter - Access is denied \n    (user is not anonymous); delegating to AccessDeniedHandler\n    org.s.s.access.AccessDeniedException: Access is denied\n    at org.s.s.access.vote.AffirmativeBased.decide\n    at org.s.s.access.intercept.AbstractSecurityInterceptor.\n    beforeInvocation\n    at org.s.s.access.intercept.aopalliance.\n    MethodSecurityInterceptor.invoke\n    ...\n    at $Proxy16.getEvents\n    at com.packtpub.springsecurity.web.controllers.EventsController.events\n```", "```java\n    DefaultCalendarService originalService = context.getBean\n    (CalendarService.class)\n    CalendarService secureService = new CalendarService() {\n     Â¦ other methods just delegate to originalService ...\n      public List<Event> getEvents() {\n if(!permitted(originalService.getEvents)) {           throw AccessDeniedException()\n          }\n```", "```java\n       return originalCalendarService.getEvents()\n      }\n   };\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/configuration/\n        SecurityConfig.java\n\n        @Configuration\n        @EnableWebSecurity\n @EnableGlobalMethodSecurity(jsr250Enabled = true)        public class SecurityConfig extends WebSecurityConfigurerAdapter {\n```", "```java\n        @RolesAllowed(\"ROLE_ADMIN\")\n        List<Event> getEvents();\n```", "```java\n    @RolesAllowed({\"ROLE_USER\",\"ROLE_ADMIN\"})\n    List<Event> getEvents();\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n    @EnableWebSecurity(debug = true)\n    @EnableGlobalMethodSecurity(securedEnabled=true)\n    public class SecurityConfig extends WebSecurityConfigurerAdapter {\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n    @Configuration\n    @EnableWebSecurity\n    @EnableGlobalMethodSecurity(prePostEnabled = true)\n    public class SecurityConfig extends WebSecurityConfigurerAdapter {\n    Lastly, we can update our CalendarService interface as follows:\n    @PreAuthorize(\"hasRole('ADMIN') or principal.id == #userId\")  \n    List<Event> findForUser(int userId);\n```", "```java\n    @PostAuthorize(\"hasRole('ROLE_ADMIN') or \" + \"principal.username ==   \n    returnObject.owner.email or \" +\n    \"principal.username == returnObject.attendee.email\")\n    Event getEvent(int eventId);\n```", "```java\n    @PostFilter(\"principal.id == filterObject.owner.id or \" + \n    \"principal.id == filterObject.attendee.id\")\n    List<Event> getEvents();\n```", "```java\n    @PreFilter(\"principal.id == filterObject.owner.id\")\n    void save(Set<Event> events);\n```", "```java\n    build.gradle\n    dependencies {\n       // ACL\n       compile('org.springframework.security:spring-security-acl')\n      compile('net.sf.ehcache:ehcache')\n       ...\n    }\n```", "```java\n    src/main/java/com/packtpub/springsecurity/service/CalendarService.java\n    @PostFilter(\"hasPermission(filterObject, 'read')\")\n    List<Event> getEvents();\n```", "```java\nsrc/main/resources/schema.sql\n-- ACL Schema --\ncreate table acl_sid (\nid bigint generated by default as identity(start with 100) not\n   null primary key,\nprincipal boolean not null,\nsid varchar_ignorecase(100) not null,\nconstraint uk_acl_sid unique(sid,principal) );\n\ncreate table acl_class (\nid bigint generated by default as identity(start with 100) not\n   null primary key,\nclass varchar_ignorecase(500) not null,\nconstraint uk_acl_class unique(class) );\n\ncreate table acl_object_identity (\nid bigint generated by default as identity(start with 100) not\n   null primary key,\nobject_id_class bigint not null,\nobject_id_identity bigint not null,\nparent_object bigint,\nowner_sid bigint not null,\nentries_inheriting boolean not null,\nconstraint uk_acl_objid\n   unique(object_id_class,object_id_identity),\nconstraint fk_acl_obj_parent foreign\n   key(parent_object)references acl_object_identity(id),\nconstraint fk_acl_obj_class foreign\n   key(object_id_class)references acl_class(id),\nconstraint fk_acl_obj_owner foreign key(owner_sid)references\n   acl_sid(id) );\n\ncreate table acl_entry (\nid bigint generated by default as identity(start with 100) not\n   null primary key,\nacl_object_identity bigint not null,\nace_order int not null,\nsid bigint not null,\nmask integer not null,\ngranting boolean not null,\naudit_success boolean not null,\naudit_failure boolean not null,\nconstraint uk_acl_entry unique(acl_object_identity,ace_order),\nconstraint fk_acl_entry_obj_id foreign key(acl_object_identity)\nreferences acl_object_identity(id),\nconstraint fk_acl_entry_sid foreign key(sid) references\n   acl_sid(id) );\n```", "```java\n    src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java \n @EnableGlobalMethodSecurity(prePostEnabled = true)    @Import(AclConfig.class)\n    public class SecurityConfig extends WebSecurityConfigurerAdapter {\n```", "```java\n    src/main/java/com/packtpub/springsecurity/configuration/AclConfig.java\n    @Bean\n    public DefaultMethodSecurityExpressionHandler expressionHandler(){\n       DefaultMethodSecurityExpressionHandler dmseh =\n       new DefaultMethodSecurityExpressionHandler();\n      dmseh.setPermissionEvaluator(permissionEvaluator());\n       dmseh.setPermissionCacheOptimizer(permissionCacheOptimizer());\n       return dmseh; \n    }\n```", "```java\n     src/main/java/com/packtpub/springsecurity/configuration/AclConfig.java\n     @Bean\n    public AclPermissionCacheOptimizer permissionCacheOptimizer(){\n       return new AclPermissionCacheOptimizer(aclService());\n    }\n```", "```java\nsrc/main/java/com/packtpub/springsecurity/configuration/AclConfig.java\n@Bean\npublic AclPermissionEvaluator permissionEvaluator(){\n   return new AclPermissionEvaluator(aclService());\n}\n```", "```java\nsrc/main/java/com/packtpub/springsecurity/configuration/AclConfig.java\n@Autowired \nprivate DataSource dataSource;\n@Bean\npublic JdbcMutableAclService aclService(){\n```", "```java\n   return new JdbcMutableAclService(dataSource,\n                                     lookupStrategy(),\n                                     aclCache());\n}\n```", "```java\nsrc/main/java/com/packtpub/springsecurity/configuration/AclConfig.java\n@Bean\npublic LookupStrategy lookupStrategy(){\n   return new BasicLookupStrategy(\n           dataSource,\n           aclCache(),\n           aclAuthorizationStrategy(),\n           consoleAuditLogger());\n}\n```", "```java\nsrc/main/java/com/packtpub/springsecurity/configuration/AclConfig.java\n@Bean\npublic EhCacheBasedAclCache aclCache(){\n   return new EhCacheBasedAclCache(ehcache(),\n           permissionGrantingStrategy(),\n           aclAuthorizationStrategy()\n           );\n}\n\n@Bean\npublic PermissionGrantingStrategy permissionGrantingStrategy(){\n   return new DefaultPermissionGrantingStrategy(consoleAuditLogger());\n}\n\n@Bean\npublic Ehcache ehcache(){\n   EhCacheFactoryBean cacheFactoryBean = new EhCacheFactoryBean();\n   cacheFactoryBean.setCacheManager(cacheManager());\n   cacheFactoryBean.setCacheName(\"aclCache\");\n   cacheFactoryBean.setMaxBytesLocalHeap(\"1M\");\n   cacheFactoryBean.setMaxEntriesLocalHeap(0L);\n   cacheFactoryBean.afterPropertiesSet();\n   return cacheFactoryBean.getObject();\n}\n\n@Bean\npublic CacheManager cacheManager(){\n   EhCacheManagerFactoryBean cacheManager = new EhCacheManagerFactoryBean();\n   cacheManager.setAcceptExisting(true);   cacheManager.setCacheManagerName(CacheManager.getInstance().getName());\n   cacheManager.afterPropertiesSet();\nreturn cacheManager.getObject();\n}\n```", "```java\nsrc/main/java/com/packtpub/springsecurity/configuration/AclConfig.java\n@Bean\npublic ConsoleAuditLogger consoleAuditLogger(){\n   return new ConsoleAuditLogger();\n}\n```", "```java\nsrc/main/java/com/packtpub/springsecurity/configuration/AclConfig.java\n@Bean\npublic AclAuthorizationStrategy aclAuthorizationStrategy() {\n   return new AclAuthorizationStrategyImpl(\n           new SimpleGrantedAuthority(\"ROLE_ADMINISTRATOR\")\n   );\n}\n```", "```java\nsrc/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Import(AclConfig.class) public class SecurityConfig extends WebSecurityConfigurerAdapter {\n```", "```java\n        src/main/resources/data.sql\n        insert into acl_class (id, class) values (10, \n        'com.packtpub.springsecurity.domain.Event');\n```", "```java\n        src/main/resources/data.sql\n        insert into acl_sid (id, principal, sid) values (20, true,  \n        'user2@example.com');\n        insert into acl_sid (id, principal, sid) values (21, false, \n        'ROLE_USER');\n        insert into acl_sid (id, principal, sid) values (22, false, \n        'ROLE_ADMIN');\n```", "```java\n    src/main/resources/data.sql\n    insert into acl_object_identity(id,object_id_identity,object_id_class,\n    parent_object,owner_sid,entries_inheriting)\n    values (30, 100, 10, null, 20, false);\n    insert into acl_object_identity(id,object_id_identity,object_id_class,\n    parent_object,owner_sid,entries_inheriting) \n    values (31, 101, 10, null, 21, false);\n    insert into acl_object_identity(id,object_id_identity,object_id_class,\n    parent_object,owner_sid,entries_inheriting)\n    values (32, 102, 10, null, 21, false);\n```", "```java\n    src/main/resources/data.sql\n    insert into acl_entry\n   (acl_object_identity, ace_order, sid, mask, granting, audit_success, \n   audit_failure) values(30, 1, 20, 1, true, true, true);\n```", "```java\n    src/main/java/com/packtpub/springsecurity/service/CalendarService.java\n    @PostAuthorize(\"hasPermission(filterObject, 'read') \" +\n    \"or hasPermission(filterObject, 'admin_read')\")\n    Event getEvent(int eventId);\n```", "```java\n    src/main/resources/data.sql\n    insert into acl_entry\n   (acl_object_identity, ace_order, sid, mask, granting, \n   audit_success, audit_failure) values(30, 1, 20, 3, true, true, true);\n```", "```java\n        package com.packtpub.springsecurity.acls.domain;\n        public class CustomPermission extends BasePermission {\n           public static final Permission ADMIN_READ = new \n           CustomPermission(1 << 5, 'M'); // 32\n           public CustomPermission(int mask, char code) {\n               super(mask, code);\n           }\n        }\n```", "```java\n        src/main/java/com/packtpub/springsecurity/configuration/\n        AclConfig.java\n        @Bean\n        public DefaultPermissionFactory permissionFactory(){\n         return new DefaultPermissionFactory(CustomPermission.class);\n        }\n```", "```java\nsrc/main/java/com/packtpub/springsecurity/configuration/AclConfig.java\n@Bean\npublic AclPermissionEvaluator permissionEvaluator(){\n   AclPermissionEvaluator pe = new\n                               AclPermissionEvaluator(aclService());\n pe.setPermissionFactory(permissionFactory());   return pe;\n}\n@Bean\npublic LookupStrategy lookupStrategy(){\n   BasicLookupStrategy ls = new BasicLookupStrategy(\n                                       dataSource,\n                                       aclCache(),\n                                      aclAuthorizationStrategy(),\n                                      consoleAuditLogger());\n ls.setPermissionFactory(permissionFactory());   return ls;\n}\n```", "```java\n        src/main/resources/data.sql\n        insert into acl_sid (id, principal, sid) values (23, true,   \n        'admin1@example.com');\n        insert into acl_entry (acl_object_identity, ace_order, sid, \n        mask, granting, audit_success, audit_failure) \n        values(31, 1, 23, 32, true, true, true);\n```", "```java\n        @PostFilter(\"hasPermission(filterObject, 'read') \" + \"or    \n        hasPermission(filterObject, 'admin_read')\")\n        List<Event> getEvents();\n```", "``` |\n| ```", "``` |\n\næä»¬å¯ä»¥çå°ï¼å³ä½¿å¨æä»¬ä½¿ç¨ç®åç¤ºä¾çæåµä¸ï¼æä»¬ç°å¨ä¹è½å¤å¨éå¸¸æéçæ¹å¼ä¸æ©å± Spring ACL åè½ï¼ä»¥è¯´æè¿ä¸ªç»ç²åº¦è®¿é®æ§å¶ç³»ç»çåéã\n\nä½ çä»£ç åºè¯¥çèµ·æ¥å`chapter12.03-calendar`ã\n\n# å¯ç¨ ACL æéè¯ä¼°\n\næä»¬å¨ç¬¬äºç« ä¸­çå°äº Spring Security JSP æ ç­¾åºæä¾äºå°è®¤è¯ç¸å³æ°æ®æ´é²ç»ç¨æ·çåè½ï¼ä»¥ååºäºå¤ç§è§åéå¶ç¨æ·è½çå°çåå®¹ãå¨è¿æ¬ä¹¦ä¸­ï¼æä»¬ä¸ç´ä½¿ç¨çæ¯å»ºç«å¨ Spring Security ä¹ä¸ç Thymeleaf å®å¨æ ç­¾åºã\n\nè¿ä¸ªç¸åçæ ç­¾åºä¹å¯ä»¥ä¸ ACL å¯ç¨çç³»ç»æ ç¼äº¤äºï¼ä»æä»¬çç®åå®éªä¸­ï¼æä»¬å·²ç»å´ç»ä¸»é¡µä¸çåä¸¤ä¸ªç±»å«éç½®äºä¸ä¸ªç®åç ACL ææåºæ¯ãè®©æä»¬æ¥ççä»¥ä¸æ­¥éª¤ï¼å­¦ä¹ å¦ä½å¨ Thymeleaf é¡µé¢ä¸­å¯ç¨ ACL æéè¯ä¼°ï¼\n\n1.  é¦åï¼æä»¬éè¦ä»æä»¬ç`CalendarService`æ¥å£ä¸­ç`getEvents()`æ¹æ³ç§»é¤`@PostFilter`æ³¨è§£ï¼ä»¥ä¾¿ç»æä»¬ç JSP æ ç­¾åºä¸ä¸ªè¿æ»¤æä¸åè®¸æ¾ç¤ºçäºä»¶çæºä¼ãç°å¨å°±ç§»é¤`@PostFilter`ï¼å¦ä¸æç¤ºï¼\n\n```", "```\n\n1.  ç°å¨æä»¬å·²ç»ç§»é¤äº`@PostFilter`ï¼æä»¬å¯ä»¥ä½¿ç¨`<sec:authorize-acl>`æ ç­¾æ¥éèç¨æ·å®éä¸æ²¡æè®¿é®æéçäºä»¶ãåé¡¾ä¸ä¸åä¸é¨åçè¡¨æ ¼ï¼ä½ä¸ºå¯¹æä»¬è¿ä»ä¸ºæ­¢éç½®çè®¿é®è§åçå·æ°ï¼\n\n1.  æä»¬å°ç¨**`<sec:authorize-acl>`**æ ç­¾åè£¹æ¯ä¸ªäºä»¶çæ¾ç¤ºï¼å£°æè¦æ£æ¥çå¯¹è±¡çæéåè¡¨ï¼\n\n```", "```\n\n1.  æèä¸ä¸è¿éæ³è¦åççäºæ-æä»¬æ³è¦ç¨æ·åªçå°ä»ä»¬å®éå·æ`READ`æ`ADMIN_READ`ï¼æä»¬çèªå®ä¹æéï¼è®¿é®çé¡¹ãç¶èï¼ä¸ºäºä½¿ç¨æ ç­¾åºï¼æä»¬éè¦ä½¿ç¨æéæ©ç ï¼è¯¥æ©ç å¯ä»¥ä»ä»¥ä¸è¡¨æ ¼ä¸­å¼ç¨ï¼\n\n| ```", "``` |\n| ```", "``` |\n\nå¨å¹åï¼æ ç­¾å®ç°å©ç¨äºæ¬ç« æ©äºæ¶åè®¨è®ºè¿çç¸åç`SidRetrievalStrategy`å`ObjectIdentityRetrievalStrategy`æ¥å£ãå æ­¤ï¼è®¿é®æ£æ¥çè®¡ç®éµå¾ªä¸ ACL å¯ç¨çæ¹æ³å®å¨æç¥¨ç¸åç workflowãæ­£å¦æä»¬å³å°çå°çï¼æ ç­¾å®ç°è¿å°ä½¿ç¨ç¸åç`PermissionEvaluator`ã\n\næä»¬å·²ç»ç¨ä¸ä¸ªå¼ç¨`DefaultMethodSecurityExpressionHandler`ç`expressionHandler`åç´ éç½®äºæä»¬ç`GlobalMethodSecurityConfiguration`ã`DefaultMethodSecurityExpressionHandler`å®ç°è®¤è¯æä»¬ç`AclPermissionEvaluator`æ¥å£ï¼ä½æä»¬è¿å¿é¡»è®© Spring Security ç web å±è®¤è¯`AclPermissionEvaluator`ãå¦æä½ ä»ç»æèï¼è¿ç§å¯¹ç§°æ§æ¯åççï¼å ä¸ºä¿æ¤å HTTP è¯·æ±æ¯ä¿æ¤ä¸¤ç§éå¸¸ä¸åçèµæºãå¹¸è¿çæ¯ï¼Spring Security çæ½è±¡ä½¿è¿ä¸ååå¾ç¸å½ç®åã\n\n1.  æ·»å ä¸ä¸ªå¼ç¨æä»¬å·²ç»å®ä¹ç ID ä¸º`permissionEvaluator`ç bean ç`DefaultWebSecurityExpressionHandler`å¤çå¨ï¼\n\n```", "```\n\n1.  ç°å¨ï¼æ´æ°`SecurityConfig.java`ä»¥å¼ç¨æä»¬ç`webExpressionHandler`å®ç°ï¼å¦ä¸æç¤ºï¼\n\n```", "```\n\nä½ å¯ä»¥çå°è¿äºæ­¥éª¤ä¸æä»¬åæ¹æ³å®å¨æ·»å æéå¤ççæ¹å¼éå¸¸ç¸ä¼¼ãè¿æ¬¡ç®åä¸äºï¼å ä¸ºæä»¬è½å¤éç¨å·²ç»éç½®çå·æ`PermissionEvaluator` ID çç¸å beanã\n\nå¯å¨æä»¬çåºç¨ç¨åºï¼å¹¶ä»¥ä¸åçç¨æ·èº«ä»½å°è¯è®¿é®ææäºä»¶é¡µé¢ãä½ ä¼åç°ï¼ä¸åè®¸ç¨æ·æ¥ççäºä»¶ç°å¨ä½¿ç¨æä»¬çæ ç­¾åºéèï¼èä¸æ¯`@PostFilter`æ³¨è§£ãæä»¬ç¥éï¼ç´æ¥è®¿é®äºä»¶ä¼è®©ç¨æ·çå°å®ãç¶èï¼è¿å¯ä»¥éè¿å°æ¬ç« ä¸­å­¦å°çåå®¹ä¸æ¬ç« ä¸­å­¦å°çå³äº`@PostAuthorize`æ³¨è§£çåå®¹ç¸ç»åè½»æ¾å®ç°ã\n\nä½ çä»£ç åºè¯¥çèµ·æ¥å`chapter12.04-calendar`ã\n\n# å¯å ACL åææ\n\nå°½ç®¡ JBCP æ¥ååºç¨ç¨åºæ²¡æå®ç°å®æ´çç¨æ·ç®¡çåè½ï¼ä½æ¨çåºç¨ç¨åºå¾å¯è½ä¼æå¸¸è§åè½ï¼ä¾å¦æ°ç¨æ·æ³¨ååè¡æ¿ç¨æ·ç»´æ¤ãå°ç®åä¸ºæ­¢ï¼è¿äºåè½çç¼ºå¤±ï¼æä»¬éè¿å¨åºç¨ç¨åºå¯å¨æ¶ä½¿ç¨ SQL æå¥è§£å³äºè¿ä¸ªé®é¢ï¼å¹¶æ²¡æé»æ­¢æä»¬æ¼ç¤º Spring Security å Spring ACL çè®¸å¤åè½ã\n\nç¶èï¼æ­£ç¡®å¤çå£°æ ACL çè¿è¡æ¶æ´æ¹ï¼æç³»ç»ä¸­çç¨æ·æ·»å æå é¤ï¼å¯¹äºç»´æ¤ ACL åºç¡ææç¯å¢çå®æ´æ§åå®å¨æ§è³å³éè¦ãSpring ACL éè¿å¯å ACLï¼`o.s.s.acls.model.MutableAcl`ï¼çæ¦å¿µè§£å³äºè¿ä¸ªé®é¢ã\n\næ©å±æ å ACL æ¥å£ï¼`MutableAcl`æ¥å£åè®¸å¨è¿è¡æ¶æçºµ ACL å­æ®µï¼ä»¥æ¹åç¹å® ACL çåå­è¡¨ç¤ºãè¿åæ¬åå»ºãæ´æ°æå é¤ ACE çè½åï¼æ´æ¹ ACL ææèï¼ä»¥åå¶ä»æç¨åè½ã\n\næä»¬å¯è½ææï¼Spring ACL æ¨¡åä¼é»è®¤æä¾ä¸ç§å°è¿è¡æ¶ ACL æ´æ¹æä¹åå° JDBC æ°æ®å­å¨çæ¹æ³ï¼çç¡®å¦æ­¤ãå¯ä»¥ä½¿ç¨`o.s.s.acls.jdbc.JdbcMutableAclService`ç±»æ¥åå»ºãæ´æ°åå é¤æ°æ®åºä¸­ç`MutableAcl`å®ä¾ï¼ä»¥åæ§è¡ ACL çå¶ä»æ¯æè¡¨çä¸è¬ç»´æ¤ï¼å¤ç`SIDs`ã`ObjectIdentity`ååå¯¹è±¡ç±»åï¼ã\n\nå¨æ¬ä¹¦çæ©æé¨åæå°ï¼`AclAuthorizationStrategyImpl`ç±»åè®¸æä»¬ä¸ºå¯å ACL ä¸çæä½æå®ç®¡çè§è²ãè¿äºæ¯å¨ bean éç½®ä¸­ä½ä¸ºæé å½æ°çä¸é¨åæä¾çãæé å½æ°åæ°åå¶å«ä¹å¦ä¸ï¼\n\n| **åæ°ç¼å·** | **å®åä»ä¹ï¼** |\n| --- | --- |\n| 1 | è¡¨ç¤ºä¸»ä½éè¦å·æçæéï¼ä»¥å¨è¿è¡æ¶è·å ACL ä¿æ¤å¯¹è±¡çæææ |\n| 2 | è¡¨ç¤ºä¸»ä½éè¦å·æçæéï¼ä»¥å¨è¿è¡æ¶æ´æ¹ ACL ä¿æ¤å¯¹è±¡çå®¡è®¡ |\n| 3 | è¡¨ç¤ºä¸»ä½éè¦å·æçæéï¼ä»¥å¨è¿è¡æ¶å¯¹ ACL ä¿æ¤çå¯¹è±¡è¿è¡ä»»ä½å¶ä»ç±»åçæ´æ¹ï¼åå»ºãæ´æ°åå é¤ï¼ |\n\nå¯è½ä¼ææå°æï¼æä»¬åªæå®äºä¸ä¸ªæé å½æ°åæ°ï¼å°½ç®¡ååºäºä¸ä¸ªåæ°ã`AclAuthorizationStrategyImpl`ç±»è¿å¯ä»¥æ¥åä¸ä¸ª`GrantedAuthority`ï¼ç¶åå°å¶ç¨äºææä¸ä¸ªåæ°ãå¦ææä»¬è¦å¯¹æææä½ä½¿ç¨ç¸åç`GrantedAuthority`ï¼è¿éå¸¸æ¹ä¾¿ã\n\n`JdbcMutableAclService`æ¥å£åå«ç¨äºå¨è¿è¡æ¶æä½ ACL å ACE æ°æ®çä¸ç³»åæ¹æ³ãå°½ç®¡è¿äºæ¹æ³æ¬èº«ç¸å¯¹å®¹æçè§£ï¼`createAcl`ã`updateAcl`å`deleteAcl`ï¼ï¼ä½å³ä½¿æ¯é«çº§ Spring Security ç¨æ·ï¼éç½®åä½¿ç¨`JdbcMutableAclService`çæ­£ç¡®æ¹å¼ä¹å¾å¾å¾é¾ææ¡ã\n\nè®©æä»¬ä¿®æ¹`CalendarService`ä»¥åå»ºæ°äºä»¶çæ°ç ACLã\n\n# åæ°åå»ºçäºä»¶æ·»å  ACL\n\nç®åï¼å¦æç¨æ·åå»ºäºä¸ä¸ªæ°äºä»¶ï¼å®å°ä¸ä¼å¨ææäºä»¶è§å¾ä¸­æ¾ç¤ºç»ç¨æ·ï¼å ä¸ºæä»¬ä½¿ç¨`<sec:authorize-acl>`æ ç­¾åªæ¾ç¤ºç¨æ·ææè®¿é®çäºä»¶å¯¹è±¡ãè®©æä»¬æ´æ°æä»¬ç`DefaultCalendarService`æ¥å£ï¼ä»¥ä¾¿å½ç¨æ·åå»ºä¸ä¸ªæ°äºä»¶æ¶ï¼ä»ä»¬è¢«æäºè¯»åè¯¥äºä»¶çæéï¼å¹¶ä¸å®å°æ¾ç¤ºå¨ææäºä»¶é¡µé¢ä¸ã\n\nè®©æä»¬æ¥ççä»¥ä¸æ­¥éª¤ï¼ä»¥å° ACL æ·»å å°æ°åå»ºçäºä»¶ä¸­ï¼\n\n1.  ç¬¬ä¸æ­¥æ¯æ´æ°æä»¬çæé å½æ°ä»¥æ¥å`MutableAclService å UserContext`ï¼\n\n```", "```\n\n1.  ç¶åï¼æä»¬éè¦æ´æ°æä»¬ç`createEvent`æ¹æ³ï¼ä»¥ä¹ä¸ºå½åç¨æ·åå»º ACLãè¿è¡ä»¥ä¸æ´æ¹ï¼\n\n```"]