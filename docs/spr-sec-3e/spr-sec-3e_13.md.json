["```java\n    .antMatchers(\"/**\").hasRole(\"USER\");\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/\n    SecurityConfig.java\n\n    http.authorizeRequests()\n         .anyRequest()\n         .authenticated()\n         .accessDecisionManager(accessDecisionManager());\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n@Bean\npublic AccessDecisionManager accessDecisionManager() {\n   List<AccessDecisionVoter<? extends Object>> decisionVoters\n           = Arrays.asList(\n           new AuthenticatedVoter(),\n           new RoleVoter(),\n           new WebExpressionVoter()\n   );\n\n   return new UnanimousBased(decisionVoters);\n}\n```", "```java\n    // src/main/java/com/packtpub/springsecurity/web/access/intercept/\n   JpaRequestConfigMappingService.java\n\n    @Repository(\"requestConfigMappingService\")\n    public class JpaRequestConfigMappingService\n    implements RequestConfigMappingService {\n       @Autowired\n   private SecurityFilterMetadataRepository securityFilterMetadataRepository;\n\n   @Autowired\n   public JpaRequestConfigMappingService(\n           SecurityFilterMetadataRepository sfmr\n   ) {\n       this.securityFilterMetadataRepository = sfmr;\n   }\n\n   @Override\n   public List<RequestConfigMapping> getRequestConfigMappings() {\n       List<RequestConfigMapping> rcm =\n           securityFilterMetadataRepository\n               .findAll()\n               .stream()\n               .sorted((m1, m2) -> {\n               return m1.getSortOrder() - m2.getSortOrder()\n               })\n               .map(md -> {\n                   return new RequestConfigMapping(\n                            new AntPathRequestMatcher \n                             (md.getAntPattern()),\n                             new SecurityConfig \n                             (md.getExpression()));\n              }).collect(toList());\n       return rcm;\n   }\n}\n```", "```java\n// src/main/java/com/packtpub/springsecurity/domain/SecurityFilterMetadata.java\n\n@Entity\n@Table(name = \"security_filtermetadata\")\npublic class SecurityFilterMetadata implements Serializable {\n\n   @Id\n   @GeneratedValue(strategy = GenerationType.AUTO)\n   private Integer id;\n   private String antPattern;\n   private String expression;\n   private Integer sortOrder;\n\n... setters / getters ...\n}\n```", "```java\n    // src/main/java/com/packtpub/springsecurity/repository/\n    SecurityFilterMetadataRepository.java\n\n   public interface SecurityFilterMetadataRepository\n   extends JpaRepository<SecurityFilterMetadata, Integer> {}\n```", "```java\n// src/main/resources/schema.sql\n\n...\ncreate table security_filtermetadata (\n id         INTEGER GENERATED BY DEFAULT AS IDENTITY,\n ant_pattern VARCHAR(1024) NOT NULL unique,\n expression VARCHAR(1024) NOT NULL,\n sort_order INTEGER NOT NULL,\n PRIMARY KEY (id) \n);\n```", "```java\n// src/main/resources/data.sql\n\n*--* Security Filter Metadata *--* \ninsert into security_filtermetadata(id,ant_pattern,expression,sort_order) values (110, '/admin/h2/**','permitAll',10);\n\ninsert into security_filtermetadata(id,ant_pattern,expression,sort_order) values (115, '/','permitAll',15);\n\ninsert into security_filtermetadata(id,ant_pattern,expression,sort_order) values (120, '/login/*','permitAll',20);\n\ninsert into security_filtermetadata(id,ant_pattern,expression,sort_order) values (140, '/logout','permitAll',30);\n\ninsert into security_filtermetadata(id,ant_pattern,expression,sort_order) values (130, '/signup/*','permitAll',40);\n\ninsert into security_filtermetadata(id,ant_pattern,expression,sort_order) values (150, '/errors/**','permitAll',50);\n\ninsert into security_filtermetadata(id,ant_pattern,expression,sort_order) values (160, '/admin/**','hasRole(\"ADMIN\")',60);\n\ninsert into security_filtermetadata(id,ant_pattern,expression,sort_order) values (160, '/events/','hasRole(\"ADMIN\")',60);\n\ninsert into security_filtermetadata(id,ant_pattern,expression,sort_order) values (170, '/**','hasRole(\"USER\")',70);\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/web/access/intercept/\n    FilterInvocationServiceSecurityMetadataSource.java\n\n    @Component(\"filterInvocationServiceSecurityMetadataSource\")\n    public class FilterInvocationServiceSecurityMetadataSource implements\n    FilterInvocationSecurityMetadataSource, InitializingBean{\n           Â¦ constructor and member variables omitted ...\n\n       public Collection<ConfigAttribute> getAllConfigAttributes() {\n           return this.delegate.getAllConfigAttributes();\n       }\n\n       public Collection<ConfigAttribute> getAttributes(Object object) {\n           return this.delegate.getAttributes(object);\n       }\n\n       public boolean supports(Class<?> clazz) {\n           return this.delegate.supports(clazz);\n       }\n\n       public void afterPropertiesSet() throws Exception {\n       List<RequestConfigMapping> requestConfigMappings =\n       requestConfigMappingService.getRequestConfigMappings();\n       LinkedHashMap requestMap = new \n       LinkedHashMap(requestConfigMappings.size());\n       for(RequestConfigMapping requestConfigMapping \n       requestConfigMappings) {\n           RequestMatcher matcher = \n               requestConfigMapping.getMatcher();\n           Collection<ConfigAttribute> attributes =\n                   requestConfigMapping.getAttributes();\n           requestMap.put(matcher,attributes);\n       }\n           this.delegate =\n           new \n           ExpressionBasedFilterInvocationSecurityMetadataSource\n          (requestMap,expressionHandler);\n       }\n    }\n```", "```java\n    // src/main/java/com/packtpub/springsecurity/configuration/\n    SecurityConfig.java\n\n   @Override\n    public void configure(final WebSecurity web) throws Exception {\n       ...\n       final HttpSecurity http = getHttp();\n       web.postBuildAction(() -> {\n       FilterSecurityInterceptor fsi = http.getSharedObject\n       (FilterSecurityInterceptor.class);\n       fsi.setSecurityMetadataSource(metadataSource);\n       web.securityInterceptor(fsi);\n       });\n    }\n```", "```java\n    // src/main/java/com/packtpub/springsecurity/configuration/\n    SecurityConfig.java\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n\n    // No interceptor methods\n    // http.authorizeRequests()\n    //     .antMatchers(\"/\").permitAll()\n         ...\n\n    http.formLogin()\n         ...\n\n    http.logout()\n         ...\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/web/access/expression/\n    CustomWebSecurityExpressionRoot.java\n\n    public class CustomWebSecurityExpressionRoot extends\n     WebSecurityExpressionRoot {\n\n      public CustomWebSecurityExpressionRoot(Authentication a, \n      FilterInvocation fi) {\n       super(a, fi);\n       }\n\n      public boolean isLocal() {\n            return \"localhost\".equals(request.getServerName());\n       }\n   }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/web/access/expression/\n    CustomWebSecurityExpressionHandler.java\n\n    @Component\n    public class CustomWebSecurityExpressionHandler extends  \n           DefaultWebSecurityExpressionHandler {\n       private final AuthenticationTrustResolver trustResolver =\n       new AuthenticationTrustResolverImpl();\n\n       protected SecurityExpressionOperations\n       createSecurityExpressionRoot(Authentication authentication, \n       FilterInvocation fi)    \n    {\n          WebSecurityExpressionRoot root = new \n          CustomWebSecurityExpressionRoot(authentication, fi);\n           root.setPermissionEvaluator(getPermissionEvaluator());\n           root.setTrustResolver(trustResolver);\n           root.setRoleHierarchy(getRoleHierarchy());\n         return root;\n       }\n    }\n```", "```java\n    // src/main/java/com/packtpub/springsecurity/configuration/\n    SecurityConfig.java\n\n    http.authorizeRequests()\n       .expressionHandler(customWebSecurityExpressionHandler);\n```", "```java\n       // src/main/resources/data.sql\n\n      insert into security_filtermetadata(id,ant_pattern,expression,sort_order) \n      values (160, '/admin/**','local and hasRole(\"ADMIN\")',60);\n```", "```java\n    // src/main/java/com/packtpub/springsecurity/web/access/expression/\n    CustomWebExpression.java\n\n    @Component\n     public class CustomWebExpression {\n       public boolean isLocal(Authentication authentication,\n                          HttpServletRequest request) {\n       return \"localhost\".equals(request.getServerName());\n   }\n}\n```", "```java\n// src/main/resources/data.sql\n\ninsert into security_filtermetadata(id,ant_pattern,expression,sort_order) values (160, '/admin/**','@customWebExpression.isLocal(authentication, request) and hasRole(\"ADMIN\")',60);\n```", "```java\n//src/main/java/com/packtpub/springsecurity/access/CalendarPermissionEvaluator.java\n\npublic final class CalendarPermissionEvaluator implements PermissionEvaluator {\n   private final EventDao eventDao;\n\n   public CalendarPermissionEvaluator(EventDao eventDao) {\n       this.eventDao = eventDao;\n   }\n\n   public boolean hasPermission(Authentication authentication, Object \n   targetDomainObject, Object permission) {\n       // should do instanceof check since could be any domain object\n       return hasPermission(authentication, (Event) targetDomainObject, permission);\n   }\n\n   public boolean hasPermission(Authentication authentication, \n   Serializable targetId, String targetType,\n           Object permission) {\n       // missing validation and checking of the targetType\n       Event event = eventDao.getEvent((Integer)targetId);\n       return hasPermission(authentication, event, permission);\n   }\n\n   private boolean hasPermission(Authentication authentication, \n   Event event, Object permission) {\n       if(event == null) {\n           return true;\n       }\n       String currentUserEmail = authentication.getName();\n       String ownerEmail = extractEmail(event.getOwner());\n       if(\"write\".equals(permission)) {\n           return currentUserEmail.equals(ownerEmail);\n       } else if(\"read\".equals(permission)) {\n           String attendeeEmail = \n           extractEmail(event.getAttendee());\n           return currentUserEmail.equals(attendeeEmail) || \n           currentUserEmail.equals(ownerEmail);\n       }\n       throw new IllegalArgumentException(\"permission \n       \"+permission+\" is not supported.\");\n   }\n\n   private String extractEmail(CalendarUser user) {\n       if(user == null) {\n           return null;\n       }\n       return user.getEmail();\n   }\n}\n```", "```java\n //src/main/java/com/packtpub/springsecurity/configuration/\n CustomAuthorizationConfig.java\n\n@Bean\npublic DefaultMethodSecurityExpressionHandler defaultExpressionHandler(EventDao eventDao){\n   DefaultMethodSecurityExpressionHandler deh = new DefaultMethodSecurityExpressionHandler();\n   deh.setPermissionEvaluator(\n           new CalendarPermissionEvaluator(eventDao));\n   return deh;\n}\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n    http.authorizeRequests().expressionHandler\n    (customWebSecurityExpressionHandler);\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/service/CalendarService.java\n\n    @PostAuthorize(\"hasPermission(returnObject,'read')\")\n    Event getEvent(int eventId);\n```", "```java\nprivate boolean hasPermission(Authentication authentication, Event event, Object permission) {\n   if(event == null) {\n       return true;\n   }\n   GrantedAuthority adminRole =\n           new SimpleGrantedAuthority(\"ROLE_ADMIN\");\n   if(authentication.getAuthorities().contains(adminRole)) {\n       return true;\n   }\n   ...\n}\n```"]