["```java\n        //build.gradle\n\n        compile(\"org.springframework.boot:spring-boot-starter-\n        social-facebook\")\n        compile(\"org.springframework.boot:spring-boot-starter-\n        social-linkedin\")\n        compile(\"org.springframework.boot:spring-boot-starter-\n        social-twitter\")\n```", "```java\n        //build.gradle\n\n        compile(\"org.springframework.social:spring-social-google:\n        latest.release \")\n        compile(\"org.springframework.social:spring-social-github:\n        latest.release \")\n        compile(\"org.springframework.social:spring-social-linkedin:\n        latest.release \")\n```", "```java\n        //src/main/resources/templates/login.html\n\n         <div class=\"form-actions\">\n            <input id=\"submit\" class=\"btn\" name=\"submit\" type=\"submit\" \n            value=\"Login\"/>\n           </div>\n         </form>\n       <br/>\n         <h3>Social Login</h3>\n       <br />\n        <form th:action=\"@{/signin/twitter}\" method=\"POST\"\n        class=\"form-horizontal\">\n         <input type=\"hidden\" name=\"scope\" value=\"public_profile\" />\n        <div class=\"form-actions\">\n        <input id=\"twitter-submit\" class=\"btn\" type=\"submit\" \n        value=\"Login using  \n        Twitter\"/>\n         </div>\n        </form>\n       </div>\n```", "```java\n         //src/main/resources/templates/signup/form.html\n\n        </fieldset>\n        </form>\n         <br/>\n           <h3>Social Login</h3>\n         <br/>\n <form th:action=\"@{/signin/twitter}\" method=\"POST\" \n           class=\"form-horizontal\">\n <input type=\"hidden\" name=\"scope\" value=\"public_profile\" />        <div class=\"form-actions\">\n         <input id=\"twitter-submit\" class=\"btn\" type=\"submit\" \n         value=\"Login using Twitter\"/>\n        </div>\n        </form>\n         </div>\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SocialConfig.java\n\n    @Autowired\n\n    private UsersConnectionRepository usersConnectionRepository;\n\n    @Autowired\n\n     private ProviderConnectionSignup providerConnectionSignup;\n\n    @Bean\n\n    public ProviderSignInController providerSignInController() {\n\n       ((JdbcUsersConnectionRepository) usersConnectionRepository)\n\n       .setConnectionSignUp(providerConnectionSignup);\n\n       ...\n\n    }\n\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/\n    SocialDatabasePopulator.java\n\n    @Component\n    public class SocialDatabasePopulator\n    implements InitializingBean {\n       private final DataSource dataSource;\n       @Autowired\n    public SocialDatabasePopulator(final DataSource dataSource) {\n    this.dataSource = dataSource;\n     }\n    @Override\n    public void afterPropertiesSet() throws Exception {\n       ClassPathResource resource = new ClassPathResource(\n       \"org/springframework/social/connect/jdbc/\n       JdbcUsersConnectionRepository.sql\");\n       executeSql(resource);\n     }\n    private void executeSql(final Resource resource) {\n     ResourceDatabasePopulator populator = new ResourceDatabasePopulator();\n     populator.setContinueOnError(true);\n     populator.addScript(resource);\n     DatabasePopulatorUtils.execute(populator, dataSource);\n     }\n  }\n```", "```java\n    spring-social-core-  [VERSION].jar#org/springframework/social/connect/jdbc/\n    JdbcUsersConnectionRepository.sql\n\n    create table UserConnection(\n      userId varchar(255) not null,\n      providerId varchar(255) not null,\n      providerUserId varchar(255),\n      rank int not null,\n      displayName varchar(255),\n      profileUrl varchar(512),\n      imageUrl varchar(512),\n      accessToken varchar(512) not null,\n      secret varchar(512),\n      refreshToken varchar(512),\n      expireTime bigint,\n      primary key (userId, providerId, providerUserId));\n\n      create unique index UserConnectionRank on UserConnection(userId, providerId,  \n      rank);\n```", "```java\n      //src/main/java/com/packtpub/springsecurity/configuration/\n\n      DatabaseSocialConfigurer.java\n\n      public class DatabaseSocialConfigurer extends SocialConfigurerAdapter {\n\n        private final DataSource dataSource;\n\n        public DatabaseSocialConfigurer(DataSource dataSource) {\n\n         this.dataSource = dataSource;\n\n       }\n\n      @Override\n\n      public UsersConnectionRepository getUsersConnectionRepository(\n\n      ConnectionFactoryLocator connectionFactoryLocator) {\n\n          TextEncryptor textEncryptor = Encryptors.noOpText();\n\n          return new JdbcUsersConnectionRepository(\n\n          dataSource, connectionFactoryLocator, textEncryptor);\n\n     }\n\n      @Override\n\n     public void addConnectionFactories(ConnectionFactoryConfigurer config,\n\n     Environment env) {\n\n          super.addConnectionFactories(config, env);\n\n       }\n\n   }\n\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/authentication/\n    ProviderConnectionSignup.java\n\n    @Service\n     public class ProviderConnectionSignup implements ConnectionSignUp {\n        ...; \n    @Override\n    public String execute(Connection<?> connection) {\n       ...\n     }\n    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/authentication/\n    ProviderConnectionSignup.java\n\n    @Service\n    public class ProviderConnectionSignup implements ConnectionSignUp {\n         ...\n    @Override\n    public String execute(Connection<?> connection) {\n        UserProfile profile = connection.fetchUserProfile();\n        CalendarUser user = new CalendarUser();\n        if(profile.getEmail() != null){\n             user.setEmail(profile.getEmail());\n          }\n        else if(profile.getUsername() != null){\n             user.setEmail(profile.getUsername());\n         }\n        else {\n             user.setEmail(connection.getDisplayName());\n         }\n             user.setFirstName(profile.getFirstName());\n             user.setLastName(profile.getLastName());\n             user.setPassword(randomAlphabetic(32));\n             CalendarUserAuthorityUtils.createAuthorities(user);\n             ...\n         }\n      }\n\n```", "```java\n//src/main/java/com/packtpub/springsecurity/authentication/\nProviderConnectionSignup.java\n\n@Service\npublic class ProviderConnectionSignup\nimplements ConnectionSignUp {\n @Autowired private CalendarUserDao calendarUserDao;  @Override\n public String execute(Connection<?> connection) {...\ncalendarUserDao.createUser(user); return user.getEmail();\n   }\n}\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SocialConfig.java\n\n    @Autowired\n    private ConnectionFactoryLocator connectionFactoryLocator;\n    @Bean\n    public ProviderSignInController providerSignInController() {\n        ...\n        return new ProviderSignInController(connectionFactoryLocator,\n        usersConnectionRepository, authSignInAdapter());\n    }\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/configuration/\n        SocialConfig.java\n\n        @Bean\n        public SignInAdapter authSignInAdapter() {\n           return (userId, connection, request) -> {\n             SocialAuthenticationUtils.authenticate(connection);\n             return null;\n           };\n         }\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/authentication/\n        SocialAuthenticationUtils.java\n\n        public class SocialAuthenticationUtils {\n       public static void authenticate(Connection<?> connection) {\n         UserProfile profile = connection.fetchUserProfile();\n         CalendarUser user = new CalendarUser();\n         if(profile.getEmail() != null){\n             user.setEmail(profile.getEmail());\n           }\n         else if(profile.getUsername() != null){\n             user.setEmail(profile.getUsername());\n          }\n         else {\n             user.setEmail(connection.getDisplayName());\n           }\n             user.setFirstName(profile.getFirstName());\n             user.setLastName(profile.getLastName());\n             UsernamePasswordAuthenticationToken authentication = new  \n             UsernamePasswordAuthenticationToken(user, null,        \n             CalendarUserAuthorityUtils.createAuthorities(user));\n             SecurityContextHolder.getContext()\n             .setAuthentication(authentication);\n           }\n        }\n```", "```java\n        //src/main/resources/application.yml:\n\n        spring\n        ## Social Configuration:\n        social:\n        twitter:\n appId: cgceheRX6a8EAE74JUeiRi8jZ\n appSecret: XR0J2N0Inzy2y2poxzot9oSAaE6MIOs4QHSWzT8dyeZaaeawep\n```", "```java\n        //build.gradle\n\n        dependencies {\n          ...\n          compile(\"org.springframework.social:spring-social-google:\n          ${springSocialGoogleVersion}\")\n          compile(\"org.springframework.social:spring-social-github:\n          ${springSocialGithubVersion}\")\n        }\n```", "```java\n        //src/main/resources/application.yml\n\n        spring:\n          social:\n            # Google\n google:\n appId: 947438796602-uiob88a5kg1j9mcljfmk00quok7rphib.apps.\n                 googleusercontent.com\n appSecret: lpYZpF2IUgNXyXdZn-zY3gpR\n           # Github\n github:\n appId: 71649b756d29b5a2fc84\n appSecret: 4335dcc0131ed62d757cc63e2fdc1be09c38abbf\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/configuration/\n        DatabaseSocialConfigurer.java\n\n        public class DatabaseSocialConfigurer \n        extends SocialConfigurerAdapter {\n           ...\n        @Override\n        public void addConnectionFactories(\n        ConnectionFactoryConfigurer config, Environment env) {\n               super.addConnectionFactories(config, env);\n\n            // Adding GitHub Connection with properties\n           // from application.yml\n config.addConnectionFactory(\n new GitHubConnectionFactory(\n env.getProperty(\"spring.social.github.appId\"),\n env.getProperty(\"spring.social.github.appSecret\")));\n          // Adding Google Connection with properties\n```", "```java\n         // from application.yml\n config.addConnectionFactory(\n new GoogleConnectionFactory(\n env.getProperty(\"spring.social.google.appId\"),\n env.getProperty(\"spring.social.google.appSecret\")));\n             }\n         }\n```", "```java\n        //src/main/resources/templates/login.html\n\n        <h3>Social Login</h3>\n        ...\n <form th:action=\"@{/signin/google}\" method=\"POST\"        class=\"form-horizontal\">\n        <input type=\"hidden\" name=\"scope\" value=\"profile\" />\n        <div class=\"form-actions\">\n           <input id=\"google-submit\" class=\"btn\" type=\"submit\" \n           value=\"Login using  \n           Google\"/>\n        </div>\n      </form>\n     <br />\n\n <form th:action=\"@{/signin/github}\" method=\"POST\"       class=\"form-horizontal\">\n       <input type=\"hidden\" name=\"scope\" value=\"public_profile\" />\n       <div class=\"form-actions\">\n         <input id=\"github-submit\" class=\"btn\" type=\"submit\"\n         value=\"Login using  \n         Github\"/>\n       </div>\n     </form&gt;\n```"]