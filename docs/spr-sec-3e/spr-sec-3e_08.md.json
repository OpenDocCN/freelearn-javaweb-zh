["```java\n    //build.gradle\n\n    dependencies {\n    // JPA / ORM / Hibernate:\n compile('org.springframework.boot:spring-boot-starter-data-jpa')    // H2 RDBMS\n runtime('com.h2database:h2')       ...\n    }\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/configuration/\n        SecurityConfig.java\n\n        @Override\n        protected void configure(HttpSecurity http) throws Exception {\n           ...\n           http.rememberMe().key(\"jbcpCalendar\")\n           ...\n        }\n```", "```java\n        //src/main/resources/templates/login.html\n\n        <input type=\"password\" id=\"password\" name=\"password\"/>\n <label for=\"remember-me\">Remember Me?</label> <input type=\"checkbox\" id=\"remember-me\" name=\"remember_me\" value=\"true\"/>\n        <div class=\"form-actions\">\n           <input id=\"submit\" class=\"btn\" name=\"submit\" type=\"submit\" \n           value=\"Login\"/>\n        </div>\n```", "```java\n    prodJbcpCalendar-rmkey-paLLwApsifs24THosE62scabWow78PEaCh99Jus\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       ...\n       http.authorizeRequests()\n .antMatchers(\"/admin/*\") .access(\"hasRole(ADMIN) and isFullyAuthenticated()\")       ...\n       http.rememberMe().key(\"jbcpCalendar\")\n    }\n```", "```java\n    //src/main/resources/schema.sql\n\n    ...\n    create table persistent_logins (\n       username varchar_ignorecase(100) not null,\n       series varchar(64) primary key,\n       token varchar(64) not null,\n       last_used timestamp not null\n    );\n    ...\n```", "```java\n    //src/main/resources/application.yml\n\n    spring:\n    jpa:\n       database-platform: org.hibernate.dialect.H2Dialect\n       hibernate:\n ddl-auto: none\n```", "```java\n   //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n   @Autowired\n   @SuppressWarnings(\"SpringJavaAutowiringInspection\")\n private DataSource dataSource;    @Autowired\n private PersistentTokenRepository persistentTokenRepository;    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       ...\n       http.rememberMe()\n           .key(\"jbcpCalendar\")\n .tokenRepository(persistentTokenRepository)       ...\n    }\n @Bean public PersistentTokenRepository persistentTokenRepository() { JdbcTokenRepositoryImpl db = new JdbcTokenRepositoryImpl(); db.setDataSource(dataSource); return db; }\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/domain/\n        PersistentLogin.java \n\n        import org.springframework.security.web.authentication.rememberme.\n        PersistentRememberMeToken;\n        import javax.persistence.*;\n        import java.io.Serializable;\n        import java.util.Date;\n        @Entity\n        @Table(name = \"persistent_logins\")\n        public class PersistentLogin implements Serializable {\n           @Id\n           private String series;\n           private String username;\n           private String token;\n           private Date lastUsed;\n           public PersistentLogin(){}\n           public PersistentLogin(PersistentRememberMeToken token){\n               this.series = token.getSeries();\n               this.username = token.getUsername();\n               this.token = token.getTokenValue();\n               this.lastUsed = token.getDate();\n           }\n          ...\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/repository/\n        RememberMeTokenRepository.java\n\n        import com.packtpub.springsecurity.domain.PersistentLogin;\n        import org.springframework.data.jpa.repository.JpaRepository;\n        import java.util.List;\n        public interface RememberMeTokenRepository extends  \n        JpaRepository<PersistentLogin, String> {\n            PersistentLogin findBySeries(String series);\n            List<PersistentLogin> findByUsername(String username);\n        }\n```", "```java\n         //src/main/java/com/packtpub/springsecurity/web/authentication/\n         rememberme/JpaPersistentTokenRepository.java:\n\n         ...\n         public class JpaPersistentTokenRepository implements \n         PersistentTokenRepository {\n               private RememberMeTokenRepository rememberMeTokenRepository;\n               public JpaPersistentTokenRepository\n               (RememberMeTokenRepository rmtr) {\n                  this.rememberMeTokenRepository = rmtr;\n           }\n           @Override\n           public void createNewToken(PersistentRememberMeToken token) {\n               PersistentLogin newToken = new PersistentLogin(token);\n               this.rememberMeTokenRepository.save(newToken);\n           }\n          @Override\n          public void updateToken(String series, String tokenValue, \n          Date lastUsed) {\n               PersistentLogin token = this.rememberMeTokenRepository\n               .findBySeries(series);\n               if (token != null) {\n                   token.setToken(tokenValue);\n                   token.setLastUsed(lastUsed);\n                   this.rememberMeTokenRepository.save(token);\n               }\n           }\n        @Override\n           public PersistentRememberMeToken \n           getTokenForSeries(String seriesId) {\n               PersistentLogin token = this.rememberMeTokenRepository\n               .findBySeries(seriesId);\n               return new PersistentRememberMeToken(token.getUsername(),\n               token.getSeries(), token.getToken(), token.getLastUsed());\n           }\n           @Override\n         public void removeUserTokens(String username) {\n             List<PersistentLogin> tokens = this.rememberMeTokenRepository\n             .findByUsername(username);\n              this.rememberMeTokenRepository.delete(tokens);\n           }\n        }\n```", "```java\n            //src/main/java/com/packtpub/springsecurity/configuration/\n            SecurityConfig.java\n\n            //@Autowired\n            //@SuppressWarnings(\"SpringJavaAutowiringInspection\")\n            //private DataSource dataSource;\n            @Autowired\n private PersistentTokenRepository persistentTokenRepository;            ...\n @Bean public PersistentTokenRepository persistentTokenRepository( RememberMeTokenRepository rmtr) { return new JpaPersistentTokenRepository(rmtr); }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n    //@Autowired\n    //private PersistentTokenRepository persistentTokenRepository;\n    @Autowired\n    private RememberMeServices rememberMeServices;\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       ...\n       http.rememberMe()\n           .key(\"jbcpCalendar\")\n .rememberMeServices(rememberMeServices)       ...\n    }\n @Bean public RememberMeServices rememberMeServices\n    (PersistentTokenRepository ptr){ PersistentTokenBasedRememberMeServices rememberMeServices = new \n       PersistentTokenBasedRememberMeServices(\"jbcpCalendar\", \nuserDetailsService, ptr);\n rememberMeServices.setAlwaysRemember(true); return rememberMeServices; }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/web/authentication/rememberme/\n    JpaTokenRepositoryCleaner.java\n\n    public class JpaTokenRepositoryImplCleaner\n    implements Runnable {\n       private final RememberMeTokenRepository repository;\n       private final long tokenValidityInMs;\n       public JpaTokenRepositoryImplCleaner(RememberMeTokenRepository \n       repository, long tokenValidityInMs) {\n           if (rememberMeTokenRepository == null) {\n               throw new IllegalArgumentException(\"jdbcOperations cannot \n               be null\");\n           }\n           if (tokenValidityInMs < 1) {\n               throw new IllegalArgumentException(\"tokenValidityInMs \n               must be greater than 0\\. Got \" + tokenValidityInMs);\n           }\n           this. repository = repository;\n           this.tokenValidityInMs = tokenValidityInMs;\n       }\n           public void run() {\n           long expiredInMs = System.currentTimeMillis() \n           - tokenValidityInMs;             \n              try {\n               Iterable<PersistentLogin> expired = \n               rememberMeTokenRepository\n               .findByLastUsedAfter(new Date(expiredInMs));\n               for(PersistentLogin pl: expired){\n                   rememberMeTokenRepository.delete(pl);\n               }\n           } catch(Throwable t) {...}\n       }\n    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/\n    JavaConfig.java@Configuration\n\n    @Import({SecurityConfig.class})\n @EnableScheduling    public class JavaConfig {\n @Autowired private RememberMeTokenRepository rememberMeTokenRepository; @Scheduled(fixedRate = 10_000) public void tokenRepositoryCleaner(){ Thread trct = new Thread(new JpaTokenRepositoryCleaner(\n rememberMeTokenRepository, 60_000L));\n trct.start(); }    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/web/authentication/rememberme/\n    IpAwarePersistentTokenRepository.java\n\n    private String ipSeries(String series) {\n    ServletRequestAttributes attributes = (ServletRequestAttributes)\n    RequestContextHolder.getRequestAttributes();\n    return series + attributes.getRequest().getRemoteAddr();\n    }\n```", "```java\n    public void createNewToken(PersistentRememberMeToken token) {\n      String ipSeries = ipSeries(token.getSeries());\n      PersistentRememberMeToken ipToken = tokenWithSeries(token, ipSeries);\n      this.delegateRepository.createNewToken(ipToken);\n    }\n```", "```java\n    public PersistentRememberMeToken getTokenForSeries(String seriesId) {\n       String ipSeries = ipSeries(seriesId);\n       PersistentRememberMeToken ipToken = delegateRepository.\n       getTokenForSeries(ipSeries);\n       return tokenWithSeries(ipToken, seriesId);\n    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/web/configuration/WebMvcConfig.java\n\n    @Bean\n    public IpAwarePersistentTokenRepository \n    tokenRepository(RememberMeTokenRepository rmtr) {\n       return new IpAwarePersistentTokenRepository(\n               new JpaPersistentTokenRepository(rmtr)\n       );\n    }\n    @Bean\n    public OrderedRequestContextFilter requestContextFilter() {\n       return new OrderedRequestContextFilter();\n    }\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n\n     @Override\n     protected void configure(HttpSecurity http) throws Exception {\n       ...\n       // remember me configuration\n      http.rememberMe()\n           .key(\"jbcpCalendar\")\n .rememberMeServices(rememberMeServices);     }\n    @Bean\n public RememberMeServices rememberMeServices\n    (PersistentTokenRepository ptr){\n       PersistentTokenBasedRememberMeServices rememberMeServices = new \n       PersistentTokenBasedRememberMeServices(\"jbcpCalendar\", \n       userDetailsService, ptr);\n       return rememberMeServices;\n    }\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/configuration/\n        SecurityConfig.java\n\n        http.rememberMe()\n               .key(\"jbcpCalendar\")\n .rememberMeParameter(\"jbcpCalendar-remember-me\") .rememberMeCookieName(\"jbcpCalendar-remember-me\");\n```", "```java\n        //src/main/java/com/packtpub/springsecurity/configuration/\n        SecurityConfig.java\n\n        @Bean\n        public RememberMeServices rememberMeServices\n        (PersistentTokenRepository ptr){\n           PersistentTokenBasedRememberMeServices rememberMeServices = new \n           PersistentTokenBasedRememberMeServices(\"jbcpCalendar\", \n           userDetailsService, ptr);\n rememberMeServices.setParameter(\"obscure-remember-me\"); rememberMeServices.setCookieName(\"obscure-remember-me\");           return rememberMeServices;\n        }\n```", "```java\n        //src/main/resources/templates/login.html\n\n        <input type=\"checkbox\" id=\"remember\" name=\" obscure-remember-me\" \n        value=\"true\"/>\n```"]