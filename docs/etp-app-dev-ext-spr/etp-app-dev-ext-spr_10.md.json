["```java\nExt.define('TTT.view.LogonWindow', {\n    extend: 'Ext.window.Window',\n    xtype: 'logonwindow',\n    closable: false,\n    iconCls: 'logo-small',\n    width: 300,\n    bodyPadding: 10,\n    title: 'Task Time Tracker Logon',\n    requires: ['Ext.form.field.Text'],\n    initComponent: function() {\n        var me = this;\n        Ext.applyIf(me, {\n            items: [{\n                xtype: 'textfield',\n                fieldLabel: 'User Name',\n                name: 'username',\n                allowBlank: false,\n                validateOnBlur: true,\n                emptyText: 'Enter a Username'\n            }, {\n                xtype: 'textfield',\n                name: 'password',\n                fieldLabel: 'Password',\n                inputType: 'password',\n                validateOnBlur: true,\n                allowBlank: false\n            }, {\n                xtype: 'toolbar',\n                ui: 'footer',\n                layout: {\n                    pack: 'end',\n                    type: 'hbox'\n                },\n                items: [{\n                    xtype: 'button',\n                    text: 'Logon'\n                }]\n            }]\n        });\n        me.callParent(arguments);\n    }\n});\n```", "```java\nExt.define('TTT.view.Viewport', {\n    extend: 'Ext.container.Viewport',\n    cls: 'x-border-layout-ct',\n    requires: ['TTT.view.MainHeader', 'TTT.view.MainCards', 'Ext.layout.container.VBox'],\n    padding: 5,\n    layout: {\n        type: 'vbox',\n        align: 'stretch'\n    },\n    items: [{\n        xtype: 'mainheader',\n        height: 80\n    }, {\n        xtype: 'maincards',\n        flex: 1\n    }]\n});\n```", "```java\nExt.define('TTT.view.MainHeader', {\n    extend: 'Ext.container.Container',\n    xtype: 'mainheader',\n    requires: ['Ext.toolbar.Toolbar'],\n    layout: {\n        align: 'stretch',\n        type: 'hbox'\n    },\n    initComponent: function() {\n        var me = this;\n        Ext.applyIf(me, {\n            items: [{\n                xtype: 'container',\n                cls: 'logo',\n                width: 300\n            }, {\n                xtype: 'toolbar',\n                flex: 1,\n                ui: 'footer',\n                layout: {\n                    pack: 'end',\n                    padding: '20 20 0 0',\n                    type: 'hbox'\n                },\n                items: [{\n                    xtype: 'button',\n                    itemId: 'taskLogsBtn',\n                    iconCls: 'tasklog',\n                    text: 'Task Logs'\n                }, {\n                    xtype: 'button',\n                    itemId: 'taskAdminBtn',\n                    iconCls: 'admin',\n                    hidden: !TTT.getApplication().isAdmin(),\n                    text: '3T Admin'\n                }, {\n                    xtype: 'button',\n                    itemId: 'userAdminBtn',\n                    hidden: !TTT.getApplication().isAdmin(),\n                    iconCls: 'users',\n                    text: 'Users'\n                }, '->',\n                {\n                    xtype: 'button',\n                    itemId: 'logoffBtn',\n                    iconCls: 'logoff',\n                    text: 'Logoff'\n                }]\n            }]\n        });\n        me.callParent(arguments);\n    }\n});\n```", "```java\nExt.define('TTT.view.MainCards', {\n    extend: 'Ext.container.Container',\n    xtype: 'maincards',\n    requires: ['Ext.layout.container.Card', 'TTT.view.Welcome', 'TTT.view.user.ManageUsers'],\n    layout: 'card',\n    initComponent: function() {\n        var me = this;\n        Ext.applyIf(me, {\n            items: [{\n                xtype: 'welcome',\n                itemId: 'welcomCard'\n            }, {\n                xtype: 'manageusers',\n                itemId: 'manageUsersCard'\n            }]\n        });\n        me.callParent(arguments);\n    }\n});\n```", "```java\nExt.define('TTT.view.Welcome', {\n    extend: 'Ext.panel.Panel',\n    xtype: 'welcome',\n    requires: ['Ext.XTemplate'],\n    initComponent: function() {\n        var me = this;\n        var tpl = new Ext.XTemplate('<tpl for=\".\">', '<p>Welcome <b>{fullName}</b>!</p>', '<p>You are logged on as {username} [{email}]</p>', '</tpl>');\n        var welcomeHtml = tpl.apply(TTT.getApplication().getUser());\n        Ext.applyIf(me, {\n            items: [{\n                xtype: 'container',\n                padding: 10,\n                html: welcomeHtml\n            }]\n        });\n        me.callParent(arguments);\n    }\n});\n```", "```java\nExt.define('TTT.view.user.ManageUsers', {\n    extend: 'Ext.panel.Panel',\n    xtype: 'manageusers',\n    requires: ['Ext.toolbar.Toolbar', 'TTT.view.user.UserList', 'TTT.view.user.UserForm'],\n    layout: {\n        type: 'hbox',\n        align: 'stretch'\n    },\n    initComponent: function() {\n        var me = this;\n        Ext.applyIf(me, {\n            dockedItems: [{\n                xtype: 'toolbar',\n                dock: 'top',\n                items: [{\n                    xtype: 'button',\n                    itemId: 'addUserBtn',\n                    iconCls: 'addnew',\n                    text: 'Add user'\n                }]\n            }],\n            items: [{\n                xtype: 'userlist',\n                width: 400,\n                margin: 1\n            }, {\n                xtype: 'userform',\n                flex: 1\n            }]\n        });\n        me.callParent(arguments);\n    }\n});\n```", "```java\nExt.define('TTT.view.user.UserForm', {\n    extend: 'Ext.form.Panel',\n    xtype: 'userform',\n    requires: ['Ext.form.FieldSet', 'Ext.form.field.Radio', 'Ext.form.RadioGroup', 'Ext.toolbar.Toolbar'],\n    layout: {\n        type: 'anchor'\n    },\n    bodyPadding: 10,\n    border: false,\n    autoScroll: true,\n    initComponent: function() {\n        var me = this;\n        Ext.applyIf(me, {\n            items: [{\n                xtype: 'fieldset',\n                padding: 10,\n                width: 350,\n                fieldDefaults: {\n                    anchor: '100%'\n                },\n                title: 'User',\n                items: [{\n                    xtype: 'textfield',\n                    name: 'username',\n                    fieldLabel: 'Username'\n                }, {\n                    xtype: 'textfield',\n                    name: 'firstName',\n                    fieldLabel: 'First Name'\n                }, {\n                    xtype: 'textfield',\n                    name: 'lastName',\n                    fieldLabel: 'Last Name'\n                }, {\n                    xtype: 'textfield',\n                    name: 'email',\n                    fieldLabel: 'Email'\n                }, {\n                    xtype: 'textfield',\n                    name: 'password',\n                    inputType: 'password',\n                    fieldLabel: 'Password'\n                }, {\n                    xtype: 'radiogroup',\n                    fieldLabel: 'Administrator',\n                    items: [{\n                        boxLabel: 'Yes',\n                        name: 'adminRole',\n                        inputValue: 'Y'\n                    }, {\n                        boxLabel: 'No',\n                        name: 'adminRole',\n                        inputValue: 'N'\n                    }]\n                }, {\n                    xtype: 'toolbar',\n                    ui: 'footer',\n                    layout: {\n                        pack: 'end',\n                        type: 'hbox'\n                    },\n                    items: [{\n                        xtype: 'button',\n                        itemId: 'deleteBtn',\n                        iconCls: 'delete',\n                        text: 'Delete'\n                    }, {\n                        xtype: 'button',\n                        itemId: 'saveBtn',\n                        iconCls: 'save',\n                        text: 'Save'\n                    }]\n                }]\n            }]\n        });\n        me.callParent(arguments);\n    }\n});\n```", "```java\nExt.define('TTT.view.user.UserList', {\n    extend: 'Ext.grid.Panel',\n    xtype: 'userlist',\n    store: 'User',\n    title: 'User List',\n    viewConfig: {\n        markDirty: false,\n        stripeRows: false\n    },\n    initComponent: function() {\n        var me = this;\n        Ext.applyIf(me, {\n            tools: [{\n                type: 'refresh',\n                tooltip: 'Refresh user list'\n            }],\n            columns: [{\n                xtype: 'gridcolumn',\n                dataIndex: 'username',\n                flex: 1,\n                text: 'Username'\n            }, {\n                xtype: 'gridcolumn',\n                dataIndex: 'firstName',\n                flex: 1,\n                text: 'First Name'\n            }, {\n                xtype: 'gridcolumn',\n                flex: 1,\n                dataIndex: 'lastName',\n                text: 'Last Name'\n            }, {\n                xtype: 'gridcolumn',\n                flex: 2,\n                dataIndex: 'email',\n                text: 'Email'\n            }]\n        });\n        me.callParent(arguments);\n    }\n});\n```", "```java\nExt.define('TTT.store.User', {\n    extend: 'Ext.data.Store',\n    requires: ['TTT.model.User'],\n    model: 'TTT.model.User',\n    proxy: {\n        type: 'ajax',\n        url: 'ttt/user/findAll.json',\n        reader: {\n            type: 'json',\n            root: 'data'\n        }\n    }\n});\n```", "```java\nExt.define('TTT.model.User', {\n    extend: 'Ext.data.Model',\n\n    fields: [\n        { name: 'username', type: 'string' },\n        { name: 'firstName', type: 'string' },\n        { name: 'lastName', type: 'string' },\n        { name: 'fullName', type: 'string' },\n        { name: 'email', type: 'string' },\n        { name: 'password', type: 'string' },\n        { name: 'adminRole', type: 'string' }\n    ]\n});\n```", "```java\nExt.define('TTT.model.User', {\n    extend: 'Ext.data.Model',\n\n    fields: [\n        { name: 'username', type: 'string' },\n        { name: 'firstName', type: 'string' },\n        { name: 'lastName', type: 'string' },\n        { name: 'fullName', type: 'string' },\n        { name: 'email', type: 'string' },\n        { name: 'password', type: 'string' },\n        { name: 'adminRole', type: 'string' }\n    ],\n  idProperty: 'username'\n});\n```", "```java\nExt.define('TTT.model.User', {\n    extend: 'Ext.data.Model',\n\n    fields: [\n        { name: 'username', type: 'string' },\n        { name: 'firstName', type: 'string' },\n        { name: 'lastName', type: 'string' },\n        { name: 'fullName', type: 'string', persist:false },\n        { name: 'email', type: 'string' },\n        { name: 'password', type: 'string' },\n        { name: 'adminRole', type: 'string' }\n    ],\n    idProperty: 'username',\n    proxy: {\n        type: 'ajax',\n        idParam:'username',\n        api:{\n            create:'ttt/user/store.json',\n            read:'ttt/user/find.json',\n            update:'ttt/user/store.json',\n            destroy:'ttt/user/remove.json'\n        },\n        reader: {\n            type: 'json',            \n            root: 'data'\n        },\n        writer: {\n            type: 'json',\n            allowSingle:true,\n            encode:true,\n            root:'data',\n            writeAllFields: true\n        }\n    }\n});\n```", "```java\n@RequestMapping(value = \"/user/{username}\", \nmethod=RequestMethod.DELETE)\n@ResponseBody\npublic String remove(final @PathVariable String username, final HttpServletRequest request) {\n// code continues\u2026\n```", "```java\n{\n    success: true,\n    data: {\n        \"username\": \"bjones\",\n        \"firstName\": \"Betty\",\n        \"lastName\": \"Jones\",\n        \"fullName\": \"Betty Jones\",\n        \"email\": \"bj@tttracker.com\",\n        \"adminRole\": \"Y\"\n    }\n}\n```", "```java\n{\n    \"username\": \"bjones\",\n    \"firstName\": \"Betty\",\n    \"lastName\": \"Jones\",\n    \"email\": \"bj@tttracker.com\",\n    \"password\": \"thepassword\",\n    \"adminRole\": \"Y\"\n}\n```", "```java\nJsonObject jsonObj = parseJsonObject(jsonData);\n```", "```java\n[{  \n    \"username\": \"bjones\",\n    \"firstName\": \"Betty\",\n    \"lastName\": \"Jones\",\n    \"email\": \"bj@tttracker.com\",\n    \"password\": \"thepassword\",\n    \"adminRole\": \"Y\"\n}]\n```", "```java\nvalidations: [\n  {type: 'presence',  field: 'username'},\n  {type: 'length', field: 'username', min: 4},\n  {type: 'presence',  field: 'firstName'},\n  {type: 'length', field: 'firstName', min: 2},\n  {type: 'presence',  field: 'lastName'},\n  {type: 'length', field: 'lastName', min: 2},\n  {type: 'presence',  field: 'email'},\n  {type: 'email',  field: 'email'},\n  {type: 'presence',  field: 'password'},\n  {type: 'length', field: 'password', min: 6},\n  {type: 'inclusion', field: 'adminRole', list:['Y','N']}\n]\n```", "```java\nExt.define('TTT.model.User', {\n    extend: 'Ext.data.Model',\n\n    fields: [\n        { name: 'username', type: 'string' },\n        { name: 'firstName', type: 'string' },\n        { name: 'lastName', type: 'string' },\n        { name: 'fullName', type: 'string', persist:false },\n        { name: 'email', type: 'string' },\n        { name: 'password', type: 'string' },\n        { name: 'adminRole', type: 'string' }\n    ],\n    idProperty: 'username',\n    proxy: {\n        type: 'ajax',\n        idParam:'username',\n        api:{\n            create:'ttt/user/store.json',\n            read:'ttt/user/find.json',\n            update:'ttt/user/store.json',\n            destroy:'ttt/user/remove.json'\n        },\n        reader: {\n            type: 'json',            \n            root: 'data'\n        },\n        writer: {\n            type: 'json',\n            allowSingle:true,\n            encode:true,\n            root:'data',\n            writeAllFields: true\n        }\n    },\n    validations: [\n        {type: 'presence',  field: 'username'},\n        {type: 'length', field: 'username', min: 4},\n        {type: 'presence',  field: 'firstName'},\n        {type: 'length', field: 'firstName', min: 2},\n        {type: 'presence',  field: 'lastName'},\n        {type: 'length', field: 'lastName', min: 2},\n        {type: 'presence',  field: 'email'},\n        {type: 'email',  field: 'email'},\n        {type: 'presence',  field: 'password'},\n        {type: 'length', field: 'password', min: 6},\n        {type: 'inclusion', field: 'adminRole', list:['Y','N']}\n    ]        \n});\n```", "```java\nExt.define('TTT.controller.MainController', {\n    extend: 'Ext.app.Controller',\n    requires: ['Ext.window.MessageBox'],\n    views: ['TTT.view.MainHeader', 'TTT.view.MainCards', 'TTT.view.LogonWindow'],\n    refs: [{\n        ref: 'mainCards',\n        selector: 'maincards'\n    }, {\n        ref: 'usernameField',\n        selector: 'logonwindow textfield[name=username]'\n    }, {\n        ref: 'passwordField',\n        selector: 'logonwindow textfield[name=password]'\n    }],\n    init: function(application) {\n        this.control({\n            'mainheader button': {\n                click: this.doHeaderButtonClick\n            },\n            'logonwindow button': {\n                click: this.doLogon\n            }\n        });\n    },\n    doHeaderButtonClick: function(button, e, options) {\n        var me = this;\n        if (button.itemId === 'userAdminBtn') {\n            me.getMainCards().getLayout().setActiveItem('manageUsersCard');\n        } else if (button.itemId === 'taskAdminBtn') {\n            me.getMainCards().getLayout().setActiveItem('manageTasksCard');\n        } else if (button.itemId === 'taskLogsBtn') {\n            me.getMainCards().getLayout().setActiveItem('taskLogCard');\n        } else if (button.itemId === 'logoffBtn') {\n            me.doLogoff();\n        }\n    },\n    doLogon: function() {\n        var me = this;\n        if (me.getUsernameField().validate() && me.getPasswordField().validate()) {\n            Ext.Ajax.request({\n                url: 'ttt/security/logon.json',\n                params: {\n                    username: me.getUsernameField().getValue(),\n                    password: me.getPasswordField().getValue()\n                },\n                success: function(response) {\n                    var obj = Ext.JSON.decode(response.responseText);\n                    if (obj.success) {\n                        TTT.getApplication().doAfterLogon(obj.data);\n                    } else {\n                        Ext.Msg.alert('Invalid Logon', 'Please enter a valid username and password');\n                    }\n                }\n            });\n        } else {\n            Ext.Msg.alert('Invalid Logon', 'Please enter a valid username and password');\n        }\n    },\n    doLogoff: function() {\n        Ext.Msg.confirm('Confirm Logout', 'Are you sure you want to log out of 3T?', function(button) {\n            if (button === 'yes') {\n                Ext.Ajax.request({\n                    url: 'ttt/security/logout.json',\n                    success: function() {\n                        window.location.reload();\n                    }\n                });\n            }\n        });\n    }\n});\n```", "```java\nExt.define('TTT.controller.UserController', {\n    extend: 'Ext.app.Controller',\n    views: ['user.ManageUsers'],\n    refs: [{\n        ref: 'userList',\n        selector: 'manageusers userlist'\n    }, {\n        ref: 'userForm',\n        selector: 'manageusers userform'\n    }, {\n        ref: 'addUserButton',\n        selector: 'manageusers #addUserBtn'\n    }, {\n        ref: 'saveUserButton',\n        selector: 'manageusers userform #saveBtn'\n    }, {\n        ref: 'deleteUserButton',\n        selector: 'manageusers userform #deleteBtn'\n    }, {\n        ref: 'userFormFieldset',\n        selector: 'manageusers userform fieldset'\n    }, {\n        ref: 'usernameField',\n        selector: 'manageusers userform textfield[name=username]'\n    }],\n    init: function(application) {\n        this.control({\n            'manageusers #addUserBtn': {\n                click: this.doAddUser\n            },\u2029            'userlist': {\n                itemclick: this.doSelectUser,\n                viewready: this.doInitStore\n            },\n            'manageusers userform #saveBtn': {\n                click: this.doSaveUser\n            },\n            'manageusers userform #deleteBtn': {\n                click: this.doDeleteUser\n            },\n            'manageusers userform': {\n                afterrender: this.doAddUser\n            },\n            'userlist header tool[type=\"refresh\"]': {\n                click: this.doRefreshUserList\n            }\n        });\n    },\n    doInitStore: function() {\n        this.getUserList().getStore().load();\n    },\n    doAddUser: function() {\n        var me = this;\n        me.getUserFormFieldset().setTitle('Add New User');\n        me.getUsernameField().enable();\n        var newUserRec = Ext.create('TTT.model.User', {\n            adminRole: 'N'\n        });\n        me.getUserForm().loadRecord(newUserRec);\n        me.getDeleteUserButton().disable();\n    },\n    doSelectUser: function(grid, record) {\n        var me = this;\n        me.getUserForm().loadRecord(record);\n        me.getUserFormFieldset().setTitle('Edit User ' + record.get('username'));\n        me.getUsernameField().disable();\n        me.getDeleteUserButton().enable();\n    },\n    doSaveUser: function() {\n        var me = this;\n        var rec = me.getUserForm().getRecord();\n        if (rec !== null) {\n            me.getUserForm().updateRecord();\n            var errs = rec.validate();\n            if (errs.isValid()) {\n                rec.save({\n                    success: function(record, operation) {\n                        if (typeof record.store === 'undefined') {\n                            // the record is not yet in a store \n                            me.getUserList().getStore().add(record);\n                        }\n                        me.getUserFormFieldset().setTitle('Edit User ' + record.get('username'));\n                        me.getUsernameField().disable();\n                        me.getDeleteUserButton().enable();\n                    },\n                    failure: function(rec, operation) {\n                        Ext.Msg.alert('Save Failure', operation.request.scope.reader.jsonData.msg);\n                    }\n                });\n            } else {\n                me.getUserForm().getForm().markInvalid(errs);\n                Ext.Msg.alert('Invalid Fields', 'Please fix the invalid entries!');\n            }\n        }\n    },\n    doDeleteUser: function() {\n        var me = this;\n        var rec = me.getUserForm().getRecord();\n        Ext.Msg.confirm('Confirm Delete User', 'Are you sure you want to delete user ' + rec.get('fullName') + '?', function(btn) {\n            if (btn === 'yes') {\n                rec.destroy({\n                    failure: function(rec, operation) {\n                        Ext.Msg.alert('Delete Failure', operation.request.scope.reader.jsonData.msg);\n                    }\n                });\n                me.doAddUser();\n            }\n        });\n    },\n    doRefreshUserList: function() {\n        this.getUserList().getStore().load();\n    }\n});\n```", "```java\nviews: [\n  'user.ManageUsers'\n]\n```", "```java\n'manageusers userform #saveBtn'\n```", "```java\nme.getUserFormFieldset().setTitle('Add New User');\nme.getUsernameField().enable();\n```", "```java\nvar newUserRec = Ext.create('TTT.model.User', {\n    adminRole: 'N'\n});\nme.getUserForm().loadRecord(newUserRec);\n```", "```java\nme.getDeleteUserButton().disable();\n```", "```java\nvar me = this;\nme.getUserForm().loadRecord(record);\nme.getUserFormFieldset().setTitle('Edit User ' + record.data.username);\nme.getUsernameField().disable();\nme.getDeleteUserButton().enable();\n```", "```java\nvar rec = me.getUserForm().getRecord();\n```", "```java\nme.getUserForm().updateRecord();\n```", "```java\nvar errs = rec.validate();\n```", "```java\nsuccess: function(record, operation) {\n    if (typeof record.store === 'undefined') {\n        // the record is not yet in a store \n        me.getUserList().getStore().add(record);\n       // select the user in the grid\n       me.getUserList().getSelectionModel().select(record,true);\n    }\n    me.getUserFormFieldset().setTitle('Edit User ' + record.data.username);\n    me.getUsernameField().disable();\n    me.getDeleteUserButton().enable();\n}\n```", "```java\nfailure: function(rec, operation) {\n    Ext.Msg.alert('Save Failure', operation.request.scope.reader.jsonData.msg);\n}\n```", "```java\nme.getUserForm().getForm().markInvalid(errs);\nExt.Msg.alert('Invalid Fields', 'Please fix the invalid entries!');\n```", "```java\nExt.Msg.confirm('Confirm Delete User', 'Are you sure you want to delete user ' + rec.data.fullName + '?', function(btn) {\n    if (btn === 'yes') {\n  rec.destroy({\n      failure: function(rec, operation) {\n    Ext.Msg.alert('Delete Failure', operation.request.scope.reader.jsonData.msg);\n      }\n  });\n  me.doAddUser();\n    }\n});\n```", "```java\nExt.define('TTT.Application', {\n    name: 'TTT',\n    extend: 'Ext.app.Application',\n    requires: ['TTT.view.Viewport', 'TTT.view.LogonWindow'],\n    models: ['User'],\n    controllers: ['MainController', 'UserController'],\n    stores: ['User'],\n    init: function(application){\n        TTT.URL_PREFIX = 'ttt/';\n        Ext.Ajax.on('beforerequest', function(conn, options, eOpts){\n            options.url = TTT.URL_PREFIX + options.url;\n        });        \n    },\n    launch: function() {\n        var me = this;\n        TTT.console = function(output) {\n            if (typeof console !== 'undefined') {\n                console.info(output);\n            }\n        };\n        me.logonWindow = Ext.create('TTT.view.LogonWindow');\n        me.logonWindow.show();\n    },\n    doAfterLogon: function(userObj) {\n        TTT.console(userObj);\n        var me = this;\n        me.getUser = function() {\n            return userObj;\n        };\n        me.isAdmin = function() {\n            return userObj.adminRole === 'Y';\n        };\n        Ext.create('TTT.view.Viewport');\n        me.logonWindow.hide();\n    }\n});\n```", "```java\nprotected String[] getServletMappings() {\n  return new String[]{\n    \"/ttt/*\"\n  };\n}\n```", "```java\napi:{\n  create: 'user/store.json',\n  read: 'user/find.json',\n  update: 'user/store.json',\n  destroy: 'user/remove.json'\n}\n```", "```java\n{\n    \"username\": \"bjones\",\n    \"firstName\": \"Betty\",\n    \"lastName\": \"Jones\",\n    \"fullName\": \"Betty Jones\",\n    \"email\": \"bj@tttracker.com\",\n    \"adminRole\": \"Y\"\n}\n```"]