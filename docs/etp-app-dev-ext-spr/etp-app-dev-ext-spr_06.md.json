["```java\npackage com.gieman.tttracker.vo;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.Objects;\n\npublic class Result<T> implements Serializable {\n\n    final private boolean success;\n    final private T data;\n    final private String msg;\n\n    Result(boolean success, T data) {\n        this.success = success;\n        this.data = data;\n        this.msg = null;\n    }\n\n    Result(boolean success, String msg) {\n        this.success = success;\n        this.data = null;\n        this.msg = msg;\n    }\n\n    public boolean isSuccess() {\n        return success;\n    }\n\n    public T getData() {\n        return data;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n\n    @Override\n    public String toString() {\n\n        StringBuilder sb = new StringBuilder(\"\\\"Result{\\\"\");\n        sb.append(\"success=\").append(success);\n        sb.append(\", msg=\").append(msg);\n\n        sb.append(\", data=\");\n\n        if(data == null){\n\n            sb.append(\"null\");\n\n        } else if(data instanceof List){\n\n            List castList = (List) data;\n            if(castList.isEmpty()){\n\n                sb.append(\"empty list\");\n\n            } else {\n                Object firstItem = castList.get(0);\n\n                sb.append(\"List of \").append(firstItem.getClass());\n            }\n\n        } else {\n            sb.append(data.toString());\n        }\n\n        sb.append(\"}\");\n\n        return sb.toString();\n\n    }\n\n    @Override\n    public int hashCode() {\n        int hash = 7;\n        hash = 89 * hash + (this.success ? 1 : 0);\n        hash = 89 * hash + Objects.hashCode(this.data);\n        return hash;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (obj == null) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        final Result<?> other = (Result<?>) obj;\n        if (this.success != other.success) {\n            return false;\n        }\n        return Objects.deepEquals(this.data, other.data);\n    }\n}\n```", "```java\npackage com.gieman.tttracker.vo;\n\npublic class ResultFactory {\n\n    public static <T> Result<T> getSuccessResult(T data) {\n        return new Result(true, data);\n    }\n    public static <T> Result<T> getSuccessResult(T data, String msg) {\n        return new Result(true, msg);\n    }\n\n    public static <T> Result<T> getSuccessResultMsg(String msg) {\n        return new Result(true, msg);\n    }\n\n    public static <T> Result<T> getFailResult(String msg) {\n        return new Result(false, msg);\n    }\n}\n```", "```java\npackage com.gieman.tttracker.service;\n\nimport com.gieman.tttracker.dao.UserDao;\nimport com.gieman.tttracker.domain.User;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\n\npublic abstract class AbstractService {\n\n    final protected Logger logger = LoggerFactory.getLogger(this.getClass());\n\n    @Autowired\n    protected UserDao userDao;\n\n    protected  final String USER_INVALID = \"Not a valid user\";\n    protected  final String USER_NOT_ADMIN = \"Not an admin user\";\n\n    protected boolean isValidUser(String username){\n\n        User user = userDao.findByUsername(username);\n        return user != null;\n    }\n}\n```", "```java\n  public boolean isAdmin(){\n    return adminRole == null ? false : adminRole.equals('Y');\n  }\n```", "```java\npackage com.gieman.tttracker.service;\n\nimport java.util.List;\nimport com.gieman.tttracker.domain.Company;\nimport com.gieman.tttracker.vo.Result;\n\npublic interface CompanyService {\n\n    public Result<Company> store(\n        Integer idCompany,\n        String companyName,\n        String actionUsername);\n\n    public Result<Company> remove(Integer idCompany, String actionUsername);\n    public Result<Company> find(Integer idCompany, String actionUsername);\n    public Result<List<Company>> findAll(String actionUsername);\n\n}\n```", "```java\npublic interface ProjectService {\n\n    public Result<Project> store(\n        Integer idProject,\n        Integer idCompany,\n        String projectName,\n        String actionUsername);\n\n    public Result<Project> remove(Integer idProject, String actionUsername);\n    public Result<Project> find(Integer idProject, String actionUsername);\n    public Result<List<Project>> findAll(String actionUsername);\n\n}\npublic interface TaskService {\n\n    public Result<Task> store(\n        Integer idTask,\n        Integer idProject,\n        String taskName,\n        String actionUsername);\n\n    public Result<Task> remove(Integer idTask, String actionUsername);\n    public Result<Task> find(Integer idTask, String actionUsername);\n    public Result<List<Task>> findAll(String actionUsername);\n}\npublic interface TaskLogService {\n\n    public Result<TaskLog> store(\n        Integer idTaskLog,\n        Integer idTask,\n        String username,\n        String taskDescription,\n        Date taskLogDate,\n        int taskMinutes,\n        String actionUsername);\n\n    public Result<TaskLog> remove(Integer idTaskLog, String actionUsername);\n    public Result<TaskLog> find(Integer idTaskLog, String actionUsername);\n    public Result<List<TaskLog>> findByUser(String username, Date startDate, Date endDate, String actionUsername);\n}\npublic interface UserService {\n    public Result<User> store(\n        String username,\n        String firstName,\n        String lastName,\n        String email,\n        String password,\n        Character adminRole,\n        String actionUsername);\n\n    public Result<User> remove(String username, String actionUsername);\n    public Result<User> find(String username, String \n      actionUsername);\n    public Result<List<User>> findAll(String actionUsername);\n    public Result<User> findByUsernamePassword(String username, String password);\n}\n```", "```java\npackage com.gieman.tttracker.service;\n\nimport com.gieman.tttracker.dao.CompanyDao;\nimport java.util.List;\nimport com.gieman.tttracker.domain.*;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Propagation;\nimport org.springframework.transaction.annotation.Transactional;\nimport com.gieman.tttracker.vo.Result;\nimport com.gieman.tttracker.vo.ResultFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\n\n@Transactional\n@Service(\"companyService\")\npublic class CompanyServiceImpl extends AbstractService implements CompanyService {\n\n    @Autowired\n    protected CompanyDao companyDao;\n\n    public CompanyServiceImpl() {\n        super();\n    }\n\n    @Transactional(readOnly = true, propagation = Propagation.SUPPORTS)\n    @Override\n    public Result<Company> find(Integer idCompany, String actionUsername) {\n\n        if (isValidUser(actionUsername)) {\n            Company company = companyDao.find(idCompany);\n            return ResultFactory.getSuccessResult(company);\n\n        } else {          \n            return ResultFactory.getFailResult(USER_INVALID);\n        }\n    }\n\n    @Transactional(readOnly = false, propagation = Propagation.REQUIRED)\n    @Override\n    public Result<Company> store(\n            Integer idCompany,\n            String companyName,\n            String actionUsername) {\n\n        User actionUser = userDao.find(actionUsername);\n\n        if (!actionUser.isAdmin()) {\n            return ResultFactory.getFailResult(USER_NOT_ADMIN);\n        }\n\n        Company company;\n\n        if (idCompany == null) {\n            company = new Company();\n        } else {\n\n            company = companyDao.find(idCompany);\n\n            if (company == null) {\n                return ResultFactory.getFailResult(\"Unable to find company instance with ID=\" + idCompany);\n            }\n        }\n\n        company.setCompanyName(companyName);\n\n        if (company.getId() == null) {\n            companyDao.persist(company);\n        } else {\n            company = companyDao.merge(company);\n        }\n\n        return ResultFactory.getSuccessResult(company);\n\n    }\n\n    @Transactional(readOnly = false, propagation = Propagation.REQUIRED)\n    @Override\n    public Result<Company> remove(Integer idCompany, String actionUsername) {\n\n        User actionUser = userDao.find(actionUsername);\n\n        if (!actionUser.isAdmin()) {\n            return ResultFactory.getFailResult(USER_NOT_ADMIN);\n        }\n\n        if (idCompany == null) {\n            return ResultFactory.getFailResult(\"Unable to remove Company [null idCompany]\");\n        } \n\n        Company company = companyDao.find(idCompany);\n\n        if (company == null) {\n            return ResultFactory.getFailResult(\"Unable to load Company for removal with idCompany=\" + idCompany);\n        } else {\n\n            if (company.getProjects() == null || company.getProjects().isEmpty()) {\n\n                companyDao.remove(company);\n\n                String msg = \"Company \" + company.getCompanyName() + \" was deleted by \" + actionUsername;\n                logger.info(msg);\n                return ResultFactory.getSuccessResultMsg(msg);\n            } else {\n                return ResultFactory.getFailResult(\"Company has projects assigned and could not be deleted\");\n            }\n        }\n\n    }\n\n    @Transactional(readOnly = true, propagation = Propagation.SUPPORTS)\n    @Override\n    public Result<List<Company>> findAll(String actionUsername) {\n\n        if (isValidUser(actionUsername)) {\n            return ResultFactory.getSuccessResult(companyDao.findAll());\n        } else {\n            return ResultFactory.getFailResult(USER_INVALID);\n        }\n    }\n}\n```", "```java\n@Secured(\"ROLE_USER\")\npublic Result<List<Company>> findAll(String actionUsername) {\n// application specific code here\n\n@Secured(\"ROLE_ADMIN\")\npublic Result<Company> remove(Integer idCompany, String actionUsername) {\n// application specific code here\n```", "```java\npackage com.gieman.tttracker.service;\n\nimport com.gieman.tttracker.dao.ProjectDao;\nimport com.gieman.tttracker.dao.TaskDao;\nimport com.gieman.tttracker.dao.TaskLogDao;\nimport java.util.List;\nimport com.gieman.tttracker.domain.*;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Propagation;\nimport org.springframework.transaction.annotation.Transactional;\nimport com.gieman.tttracker.vo.Result;\nimport com.gieman.tttracker.vo.ResultFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\n\n@Transactional\n@Service(\"taskService\")\npublic class TaskServiceImpl extends AbstractService implements TaskService {\n\n    @Autowired\n    protected TaskDao taskDao;\n    @Autowired\n    protected TaskLogDao taskLogDao;     \n    @Autowired\n    protected ProjectDao projectDao;    \n\n    public TaskServiceImpl() {\n        super();\n    }\n\n    @Transactional(readOnly = true, propagation = Propagation.SUPPORTS)\n    @Override\n    public Result<Task> find(Integer idTask, String actionUsername) {\n\n        if(isValidUser(actionUsername)) {\n            return ResultFactory.getSuccessResult(taskDao.find(idTask));\n        } else {\n            return ResultFactory.getFailResult(USER_INVALID);\n        }\n\n    }\n\n    @Transactional(readOnly = false, propagation = Propagation.REQUIRED)\n    @Override\n    public Result<Task> store(\n        Integer idTask,\n        Integer idProject,\n        String taskName,\n        String actionUsername) {\n\n        User actionUser = userDao.find(actionUsername);\n\n        if (!actionUser.isAdmin()) {\n            return ResultFactory.getFailResult(USER_NOT_ADMIN);\n        }\n\n        Project project = projectDao.find(idProject);\n\n        if(project == null){\n            return ResultFactory.getFailResult(\"Unable to store task without a valid project [idProject=\" + idProject + \"]\");\n        }\n\n        Task task;\n\n        if (idTask == null) {\n\n            task = new Task();\n            task.setProject(project);\n            project.getTasks().add(task);\n\n        } else {\n\n            task = taskDao.find(idTask);\n\n            if(task == null) {\n\n                return ResultFactory.getFailResult(\"Unable to find task instance with idTask=\" + idTask);\n\n            } else {\n\n                if(! task.getProject().equals(project)){\n\n                    Project currentProject = task.getProject();\n                    // reassign to new project\n                    task.setProject(project);\n                    project.getTasks().add(task);\n                    // remove from previous project\n                    currentProject.getTasks().remove(task);\n                }\n            }\n        }\n\n        task.setTaskName(taskName);\n\n        if(task.getId() == null) {\n            taskDao.persist(task);\n        } else {\n            task = taskDao.merge(task);\n        }\n\n        return ResultFactory.getSuccessResult(task);\n    }\n\n    @Transactional(readOnly = false, propagation = Propagation.REQUIRED)\n    @Override\n    public Result<Task> remove(Integer idTask, String actionUsername){\n        User actionUser = userDao.find(actionUsername);\n\n        if (!actionUser.isAdmin()) {\n            return ResultFactory.getFailResult(USER_NOT_ADMIN);\n        }\n\n        if(idTask == null){\n\n            return ResultFactory.getFailResult(\"Unable to remove Task [null idTask]\");\n\n        } else {\n\n            Task task = taskDao.find(idTask);\n            long taskLogCount = taskLogDao.findTaskLogCountByTask(task);\n\n            if(task == null) {\n\n                return ResultFactory.getFailResult(\"Unable to load Task for removal with idTask=\" + idTask);\n\n            } else if(taskLogCount > 0) {\n\n                return ResultFactory.getFailResult(\"Unable to remove Task with idTask=\" + idTask + \" as valid task logs are assigned\");\n\n            } else {\n\n                Project project = task.getProject();\n\n                taskDao.remove(task);\n\n                project.getTasks().remove(task);\n\n                String msg = \"Task \" + task.getTaskName() + \" was deleted by \" + actionUsername;\n                logger.info(msg);\n                return ResultFactory.getSuccessResultMsg(msg);\n            }\n        }\n    }\n\n    @Transactional(readOnly = true, propagation = Propagation.SUPPORTS)\n    @Override\n    public Result<List<Task>> findAll(String actionUsername){\n\n        if(isValidUser(actionUsername)){\n            return ResultFactory.getSuccessResult(taskDao.findAll());\n        } else {\n            return ResultFactory.getFailResult(USER_INVALID);\n        }\n    }\n}\n```", "```java\nlong taskLogCount = taskLogDao.findTaskLogCountByTask (task);\n```", "```java\nList<TaskLog> allTasks = taskLogDao.findByTask(task);\nlong taskLogCount = allTasks.size();\n```", "```java\npackage com.gieman.tttracker.service;\n\nimport com.gieman.tttracker.dao.TaskDao;\nimport com.gieman.tttracker.dao.TaskLogDao;\nimport java.util.List;\nimport com.gieman.tttracker.domain.*;\nimport java.util.Date;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Propagation;\nimport org.springframework.transaction.annotation.Transactional;\nimport com.gieman.tttracker.vo.Result;\nimport com.gieman.tttracker.vo.ResultFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\n\n@Transactional\n@Service(\"taskLogService\")\npublic class TaskLogServiceImpl extends AbstractService implements TaskLogService {\n\n    @Autowired\n    protected TaskLogDao taskLogDao;    \n    @Autowired\n    protected TaskDao taskDao;   \n\n    public TaskLogServiceImpl() {\n        super();\n    }\n\n    @Transactional(readOnly = true, propagation = Propagation.SUPPORTS)\n    @Override\n    public Result<TaskLog> find(Integer idTaskLog, String actionUsername) {\n\n        User actionUser = userDao.find(actionUsername);\n\n        if(actionUser == null) {\n            return ResultFactory.getFailResult(USER_INVALID);\n        }\n\n        TaskLog taskLog = taskLogDao.find(idTaskLog);\n\n        if(taskLog == null){\n            return ResultFactory.getFailResult(\"Task log not found with idTaskLog=\" + idTaskLog);\n        } else if( actionUser.isAdmin() || taskLog.getUser().equals(actionUser)){\n            return ResultFactory.getSuccessResult(taskLog);\n        } else {\n            return ResultFactory.getFailResult(\"User does not have permission to view this task log\");\n        }\n    }\n\n    @Transactional(readOnly = false, propagation = Propagation.REQUIRED)\n    @Override\n    public Result<TaskLog> store(\n        Integer idTaskLog,\n        Integer idTask,\n        String username,\n        String taskDescription,\n        Date taskLogDate,\n        int taskMinutes,\n        String actionUsername) {\n\n        User actionUser = userDao.find(actionUsername);\n        User taskUser = userDao.find(username);\n\n        if(actionUser == null || taskUser == null) {\n            return ResultFactory.getFailResult(USER_INVALID);\n        }\n\n        Task task = taskDao.find(idTask);\u2029\n        if(task == null) {\n            return ResultFactory.getFailResult(\"Unable to store task log with null task\");\n        }\n\n        if( !actionUser.isAdmin() && ! taskUser.equals(actionUser) ){\n            return ResultFactory.getFailResult(\"User performing save must be an admin user or saving their own record\");\n        }\n\n        TaskLog taskLog;\n\n        if (idTaskLog == null) {\n            taskLog = new TaskLog();\n        } else {\n            taskLog = taskLogDao.find(idTaskLog);\n            if(taskLog == null) {\n                return ResultFactory.getFailResult(\"Unable to find taskLog instance with ID=\" + idTaskLog);\n            }\n        }\n\n        taskLog.setTaskDescription(taskDescription);\n        taskLog.setTaskLogDate(taskLogDate);\n        taskLog.setTaskMinutes(taskMinutes);\n        taskLog.setTask(task);\n        taskLog.setUser(taskUser);\n\n        if(taskLog.getId() == null) {\n            taskLogDao.persist(taskLog);\n        } else {\n            taskLog = taskLogDao.merge(taskLog);\n        }\n\n        return ResultFactory.getSuccessResult(taskLog);\n\n    }\n\n    @Transactional(readOnly = false, propagation = Propagation.REQUIRED)\n    @Override\n    public Result<TaskLog> remove(Integer idTaskLog, String actionUsername){\n\n        User actionUser = userDao.find(actionUsername);\n\n        if(actionUser == null) {\n            return ResultFactory.getFailResult(USER_INVALID);\n        }\n\n        if(idTaskLog == null){\n            return ResultFactory.getFailResult(\"Unable to remove TaskLog [null idTaskLog]\");\n        } \n\n        TaskLog taskLog = taskLogDao.find(idTaskLog);\n\n        if(taskLog == null) {\n            return ResultFactory.getFailResult(\"Unable to load TaskLog for removal with idTaskLog=\" + idTaskLog);\n        } \n\n        // only the user that owns the task log may remove it\n        // OR an admin user\n        if(actionUser.isAdmin() || taskLog.getUser().equals(actionUser)){\n            taskLogDao.remove(taskLog);\n            return ResultFactory.getSuccessResultMsg(\"taskLog removed successfully\");\n        } else {\n            return ResultFactory.getFailResult(\"Only an admin user or task log owner can delete a task log\");\n        }\n    }\n\n    @Transactional(readOnly = true, propagation = Propagation.SUPPORTS)\n    @Override\n    public Result<List<TaskLog>> findByUser(String username, Date startDate, Date endDate, String actionUsername){\n\n        User taskUser = userDao.findByUsername(username);\n        User actionUser = userDao.find(actionUsername);\n\n        if(taskUser == null || actionUser == null) {\n            return ResultFactory.getFailResult(USER_INVALID);\n        }\n\n        if(startDate == null || endDate == null){\n            return ResultFactory.getFailResult(\"Start and end date are required for findByUser \");\n        }\n\n        if(actionUser.isAdmin() || taskUser.equals(actionUser)){\n            return ResultFactory.getSuccessResult(taskLogDao.findByUser(taskUser, startDate, endDate));\n        } else {\n            return ResultFactory.getFailResult(\"Unable to find task logs. User does not have permission with username=\" + username);\n        }\n    }\n}\n```", "```java\n<context:component-scan base-package=\"com.gieman.tttracker.service\" />\n```", "```java\npackage com.gieman.tttracker.service;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.AbstractTransactionalJUnit4SpringContextTests;\n\n@ContextConfiguration(\"/testingContext.xml\")\npublic abstract class AbstractServiceForTesting extends AbstractTransactionalJUnit4SpringContextTests {\n\n    final protected Logger logger = LoggerFactory.getLogger(this.getClass());\n\n}\nThe CompanyServiceTest class is defined as:\npackage com.gieman.tttracker.service;\n\nimport com.gieman.tttracker.dao.ProjectDao;\nimport com.gieman.tttracker.domain.Company;\nimport com.gieman.tttracker.domain.Project;\nimport com.gieman.tttracker.vo.Result;\nimport java.util.List;\nimport static org.junit.Assert.assertTrue;\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\npublic class CompanyServiceTest extends AbstractServiceForTesting {\n\n    protected final String TEST_USERNAME = \"bjones\";\n    @Autowired\n    protected CompanyService companyService;    \n    @Autowired\n    protected ProjectDao projectDao; \n\n    @Test\n    public void testFind() throws Exception {\n\n        logger.debug(\"\\nSTARTED testFind()\\n\");\n        Result<List<Company>> allItems = companyService.findAll(TEST_USERNAME);\n\n        assertTrue(allItems.getData().size() > 0);\n\n        // get the first item in the list\n        Company c1 = allItems.getData().get(0);\n\n        int id = c1.getId();\n\n        Result<Company> c2= companyService.find(id, TEST_USERNAME);\n\n        assertTrue(c1.equals(c2.getData()));\n        logger.debug(\"\\nFINISHED testFind()\\n\");\n    }    \n\n    @Test\n    public void testFindAll() throws Exception {\n\n        logger.debug(\"\\nSTARTED testFindAll()\\n\");\n        int rowCount = countRowsInTable(\"ttt_company\");\n\n        if(rowCount > 0){                       \n\n            Result<List<Company>> allItems = companyService.findAll(TEST_USERNAME);\n            assertTrue(\"Company.findAll list not equal to row count of table ttt_company\", rowCount == allItems.getData().size());\n\n        } else {\n            throw new IllegalStateException(\"INVALID TESTING SCENARIO: Company table is empty\");\n        }\n        logger.debug(\"\\nFINISHED testFindAll()\\n\");\n    }    \n\n    @Test\n    public void testAddNew() throws Exception {\n\n        logger.debug(\"\\nSTARTED testAddNew()\\n\");\n        //Company c = new Company();\n        final String NEW_NAME = \"New Test Company name\";\n        //c.setCompanyName(NEW_NAME);\n\n        Result<Company> c2 = companyService.store(null, NEW_NAME, TEST_USERNAME);\n\n        assertTrue(c2.getData().getId() != null);\n        assertTrue(c2.getData().getCompanyName().equals(NEW_NAME));\n\n        logger.debug(\"\\nFINISHED testAddNew()\\n\");\n    }\n\n    @Test\n    public void testUpdate() throws Exception {\n\n        logger.debug(\"\\nSTARTED testUpdate()\\n\");\n        final String NEW_NAME = \"Update Test Company New Name\";\n\n        Result<List<Company>> ar1 = companyService.findAll(TEST_USERNAME);\n        Company c = ar1.getData().get(0);\n\n        companyService.store(c.getIdCompany(), NEW_NAME, TEST_USERNAME);\n\n        Result<Company> ar2 = companyService.find(c.getIdCompany(), TEST_USERNAME);\n\n        assertTrue(ar2.getData().getCompanyName().equals(NEW_NAME));\n\n        logger.debug(\"\\nFINISHED testMerge()\\n\");\n\n    }    \n\n    @Test\n    public void testRemove() throws Exception {\n\n        logger.debug(\"\\nSTARTED testRemove()\\n\");\n        Result<List<Company>> ar1 = companyService.findAll(TEST_USERNAME);\n        Company c = ar1.getData().get(0);\n\n        Result<Company> ar = companyService.remove(c.getIdCompany(), TEST_USERNAME);        \n        Result<Company> ar2 = companyService.find(c.getIdCompany(), TEST_USERNAME);\n\n        // should fail as projects are assigned\n        assertTrue(! ar.isSuccess());\n        // finder still works\n        assertTrue(ar2.getData() != null);\n\n        logger.debug(\"\\ntestRemove() - UNABLE TO DELETE TESTS PASSED\\n\");\n        // remove all the projects\n        c = ar2.getData();\n\n        for(Project p : c.getProjects()){\n            projectDao.remove(p);\n\n        }\n        c.getProjects().clear();\n\n        logger.debug(\"\\ntestRemove() - removed all projects\\n\");\n\n        ar = companyService.remove(c.getIdCompany(), TEST_USERNAME);\n        // remove should have succeeded\n        assertTrue(ar.isSuccess());\n\n        ar2 = companyService.find(c.getIdCompany(), TEST_USERNAME);\n        // should not have been found\n        assertTrue(ar2.getData() == null);\n        assertTrue(ar2.isSuccess());\n\n        logger.debug(\"\\nFINISHED testRemove()\\n\");\n    }     \n}\n```", "```java\npackage com.gieman.tttracker.service;\n\nimport com.gieman.tttracker.dao.TaskLogDao;\nimport com.gieman.tttracker.dao.UserDao;\nimport com.gieman.tttracker.domain.TaskLog;\nimport com.gieman.tttracker.domain.User;\nimport com.gieman.tttracker.vo.Result;\nimport java.util.Calendar;\nimport java.util.List;\nimport static org.junit.Assert.assertTrue;\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\npublic class UserServiceTest extends AbstractServiceForTesting {\n\n    @Autowired\n    protected UserService userService;\n    @Autowired\n    protected TaskLogDao taskLogDao;\n    @Autowired\n    protected UserDao userDao;\n    private final String TEST_USERNAME = \"jsmith\";\n\n    @Test\n    public void testAddNew() throws Exception {\n\n        String ADMIN_USERNAME = \"bjones\";\n\n        logger.debug(\"\\nSTARTED testAddNew()\\n\");\n\n        Result<User> ar = userService.store(\"nusername\", \"David\", \"Francis\", \"df@tttracker.com\", \"admpwd\", 'N', ADMIN_USERNAME);\n\n        // should succeed\n        logger.debug(ar.getMsg());\n        assertTrue(ar.isSuccess());\n\n        ar = userService.store(this.TEST_USERNAME, \"David\", \"Francis\", \"df@tttracker.com\", \"admpwd\", 'Y', ADMIN_USERNAME);\n        logger.debug(ar.getMsg());\n        assertTrue(\"Cannot assign email that is currently assigned to other user\", !ar.isSuccess());\n\n        ar = userService.store(\"user100\", \"David\", \"Francis\", \"user100@tttracker.com\", \"\", 'Y', ADMIN_USERNAME);\n\n        logger.debug(ar.getMsg());\n        assertTrue(\"Cannot set empty password for user\", !ar.isSuccess());\n\n        ar = userService.store(\"user101\", \"David\", \"Francis\", \"  \", \"validpwd\", 'Y', ADMIN_USERNAME);\n\n        logger.debug(ar.getMsg());\n        assertTrue(\"Cannot set empty email for user\", !ar.isSuccess());\n\n        ar = userService.store(this.TEST_USERNAME, \"David\", \"Francis\", \"diff@email.com\", \"validpwd\", 'Y', ADMIN_USERNAME);\n\n        logger.debug(ar.getMsg());\n        assertTrue(\"Assigning new email to user is allowed\", ar.isSuccess());\n\n        logger.debug(\"\\nFINISHED testAddNew()\\n\");\n    }\n\n    @Test\n    public void testRemove() throws Exception {\n\n        String ADMIN_USERNAME = \"bjones\";\n        Calendar DEFAULT_START_DATE = Calendar.getInstance();\n        Calendar DEFAULT_END_DATE = Calendar.getInstance();\n        DEFAULT_START_DATE.set(Calendar.YEAR, 1900);\n        DEFAULT_END_DATE.set(Calendar.YEAR, 3000);\n\n        logger.debug(\"\\nSTARTED testRemove()\\n\");\n\n        User user1 = userDao.find(TEST_USERNAME);\n\n        List<TaskLog> logs = taskLogDao.findByUser(user1, DEFAULT_START_DATE.getTime(), DEFAULT_END_DATE.getTime());\n        Result<User> ar;\n\n        if (logs.isEmpty()) {\n\n            ar = userService.remove(TEST_USERNAME, ADMIN_USERNAME);\n            logger.debug(ar.getMsg());\n            assertTrue(\"Delete of user should be allowed as no task logs assigned!\", ar.isSuccess());\n\n        } else {\n\n            // this user has task log assigned\n            ar = userService.remove(TEST_USERNAME, ADMIN_USERNAME);\n            logger.debug(ar.getMsg());\n            assertTrue(\"Cascading delete of user to task logs not allowed!\", !ar.isSuccess());\n\n        }\n\n        logs = taskLogDao.findByUser(user1, DEFAULT_START_DATE.getTime(), DEFAULT_END_DATE.getTime());\n        if (logs.isEmpty()) {\n\n            ar = userService.remove(TEST_USERNAME, ADMIN_USERNAME);\n            logger.debug(ar.getMsg());\n            assertTrue(\"Delete of user should be allowed as empty task log list!\", ar.isSuccess());\n\n        } else {\n\n            // this user has task log assigned\n            ar = userService.remove(TEST_USERNAME, ADMIN_USERNAME);\n            logger.debug(ar.getMsg());\n            assertTrue(\"Cascading delete of user to task logs not allowed!\", !ar.isSuccess());\n\n        }\n\n        ar = userService.remove(ADMIN_USERNAME, ADMIN_USERNAME);\n        logger.debug(ar.getMsg());\n        assertTrue(\"Should not be able to delete yourself\", !ar.isSuccess());\n\n        logger.debug(\"\\nFINISHED testRemove()\\n\");\n    }\n\n    @Test\n    public void testLogon() {\n\n        Result<User> ar = userService.findByUsernamePassword(\"jsmith\", \"admin\");\n\n        assertTrue(\"Valid user could not be found for valid user/pwd\", ar.getData() != null);\n        assertTrue(ar.isSuccess());\n\n        ar = userService.findByUsernamePassword(\"jsmith\", \"ADMIN\");\n\n        assertTrue(\"Invalid logic - valid user found with UPPERCASE password\", ar.getData() == null);\n        assertTrue(!ar.isSuccess());\n\n        ar = userService.findByUsernamePassword(\"JS@tttracker.com\", \"admin\");\n\n        assertTrue(\"Valid user could not be found for valid email/pwd\", ar.getData() != null);\n        assertTrue(ar.isSuccess());\n\n        ar = userService.findByUsernamePassword(\"jsmith\", \"invalidadmin\");\n        assertTrue(\"Invalid user verified with wrong password\", ar.getData() == null);\n        assertTrue(!ar.isSuccess());\n\n        ar = userService.findByUsernamePassword(\"blah\", \"blah\");\n        assertTrue(\"Invalid user verified with wrong username and password\", ar.getData() == null);\n        assertTrue(!ar.isSuccess());\n    }\n}\n```", "```java\n<plugin>\n  <groupId>org.apache.maven.plugins</groupId>\n  <artifactId>maven-surefire-plugin</artifactId>\n    <version>2.14.1</version>\n  <configuration>\n    <skipTests>false</skipTests>\n    <includes>\n      <include>**/dao/*Test.java</include>\n      <include>**/service/*Test.java</include>\n    </includes>\n    <argLine>-javaagent:target/lib/spring-instrument-${spring.version}.jar</argLine>\n  </configuration>\n</plugin>\n```"]