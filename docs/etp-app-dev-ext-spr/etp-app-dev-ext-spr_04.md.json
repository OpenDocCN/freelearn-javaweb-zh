["```java\npackage com.gieman.tttracker.dao;\n\nimport com.gieman.tttracker.domain.Company;\nimport java.util.List;\npublic interface CompanyDao {\n\n    public Company find(Integer idCompany);\n\n    public List<Company> findAll();\n\n    public void persist(Company company);\n\n    public Company merge(Company company);\n\n    public void remove(Company company);\n}\n```", "```java\npackage com.gieman.tttracker.dao;\n\nimport com.gieman.tttracker.domain.Company;\nimport com.gieman.tttracker.domain.Project;\nimport java.util.List;\n\npublic interface ProjectDao {\n\n    public Project find(Integer idProject);\n\n    public List<Project> findAll();\n\n    public void persist(Project project);\n\n    public Project merge(Project project);\n\n    public void remove(Project project);\n}\n```", "```java\npublic Company find(Integer idCompany); // in CompanyDao\npublic Project find(Integer idProject); // in ProjectDao\npublic Task find(Integer idTask); // in TaskDao\npublic User find(Integer idUser); // in UserDao\npublic TaskLog find(Integer idTaskLog); // in TaskLogDao\n```", "```java\npackage com.gieman.tttracker.dao;\n\npublic interface GenericDao<T, ID> {\n\n    public T find(ID id);\n\n    public void persist(T obj);\n\n    public T merge(T obj);\n\n    public void remove(T obj);\n}\n```", "```java\npackage com.gieman.tttracker.dao;\n\nimport com.gieman.tttracker.domain.Company;\nimport java.util.List;\n\npublic interface CompanyDao extends GenericDao<Company, Integer>{\n\n    public List<Company> findAll();\n\n}\n```", "```java\npackage com.gieman.tttracker.dao;\n\nimport com.gieman.tttracker.domain.Company;\nimport com.gieman.tttracker.domain.Project;\nimport java.util.List;\n\npublic interface ProjectDao extends GenericDao<Project, Integer>{\n\n    public List<Project> findAll();\n\n}\n```", "```java\npackage com.gieman.tttracker.dao;\n\nimport com.gieman.tttracker.domain.Project;\nimport com.gieman.tttracker.domain.Task;\nimport java.util.List;\n\npublic interface TaskDao extends GenericDao<Task, Integer>{\n\n    public List<Task> findAll();    \n}\n```", "```java\npackage com.gieman.tttracker.dao;\n\nimport com.gieman.tttracker.domain.User;\nimport java.util.List;\n\npublic interface UserDao extends GenericDao<User, String> {\n\n    public List<User> findAll();\n\n    public User findByUsernamePassword(String username, String password);\n\n    public User findByUsername(String username);\n\n    public User findByEmail(String email);\n}\n```", "```java\npackage com.gieman.tttracker.dao;\n\nimport com.gieman.tttracker.domain.Task;\nimport com.gieman.tttracker.domain.TaskLog;\nimport com.gieman.tttracker.domain.User;\nimport java.util.Date;\nimport java.util.List;\n\npublic interface TaskLogDao extends GenericDao<TaskLog, Integer>{\n\n    public List<TaskLog> findByUser(User user, Date startDate, Date endDate);\n\n    public long findTaskLogCountByTask(Task task);\n\n    public long findTaskLogCountByUser(User user);\n}\n```", "```java\npackage com.gieman.tttracker.dao;\n\nimport java.io.Serializable;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\nimport org.springframework.transaction.annotation.Propagation;\nimport org.springframework.transaction.annotation.Transactional;\n\npublic class GenericDaoImpl<T, ID extends Serializable> implements GenericDao<T, ID> {\n\n    final protected Logger logger = LoggerFactory.getLogger(this.getClass());    \n\n    @PersistenceContext(unitName = \"tttPU\")\n    protected EntityManager em;\n\n    private Class<T> type;\n\n    public GenericDaoImpl(Class<T> type1) {\n        this.type = type1;\n    }\n\n    @Override\n    @Transactional(readOnly = true, propagation = Propagation.SUPPORTS)\n  public T find(ID id) {\n        return (T) em.find(type, id);\n    }\n\n    @Override\n    @Transactional(readOnly = false, propagation = Propagation.REQUIRED)\n    public void persist(T o) {\n      em.persist(o);\n    }\n\n    @Override\n    @Transactional(readOnly = false, propagation = Propagation.REQUIRED)\n    public T merge(T o) {\n\n          o = em.merge(o);\n      return o;\n    }\n    @Override\n    @Transactional(readOnly = false, propagation = Propagation.REQUIRED)\n    public void remove(T o) {\n\n        // associate object with persistence context\n        o = merge(o);\n        em.remove(o);\n\n    }    \n}\n```", "```java\n  <dependency>\n   <groupId>ch.qos.logback</groupId>\n   <artifactId>logback-classic</artifactId>\n   <version>${logback.version}</version>\n  </dependency>\n```", "```java\n <properties>\n  <endorsed.dir>${project.build.directory}/endorsed</endorsed.dir>\n  <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  <spring.version>3.2.4.RELEASE</spring.version>\n <logback.version>1.0.13</logback.version>\n </properties>\n```", "```java\nfinal protected Logger logger = LoggerFactory.getLogger(this.getClass());\n```", "```java\n@Transactional(readOnly = false, propagation = Propagation.REQUIRED)\n@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)\n```", "```java\npackage com.gieman.tttracker.dao;\n\nimport com.gieman.tttracker.domain.Company;\nimport java.util.List;\nimport org.springframework.stereotype.Repository;\nimport org.springframework.transaction.annotation.Propagation;\nimport org.springframework.transaction.annotation.Transactional;\n\n@Repository(\"companyDao\")\n@Transactional\npublic class CompanyDaoImpl extends GenericDaoImpl<Company, Integer> \n    implements CompanyDao {\n\n    public CompanyDaoImpl() {\n        super(Company.class);\n    }\n\n    @Override\n    @Transactional(readOnly = true, propagation = Propagation.SUPPORTS)\n    public List<Company> findAll() {\n        return em.createNamedQuery(\"Company.findAll\")\n                .getResultList();\n    }    \n}\n```", "```java\n@NamedQuery(name = \"Company.findAll\", query = \"SELECT c FROM Company c\")\n```", "```java\n@NamedQueries({\n    @NamedQuery(name = \"Company.findAll\", query = \"SELECT c FROM Company c ORDER BY c.companyName ASC \"),\n    @NamedQuery(name = \"Company.findByIdCompany\", query = \"SELECT c FROM Company c WHERE c.idCompany = :idCompany\"),\n    @NamedQuery(name = \"Company.findByCompanyName\", query = \"SELECT c FROM Company c WHERE c.companyName = :companyName\")})\n```", "```java\npackage com.gieman.tttracker.dao;\n\nimport com.gieman.tttracker.domain.Company;\nimport com.gieman.tttracker.domain.Project;\nimport java.util.List;\nimport org.springframework.stereotype.Repository;\nimport org.springframework.transaction.annotation.Propagation;\nimport org.springframework.transaction.annotation.Transactional;\n\n@Repository(\"projectDao\")\n@Transactional\npublic class ProjectDaoImpl extends GenericDaoImpl<Project, Integer> \n    implements ProjectDao {\n\n    public ProjectDaoImpl() {\n        super(Project.class);\n    }\n\n    @Override\n    @Transactional(readOnly = true, propagation = Propagation.SUPPORTS)\n    public List<Project> findAll() {\n        return em.createNamedQuery(\"Project.findAll\")\n                .getResultList();\n    }    \n}\n```", "```java\n@NamedQuery(name = \"Project.findAll\", query = \"SELECT p FROM Project p ORDER BY p.projectName\")\n```", "```java\npackage com.gieman.tttracker.dao;\n\nimport com.gieman.tttracker.domain.Project;\nimport com.gieman.tttracker.domain.Task;\nimport java.util.List;\nimport org.springframework.stereotype.Repository;\nimport org.springframework.transaction.annotation.Propagation;\nimport org.springframework.transaction.annotation.Transactional;\n\n@Repository(\"taskDao\")\n@Transactional\npublic class TaskDaoImpl extends GenericDaoImpl<Task, Integer> implements TaskDao {\n\n    public TaskDaoImpl() {\n        super(Task.class);\n    }\n\n    @Override\n    @Transactional(readOnly = true, propagation = Propagation.SUPPORTS)\n    public List<Task> findAll() {\n        return em.createNamedQuery(\"Task.findAll\")\n                .getResultList();\n    }\n}\n```", "```java\n@NamedQuery(name = \"Task.findAll\", query = \"SELECT t FROM Task t ORDER BY t.taskName\")\n```", "```java\npackage com.gieman.tttracker.dao;\n\nimport com.gieman.tttracker.domain.User;\nimport java.util.List;\nimport org.springframework.stereotype.Repository;\nimport org.springframework.transaction.annotation.Propagation;\nimport org.springframework.transaction.annotation.Transactional;\n\n@Repository(\"userDao\")\n@Transactional\npublic class UserDaoImpl extends GenericDaoImpl<User, String> implements UserDao {\n\n    public UserDaoImpl() {\n        super(User.class);\n    }\n\n    @Override\n    @Transactional(readOnly = true, propagation = Propagation.SUPPORTS)\n    public List<User> findAll() {\n        return em.createNamedQuery(\"User.findAll\")\n                .getResultList();\n    }\n\n    @Override\n    @Transactional(readOnly = true, propagation = Propagation.SUPPORTS)\n    public User findByUsernamePassword(String username, String password) {\n\n        List<User> users = em.createNamedQuery(\"User.findByUsernamePassword\")\n                .setParameter(\"username\", username)\n                .setParameter(\"password\", password)\n                .getResultList();\n\n        return (users.size() == 1 ? users.get(0) : null);\n    }    \n\n    @Override\n    @Transactional(readOnly = true, propagation = Propagation.SUPPORTS)\n    public User findByUsername(String username) {\n        List<User> users = em.createNamedQuery(\"User.findByUsername\")\n                .setParameter(\"username\", username)\n                .getResultList();\n\n        return (users.size() == 1 ? users.get(0) : null);\n    }    \n\n    @Override\n    @Transactional(readOnly = true, propagation = Propagation.SUPPORTS)\n    public User findByEmail(String email) {\n\n        List<User> users = em.createNamedQuery(\"User.findByEmail\")\n                .setParameter(\"email\", email)\n                .getResultList();\n\n        return (users.size() == 1 ? users.get(0) : null);\n    }    \n}\n```", "```java\n@NamedQuery(name = \"User.findByUsernamePassword\", query = \"SELECT u FROM User u WHERE u.password = :password AND (u.email = :username OR u.username = :username)\")\n```", "```java\npublic User findByEmail(String email) {\n\n  User user = (User) em.createNamedQuery(\"User.findByEmail\")\n      .setParameter(\"email\", email)\n      .getSingleResult();\n\n  return user;\n}\n```", "```java\npublic User findByEmail(String email) {\n\n  User user = null;\n\n  try {\n    user = (User) em.createNamedQuery(\"User.findByEmail\")\n      .setParameter(\"email\", email)\n      .getSingleResult();\n\n  } catch(NoResultException nre){\n\n }\n  return user;\n}\n```", "```java\n/**\n * Find a User with the username/password combination or return null\n * if a valid user could not be found.\n * @param username\n * @param password\n * @return valid User object or null if not found.\n */\n```", "```java\npackage com.gieman.tttracker.dao;\n\nimport com.gieman.tttracker.domain.Task;\nimport com.gieman.tttracker.domain.TaskLog;\nimport com.gieman.tttracker.domain.User;\nimport java.util.Date;\nimport java.util.List;\nimport javax.persistence.TemporalType;\n\npublic class TaskLogDaoImpl extends GenericDaoImpl<TaskLog, Integer> implements TaskLogDao {\n\n    public TaskLogDaoImpl() {\n        super(TaskLog.class);\n    }\n\n    @Override\n    public List<TaskLog> findByUser(User user, Date startDate, Date endDate) {\n        return em.createNamedQuery(\"TaskLog.findByUser\")\n                .setParameter(\"user\", user)\n                .setParameter(\"startDate\", startDate, TemporalType.DATE)\n                .setParameter(\"endDate\", endDate, TemporalType.DATE)\n                .getResultList();\n    }\n\n    @Override\n    public long findTaskLogCountByTask(Task task) {\n        Long count = (Long) em.createNamedQuery(\"TaskLog.findTaskLogCountByTask\")\n                .setParameter(\"task\", task)\n                .getSingleResult();\n        return count;\n    }\n\n    @Override\n    public long findTaskLogCountByUser(User user) {\n        Long count = (Long) em.createNamedQuery(\"TaskLog.findTaskLogCountByUser\")\n                .setParameter(\"user\", user)\n                .getSingleResult();\n\n        return count;\n    }\n}\n```", "```java\n@NamedQueries({\n    @NamedQuery(name = \"TaskLog.findByUser\", query = \"SELECT tl FROM TaskLog tl WHERE tl.user = :user AND tl.taskLogDate BETWEEN :startDate AND :endDate order by tl.taskLogDate ASC\"),\n    @NamedQuery(name = \"TaskLog.findTaskLogCountByTask\", query = \"SELECT count(tl) FROM TaskLog tl WHERE tl.task = :task \"),\n    @NamedQuery(name = \"TaskLog.findTaskLogCountByUser\", query = \"SELECT count(tl) FROM TaskLog tl WHERE tl.user = :user \")\n})\n```", "```java\npackage com.gieman.tttracker.domain;\u2029\nimport java.io.Serializable;\n\npublic abstract class AbstractEntity implements Serializable{\n\n}\n```", "```java\npackage com.gieman.tttracker.domain;\n\npublic interface EntityItem<T> {\n\n    public T getId();\n\n}\n```", "```java\npublic class Company extends AbstractEntity implements EntityItem<Integer> {\n\n// many more lines of code here\n\n @Override\n public Integer getId() {\n return idCompany;\n } \n}\n```", "```java\npublic class Project extends AbstractEntity implements EntityItem<Integer> {\n\n// many more lines of code here\n\n @Override\n public Integer getId() {\n return idProject;\n } \n}\npublic class Task extends AbstractEntity implements EntityItem<Integer> {\n\n// many more lines of code here\n\n @Override\n public Integer getId() {\n return idTask;\n } \n}\npublic class User extends AbstractEntity implements EntityItem<String> {\n\n// many more lines of code here\n\n @Override\n public String getId() {\n return username;\n } \n}\npublic class TaskLog extends AbstractEntity implements EntityItem<Integer> {\n\n// many more lines of code here\n\n @Override\n public Integer getId() {\n return idTaskLog;\n } \n}\n```", "```java\nThe \"className\" record with ID=? has been inserted\n```", "```java\nThe \"className\" record with ID=? has been deleted\n```"]