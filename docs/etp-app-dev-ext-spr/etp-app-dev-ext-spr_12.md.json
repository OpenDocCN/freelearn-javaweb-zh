["```java\nExt.define('TTT.view.admin.ManageTasks', {\n    extend: 'Ext.panel.Panel',\n    xtype: 'managetasks',\n    requires: ['TTT.view.admin.CompanyTree', 'TTT.view.admin.TaskForm', 'TTT.view.admin.ProjectForm', 'TTT.view.admin.CompanyForm', 'Ext.toolbar.Toolbar', \n        'Ext.layout.container.Card'],\n    layout: {\n        type: 'hbox',\n        align: 'stretch'\n    },\n    initComponent: function() {\n        var me = this;\n        Ext.applyIf(me, {\n            dockedItems: [{\n                xtype: 'toolbar',\n                dock: 'top',\n                items: [{\n                    xtype: 'button',\n                    itemId: 'addCompanyBtn',\n                    iconCls: 'addnew',\n                    text: 'Add New Company'\n                }]\n            }],\n            items: [{\n                xtype: 'companytree',\n                flex: 1,\n                margin: 1\n            }, {\n                xtype: 'container',\n                itemId: 'adminCards',\n                activeItem: 0,\n                flex: 1,\n                layout: {\n                    type: 'card'\n                },\n                items: [{\n                    xtype: 'container',\n                    padding: 10,\n                    html: 'Please select an item from the tree...'\n                }, {\n                    xtype: 'companyform'\n                }, {\n                    xtype: 'projectform'\n                }, {\n                    xtype: 'taskform'\n                }]\n            }]\n        });\n        me.callParent(arguments);\n    }\n});\n```", "```java\nExt.define('TTT.view.admin.CompanyForm', {\n    extend: 'Ext.form.Panel',\n    xtype: 'companyform',\n    requires: ['Ext.form.FieldSet', 'Ext.form.field.Text', 'Ext.toolbar.Toolbar'],\n    layout: {\n        type: 'anchor'\n    },\n    bodyPadding: 10,\n    border: false,\n    autoScroll: true,\n    initComponent: function() {\n        var me = this;\n        Ext.applyIf(me, {\n            items: [{\n                xtype: 'fieldset',\n                hidden: false,\n                padding: 10,\n                width: 350,\n                fieldDefaults: {\n                    anchor: '100%'\n                },\n                title: 'Company Entry',\n                items: [{\n                    xtype: 'textfield',\n                    name: 'companyName',\n                    fieldLabel: 'Name',\n                    emptyText: 'Enter company name...'\n                }, {\n                    xtype: 'toolbar',\n                    ui: 'footer',\n                    layout: {\n                        pack: 'end',\n                        type: 'hbox'\n                    },\n                    items: [{\n                        xtype: 'button',\n                        iconCls: 'delete',\n                        itemId: 'deleteBtn',\n                        disabled: true,\n                        text: 'Delete'\n                    }, {\n                        xtype: 'button',\n                        iconCls: 'addnew',\n                        itemId: 'addProjectBtn',\n                        disabled: true,\n                        text: 'Add Project'\n                    }, {\n                        xtype: 'button',\n                        iconCls: 'save',\n                        itemId: 'saveBtn',\n                        text: 'Save'\n                    }]\n                }]\n            }]\n        });\n        me.callParent(arguments);\n    }\n});\n```", "```java\nExt.define('TTT.view.admin.ProjectForm', {\n    extend: 'Ext.form.Panel',\n    xtype: 'projectform',\n    requires: ['Ext.form.FieldSet', 'Ext.form.field.Text', 'Ext.toolbar.Toolbar'],\n    layout: {\n        type: 'anchor'\n    },\n    bodyPadding: 10,\n    border: false,\n    autoScroll: true,\n    initComponent: function() {\n        var me = this;\n        Ext.applyIf(me, {\n            items: [{\n                xtype: 'fieldset',\n                hidden: false,\n                padding: 10,\n                width: 350,\n                fieldDefaults: {\n                    anchor: '100%'\n                },\n                title: 'Project Entry',\n                items: [{\n                    xtype: 'textfield',\n                    name: 'projectName',\n                    fieldLabel: 'Project Name',\n                    emptyText: 'Enter project name...'\n                }, {\n                    xtype: 'toolbar',\n                    ui: 'footer',\n                    layout: {\n                        pack: 'end',\n                        type: 'hbox'\n                    },\n                    items: [{\n                        xtype: 'button',\n                        iconCls: 'delete',\n                        itemId: 'deleteBtn',\n                        disabled: true,\n                        text: 'Delete'\n                    }, {\n                        xtype: 'button',\n                        iconCls: 'addnew',\n                        itemId: 'addTaskBtn',\n                        disabled: true,\n                        text: 'Add Task'\n                    }, {\n                        xtype: 'button',\n                        iconCls: 'save',\n                        itemId: 'saveBtn',\n                        text: 'Save'\n                    }]\n                }]\n            }]\n        });\n        me.callParent(arguments);\n    }\n});\n```", "```java\nExt.define('TTT.view.admin.TaskForm', {\n    extend: 'Ext.form.Panel',\n    xtype: 'taskform',\n    requires: ['Ext.form.FieldSet', 'Ext.form.field.Text', 'Ext.toolbar.Toolbar'],\n    layout: {\n        type: 'anchor'\n    },\n    bodyPadding: 10,\n    border: false,\n    autoScroll: true,\n    initComponent: function() {\n        var me = this;\n        Ext.applyIf(me, {\n            items: [{\n                xtype: 'fieldset',\n                hidden: false,\n                padding: 10,\n                width: 350,\n                fieldDefaults: {\n                    anchor: '100%'\n                },\n                title: 'Task Entry',\n                items: [{\n                    xtype: 'textfield',\n                    name: 'taskName',\n                    fieldLabel: 'Name',\n                    emptyText: 'Enter task name...'\n                }, {\n                    xtype: 'toolbar',\n                    ui: 'footer',\n                    layout: {\n                        pack: 'end',\n                        type: 'hbox'\n                    },\n                    items: [{\n                        xtype: 'button',\n                        iconCls: 'delete',\n                        itemId: 'deleteBtn',\n                        disabled: true,\n                        text: 'Delete'\n                    }, {\n                        xtype: 'button',\n                        iconCls: 'save',\n                        itemId: 'saveBtn',\n                        text: 'Save'\n                    }]\n                }]\n            }]\n        });\n        me.callParent(arguments);\n    }\n});\n```", "```java\nExt.define('TTT.view.admin.CompanyTree', {\n    extend: 'Ext.tree.Panel',\n    xtype: 'companytree',\n    title: 'Company -> Projects -> Tasks',\n    requires: ['TTT.store.CompanyTree'],\n    store: 'CompanyTree',\n    lines: true,\n    rootVisible: false,\n    hideHeaders: true,\n    viewConfig: {\n        preserveScrollOnRefresh: true\n    },\n    initComponent: function() {\n        var me = this;\n        Ext.applyIf(me, {\n            tools: [{\n                type: 'expand',\n                qtip: 'Expand All'\n            }, {\n                type: 'collapse',\n                qtip: 'Collapse All'\n            }, {\n                type: 'refresh',\n                qtip: 'Refresh Tree'\n            }],\n            columns: [{\n                xtype: 'treecolumn',\n                dataIndex: 'text',\n                flex: 1\n            }]\n        });\n        me.callParent(arguments);\n    }\n}); \n```", "```java\nExt.define('TTT.store.CompanyTree', {\n    extend: 'Ext.data.TreeStore',\n    proxy: {\n        type: 'ajax',\n        url: 'company/tree.json'\n    }\n});\n```", "```java\n{\n    \"success\": true,\n    \"children\": [\n        {\n            \"id\": \"C_1\",\n            \"text\": \"PACKT Publishing\",\n            \"leaf\": false,\n            \"expanded\": true,\n            \"children\": [\n                {\n                    \"id\": \"P_1\",\n                    \"text\": \"EAD with Spring and ExtJS\",\n                    \"leaf\": false,\n                    \"expanded\": true,\n                    \"children\": [\n                        {\n                            \"id\": \"T_1\",\n                            \"text\": \"Chapter 1\",\n                            \"leaf\": true\n                        },\n                        {\n                            \"id\": \"T_2\",\n                            \"text\": \"Chapter 2\",\n                            \"leaf\": true\n                        },\n                        {\n                            \"id\": \"T_3\",\n                            \"text\": \"Chapter 3\",\n                            \"leaf\": true\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"P_2\",\n                    \"text\": \"The Spring Framework for Beginners\",\n                    \"leaf\": false,\n                    \"expanded\": true,\n                    \"children\": [\n                        {\n                            \"id\": \"T_4\",\n                            \"text\": \"Chapter 1\",\n                            \"leaf\": true\n                        },\n                        {\n                            \"id\": \"T_5\",\n                            \"text\": \"Chapter 2\",\n                            \"leaf\": true\n                        },\n                        {\n                            \"id\": \"T_6\",\n                            \"text\": \"Chapter 3\",\n                            \"leaf\": true\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n```", "```java\nroot: {\n    text: 'Companies',\n    expanded: true\n}\n```", "```java\n{\n    \"success\": true,\n    \"children\": [\n        {\n            \"id\": \"C_1\",\n            \"iconCls\": \"company\",\n            \"text\": \"PACKT Publishing\",\n            \"leaf\": false,\n            \"expanded\": true,\n            \"children\": [\n                {\n                    \"id\": \"P_1\",\n                    \"iconCls\": \"project\",\n                    \"text\": \"EAD with Spring and ExtJS\",\n                    \"leaf\": false,\n                    \"expanded\": true,\n                    \"children\": [ etc\u2026\n```", "```java\nprivate String getTreeNodeId(EntityItem obj){\n  String id = null;\n\n  if(obj instanceof Company){\n    id = \"C_\" + obj.getId();\n  } else if(obj instanceof Project){\n    id = \"P_\" + obj.getId();\n  } else if(obj instanceof Task){\n    id = \"T_\" + obj.getId();\n  }\n  return id;\n}\n```", "```java\n@RequestMapping(value=\"/tree\", method=RequestMethod.GET, produces={\"application/json\"})\n@ResponseBody\npublic String getCompanyTreeJson(HttpServletRequest request) {\n\n  User sessionUser = getSessionUser(request);\n\n  Result<List<Company>> ar = companyService.findAll(sessionUser.getUsername());\n  if (ar.isSuccess()) {\n\n    JsonObjectBuilder builder = Json.createObjectBuilder();\n    builder.add(\"success\", true);\n    JsonArrayBuilder companyChildrenArrayBuilder =\n      Json.createArrayBuilder();\n\n    for(Company company : ar.getData()){\n\n      List<Project> projects = company.getProjects();\n\n      JsonArrayBuilder projectChildrenArrayBuilder = Json.createArrayBuilder();\n\n      for(Project project : projects){\n\n        List<Task> tasks = project.getTasks();\n\n        JsonArrayBuilder taskChildrenArrayBuilder = Json.createArrayBuilder();\n\n        for(Task task : tasks){\n\n          taskChildrenArrayBuilder.add(\n            Json.createObjectBuilder()\n            .add(\"id\", getTreeNodeId(task))\n            .add(\"text\", task.getTaskName())\n            .add(\"leaf\", true)\n          );                        \n        }\n\n        projectChildrenArrayBuilder.add(\n          Json.createObjectBuilder()\n            .add(\"id\", getTreeNodeId(project))\n            .add(\"text\", project.getProjectName())\n            .add(\"leaf\", tasks.isEmpty())\n            .add(\"expanded\", tasks.size() > 0)\n            .add(\"children\", taskChildrenArrayBuilder)\n        );                    \n\n      }\n\n      companyChildrenArrayBuilder.add(\n        Json.createObjectBuilder()\n          .add(\"id\", getTreeNodeId(company))\n          .add(\"text\", company.getCompanyName())\n          .add(\"leaf\", projects.isEmpty())\n          .add(\"expanded\", projects.size() > 0)\n          .add(\"children\", projectChildrenArrayBuilder)\n      );\n    }\n\n    builder.add(\"children\", companyChildrenArrayBuilder);\n\n    return toJsonString(builder.build());\n\n  } else {\n\n    return getJsonErrorMsg(ar.getMsg());\n\n  }\n}\n```", "```java\nExt.define('TTT.model.Company', {\n    extend: 'Ext.data.Model',\n    fields: [\n        { name: 'idCompany', type: 'int', useNull:true },\n        { name: 'companyName', type: 'string'}\n    ],\n    idProperty: 'idCompany',\n    proxy: {\n        type: 'ajax',\n        idParam:'idCompany',\n        api:{\n            create:'company/store.json',\n            read:'company/find.json',\n            update:'company/store.json',\n            destroy:'company/remove.json'\n        },\n        reader: {\n            type: 'json',\n            root: 'data'\n        },\n        writer: {\n            type: 'json',\n            allowSingle:true,\n            encode:true,\n            root:'data',\n            writeAllFields: true\n        }\n    },\n    validations: [\n        {type: 'presence',  field: 'companyName'},\n        {type: 'length', field: 'companyName', min: 2}\n    ]\n});\n```", "```java\nExt.define('TTT.store.Company', {\n    extend: 'Ext.data.Store',\n    requires: [\n        'TTT.model.Company'\n    ],\n    model: 'TTT.model.Company',\n    proxy: {\n        type: 'ajax',\n        url: 'company/findAll.json',\n        reader: {\n            type: 'json',\n            root: 'data'\n        }\n    }    \n});\n```", "```java\nvar recIdSplit = record.getId().split('_');\n```", "```java\nmodels:[\n  'Company',\n  'Project',\n  'Task',\n  'User',\n  'TaskLog'\n],    \ncontrollers: [\n  'MainController',\n  'UserController',\n  'AdminController',\n  'TaskLogController'\n],    \nstores: [\n  'Company',\n  'CompanyTree',\n  'Project',\n  'Task',\n  'User',\n  'TaskLog'\n]\n```", "```java\nExt.define('TTT.view.MainCards', {\n    extend: 'Ext.container.Container',\n    xtype: 'maincards',\n    requires: ['Ext.layout.container.Card', 'TTT.view.Welcome', 'TTT.view.user.ManageUsers', 'TTT.view.tasklog.ManageTaskLogs', 'TTT.view.admin.ManageTasks'],\n    layout: 'card',\n    initComponent: function() {\n        var me = this;\n        Ext.applyIf(me, {\n            items: [{\n                xtype: 'welcome',\n                itemId: 'welcomCard'\n            }, {\n                xtype: 'manageusers',\n                itemId: 'manageUsersCard'\n            }, {\n                xtype: 'managetasklogs',\n                itemId: 'taskLogCard'\n            }, {\n xtype: 'managetasks',\n itemId: 'manageTasksCard'\n }]\n        });\n        me.callParent(arguments);\n    }\n});\n```", "```java\nproxy: {\n  type: 'ajax',\n  url: 'company/treenode.json'\n}\n```", "```java\ncompany/treenode.json?node=root\n```", "```java\n{\n    success: true,\n    \"children\": [{\n        \"id\": \"C_2\",\n        \"text\": \"Gieman It Solutions\",\n        \"leaf\": false\n    }, {\n        \"id\": \"C_1\",\n        \"text\": \"PACKT Publishing\",\n        \"leaf\": false\n    }]\n}\n```", "```java\n{\n    success: true,\n    \"children\": [{\n        \"id\": \"P_3\",\n        \"text\": \"Advanced Sencha ExtJS4 \",\n        \"leaf\": false\n    }, {\n        \"id\": \"P_1\",\n        \"text\": \"EAD with Spring and ExtJS\",\n        \"leaf\": false\n    }, {\n        \"id\": \"P_2\",\n        \"text\": \"The Spring Framework for Beginners\",\n        \"leaf\": false\n    }]\n}\n```", "```java\n{\n    success: true,\n    \"children\": [{\n        \"id\": \"T_1\",\n        \"text\": \"Chapter 1\",\n        \"leaf\": true\n    }, {\n        \"id\": \"T_2\",\n        \"text\": \"Chapter 2\",\n        \"leaf\": true\n    }, {\n        \"id\": \"T_3\",\n        \"text\": \"Chapter 3\",\n        \"leaf\": true\n    }]\n}\n```", "```java\n@RequestMapping(value = \"/treenode\", method = RequestMethod.GET, produces = {\"application/json\"})\n@ResponseBody\npublic String getCompanyTreeNode(\n    @RequestParam(value = \"node\", required = true) String node,\n    HttpServletRequest request) {\n\n  User sessionUser = getSessionUser(request);\n\n  logger.info(node);\n\n  JsonObjectBuilder builder = Json.createObjectBuilder();\n  builder.add(\"success\", true);\n  JsonArrayBuilder childrenArrayBuilder =Json.createArrayBuilder();\n\n  if(node.equals(\"root\")){\n\n    Result<List<Company>> ar =companyService.findAll(sessionUser.getUsername());\n    if (ar.isSuccess()) {                                \n\n      for(Company company : ar.getData()){                   \n        childrenArrayBuilder.add(\n          Json.createObjectBuilder()\n            .add(\"id\", getTreeNodeId(company))\n            .add(\"text\", company.getCompanyName())\n            .add(\"leaf\", company.getProjects().isEmpty())\n        );\n      }\n    } else {\n\n      return getJsonErrorMsg(ar.getMsg());\n    }\n  } else if (node.startsWith(\"C\")){\n\n    String[] idSplit = node.split(\"_\");\n    int idCompany = Integer.parseInt(idSplit[1]);\n    Result<Company> ar = companyService.find(idCompany,sessionUser.getUsername());\n\n    for(Project project : ar.getData().getProjects()){\n\n      childrenArrayBuilder.add(\n        Json.createObjectBuilder()\n          .add(\"id\", getTreeNodeId(project))\n          .add(\"text\", project.getProjectName())\n          .add(\"leaf\", project.getTasks().isEmpty())\n      );\n    }\n\n  } else if (node.startsWith(\"P\")){\n\n    String[] idSplit = node.split(\"_\");\n    int idProject = Integer.parseInt(idSplit[1]);\n    Result<Project> ar = projectService.find(idProject,sessionUser.getUsername());\n    for(Task task : ar.getData().getTasks()){\n\n      childrenArrayBuilder.add(\n        Json.createObjectBuilder()\n          .add(\"id\", getTreeNodeId(task))\n          .add(\"text\", task.getTaskName())\n          .add(\"leaf\", true)\n      );\n    }\n  }\n\n  builder.add(\"children\", childrenArrayBuilder);\n\n  return toJsonString(builder.build());\n}\n```", "```java\nExt.define('TTT.view.admin.CompanyTree', {\n    extend: 'Ext.tree.Panel',\n    xtype: 'companytree',\n    title: 'Company -> Projects -> Tasks',\n    requires: ['TTT.store.CompanyTree'],\n    store: 'CompanyTree',\n    lines: true,\n    rootVisible: false,\n    hideHeaders: false,\n    viewConfig: {\n        preserveScrollOnRefresh: true\n    },\n    initComponent: function() {\n        var me = this;\n        Ext.applyIf(me, {\n            tools: [{\n                type: 'expand',\n                qtip: 'Expand All'\n            }, {\n                type: 'collapse',\n                qtip: 'Collapse All'\n            }, {\n                type: 'refresh',\n                qtip: 'Refresh Tree'\n            }],\n            columns: [{\n                xtype: 'treecolumn',\n                text:'Node',\n                dataIndex: 'text',\n                flex: 1\n            },\n {\n dataIndex: 'id',\n text : 'ID',\n width:60\n }]\n        });\n        me.callParent(arguments);\n    }\n});\n```", "```java\nExt.define('TTT.view.admin.CompanyTree', {\n    extend: 'Ext.tree.Panel',\n    xtype: 'companytree',\n    title: 'Company -> Projects -> Tasks',\n    requires: ['TTT.store.CompanyTree','Ext.tree.plugin.TreeViewDragDrop'],\n    store: 'CompanyTree',\n    lines: true,\n    rootVisible: false,\n    hideHeaders: true,\n    viewConfig: {\n        preserveScrollOnRefresh: true,\n        plugins: {\n ptype: 'treeviewdragdrop'\n }\n    }, etc\n```", "```java\ndoAfterActivate:function(){\n  var me = this;\n  me.getCompanyStore().load();\n  me.getProjectStore().load();\n  me.getTaskStore().load();\n  me.getCompanyTreeStore().on('append' , me.doSetTreeIcon, me);\n  me.getCompanyTree().getView().on('beforedrop', me.isDropAllowed,me);\n me.getCompanyTree().getView().on('drop', me.doChangeParent, me);\n  me.getCompanyTreeStore().load();\n}\n```", "```java\nisDropAllowed: function(node, data, overModel, dropPosition) {\n    var dragNode = data.records[0];\n    if (!Ext.isEmpty(dragNode) && !Ext.isEmpty(overModel)) {\n        var dragIdSplit = dragNode.getId().split('_');\n        var dropIdSplit = overModel.getId().split('_');\n        if (dragIdSplit[0] === 'T' && dropIdSplit[0] === 'P') {\n            return true;\n        } else if (dragIdSplit[0] === 'P' \n                     && dropIdSplit[0] === 'C') {\n            return true;\n        }\n    }\n    return false;\n}\n```", "```java\ndoChangeParent: function(node, data, overModel, dropPosition, eOpts) {\n    var me = this;\n    var dragNode = data.records[0];\n    if (!Ext.isEmpty(dragNode) && !Ext.isEmpty(overModel)) {\n        var dragIdSplit = dragNode.getId().split('_');\n        var dropIdSplit = overModel.getId().split('_');\n        if (dragIdSplit[0] === 'T' && dropIdSplit[0] === 'P') {\n            var idTask = Ext.Number.from(dragIdSplit[1]);\n            var idProject = Ext.Number.from(dropIdSplit[1]);\n            var rec = me.getTaskStore().getById(idTask);\n            if (!Ext.isEmpty(rec)) {\n                rec.set('idProject', idProject);\n                rec.save();\n            }\n        } else if (dragIdSplit[0] === 'P' \n                    && dropIdSplit[0] === 'C') {\n            var idProject = Ext.Number.from(dragIdSplit[1]);\n            var idCompany = Ext.Number.from(dropIdSplit[1]);\n            var rec = me.getProjectStore().getById(idProject);\n            if (!Ext.isEmpty(rec)) {\n                rec.set('idCompany', idCompany);\n                rec.save();\n            }\n        }\n    }\n}\n```"]