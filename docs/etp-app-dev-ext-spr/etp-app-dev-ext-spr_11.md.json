["```java\nExt.define('TTT.view.tasklog.ManageTaskLogs', {\n    extend: 'Ext.panel.Panel',\n    xtype: 'managetasklogs',\n    requires: ['Ext.toolbar.Toolbar', 'Ext.layout.container.Border', 'Ext.form.field.Date', 'TTT.view.tasklog.TaskLogList', 'TTT.view.tasklog.TaskLogForm'],\n    layout: {\n        type: 'border'\n    },\n    initComponent: function() {\n        var me = this;\n        var now = new Date();\n        Ext.applyIf(me, {\n            dockedItems: [{\n                xtype: 'toolbar',\n                dock: 'top',\n                items: [{\n                    xtype: 'datefield',\n                    labelAlign: 'right',\n                    name: 'startDate',\n                    format: 'd-M-Y',\n                    fieldLabel: 'Start Date',\n                    value: Ext.Date.getFirstDateOfMonth(now),\n                    width: 180,\n                    labelWidth: 70\n                }, {\n                    xtype: 'datefield',\n                    labelAlign: 'right',\n                    name: 'endDate',\n                    format: 'd-M-Y',\n                    fieldLabel: 'End Date',\n                    value: Ext.Date.getLastDateOfMonth(now),\n                    width: 180,\n                    labelWidth: 70\n                }, {\n                    xtype: 'button',\n                    iconCls: 'search',\n                    itemId: 'searchBtn',\n                    text: 'Search'\n                }, {\n                    xtype: 'button',\n                    iconCls: 'addnew',\n                    itemId: 'addTaskLogBtn',\n                    text: 'Add New'\n                }]\n            }],\n            items: [{\n                xtype: 'taskloglist',\n                region: 'center',\n                margin: 1\n            }, {\n                xtype: 'tasklogform',\n                region: 'east',\n                split: true,\n                width: 400\n            }]\n        });\n        me.callParent(arguments);\n    }\n});\n```", "```java\nExt.define('TTT.view.tasklog.TaskLogForm', {\n    extend: 'Ext.form.Panel',\n    xtype: 'tasklogform',\n    requires: ['Ext.form.FieldSet', 'Ext.form.field.ComboBox', 'Ext.form.field.Date', 'Ext.form.field.Number', 'Ext.form.field.TextArea', 'Ext.toolbar.Toolbar'],\n    layout: {\n        type: 'anchor'\n    },\n    bodyPadding: 10,\n    border: false,\n    autoScroll: true,\n    initComponent: function() {\n        var me = this;\n        Ext.applyIf(me, {\n            items: [{\n                xtype: 'fieldset',\n                hidden: true,\n                padding: 10,\n                fieldDefaults: {\n                    anchor: '100%'\n                },\n                title: 'Task Log Entry',\n                items: [{\n                    xtype: 'combobox',\n                    name: 'project',\n                    fieldLabel: 'Project',\n                    queryMode: 'local',\n                    store: 'Project',\n                    valueField: 'idProject',\n                    listConfig: {\n                        minWidth: 300\n                    },\n                    tpl: Ext.create('Ext.XTemplate', '<tpl for=\".\">', '<div class=\"x-boundlist-item\"><b>{companyName}</b>: {projectName}</div>', '</tpl>'),\n                    displayTpl: Ext.create('Ext.XTemplate', '<tpl for=\".\">', '{projectName}', '</tpl>')\n                }, {\n                    xtype: 'combobox',\n                    name: 'idTask',\n                    fieldLabel: 'Task',\n                    displayField: 'taskName',\n                    queryMode: 'local',\n                    store: 'Task',\n                    valueField: 'idTask'\n                }, {\n                    xtype: 'datefield',\n                    name: 'taskLogDate',\n                    format: 'd-M-Y',\n                    fieldLabel: 'Date'\n                }, {\n                    xtype: 'numberfield',\n                    name: 'hours',\n                    minValue: 0,\n                    decimalPrecision: 2,\n                    itemId: 'taskHours',\n                    fieldLabel: 'Hours'\n                }, {\n                    xtype: 'textareafield',\n                    height: 100,\n                    name: 'taskDescription',\n                    fieldLabel: 'Description',\n                    emptyText: 'Enter task log description here...'\n                }, {\n                    xtype: 'toolbar',\n                    ui: 'footer',\n                    layout: {\n                        pack: 'end',\n                        type: 'hbox'\n                    },\n                    items: [{\n                        xtype: 'button',\n                        iconCls: 'delete',\n                        itemId: 'deleteBtn',\n                        disabled: true,\n                        text: 'Delete'\n                    }, {\n                        xtype: 'button',\n                        iconCls: 'save',\n                        itemId: 'saveBtn',\n                        text: 'Save'\n                    }]\n                }]\n            }]\n        });\n        me.callParent(arguments);\n    }\n});\n```", "```java\nExt.define('TTT.view.tasklog.TaskLogList', {\n    extend: 'Ext.grid.Panel',\n    xtype: 'taskloglist',\n    viewConfig: {\n        markDirty: false,\n        emptyText: 'There are no task log records to display...'\n    },\n    title: 'Task Logs',\n    store: 'TaskLog',\n    requires: ['Ext.grid.feature.Summary', 'Ext.grid.column.Date', 'Ext.util.Point'],\n    features: [{\n        ftype: 'summary',\n        dock: 'bottom'\n    }],\n    initComponent: function() {\n        var me = this;\n        Ext.applyIf(me, {\n            columns: [{\n                xtype: 'datecolumn',\n                dataIndex: 'taskLogDate',\n                format: 'd-M-Y',\n                width: 80,\n                text: 'Date'\n            }, {\n                xtype: 'gridcolumn',\n                dataIndex: 'taskName',\n                text: 'Task'\n            }, {\n                xtype: 'gridcolumn',\n                dataIndex: 'taskDescription',\n                flex: 1,\n                text: 'Description',\n                summaryType: 'count',\n                summaryRenderer: function(value, summaryData, dataIndex) {\n                    return Ext.String.format('<div style=\"font-weight:bold;text-align:right;\">{0} Records, Total Hours:</div>', value);\n                }\n            }, {\n                xtype: 'gridcolumn',\n                dataIndex: 'taskMinutes',\n                width: 80,\n                align: 'center',\n                text: 'Hours',\n                summaryType: 'sum',\n                renderer: function(value, metaData, record) {\n                    return record.get('hours');\n                },\n                summaryRenderer: function(value, summaryData, dataIndex) {\n                    var valHours = value / 60;\n                    return Ext.String.format('<b>{0}</b>', valHours);\n                }\n            }]\n        });\n        me.callParent(arguments);\n    }\n});\n```", "```java\n{\n    xtype: 'gridcolumn',\n    dataIndex: 'taskMinutes',\n    width:80,\n    align:'center',\n    text: 'Hours',\n    summaryType:'sum',\n    renderer:function(value, metaData, record){\n  return record.get('hours');\n    },\n    summaryRenderer: function(value, summaryData, dataIndex) {\n  var valHours = value/60;\n  return Ext.String.format('<b>{0}</b>', valHours); \n    }           \n}\n```", "```java\nExt.define('TTT.model.TaskLog', {\n    extend: 'Ext.data.Model',    \n    fields: [\n        { name: 'idTaskLog', type: 'int', useNull:true },\n        { name: 'taskDescription', type: 'string' },\n        { name: 'taskLogDate', type: 'date', dateFormat:'Ymd' },\n        { name: 'taskMinutes', type: 'int' },\n        { name: 'hours', type: 'float', persist:false, convert:function(value, record){\n            return record.get('taskMinutes') / 60;\n        }},\n        { name: 'username', type: 'string' },\n        { name: 'userFullName', type: 'string', persist:false },\n        { name: 'idTask', type: 'int', useNull:true },\n        { name: 'taskName', type: 'string', persist:false },\n        { name: 'idProject', type: 'int', persist:false },\n        { name: 'projectName', type: 'string', persist:false },\n        { name: 'idCompany', type: 'int', persist:false },\n        { name: 'companyName', type: 'string', persist:false }\n    ],\n    idProperty: 'idTaskLog',\n    proxy: {\n        type: 'ajax',\n        idParam:'idTaskLog',\n        api:{\n            create:'taskLog/store.json',\n            read:'taskLog/find.json',\n            update:'taskLog/store.json',\n            destroy:'taskLog/remove.json'\n        },\n        reader: {\n            type: 'json',            \n            root: 'data'\n        },\n        writer: {\n            type: 'json',\n            allowSingle:true,\n            encode:true,\n            root:'data',\n            writeAllFields: true\n        }\n    },\n    validations: [\n        {type: 'presence',  field: 'taskDescription'},\n        {type: 'length', field: 'taskDescription', min: 2},\n        {type: 'presence',  field: 'username'},\n        {type: 'presence',  field: 'taskLogDate'},\n        {type: 'presence',  field: 'idTask'},\n        {type: 'length', field: 'idTask', min: 1},\n        {type: 'length', field: 'taskMinutes', min: 0}\n    ]     \n});\n```", "```java\nExt.define('TTT.model.Project', {\n    extend: 'Ext.data.Model',\n    fields: [\n        { name: 'idProject', type: 'int', useNull:true },\n        { name: 'projectName', type: 'string' },\n        { name: 'idCompany', type:'int', useNull:true },\n        { name: 'companyName', type:'string', persist:false }\n    ],\n    idProperty: 'idProject',\n    proxy: {\n        type: 'ajax',\n        idParam:'idProject',\n        api:{\n            create:'project/store.json',\n            read:'project/find.json',\n            update:'project/store.json',\n            destroy:'project/remove.json'\n        },\n        reader: {\n            type: 'json',\n            root: 'data'\n        },\n        writer: {\n            type: 'json',\n            allowSingle:true,\n            encode:true,\n            root:'data',\n            writeAllFields: true\n        }\n    },\n    validations: [\n        {type: 'presence',  field: 'projectName'},\n        {type: 'length', field: 'projectName', min: 2},\n        {type: 'presence',  field: 'idCompany'},\n        {type: 'length', field: 'idCompany', min: 1}\n    ]    \n});\n```", "```java\nExt.define('TTT.model.Task', {\n    extend: 'Ext.data.Model',    \n    fields: [\n        { name: 'idTask', type: 'int', useNull:true },\n        { name: 'taskName', type: 'string' },\n        { name: 'idProject', type: 'int', useNull:true },\n        { name: 'projectName', type: 'string', persist:false  },\n        { name: 'idCompany', type: 'int', useNull:true, persist:false  },\n        { name: 'companyName', type: 'string', persist:false  }\n\n    ],\n    idProperty: 'idTask',\n    proxy: {\n        type: 'ajax',\n        idParam:'idTask',\n        api:{\n            create:'task/store.json',\n            read:'task/find.json',\n            update:'task/store.json',\n            destroy:'task/remove.json'\n        },\n        reader: {\n            type: 'json',\n            root: 'data'\n        },\n        writer: {\n            type: 'json',\n            allowSingle:true,\n            encode:true,\n            root:'data',\n            writeAllFields: true\n        }\n    },\n    validations: [\n        {type: 'presence',  field: 'taskName'},\n        {type: 'length', field: 'taskName', min: 2},\n        {type: 'presence',  field: 'idProject'},\n        {type: 'length', field: 'idProject', min: 1}\n    ]\n});\n```", "```java\nExt.define('TTT.store.TaskLog', {\n    extend: 'Ext.data.Store',\n    requires: ['TTT.model.TaskLog'],\n    model: 'TTT.model.TaskLog',\n    proxy: {\n        type: 'ajax',\n        url: 'taskLog/findByUser.json',\n        reader: {\n            type: 'json',\n            root: 'data'\n        }\n    },\n    doFindByUser: function(username, startDate, endDate) {\n        this.load({\n            params: {\n                username: username,\n                startDate: Ext.Date.format(startDate, 'Ymd'),\n                endDate: Ext.Date.format(endDate, 'Ymd')\n            }\n        });\n    }\n});\n```", "```java\nExt.define('TTT.store.Project', {\n    extend: 'Ext.data.Store',\n    requires: ['TTT.model.Project'],\n    model: 'TTT.model.Project',\n    sorters: [{\n        property: 'companyName',\n        direction: 'ASC'\n    }, {\n        property: 'projectName',\n        direction: 'ASC'\n    }],\n    proxy: {\n        type: 'ajax',\n        url: 'project/findAll.json',\n        reader: {\n            type: 'json',\n            root: 'data'\n        }\n    }\n});\n```", "```java\nExt.define('TTT.store.Task', {\n    extend: 'Ext.data.Store',\n    requires: ['TTT.model.Task'],\n    model: 'TTT.model.Task',\n    proxy: {\n        type: 'ajax',\n        url:'task/findAll.json',\n        reader: {\n            type: 'json',\n            root: 'data'\n        }\n    }    \n});\n```", "```java\nExt.define('TTT.controller.TaskLogController', {\n    extend: 'Ext.app.Controller',\n    views: ['tasklog.ManageTaskLogs'],\n    stores: ['TaskLog', 'Project', 'Task'],\n    refs: omitted\u2026\n    init: omitted\u2026\n    doAfterActivate: function() {\n        var me = this;\n        me.getTaskStore().load();\n        me.getProjectStore().load();\n    },            \n    doSelectProject: function(combo, records) {\n        var me = this;\n        var rec = records[0];\n        if (!Ext.isEmpty(rec)) {\n            me.getTaskCombo().getStore().clearFilter();\n            me.getTaskCombo().getStore().filter({\n                property: 'idProject',\n                value: rec.get('idProject'),\n                exactMatch: true\n            });\n            me.getTaskCombo().setValue('');\n            if (me.getTaskCombo().getStore().getCount() === 0) {\n                Ext.Msg.alert('No Tasks Available', 'There are no tasks assigned to this project!');\n            }\n        }\n    },\n    doSelectTaskLog: function(grid, record) {\n        var me = this;\n        me.getTaskCombo().getStore().clearFilter();\n        me.getTaskCombo().getStore().filter({\n            property: 'idProject',\n            value: record.get('idProject'),\n            exactMatch: true\n        });\n        me.getProjectCombo().setValue(record.get('idProject'));\n        me.getTaskLogForm().loadRecord(record);\n        me.getTaskLogFormFieldset().show();\n        me.getTaskLogFormFieldset().setTitle('Edit Task Log For ' + record.get('taskName'));\n        me.getTaskLogForm().getForm().clearInvalid();\n        me.getDeleteTaskLogButton().enable();\n    },\n    doAddTaskLog: function() {\n        var me = this;\n        me.getTaskLogFormFieldset().show();\n        me.getTaskLogFormFieldset().setTitle('Add Task Log');\n        var taskLogDate = me.getTaskLogDateField().getValue();\n        if (Ext.isEmpty(taskLogDate)) {\n            taskLogDate = new Date();\n        }\n        var tl = Ext.create('TTT.model.TaskLog', {\n            taskDescription: '',\n            username: TTT.getApplication().getUser().username,\n            taskLogDate: taskLogDate,\n            taskMinutes: 0,\n            idTask: null\n        });\n        me.getTaskLogForm().loadRecord(tl);\n        me.getDeleteTaskLogButton().disable();\n        var idProject = me.getProjectCombo().getValue();\n        if (Ext.isEmpty(idProject)) {\n            var firstRec = me.getProjectCombo().getStore().getAt(0);\n            me.getProjectCombo().setValue(firstRec.get('idProject'), true);\n            me.getTaskCombo().getStore().clearFilter();\n            me.getTaskCombo().getStore().filter({\n                property: 'idProject',\n                value: firstRec.get('idProject'),\n                exactMatch: true\n            });\n            me.getTaskCombo().setValue('');\n        }\n    },\n    doDeleteTaskLog: function() {\n        var me = this;\n        var rec = me.getTaskLogForm().getRecord();\n        Ext.Msg.confirm('Confirm Delete', 'Are you sure you want to delete this task log?', function(btn) {\n            if (btn === 'yes') {\n                rec.destroy({\n                    failure: function(rec, operation) {\n                        Ext.Msg.alert('Delete Failure', operation.request.scope.reader.jsonData.msg);\n                    }\n                });\n                me.doAddTaskLog();\n            }\n        });\n    },\n    doSaveTaskLog: function() {\n        var me = this;\n        var rec = me.getTaskLogForm().getRecord();\n        if (!Ext.isEmpty(rec)) {\n            me.getTaskLogForm().updateRecord(); \n            // update the minutes field of the record\n            var hours = me.getTaskHoursField().getValue();\n            rec.set('taskMinutes', hours * 60);\n            var errs = rec.validate();\n            if (errs.isValid() && me.getTaskLogForm().isValid()) {\n                rec.save({\n                    success: function(record, operation) {\n                        if (typeof record.store === 'undefined') {\n                            me.getTaskLogStore().add(record);\n                        }\n                        me.getTaskLogFormFieldset().setTitle('Edit Task Log For ' + record.get('taskName'));\n                        me.getDeleteTaskLogButton().enable();\n                    },\n                    failure: function(rec, operation) {\n                        Ext.Msg.alert('Save Failure', operation.request.scope.reader.jsonData.msg);\n                    }\n                });\n            } else {\n                me.getTaskLogForm().getForm().markInvalid(errs);\n                Ext.Msg.alert('Invalid Fields', 'Please fix the invalid entries!');\n            }\n        }\n    },\n    doSearch: function() {\n        var me = this;\n        var startDate = me.getStartDateField().getValue();\n        if (Ext.isEmpty(startDate)) {\n            Ext.Msg.alert('Start Date Required', 'Please select a valid start date to perform a search');\n            return;\n        }\n        var endDate = me.getEndDateField().getValue();\n        if (Ext.isEmpty(endDate)) {\n            Ext.Msg.alert('End Date Required', 'Please select a valid end date to perform a search');\n            return;\n        }\n        me.getTaskLogStore().doFindByUser(TTT.getApplication().getUser().username, startDate, endDate);\n        me.getTaskLogFormFieldset().hide();\n    }\n});\n```", "```java\nme.getTaskCombo().getStore().filter({\nproperty:'idProject',\nvalue:rec.get('idProject'),\nexactMatch:true\n});\n```", "```java\ncontrollers: [\n  'MainController',\n  'UserController',\n  'TaskLogController'\n],\nmodels: [\n  'User',\n  'Project',\n 'Task',\n 'TaskLog'\n],\nstores: [\n  'User',\n  'Project',\n 'Task',\n 'TaskLog'\n]\n```", "```java\nExt.define('TTT.view.MainCards', {\n    extend: 'Ext.container.Container',\n    xtype: 'maincards',\n    requires: ['Ext.layout.container.Card', 'TTT.view.Welcome', 'TTT.view.user.ManageUsers', 'TTT.view.tasklog.ManageTaskLogs'],\n    layout: 'card',\n    initComponent: function() {\n        var me = this;\n        Ext.applyIf(me, {\n            items: [{\n                xtype: 'welcome',\n                itemId: 'welcomCard'\n            }, {\n                xtype: 'manageusers',\n                itemId: 'manageUsersCard'\n            }, {\n xtype: 'managetasklogs',\n itemId: 'taskLogCard'\n }]\n        });\n        me.callParent(arguments);\n    }\n});\n```"]