["```java\npackage com.gieman.tttracker.domain;\n\nimport javax.json.JsonObject;\nimport javax.json.JsonObjectBuilder;\n\npublic interface JsonItem{\n\n    public JsonObject toJson();\n    public void addJson(JsonObjectBuilder builder);\n\n}\n```", "```java\npackage com.gieman.tttracker.domain;\n\nimport java.io.Serializable;\nimport java.text.SimpleDateFormat;\nimport javax.json.Json;\nimport javax.json.JsonObject;\nimport javax.json.JsonObjectBuilder;\npublic abstract class AbstractEntity implements JsonItem, Serializable{\n\n    @Override\n public JsonObject toJson() {\n\n JsonObjectBuilder builder = Json.createObjectBuilder();\n addJson(builder);\n return builder.build();\n }\n\n}\n```", "```java\n@Override\npublic void addJson(JsonObjectBuilder builder) {\n  builder.add(\"idCompany\", idCompany)\n     .add(\"companyName\", companyName);\n}\n```", "```java\n@Override\npublic void addJson(JsonObjectBuilder builder) {\n\n  builder.add(\"idProject\", idProject)\n     .add(\"projectName\", projectName);\n\n  if(company != null){\n     company.addJson(builder);\n  }\n}   \n```", "```java\nbuilder.add(\"idProject\", idProject)\n     .add(\"projectName\", projectName)\n.add(\"idCompany\", company.getIdCompany() )\n     .add(\"companyName\", company.getCompanyName() );\n```", "```java\n@Override\npublic void addJson(JsonObjectBuilder builder) {\n\n  builder .add(\"idTask\", idTask)\n     .add(\"taskName\", taskName);\n\n  if(project != null){\n     project.addJson(builder);\n\n     Company company = project.getCompany();\n     company.addJson(builder);\n  }        \n}\n```", "```java\n@Override\npublic void addJson(JsonObjectBuilder builder) {\n\n  builder.add(\"username\", username)\n      .add(\"firstName\", firstName)\n      .add(\"lastName\", lastName)\n      .add(\"email\", email)\n      .add(\"adminRole\", adminRole + \"\")\n      .add(\"fullName\", firstName + \" \" + lastName);\n}\n```", "```java\nstatic final SimpleDateFormat DATE_FORMAT_yyyyMMdd = new SimpleDateFormat(\"yyyyMMdd\");\n```", "```java\npublic void addJson(JsonObjectBuilder builder) {\n\n  builder.add(\"idTaskLog\", idTaskLog)\n    .add(\"taskDescription\", taskDescription)\n    .add(\"taskLogDate\", taskLogDate == null ? \"\" : DATE_FORMAT_yyyyMMdd.format(taskLogDate))\n    .add(\"taskMinutes\", taskMinutes);\n\n  if (user != null) {\n    user.addJson(builder);\n  }\n  if (task != null) {\n    task.addJson(builder);            \n  }\n}\n```", "```java\nWed Aug 14 00:00:00 EST 2013\n```", "```java\n{\n    success: true,\n    data: {\n        \"idTask\": 1,\n        \"taskName\": \"Write Chapter 7\",\n        \"idProject\": 1,\n        \"projectName\": \"My Book Project\",\n        \"idCompany\": 1,\n        \"companyName\": \"PACKT Publishing\"\n    }\n}\n```", "```java\n{\n    success: true,\n    data: {\n        \"idTask\": 1,\n        \"taskName\": \"Write Chapter 7\",\n        \"project\": {\n            \"idProject\": 1,\n            \"projectName\": \"My Book Project \",\n            \"company\": {\n                \"idCompany\": 1,\n                \"companyName\": \"PACKT Publishing\"\n            }\n        }\n    }\n}\n```", "```java\npackage com.gieman.tttracker.web;\n\nimport com.gieman.tttracker.domain.JsonItem;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.List;\nimport javax.json.Json;\nimport javax.json.JsonArrayBuilder;\nimport javax.json.JsonNumber;\nimport javax.json.JsonObject;\nimport javax.json.JsonObjectBuilder;\nimport javax.json.JsonReader;\nimport javax.json.JsonValue;\nimport javax.json.JsonWriter;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic abstract class AbstractHandler {\n\n    protected final Logger logger = LoggerFactory.getLogger(this.getClass());\n\n    public static String getJsonSuccessData(List<? extends JsonItem> results) {\n\n        final JsonObjectBuilder builder = Json.createObjectBuilder();\n        builder.add(\"success\", true);\n        final JsonArrayBuilder arrayBuilder = Json.createArrayBuilder();\n\n        for (JsonItem ji : results) {\n\n            arrayBuilder.add(ji.toJson());\n        }\n\n        builder.add(\"data\", arrayBuilder);\n\n        return toJsonString(builder.build());\n    }\n\n    public static String getJsonSuccessData(JsonItem jsonItem) {\n\n        final JsonObjectBuilder builder = Json.createObjectBuilder();\n        builder.add(\"success\", true);\n        builder.add(\"data\", jsonItem.toJson());\n\n        return toJsonString(builder.build());\n\n    }\n\n    public static String getJsonSuccessData(JsonItem jsonItem, int totalCount) {\n\n        final JsonObjectBuilder builder = Json.createObjectBuilder();\n        builder.add(\"success\", true);\n        builder.add(\"total\", totalCount);\n        builder.add(\"data\", jsonItem.toJson());\n\n        return toJsonString(builder.build());\n    }\n\n    public static String getJsonErrorMsg(String theErrorMessage) {\n\n        return getJsonMsg(theErrorMessage, false);\n\n    }\n\n    public static String getJsonSuccessMsg(String msg) {\n\n        return getJsonMsg(msg, true);\n    }\n    public static String getJsonMsg(String msg, boolean success) {\n\n        final JsonObjectBuilder builder = Json.createObjectBuilder();\n        builder.add(\"success\", success);\n        builder.add(\"msg\", msg);\n\n        return toJsonString(builder.build());\n\n    }\n\n    public static String toJsonString(JsonObject model) {\n\n        final StringWriter stWriter = new StringWriter();\n\n        try (JsonWriter jsonWriter = Json.createWriter(stWriter)) {\n            jsonWriter.writeObject(model);\n        }\n\n        return stWriter.toString();\n    }\n\n    protected JsonObject parseJsonObject(String jsonString) {\n\n        JsonReader reader = Json.createReader(new StringReader(jsonString));\n        return reader.readObject();\n\n    }\n    protected Integer getIntegerValue(JsonValue jsonValue) {\n\n        Integer value = null;\n\n        switch (jsonValue.getValueType()) {\n\n            case NUMBER:\n                JsonNumber num = (JsonNumber) jsonValue;\n                value = num.intValue();\n                break;\n            case NULL:\n                break;\n        }\n\n        return value;\n    }\n}\n```", "```java\n{\n    success: true,\n    data: {\n        \"idCompany\":null,\n        \"companyName\": \"New Company\"\n    }\n}\n```", "```java\npackage com.gieman.tttracker.web;\n\nimport com.gieman.tttracker.domain.User;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\n\npublic class SecurityHelper {\n    static final String SESSION_ATTRIB_USER = \"sessionuser\";\n\n    public static User getSessionUser(HttpServletRequest request) {\n        User user = null;\n        HttpSession session = request.getSession(true);\n        Object obj = session.getAttribute(SESSION_ATTRIB_USER);\n\n        if (obj != null && obj instanceof User) {\n            user = (User) obj;\n        }\n        return user;\n    }\n}\n```", "```java\npackage com.gieman.tttracker.web;\n\nimport com.gieman.tttracker.domain.User;\nimport com.gieman.tttracker.service.UserService;\nimport com.gieman.tttracker.vo.Result;\nimport static com.gieman.tttracker.web.AbstractHandler.getJsonErrorMsg;\nimport static com.gieman.tttracker.web.SecurityHelper.SESSION_ATTRIB_USER;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\n@RequestMapping(\"/security\")\npublic class SecurityHandler extends AbstractHandler {\n\n    @Autowired\n    protected UserService userService;\n\n    @RequestMapping(value = \"/logon\", method = RequestMethod.POST, produces = {\"application/json\"})\n    @ResponseBody\n    public String logon(\n            @RequestParam(value = \"username\", required = true) String username,\n            @RequestParam(value = \"password\", required = true) String password,\n            HttpServletRequest request) {\n\n        Result<User> ar = userService.findByUsernamePassword(username, password);\n\n        if (ar.isSuccess()) {\n            User user = ar.getData();\n            HttpSession session = request.getSession(true);\n            session.setAttribute(SESSION_ATTRIB_USER, user);            \n            return getJsonSuccessData(user);\n        } else {\n            return getJsonErrorMsg(ar.getMsg());\n        }\n    }\n\n    @RequestMapping(value = \"/logout\", produces = {\"application/json\"})\n    @ResponseBody\n    public String logout(HttpServletRequest request) {\n\n        HttpSession session = request.getSession(true);\n        session.removeAttribute(SESSION_ATTRIB_USER);\n        return getJsonSuccessMsg(\"User logged out...\");\n    }\n}\n```", "```java\ntext/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\n```", "```java\nThe resource identified by this request is only capable of generating responses with characteristics not acceptable according to the request \"accept\" headers.\n```", "```java\n@RequestParam(value = \"username\", required = true) String username,\n@RequestParam(value = \"password\", required = true) String password,\n```", "```java\n@RequestParam(value = \"user\", required = true) String username,\n@RequestParam(value = \"pwd\", required = true) String password,\n```", "```java\n@RequestParam(value = \"address\", required = false, defaultValue = \"Unknown address\") String address\n```", "```java\n{\n    \"success\": true,\n    \"data\": {\n        \"username\": \"bjones\",\n        \"firstName\": \"Betty\",\n        \"lastName\": \"Jones\",\n        \"email\": \"bj@tttracker.com\",\n        \"adminRole\": \"Y\",\n        \"fullName\": \"Betty Jones\"\n    }\n}\n```", "```java\n{\n    \"success\": false,\n    \"msg\": \"Unable to verify user/password combination!\"\n}\n```", "```java\n{\n    \"success\": true,\n    \"msg\": \"User logged out...\"\n}\n```", "```java\npackage com.gieman.tttracker.web;\n\nimport com.gieman.tttracker.domain.*;\nimport com.gieman.tttracker.service.CompanyService;\nimport com.gieman.tttracker.service.ProjectService;\n\nimport com.gieman.tttracker.vo.Result;\nimport static com.gieman.tttracker.web.SecurityHelper.getSessionUser;\n\nimport java.util.List;\nimport javax.json.JsonObject;\nimport javax.servlet.http.HttpServletRequest;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n@Controller\n@RequestMapping(\"/company\")\npublic class CompanyHandler extends AbstractHandler {\n\n    @Autowired\n    protected CompanyService companyService;\n    @Autowired\n    protected ProjectService projectService;\n    @RequestMapping(value = \"/find\", method = RequestMethod.GET, produces = {\"application/json\"})\n    @ResponseBody\n    public String find(\n            @RequestParam(value = \"idCompany\", required = true) Integer idCompany,\n            HttpServletRequest request) {\n\n        User sessionUser = getSessionUser(request);\n        if (sessionUser == null) {\n            return getJsonErrorMsg(\"User is not logged on\");\n        }\n\n        Result<Company> ar = companyService.find(idCompany, sessionUser.getUsername());\n\n        if (ar.isSuccess()) {\n\n            return getJsonSuccessData(ar.getData());\n\n        } else {\n\n            return getJsonErrorMsg(ar.getMsg());\n\n        }\n    }\n\n    @RequestMapping(value = \"/store\", method = RequestMethod.POST, produces = {\"application/json\"})\n    @ResponseBody\n    public String store(\n            @RequestParam(value = \"data\", required = true) String jsonData,\n            HttpServletRequest request) {\n\n        User sessionUser = getSessionUser(request);\n        if (sessionUser == null) {\n            return getJsonErrorMsg(\"User is not logged on\");\n        }\n\n        JsonObject jsonObj = parseJsonObject(jsonData);\n\n        Result<Company> ar = companyService.store(\n                getIntegerValue(jsonObj.get(\"idCompany\")), \n                jsonObj.getString(\"companyName\"), \n                sessionUser.getUsername());\n\n        if (ar.isSuccess()) {\n\n            return getJsonSuccessData(ar.getData());\n\n        } else {\n\n            return getJsonErrorMsg(ar.getMsg());\n\n        }\n    }\n\n    @RequestMapping(value = \"/findAll\", method = RequestMethod.GET, produces = {\"application/json\"})\n    @ResponseBody\n    public String findAll(HttpServletRequest request) {\n\n        User sessionUser = getSessionUser(request);\n        if (sessionUser == null) {\n            return getJsonErrorMsg(\"User is not logged on\");\n        }\n\n        Result<List<Company>> ar = companyService.findAll(sessionUser.getUsername());\n\n        if (ar.isSuccess()) {\n\n            return getJsonSuccessData(ar.getData());\n\n        } else {\n\n            return getJsonErrorMsg(ar.getMsg());\n\n        }\n    }\n\n    @RequestMapping(value = \"/remove\", method = RequestMethod.POST, produces = {\"application/json\"})\n    @ResponseBody\n    public String remove(\n            @RequestParam(value = \"data\", required = true) String jsonData,\n            HttpServletRequest request) {\n        User sessionUser = getSessionUser(request);\n        if (sessionUser == null) {\n            return getJsonErrorMsg(\"User is not logged on\");\n        }\n\n        JsonObject jsonObj = parseJsonObject(jsonData);\n\n        Result<Company> ar = companyService.remove(\n                getIntegerValue(jsonObj.get(\"idCompany\")), \n                sessionUser.getUsername());\n\n        if (ar.isSuccess()) {\n\n            return getJsonSuccessMsg(ar.getMsg());\n\n        } else {\n\n            return getJsonErrorMsg(ar.getMsg());\n\n        }\n    }\n}\n```", "```java\n{\"idCompany\":null,\"companyName\":\"New Company\"}\n```", "```java\n{\"idCompany\":5,\"companyName\":\"Existing Company\"}\n```", "```java\n[\n  {\"idCompany\":5,\"companyName\":\"Existing Company\"},\n  {\"idCompany\":4,\"companyName\":\"Another Existing Company\"}\n]\n```", "```java\npackage com.gieman.tttracker.web;\n\nimport com.gieman.tttracker.domain.*;\nimport com.gieman.tttracker.service.ProjectService;\nimport com.gieman.tttracker.vo.Result;\nimport static com.gieman.tttracker.web.SecurityHelper.getSessionUser;\n\nimport java.util.List;\nimport javax.json.JsonObject;\nimport javax.servlet.http.HttpServletRequest;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n@Controller\n@RequestMapping(\"/project\")\npublic class ProjectHandler extends AbstractHandler {\n\n    @Autowired\n    protected ProjectService projectService;\n\n    @RequestMapping(value = \"/find\", method = RequestMethod.GET, produces = {\"application/json\"})\n    @ResponseBody\n    public String find(\n            @RequestParam(value = \"idProject\", required = true) Integer idProject,\n            HttpServletRequest request) {\n\n        User sessionUser = getSessionUser(request);\n        if (sessionUser == null) {\n            return getJsonErrorMsg(\"User is not logged on\");\n        }\n\n        Result<Project> ar = projectService.find(idProject, sessionUser.getUsername());\n\n        if (ar.isSuccess()) {\n            return getJsonSuccessData(ar.getData());\n        } else {\n            return getJsonErrorMsg(ar.getMsg());\n        }\n    }\n\n    @RequestMapping(value = \"/store\", method = RequestMethod.POST, produces = {\"application/json\"})\n    @ResponseBody\n    public String store(\n            @RequestParam(value = \"data\", required = true) String jsonData,\n            HttpServletRequest request) {\n\n        User sessionUser = getSessionUser(request);\n        if (sessionUser == null) {\n            return getJsonErrorMsg(\"User is not logged on\");\n        }\n        JsonObject jsonObj = parseJsonObject(jsonData);\n\n        Result<Project> ar = projectService.store(\n                getIntegerValue(jsonObj.get(\"idProject\")),\n                getIntegerValue(jsonObj.get(\"idCompany\")),\n                jsonObj.getString(\"projectName\"),\n                sessionUser.getUsername());\n\n        if (ar.isSuccess()) {\n            return getJsonSuccessData(ar.getData());\n        } else {\n            return getJsonErrorMsg(ar.getMsg());\n        }\n    }\n\n    @RequestMapping(value = \"/remove\", method = RequestMethod.POST, produces = {\"application/json\"})\n    @ResponseBody\n    public String remove(\n            @RequestParam(value = \"data\", required = true) String jsonData,\n            HttpServletRequest request) {\n\n        User sessionUser = getSessionUser(request);\n        if (sessionUser == null) {\n            return getJsonErrorMsg(\"User is not logged on\");\n        }\n\n        JsonObject jsonObj = parseJsonObject(jsonData);\n\n        Result<Project> ar = projectService.remove(\n                getIntegerValue(jsonObj.get(\"idProject\")), \n                sessionUser.getUsername());\n\n        if (ar.isSuccess()) {\n            return getJsonSuccessMsg(ar.getMsg());\n        } else {\n            return getJsonErrorMsg(ar.getMsg());\n        }\n    }\n\n    @RequestMapping(value = \"/findAll\", method = RequestMethod.GET, produces = {\"application/json\"})\n    @ResponseBody\n    public String findAll(\n            HttpServletRequest request) {\n\n        User sessionUser = getSessionUser(request);\n        if (sessionUser == null) {\n            return getJsonErrorMsg(\"User is not logged on\");\n        }\n\n        Result<List<Project>> ar = projectService.findAll(sessionUser.getUsername());\n\n        if (ar.isSuccess()) {\n            return getJsonSuccessData(ar.getData());\n        } else {\n            return getJsonErrorMsg(ar.getMsg());\n        }\n    }\n}\n```", "```java\n{\"idProject\":null,\"projectName\":\"New Project\",\"idCompany\":1}\n```", "```java\n{\"idProject\":7,\"projectName\":\"Existing Project with ID=7\",\"idCompany\":1}\n```", "```java\nif (sessionUser == null) {\n  return getJsonErrorMsg(\"User is not logged on\");\n}\n```", "```java\npackage com.gieman.tttracker.web;\n\nimport com.gieman.tttracker.domain.User;\nimport static com.gieman.tttracker.web.SecurityHelper.getSessionUser;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\n\npublic class UserInSessionInterceptor extends HandlerInterceptorAdapter {\n\n    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n            throws Exception {\n\n        logger.info(\"calling preHandle with url=\" + request.getRequestURI());\n\n        User sessionUser = getSessionUser(request);\n\n        if (sessionUser == null) {\n            String json = \"{\\\"success\\\":false,\\\"msg\\\":\\\"A valid user is not logged on!\\\"}\";\n            response.getOutputStream().write(json.getBytes());\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n```", "```java\nif (sessionUser == null) {\n  return getJsonErrorMsg(\"User is not logged on\");\n}\n```", "```java\npackage com.gieman.tttracker.web;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n\n@EnableWebMvc\n@Configuration\n@ComponentScan(\"com.gieman.tttracker.web\")\npublic class WebAppConfig extends WebMvcConfigurerAdapter {\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new UserInSessionInterceptor())\n                .addPathPatterns(new String[]{\n                    \"/**\"\n                }).excludePathPatterns(\"/security/**\");\n    }\n}\n```", "```java\npackage com.gieman.tttracker.web;\n\nimport org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;\n\npublic class WebApp extends AbstractAnnotationConfigDispatcherServletInitializer {\n\n    @Override \n    protected String[] getServletMappings() {\n        return new String[]{\n            \"/ttt/*\"\n        };\n    }\n\n    @Override\n    protected Class<?>[] getRootConfigClasses() {\n        return new Class<?>[0];\n    }\n\n    @Override\n    protected Class<?>[] getServletConfigClasses() {\n        return new Class<?>[]{WebAppConfig.class};\n    }\n}\n```", "```java\npackage com.gieman.tttracker.web;\n\nimport com.gieman.tttracker.domain.*;\nimport com.gieman.tttracker.service.TaskLogService;\nimport com.gieman.tttracker.vo.Result;\nimport static com.gieman.tttracker.web.SecurityHelper.getSessionUser;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\nimport java.util.Date;\nimport java.util.List;\nimport javax.json.JsonObject;\nimport javax.servlet.http.HttpServletRequest;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.propertyeditors.CustomDateEditor;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.WebDataBinder;\nimport org.springframework.web.bind.annotation.InitBinder;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n@Controller\n@RequestMapping(\"/taskLog\")\npublic class TaskLogHandler extends AbstractHandler {\n\n    static final SimpleDateFormat DATE_FORMAT_yyyyMMdd = new SimpleDateFormat(\"yyyyMMdd\");\n\n    @Autowired\n    protected TaskLogService taskLogService;\n    @InitBinder\n    public void initBinder(WebDataBinder binder) {\n\n        binder.registerCustomEditor(Date.class, new CustomDateEditor(DATE_FORMAT_yyyyMMdd, true));\n\n    }\n\n    @RequestMapping(value=\"/find\", method = RequestMethod.GET, produces = {\"application/json\"})\n    @ResponseBody\n    public String find(\n            @RequestParam(value = \"idTaskLog\", required = true) Integer idTaskLog,\n            HttpServletRequest request) {\n\n        User sessionUser = getSessionUser(request);\n\n        Result<TaskLog> ar = taskLogService.find(idTaskLog, sessionUser.getUsername());\n\n        if (ar.isSuccess()) {\n            return getJsonSuccessData(ar.getData());\n        } else {\n            return getJsonErrorMsg(ar.getMsg());\n        }\n    }\n    @RequestMapping(value = \"/store\", method = RequestMethod.POST, produces = {\"application/json\"})\n    @ResponseBody\n    public String store(\n            @RequestParam(value = \"data\", required = true) String jsonData,\n            HttpServletRequest request) throws ParseException {\n\n        User sessionUser = getSessionUser(request);\n\n        JsonObject jsonObj = parseJsonObject(jsonData);\n\n        String dateVal = jsonObj.getString(\"taskLogDate\");\n\n        Result<TaskLog> ar = taskLogService.store(\n                getIntegerValue(jsonObj.get(\"idTaskLog\")),\n                getIntegerValue(jsonObj.get(\"idTask\")),\n                jsonObj.getString(\"username\"),\n                jsonObj.getString(\"taskDescription\"),\n                DATE_FORMAT_yyyyMMdd.parse(dateVal),\n                jsonObj.getInt(\"taskMinutes\"),\n                sessionUser.getUsername());\n\n        if (ar.isSuccess()) {\n            return getJsonSuccessData(ar.getData());\n        } else {\n            return getJsonErrorMsg(ar.getMsg());\n        }\n    }\n\n    @RequestMapping(value = \"/remove\", method = RequestMethod.POST, produces = {\"application/json\"})\n    @ResponseBody\n    public String remove(\n            @RequestParam(value = \"data\", required = true) String jsonData,\n            HttpServletRequest request) {\n\n        User sessionUser = getSessionUser(request);\n\n        JsonObject jsonObj = parseJsonObject(jsonData);\n\n        Result<TaskLog> ar = taskLogService.remove(\n                getIntegerValue(jsonObj.get(\"idTaskLog\")), \n                sessionUser.getUsername());\n        if (ar.isSuccess()) {\n            return getJsonSuccessMsg(ar.getMsg());\n        } else {\n            return getJsonErrorMsg(ar.getMsg());\n        }\n    }\n\n    @RequestMapping(value = \"/findByUser\", method = RequestMethod.GET, produces = {\"application/json\"})\n    @ResponseBody\n    public String findByUser(\n            @RequestParam(value = \"username\", required = true) String username,\n            @RequestParam(value = \"startDate\", required = true) Date startDate,\n            @RequestParam(value = \"endDate\", required = true) Date endDate,\n            HttpServletRequest request) {\n\n        User sessionUser = getSessionUser(request);\n\n        Result<List<TaskLog>> ar = taskLogService.findByUser(\n                username,\n                startDate,\n                endDate,\n                sessionUser.getUsername());\n\n        if (ar.isSuccess()) {\n            return getJsonSuccessData(ar.getData());\n        } else {\n            return getJsonErrorMsg(ar.getMsg());\n        }\n    }\n }\n```", "```java\nbinder.registerCustomEditor(Date.class, new CustomDateEditor(DATE_FORMAT_yyyyMMdd, true));\n```"]