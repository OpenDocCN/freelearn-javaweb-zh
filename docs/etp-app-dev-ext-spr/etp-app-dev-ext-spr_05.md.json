["```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration scan=\"true\" scanPeriod=\"30 seconds\" >\n    <contextName>TaskTimeTracker</contextName>\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{5} - %msg%n</pattern>\n        </encoder>\n    </appender>\n\n    <logger name=\"com.gieman.tttracker\" level=\"DEBUG\" additivity=\"false\">\n        <appender-ref ref=\"STDOUT\" />\n    </logger>\n    <logger name=\"com.gieman.tttracker.dao\" level=\"DEBUG\" additivity=\"false\">\n        <appender-ref ref=\"STDOUT\" />\n    </logger>\n    <logger name=\"com.gieman.tttracker.domain\" level=\"DEBUG\" additivity=\"false\">\n        <appender-ref ref=\"STDOUT\" />\n    </logger>\n    <logger name=\"com.gieman.tttracker.service\" level=\"DEBUG\" additivity=\"false\">\n        <appender-ref ref=\"STDOUT\" />\n    </logger>\n    <logger name=\"com.gieman.tttracker.web\" level=\"DEBUG\" additivity=\"false\">\n        <appender-ref ref=\"STDOUT\" />\n    </logger>\n\n    <root level=\"INFO\">          \n        <appender-ref ref=\"STDOUT\" />\n    </root>\n</configuration>\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<persistence version=\"2.1\"   xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_1.xsd\">\n  <persistence-unit name=\"tttPU\" transaction-type=\"RESOURCE_LOCAL\">\n    <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>\n    <class>com.gieman.tttracker.domain.Company</class>\n    <class>com.gieman.tttracker.domain.Project</class>\n    <class>com.gieman.tttracker.domain.Task</class>\n    <class>com.gieman.tttracker.domain.TaskLog</class>\n    <class>com.gieman.tttracker.domain.User</class>\n    <exclude-unlisted-classes>true</exclude-unlisted-classes>\n    <properties>\n      <property name=\"eclipselink.logging.level\" value=\"WARNING\"/>\n    </properties>\n  </persistence-unit>\n</persistence>\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<persistence version=\"2.1\"   xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\">\n  <persistence-unit name=\"tttPU\" transaction-type=\"JTA\">\n    <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>\n    <jta-data-source>jdbc/tasktimetracker</jta-data-source>\n    <exclude-unlisted-classes>false</exclude-unlisted-classes>\n    <properties/>\n  </persistence-unit>\n</persistence>\n```", "```java\n@PersistenceContext(unitName = \"tttPU\")\nprotected EntityManager em;\n```", "```java\norg.springframework.dao.InvalidDataAccessApiUsageException: Object: com.tttracker.domain.Company[ idCompany=null ] is not a known entity type.; nested exception is java.lang.IllegalArgumentException: Object: com.tttracker.domain.Company[ idCompany=null ] is not a known entity type.\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans  \n\n       xsi:schemaLocation=\"\n       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\n        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd\">\n\n    <bean id=\"propertyConfigurer\"\n          class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"\n          p:location=\"classpath:jdbc.properties\" />\n\n    <bean id=\"tttDataSource\"\n          class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\"\n          p:driverClassName=\"${jdbc.driverClassName}\"\n          p:url=\"${jdbc.url}\"\n          p:username=\"${jdbc.username}\"\n          p:password=\"${jdbc.password}\"/>\n\n    <bean id=\"loadTimeWeaver\" class=\"org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver\" />\n\n    <bean id=\"jpaVendorAdapter\" class=\"org.springframework.orm.jpa.vendor.EclipseLinkJpaVendorAdapter\"\n        p:showSql=\"true\"\n        p:databasePlatform=\"org.eclipse.persistence.platform.database.MySQLPlatform\" />\n    <bean id=\"entityManagerFactory\" class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\"\n        p:dataSource-ref=\"tttDataSource\"\n        p:jpaVendorAdapter-ref=\"jpaVendorAdapter\"\n        p:persistenceXmlLocation=\"test-persistence.xml\"\n    />\n\n    <!-- Transaction manager for a single JPA EntityManagerFactory (alternative to JTA) -->\n    <bean id=\"transactionManager\" class=\"org.springframework.orm.jpa.JpaTransactionManager\"\n          p:dataSource-ref=\"tttDataSource\" \n          p:entityManagerFactory-ref=\"entityManagerFactory\"/>\n\n    <!-- checks for annotated configured beans -->\n    <context:annotation-config/>  \n\n    <!-- Scan for Repository/Service annotations -->\n    <context:component-scan base-package=\"com.gieman.tttracker.dao\" />\n\n    <!-- enable the configuration of transactional behavior based on annotations -->\n    <tx:annotation-driven />\n\n</beans>\n```", "```java\n<bean id=\"propertyConfigurer\"\n    class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"\n    p:location=\"classpath:jdbc.properties\" />\n```", "```java\n<bean id=\"tttDataSource\"\n    class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\"\n    p:driverClassName=\"${jdbc.driverClassName}\"\n    p:url=\"${jdbc.url}\"\n    p:username=\"${jdbc.username}\"\n    p:password=\"${jdbc.password}\"\n    />\n```", "```java\njdbc.driverClassName=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://localhost:3306/task_time_tracker\njdbc.username=root\njdbc.password=adminadmin\n```", "```java\n<bean id=\"jpaVendorAdapter\" \nclass=\"org.springframework.orm.jpa.vendor.EclipseLinkJpaVendorAdapter\"\n  p:showSql=\"true\"        \n  p:databasePlatform=\"org.eclipse.persistence.platform.database.MySQLPlatform\" />\n```", "```java\n<bean id=\"entityManagerFactory\" \n  class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\"\n  p:dataSource-ref=\"tttDataSource\"\n  p:jpaVendorAdapter-ref=\"jpaVendorAdapter\"\n  p:persistenceXmlLocation=\"test-persistence.xml\"\n/>\n```", "```java\n<bean id=\"transactionManager\" \n  class=\"org.springframework.orm.jpa.JpaTransactionManager\"\n  p:dataSource-ref=\"tttDataSource\" \n  p:entityManagerFactory-ref=\"entityManagerFactory\"/>\n```", "```java\n<tx:annotation-driven />\n```", "```java\n<context:component-scan base-package=\"com.gieman.tttracker.dao\"/>\n```", "```java\n<context:annotation-config/>\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.gieman</groupId>\n    <artifactId>task-time-tracker</artifactId>\n    <version>1.0</version>\n    <packaging>war</packaging>\n\n    <name>task-time-tracker</name>\n\n    <properties>\n        <endorsed.dir>${project.build.directory}/endorsed</endorsed.dir>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <spring.version>3.2.4.RELEASE</spring.version>\n        <logback.version>1.0.13</logback.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.eclipse.persistence</groupId>\n            <artifactId>javax.persistence</artifactId>\n            <version>2.1.0-SNAPSHOT</version>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.eclipse.persistence</groupId>\n            <artifactId>eclipselink</artifactId>\n            <version>2.5.0-SNAPSHOT</version>\n            <scope>provided</scope>\n        </dependency>        \n        <dependency>\n            <groupId>org.eclipse.persistence</groupId>\n            <artifactId>org.eclipse.persistence.jpa.modelgen.processor</artifactId>\n            <version>2.5.0-SNAPSHOT</version>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-web-api</artifactId>\n            <version>7.0</version>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>${logback.version}</version>\n        </dependency>    \n <dependency>\n <groupId>junit</groupId>\n <artifactId>junit</artifactId>\n <version>4.11</version>\n <scope>test</scope>\n </dependency> \n <dependency>\n <groupId>mysql</groupId>\n <artifactId>mysql-connector-java</artifactId>\n <version>5.1.26</version>\n <scope>provided</scope>\n </dependency> \n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context-support</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-tx</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-jdbc</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-orm</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-instrument</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-webmvc</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-test</artifactId>\n            <version>${spring.version}</version>\n   <scope>test</scope>\n        </dependency>\n\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.1</version>\n                <configuration>\n                    <source>1.7</source>\n                    <target>1.7</target>\n                    <compilerArguments>\n                        <endorseddirs>${endorsed.dir}</endorseddirs>\n                    </compilerArguments>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-war-plugin</artifactId>\n                <version>2.3</version>\n                <configuration>\n                    <warName>${project.build.finalName}</warName>\n                    <failOnMissingWebXml>false</failOnMissingWebXml>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-dependency-plugin</artifactId>\n                <version>2.6</version>\n                <executions>\n                    <execution>\n                        <id>copy-endorsed</id>\n                        <phase>validate</phase>\n                        <goals>\n                            <goal>copy</goal>\n                        </goals>\n                        <configuration>\n                            <outputDirectory>${endorsed.dir}</outputDirectory>\n                            <silent>true</silent>\n                            <artifactItems>\n                                <artifactItem>\n                                    <groupId>javax</groupId>\n                                    <artifactId>javaee-endorsed-api</artifactId>\n                                    <version>7.0</version>\n                                    <type>jar</type>\n                                </artifactItem>\n                            </artifactItems>\n                        </configuration>\n                    </execution>\n                    <execution>\n                        <id>copy-all-dependencies</id>\n                        <phase>compile</phase>\n                        <goals>\n                            <goal>copy-dependencies</goal>\n                        </goals>\n                        <configuration>\n                            <outputDirectory>${project.build.directory}/lib</outputDirectory>\n                            <includeScope>compile</includeScope>\n                        </configuration>                        \n                    </execution>                                                           \n\n                </executions>\n            </plugin>\n <plugin>\n <groupId>org.apache.maven.plugins</groupId>\n <artifactId>maven-surefire-plugin</artifactId>\n <version>2.14.1</version>\n <configuration>\n <skipTests>false</skipTests>\n <includes>\n <include>**/dao/*Test.java</include>\n </includes>\n <argLine>-javaagent:target/lib/spring-instrument-${spring.version}.jar</argLine>\n </configuration>\n </plugin> \n\n        </plugins>\n    </build>\n    <repositories>\n        <repository>\n            <url>http://download.eclipse.org/rt/eclipselink/maven.repo/</url>\n            <id>eclipselink</id>\n            <layout>default</layout>\n            <name>Repository for library EclipseLink (JPA 2.1)</name>\n        </repository>\n    </repositories>\n</project>\n```", "```java\npackage com.gieman.tttracker.dao;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.AbstractTransactionalJUnit4SpringContextTests;\n\n@ContextConfiguration(\"/testingContext.xml\")\npublic abstract class AbstractDaoForTesting extends AbstractTransactionalJUnit4SpringContextTests {\n\n    protected final Logger logger = LoggerFactory.getLogger(this.getClass());\n    @Autowired(required = true)\n    protected CompanyDao companyDao;\n    @Autowired(required = true)\n    protected ProjectDao projectDao;\n    @Autowired(required = true)\n    protected TaskDao taskDao;\n    @Autowired(required = true)\n    protected UserDao userDao;\n    @Autowired(required = true)\n    protected TaskLogDao taskLogDao;\n}\n```", "```java\npackage com.gieman.tttracker.dao;\n\nimport com.gieman.tttracker.domain.Company;\nimport java.util.List;\nimport static org.junit.Assert.assertTrue;\nimport org.junit.Test;\n\npublic class CompanyDaoTest extends AbstractDaoForTesting {\n\n    public CompanyDaoTest(){}\n\n    @Test\n    public void testFind() throws Exception {\n\n        logger.debug(\"\\nSTARTED testFind()\\n\");\n        List<Company> allItems = companyDao.findAll();\n\n        assertTrue(allItems.size() > 0);\n\n        // get the first item in the list\n        Company c1 = allItems.get(0);\n\n        int id = c1.getId();\n\n        Company c2 = companyDao.find(id);\n\n        assertTrue(c1.equals(c2));\n        logger.debug(\"\\nFINISHED testFind()\\n\");\n    }\n\n    @Test\n    public void testFindAll() throws Exception {\n\n        logger.debug(\"\\nSTARTED testFindAll()\\n\");\n        int rowCount = countRowsInTable(\"ttt_company\");\n\n        if(rowCount > 0){\n\n            List<Company> allItems = companyDao.findAll();\n            assertTrue(\"Company.findAll list not equal to row count of table ttt_company\", rowCount == allItems.size());\n\n        } else {\n            throw new IllegalStateException(\"INVALID TESTING SCENARIO: Company table is empty\");\n        }\n        logger.debug(\"\\nFINISHED testFindAll()\\n\");\n    }\n\n    @Test\n    public void testPersist() throws Exception {\n\n        logger.debug(\"\\nSTARTED testPersist()\\n\");\n        Company c = new Company();\n        final String NEW_NAME = \"Persist Test Company name\";\n        c.setCompanyName(NEW_NAME);\n\n        companyDao.persist(c);\n\n        assertTrue(c.getId() != null);\n        assertTrue(c.getCompanyName().equals(NEW_NAME));\n\n        logger.debug(\"\\nFINISHED testPersist()\\n\");\n    }\n\n    @Test\n    public void testMerge() throws Exception {\n\n        logger.debug(\"\\nSTARTED testMerge()\\n\");\n        final String NEW_NAME = \"Merge Test Company New Name\";\n\n        Company c = companyDao.findAll().get(0);\n        c.setCompanyName(NEW_NAME);\n\n        c = companyDao.merge(c);\n\n        assertTrue(c.getCompanyName().equals(NEW_NAME));\n\n        logger.debug(\"\\nFINISHED testMerge()\\n\");\n\n    }\n\n    @Test\n    public void testRemove() throws Exception {\n\n        logger.debug(\"\\nSTARTED testRemove()\\n\");\n        Company c = companyDao.findAll().get(0);\n\n        companyDao.remove(c);\n\n        List<Company> allItems = companyDao.findAll();\n\n        assertTrue(\"Deleted company may not be in findAll List\", !allItems.contains(c) );\n\n        logger.debug(\"\\nFINISHED testRemove()\\n\");\n    }\n}\n```", "```java\nSTARTED testMerge()\nSELECT id_company, company_name FROM ttt_company ORDER BY company_name ASC\nFINISHED testMerge()\n```", "```java\nfinal String NEW_NAME = \"Merge Test Company New Name\";\nCompany c = companyDao.findAll().get(0);\nc.setCompanyName(NEW_NAME);\nc = companyDao.merge(c);\nassertTrue(c.getCompanyName().equals(NEW_NAME));\n```", "```java\nSELECT id_company, company_name FROM ttt_company ORDER BY company_name ASC\n```", "```java\n@Override\n@Transactional(readOnly = false, propagation = Propagation.REQUIRED)\npublic T merge(T o) {\n  o = em.merge(o);\n  em.flush();\n  return o;\n}\n```", "```java\nSELECT id_company, company_name FROM ttt_company ORDER BY company_name ASC\nUPDATE ttt_company SET company_name = ? WHERE (id_company = ?)\n  bind => [Merge Test Company New Name, 2]\n```", "```java\nSTARTED testFindAll()\nSELECT id_company, company_name FROM ttt_company ORDER BY company_name ASC\nFINISHED testFindAll()\n```", "```java\nint rowCount = countRowsInTable(\"ttt_company\");\n```", "```java\nassertTrue(\"Company.findAll list not equal to row count of table ttt_company\", rowCount == allItems.size());\n```", "```java\nassertTrue(\"Company.findAll list not equal to row count of table ttt_company\", rowCount+1 == allItems.size());\n```", "```java\nSTARTED testFind()\nSELECT id_company, company_name FROM ttt_company ORDER BY company_name ASC\nFINISHED testFind()\n```", "```java\nList<Company> allItems = companyDao.findAll();\n```", "```java\nint id = c1.getId(); // find ID of first item in list\nCompany c2 = companyDao.find(id);\n```", "```java\nem.persist(o);\n\nem.flush(); \n\nif (o instanceof EntityItem) {\n  EntityItem<ID> item = (EntityItem<ID>) o;\n  ID id = item.getId();\n  logger.info(\"The \" + o.getClass().getName() + \" record with ID=\" + id + \" has been inserted\");\n}\n```", "```java\nSTARTED testPersist()\nINSERT INTO ttt_company (company_name) VALUES (?)\n  bind => [Persist Test Company name]\nSELECT LAST_INSERT_ID()\nThe com.gieman.tttracker.domain.Company record with ID=4 has been inserted\nFINISHED testPersist()\n```", "```java\nSTARTED testPersist()\nThe com.gieman.tttracker.domain.Company record with ID=null has been inserted\n```", "```java\nSTARTED testRemove()\n\nSELECT id_company, company_name FROM ttt_company ORDER BY company_name ASC\nSELECT id_project, project_name, id_company FROM ttt_project WHERE (id_company = ?)\n  bind => [2]\nSELECT id_task, task_name, id_project FROM ttt_task WHERE (id_project = ?)\n  bind => [4]\nSELECT id_task, task_name, id_project FROM ttt_task WHERE (id_project = ?)\n  bind => [5]\nSELECT id_task, task_name, id_project FROM ttt_task WHERE (id_project = ?)\n  bind => [6]\nThe com.gieman.tttracker.domain.Company record with ID=2 has been deleted\nDELETE FROM ttt_task WHERE (id_task = ?)\n  bind => [10]\nDELETE FROM ttt_task WHERE (id_task = ?)\n  bind => [12]\nDELETE FROM ttt_task WHERE (id_task = ?)\n  bind => [11]\nDELETE FROM ttt_task WHERE (id_task = ?)\n  bind => [13]\nDELETE FROM ttt_project WHERE (id_project = ?)\n  bind => [4]\nDELETE FROM ttt_project WHERE (id_project = ?)\n  bind => [6]\nDELETE FROM ttt_project WHERE (id_project = ?)\n  bind => [5]\nDELETE FROM ttt_company WHERE (id_company = ?)\n  bind => [2]\nSELECT id_company, company_name FROM ttt_company ORDER BY company_name ASC\n\nFINISHED testRemove()\n```", "```java\nCompany c = companyDao.findAll().get(0);\n```", "```java\nSELECT id_project, project_name, id_company FROM ttt_project WHERE (id_company = ?)\n  bind => [2]\n```", "```java\n    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"company\")\n    private List<Project> projects;\n```", "```java\n    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"project\")\n    private List<Task> tasks;\n```", "```java\n@OneToMany(cascade = {CascadeType.MERGE, CascadeType.PERSIST}, mappedBy =\"company\")\nprivate List<Project> projects;\n```", "```java\nInternal Exception: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`task_time_tracker`.`ttt_project`, CONSTRAINT `ttt_project_ibfk_1` FOREIGN KEY (`id_company`) REFERENCES `ttt_company` (`id_company`))\n```", "```java\npackage com.gieman.tttracker.dao;\n\nimport com.gieman.tttracker.domain.Company;\nimport com.gieman.tttracker.domain.Project;\nimport com.gieman.tttracker.domain.User;\nimport static org.junit.Assert.assertTrue;\nimport org.junit.Test;\n\npublic class JpaTrapTest extends AbstractDaoForTesting {\n\n    @Test\n    public void testManyToOne() throws Exception {\n\n        logger.debug(\"\\nSTARTED testManyToOne()\\n\");\n\n        Company c = companyDao.findAll().get(0);\n        Company c2 = companyDao.findAll().get(1);\n\n        Project p = c.getProjects().get(0);\n\n        p.setCompany(c2);\n        p = projectDao.merge(p);\n\n        assertTrue(\"Original company still has project in its collection!\",\n                !c.getProjects().contains(p));\n        assertTrue(\"Newly assigned company does not have project in its collection\",\n                c2.getProjects().contains(p));\n\n        logger.debug(\"\\nFINISHED testManyToOne()\\n\");\n\n    }\n\n    @Test\n    public void testFindByUsernamePassword() throws Exception {\n\n        logger.debug(\"\\nSTARTED testFindByUsernamePassword()\\n\");\n\n        // find by username/password combination\n        User user = userDao.findByUsernamePassword(\"bjones\", \"admin\");\n\n        assertTrue(\"Unable to find valid user with correct username/password combination\", \n                user != null);\n\n        user = userDao.findByUsernamePassword(\"bjones\", \"ADMIN\");\n\n        assertTrue(\"User found with invalid password\", \n                user == null); \n\n        logger.debug(\"\\nFINISHED testFindByUsernamePassword()\\n\");\n    }\n}\n```", "```java\nuser = userDao.findByUsernamePassword(\"bjones\", \"ADMIN\");\n```", "```java\nALTER TABLE ttt_user MODIFY\n    password VARCHAR(100)\n      COLLATE latin1_general_cs;\n```", "```java\nc2.getProjects().contains(p)\n```", "```java\nc.getProjects().contains(p)\n```", "```java\np.setCompany(c2);\np = projectDao.merge(p);\n\nc.getProjects().remove(p);\nc2.getProjects().add(p);\n\n```"]