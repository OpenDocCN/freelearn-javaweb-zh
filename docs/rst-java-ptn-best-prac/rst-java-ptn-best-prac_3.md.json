["```java\n@WebFilter(filterName = \"LoggingFilter\",\n        urlPatterns = {\"/*\"}\n)\npublic class LoggingFilter implements Filter {\n    static final Logger logger = Logger.getLogger(LoggingFilter.class);\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse,\n            FilterChain filterChain) throws IOException, ServletException {\n\n        HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;\n\nlogger.info(\"request\" +httpServletRequest.getPathInfo().toString());\n        filterChain.doFilter(servletRequest, servletResponse);\n\n    }\n```", "```java\n    @POST\n    @Consumes(MediaType.APPLICATION_JSON)\n    @Produces(MediaType.APPLICATION_JSON)\n    @ValidateOnExecution\n    public Response addCoffee(@Valid Coffee coffee) {\n        \u2026\n            }\n```", "```java\n@XmlRootElement\npublic class Coffee {\n\n    @VerifyValue(Type.class)\n    private String type;\n\n    @VerifyValue(Size.class)\n    private String size;\n\n    @NotNull\n    private String name;\n    // getters and setters\n}\n```", "```java\npublic enum Size {\n    Small(\"S\"), Medium(\"M\"), Large(\"L\"), ExtraLarge(\"XL\");\n    private String value;\n}\n```", "```java\n    @GET\n    @Produces(MediaType.APPLICATION_JSON)\n    @Path(\"/orders/{id}\")\n    public Response getCoffee(@PathParam(\"id\") int id) {\n        Coffee coffee =  CoffeeService.getCoffee(id);\n        if (coffee == null)\n            throw new CoffeeNotFoundException(\"No coffee found for order \" + id);\n        return Response.ok(coffee).type(MediaType.APPLICATION_JSON_TYPE).build();\n    }\n```", "```java\n@Provider\npublic class MyExceptionMapper implements ExceptionMapper<Exception> {\n\n    public Response toResponse(Exception e) {\n        ResourceError resourceError = new ResourceError();\n\n        String error = \"Service encountered an internal error\";\n        if (e instanceof CoffeeNotFoundException) {\n            resourceError.setCode(Response.Status.NOT_FOUND.getStatusCode());\n            resourceError.setMessage(e.getMessage());\n\n            return Response.status(Response.Status.NOT_FOUND).entity(resourceError)\n                    .type(MediaType.APPLICATION_JSON_TYPE)\n                    .build();\n        }\n        return Response.status(503).entity(resourceError).type(MediaType.APPLICATION_JSON_TYPE)\n                .build();\n    }\n}\n```", "```java\n@XmlRootElement\npublic class ResourceError {\n\n    private int code;\n    private String message;\n    //getters and setters\n\u2026}\n```", "```java\nHTTP/1.1 404 Not Found\nX-Powered-By: Servlet/3.1 JSP/2.3 (GlassFish Server Open Source Edition  4.0  Java/Oracle Corporation/1.7)\nServer: GlassFish Server Open Source Edition 4.0\nContent-Type: application/json\nContent-Length: 54\n\n{\"code\":404,\"message\":\"No coffee found for order 100\"}\n```"]