["```java\nHTTP/1.1 200 OK Content-Type: application/json\nCache-Control: private, max-age=86400\nLast-Modified: Thur, 01 Apr 2014 11:30 PST\n```", "```java\n@Path(\"v1/coffees\")\npublic class CoffeesResource {\n\n    @GET\n    @Path(\"{order}\")\n    @Produces(MediaType.APPLICATION_XML)\n    @NotNull(message = \"Coffee does not exist for the order id requested\")\n    public Response getCoffee(@PathParam(\"order\") int order) {\n        Coffee coffee = CoffeeService.getCoffee(order);\n        CacheControl cacheControl = new CacheControl();\n        cacheControl.setMaxAge(3600);\n        cacheControl.setPrivate(true);\n        Response.ResponseBuilder responseBuilder = Response.ok(coffee);\n        responseBuilder.cacheControl(cacheControl);\n        return responseBuilder.build();\n\n    }\n```", "```java\ncurl -i http://localhost:8080/caching/v1/coffees/1\nHTTP/1.1 200 OK\nX-Powered-By: Servlet/3.1 JSP/2.3 (GlassFish Server Open Source Edition  4.0  Java/Oracle Corporation/1.7)\nServer: GlassFish Server Open Source Edition  4.0 \nCache-Control: private, no-transform, max-age=3600\nContent-Type: application/xml\nDate: Thu, 03 Apr 2014 06:07:14 GMT\nContent-Length: 143\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<coffee>\n<name>Mocha</name>\n<order>1</order>\n<size>Small</size>\n<type>Chocolate</type>\n</coffee>\n```", "```java\n    @GET\n    @Path(\"/etag/{order}\")\n    @Produces(MediaType.APPLICATION_JSON)\n    @NotNull(message = \"Coffee does not exist for the order id requested\")\n    public Response getCoffeeWithEtag(@PathParam(\"order\") int order,\n                                      @Context Request request\n    ) {\n        Coffee coffee = CoffeeService.getCoffee(order);\n        EntityTag et = new EntityTag(\n \"123456789\");\n        Response.ResponseBuilder responseBuilder  = request.evaluatePreconditions(et);\n        if (responseBuilder != null) {\n            responseBuilder.build();\n        }\n        responseBuilder = Response.ok(coffee);\n        return responseBuilder.tag(et).build();\n```", "```java\nPOST v1/coffees/order HTTP 1.1 with body\n<coffee>\n  <size> SMALL</coffee>\n  <name>EXPRESSO</name>\n  <price>3.50</price>\n<coffee>\n```", "```java\nHTTP/1.1 202 Accepted\nLocation: /order/12345\n```", "```java\n@Path(\"/coffees\")\n@Stateless\npublic class CoffeeResource {   \n  @Context private ExecutionContext ctx;\n  @GET @Produce(\"application/json\")\n  @Asynchronous\n  public void order() {\n        Executors.newSingleThreadExecutor().submit( new Runnable() {\n         public void run() { \n              Thread.sleep(10000);     \n              ctx.resume(\"Hello async world! Coffee Order is 1234\");\n          } });\nctx.suspend();\nreturn;\n  }\n}\n```", "```java\n@Path(\"/coffees\")\n@Stateless\npublic class CoffeeResource {\n@GET @Produce(\"application/json\")\n@Asynchronous\n  public void order(@Suspended AsyncResponse ar) {\n    final String result = prepareResponse();\n    ar.resume(result)\n  }\n}\n```", "```java\nFuture<Coffee> future = client.target(\"/coffees\")\n               .request()\n               .async()\n               .get(Coffee.class);\ntry {\n   Coffee coffee = future.get(30, TimeUnit.SECONDS);\n} catch (TimeoutException ex) {\n  System.err.println(\"Timeout occurred\");\n}\n```", "```java\n{\n \"id\": 1,\n \"name\": \"Mocha\"\n \"size\": \"Small\",\n \"type\": \"Latte\",\n \"status\":\"PROCESSING\"\n}\n```", "```java\nGET myservice/rpc/coffeeOrder/setOrderStatus?completed=true&coffeeId=1234\n```", "```java\nPUT /coffee/orders/1234\n{\n \"id\": 1,\n \"name\": \"Mocha\"\n \"size\": \"Small\", \n \"type\": \"Latte\", \n \"status\": \"COMPLETED\"\n}\n```", "```java\nPATCH /coffee/orders/1234\n{\n\"status\": \"COMPLETED\"\n}\n```", "```java\nPOST /coffee/orders/1234\n{\n\"status\": \"COMPLETED\"\n}\n```", "```java\nPUT /coffee/orders/1234\n{\n\"status\": \"COMPLETED\"\n}\n```", "```java\n  @Target({ElementType.METHOD})@Retention(RetentionPolicy.RUNTIME)@HttpMethod(\"PATCH\")public\u00a0@interface PATCH {}\n```", "```java\nPATCH /coffee/orders/1234 HTTP/1.1\nHost: api.foo.com\nContent-Length: 100\nContent-Type: application/json-patch\n\n[\n  {\"op\":\"replace\", \"path\": \"/status\", \"value\": \"COMPLETED\"}\n]\n```"]