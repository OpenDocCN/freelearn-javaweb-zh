["```java\n    @GET\n    @Path(\"orders\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public List<Coffee> getCoffeeList(){\n        return CoffeeService.getCoffeeList();\n\n    }\n```", "```java\nX-Powered-By: Servlet/3.1 JSP/2.3 (GlassFish Server Open Source Edition  4.0  Java/Oracle Corporation/1.7)\nServer: GlassFish Server Open Source Edition  4.0 \nContent-Type: application/json\nDate: Thu, 31 Jul 2014 15:25:17 GMT\nContent-Length: 268\n{\n    \"coffees\": [\n        {\n            \"Id\": 10,\n            \"Name\": \"Cappuchino\",\n            \"Price\": 3.82,\n            \"Type\": \"Iced\",\n            \"Size\": \"Medium\"\n        },\n        {\n            \"Id\": 11,\n            \"Name\": \"Americano\",\n            \"Price\": 3.42,\n            \"Type\": \"Brewed\",\n            \"Size\": \"Large\"\n        }\n    ]\n}\n```", "```java\n    @POST\n    @Consumes(MediaType.APPLICATION_JSON)\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response addCoffee(Coffee coffee) {\n        // Implementation here\n    }\n```", "```java\nList<Variant>  variants = Variant.mediatypes(\"application/xml\", \"application/json\").build();\n```", "```java\n@GET\npublic Response getCoffee(@Context Request r) { \n    List<Variant> vs = ...;\n    Variant v = r.selectVariant(vs);\n    if (v == null) {\n        return Response.notAcceptable(vs).build();\n    } else {\n        Coffee coffee = ..//select the representation based on v\n        return Response.ok(coffee, v);\n    }\n}\n```", "```java\n@Path(\"/v1/books/\")\npublic class BookResource {\n    @Path(\"{resourceID}.xml\")\n    @GET \n    public Response getBookInXML(@PathParam(\"resourceID\") String resourceID) {\n        //Return Response with entity in XML \n             }\n\n    @Path(\"{resourceID}.json\")\n    @GET\n    public Response getBookInJSON(@PathParam(\"resourceID\") String resourceID) {\n        //Return Response with entity in JSON\n    }\n}\n```", "```java\n    @GET\n    @Produces(MediaType.TEXT_PLAIN)\n    @Path(\"/orders/{id}\")\n    public Response streamExample(@PathParam(\"id\") int id) {\n        final Coffee coffee = CoffeeService.getCoffee(id);\n        StreamingOutput stream = new StreamingOutput() {\n            @Override\n            public void write(OutputStream os) throws IOException,\n                    WebApplicationException {\n                Writer writer = new BufferedWriter(new OutputStreamWriter(os));\n                writer.write(coffee.toString());\n                writer.flush();\n            }\n        };\n        return Response.ok(stream).build();\n    }\n```", "```java\n    @GET\n    @Produces(MediaType.TEXT_PLAIN)\n    @Path(\"/orders/{id}/chunk\")\n    public ChunkedOutput<String> chunkExample(final @PathParam(\"id\") int id) {\n        final ChunkedOutput<String> output = new ChunkedOutput<String>(String.class);\n\n        new Thread() {\n            @Override\n            public void run() {\n                try {\n                    output.write(\"foo\");\n                    output.write(\"bar\");\n                    output.write(\"test\");\n                } catch (IOException e) {\n                   e.printStackTrace();\n                } finally {\n                    try {\n                        output.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }.start();\n        return output;\n\n    }\n}\n```", "```java\nChunkedInput<String> input = target().path(\"..\").request().get(new GenericType<ChunkedInput<String>>() {\n        });\nwhile ((chunk = chunkedInput.read()) != null) {\n    //Do something\n}\n```", "```java\nObjectMapper objectMapper = new ObjectMapper();\nCoffee coffee = objectMapper.readValue(jsonData, Coffee.class);\n```", "```java\n@XMLRootElement\npublic class Coffee {\n    private String type;\n    private String size;\n}\n```", "```java\n @GET\n @Produces(\"application/json\")\n public Coffee getCoffee() { \n     //Implementation goes here\n}\n```", "```java\nJsonObject myObject = Json.createObjectBuilder()\n        .add(\"name\", \"Mocha\")\n        .add(\"size\", \"Large\")\n        .build();\n```", "```java\nJsonParser parser = Json.createParser(\u2026)\nEvent event = parser.next(); // START_OBJECT\nevent = parser.next(); //END OBJECT\n```", "```java\nAccept: application/vnd.foo-v1+json\n```", "```java\nAccept: application/vnd.github.v3+json\n```", "```java\n@POST\n Response addCoffee(...) {\n   Coffee coffee = ...\n   URI coffeeId = UriBuilder.fromResource(Coffee.class)...\n   return Response.created(coffeeId).build();\n }\n```"]