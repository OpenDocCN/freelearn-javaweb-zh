["```java\nHTTP/1.1 429 Too Many Requests\nContent-Type: text/html\nRetry-After: 3600\n <html>\n       <head>\n   <title>Too Many Requests</title>\n   </head>\n <body>\n <h1>Too many Requests</h1>\n       <p>100 requests per hour to this Web site per logged in use allowed.</p>\n   </body>\n   </html>\n```", "```java\n@Path(\"v1/coffees\")\npublic class CoffeesResource {\n    @GET\n    @Path(\"{order}\")\n    @Produces(MediaType.APPLICATION_XML)\n    @NotNull(message=\"Coffee does not exist for the order id requested\")\n    public Coffee getCoffee(@PathParam(\"order\") int order) {\n        return CoffeeService.getCoffee(order);\n    }\n}\n```", "```java\n@WebFilter(filterName = \"RateLimiter\",\n        urlPatterns = {\"/*\"}\n        )\npublic class RateLimiter implements Filter {\n    private static final int REQ_LIMIT = 3;\n    private static final int TIME_LIMIT = 600000;\n    private static AccessCounter accessCounter = AccessCounter.getInstance();\n}\n```", "```java\n@Singleton\npublic class AccessCounter {\n\n    private static AccessCounter accessCounter;\n\n    private static ConcurrentHashMap<String,AccessData> accessDetails = new ConcurrentHashMap<String, AccessData>();\n}\n```", "```java\npublic class AccessData {\n    private long lastUpdated;\n    private AtomicInteger count;\n\n    public long getLastUpdated() {\n        return lastUpdated;\n    }\n\n    public void setLastUpdated(long lastUpdated) {\n        this.lastUpdated = lastUpdated;\n    }\n\n    public AtomicInteger getCount() {\n        return count;\n    }\n\n    public void setCount(AtomicInteger count) {\n        this.count = count;\n    }\n\n \u2026\n```", "```java\n@Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse,\n                         FilterChain filterChain) throws IOException, ServletException {\n\n        HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;\n        HttpServletResponse httpServletResponse = (HttpServletResponse) servletResponse;\n\n        String ipAddress = getIpAddress(httpServletRequest);\n        if (accessCounter.contains(ipAddress)) {\n            if (!requestLimitExceeded(ipAddress)) {\n                accessCounter.increment(ipAddress);\n                accessCounter.getAccessDetails(ipAddress).setLastUpdated(System.currentTimeMillis());\n\n            } else {\n\n                httpServletResponse.addIntHeader(\"Retry-After\",TIME_LIMIT);\n                httpServletResponse.sendError(429);\n\n            }\n        } else {\n            accessCounter.add(ipAddress);\n\n        }\n        filterChain.doFilter(servletRequest, servletResponse)\n\n    }\n```", "```java\ncurl -i http://localhost:8080/ratelimiting/v1/coffees/1\nHTTP/1.1 200 OK\nX-Powered-By: Servlet/3.1 JSP/2.3 (GlassFish Server Open Source Edition  4.0  Java/Oracle Corporation/1.7)\nServer: GlassFish Server Open Source Edition  4.0 \nContent-Type: application/json\nDate: Mon, 23 Jun 2014 23:27:34 GMT\nContent-Length: 57\n\n{\n \"name\":\"Mocha\",\n \"order\":1,\n \"size\":\"Small\",\n \"type\":\"Brewed\"\n}\n\n```", "```java\ncurl -i http://localhost:8080/ratelimiting/v1/coffees/1\nHTTP/1.1 429 CUSTOM\nX-Powered-By: Servlet/3.1 JSP/2.3 (GlassFish Server Open Source Edition  4.0  Java/Oracle Corporation/1.7)\nServer: GlassFish Server Open Source Edition  4.0 \nRetry-After: 600000\nContent-Language: \nContent-Type: text/html\nDate: Mon, 23 Jun 2014 23:29:04 GMT\nContent-Length: 1098\n\n```", "```java\nGET v1/coffees/orders?page=1&limit=50\n```", "```java\nGET v1/coffees/orders?since=140358321&until=143087472\n```", "```java\n{\n    \"ids\": [\n        385752029, \n        602890434, \n        ...\n        333181469, \n        333165023\n    ],\n    \"next_cursor\": 1374004777531007833, \n    \"next_cursor_str\": \"1374004777531007833\", \n    \"previous_cursor\": 0, \n    \"previous_cursor_str\": \"0\"\n}\n```", "```java\nGET https://api.twitter.com/1.1/followers/ids.json?screen_name=someone &cursor=1374004777531007833\n```", "```java\n@Path(\"v1/coffees\")\npublic class CoffeesResource {\n    @GET\n    @Path(\"orders\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public List<Coffee> getCoffeeList( \n@QueryParam(\"page\")  @DefaultValue(\"1\") int page,\n                                       @QueryParam(\"limit\") @DefaultValue(\"10\") int limit ) {\n        return CoffeeService.getCoffeeList( page, limit);\n\n    }\n}\n```", "```java\n{\n    \"metadata\": {\n        \"resultsPerPage\": 10,\n        \"totalCount\": 100,\n        \"links\": [\n            {\n                \"self\": \"/orders?page=1&limit=10\"\n            },\n            {\n                \"next\": \"/orders?page=2&limit=10\"\n            }\n        ]\n    },\n    \"coffees\": [\n        {\n            \"Id\": 10,\n            \"Name\": \"Expresso\",\n            \"Price\": 2.77,\n            \"Type\": \"Hot\",\n            \"Size\": \"Large\"\n        },\n        {\n            \"Id\": 11,\n            \"Name\": \"Cappuchino\",\n            \"Price\": 0.14,\n            \"Type\": \"Brewed\",\n            \"Size\": \"Large\"\n        },\n\u2026..\n       \u2026\u2026\n    ]\n}\n```", "```java\nHTTP/1.1 200 OK\nX-Powered-By: Servlet/3.1 JSP/2.3 (GlassFish Server Open Source Edition  4.0  Java/Oracle Corporation/1.7)\nServer: GlassFish Server Open Source Edition  4.0 \nContent-Language: en\nContent-Type: text/html\nDate: Mon, 23 Jun 2014 23:29:04 GMT\nContent-Length: 1098\n```", "```java\nList<Variant> variantList = \n    Variant.\n      .languages(\"en\", \"fr\").build();\n```", "```java\nGET v1/books?locale=fr\n```", "```java\n{ \n   \"Name\":\" Developing RESTful Services with JAX-RS 2.0,\n            WebSockets, and JSON\",\n   \"ISBN\": \"1782178120\"\n}\n```", "```java\n{\n    \"Name\":\" Developing RESTful Services with JAX-RS 2.0, \n             WebSockets, and JSON\",\n    \"ISBN\": \"1782178120\"\n    \"links\": [\n       {\n        \"rel\": \"self\",\n        \"href\": \"http://packt.com/books/123456789\"\n       }\n    ]\n}\n```", "```java\n{\n    \"href\": \"https://www.sandbox.paypal.com/webscr?cmd=_express-checkout&token=EC-60U79048BN7719609\",\n    \"rel\": \"approval_url\",\n    \"method\": \"REDIRECT\"\n  },\n  {\n    \"href\": \"https://api.sandbox.paypal.com/v1/payments/payment/PAY-6RV70583SB702805EKEYSZ6Y/execute\",\n    \"rel\": \"execute\",\n    \"method\": \"POST\"\n  }\n```", "```java\n    get(\"order\").\n    then().assertThat().\n    body(\"coffee.id\",equalTo(5));\n```"]