["```java\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class UserTests {  \n  @Autowired\n  UserService userSevice;\n  @Test\n  public void testAllUsers(){\n    List<User> users = userSevice.getAllUsers(); \n    assertEquals(3, users.size());\n  }\n}\n```", "```java\n// other methods\n@Test\npublic void testSingleUser(){\n    User user = userSevice.getUser(100); \n    assertTrue(user.getUsername().contains(\"David\"));\n}\n```", "```java\nimport static org.hamcrest.Matchers.is;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.MvcResult;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport org.springframework.web.context.WebApplicationContext;\n@SpringBootTest\n@RunWith(SpringJUnit4ClassRunner.class)\npublic class UserMockMVCTests {  \n  @Autowired\n  private WebApplicationContext ctx;  \n  private MockMvc mockMvc;  \n  @Before\n  public void setUp() {\n    this.mockMvc = MockMvcBuilders.webAppContextSetup(this.ctx).build();\n  }  \n  @Test\n  public void testBasicMVC() throws Exception {\n    MvcResult result = mockMvc\n        .perform(MockMvcRequestBuilders.get(\"/\"))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"result\", is(\"Aloha\")))         \n        .andReturn();    \n    String content = result.getResponse().getContentAsString();\n     System.out.println(\"{testBasicMVC} response : \" + content);\n  }\n}\n```", "```java\nimport static org.hamcrest.Matchers.is;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.MvcResult;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport org.springframework.web.context.WebApplicationContext;\n@SpringBootTest\n@RunWith(SpringJUnit4ClassRunner.class)\npublic class UserMockMVCTests {  \n  @Autowired\n  private WebApplicationContext ctx;  \n  private MockMvc mockMvc;  \n  @Before\n  public void setUp() {\n    this.mockMvc = MockMvcBuilders.webAppContextSetup(this.ctx).build();\n  }    \n  @Test\n  public void testBasicMVC() throws Exception {\n    MvcResult result = mockMvc\n        .perform(MockMvcRequestBuilders.get(\"/\"))        \n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"result\", is(\"Aloha\")))        \n        .andReturn();    \n    String content = result.getResponse().getContentAsString();\n     System.out.println(\"{testBasicMVC} response : \" + content);\n  }    \n  @Test\n  public void testSingleUser() throws Exception {\n    MvcResult result = mockMvc\n        .perform(MockMvcRequestBuilders.get(\"/user/100\")) \n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"userid\", is(100)))\n        .andExpect(jsonPath(\"username\", is(\"David\")))\n        .andReturn();    \n    String content = result.getResponse().getContentAsString();\n    System.out.println(\"{testSingleUser} response : \" + content);\n  }\n}\n```", "```java\nhttp://localhost:8080/user\n```", "```java\nhttp://localhost:8080/user\n```", "```java\n{\n     \"result\" : \"added\"\n}\n```", "```java\nhttp://localhost:8080/security/generate/token\n```", "```java\nhttp://localhost:8080/security/get/subject\n```", "```java\nhttp://localhost:8080/user\n```", "```java\nhttp://localhost:8080/user\n```", "```java\n{\"result\" : \"added\"}\n```", "```java\nhttp://localhost:8080/security/generate/token\n```", "```java\nhttp://localhost:8080/security/get/subject\n```", "```java\n    <dependency>\n      <groupId>org.jsoup</groupId>\n      <artifactId>jsoup</artifactId>\n      <version>1.8.2</version>\n    </dependency> \n    <dependency>\n        <groupId>com.google.code.gson</groupId>\n        <artifactId>gson</artifactId>\n        <version>2.8.2</version>\n    </dependency>\n```", "```java\nString doc = Jsoup.connect(\"http://localhost:8080/user\").ignoreContentType(true).get().body().text();\n```", "```java\n[{\"userid\":100,\"username\":\"David\"},{\"userid\":101,\"username\":\"Peter\"},{\"userid\":102,\"username\":\"John\"}]\n```", "```java\nJsonParser parser = new JsonParser();\nJsonElement userElement = parser.parse(doc);\nJsonArray userArray = userElement.getAsJsonArray();\n```", "```java\nassertEquals(3, userArray.size());\n```", "```java\nimport static org.junit.Assert.assertEquals;\nimport java.io.IOException;\nimport org.jsoup.Jsoup;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonParser;\nimport com.packtpub.model.User;\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class JsoupUserTest {  \n  private final Logger _log = LoggerFactory.getLogger(this.getClass());  \n  @Test\n  public void testUsersJsoup() throws IOException{    \n    String doc = Jsoup.connect(\"http://localhost:8080/user\").ignoreContentType(true).get().body().text();    \n    _log.info(\"{test} doc : \"+doc);    \n    JsonParser parser = new JsonParser();\n    JsonElement userElement = parser.parse(doc);\n    JsonArray userArray = userElement.getAsJsonArray();    \n    _log.info(\"{test} size : \"+userArray.size());        \n    assertEquals(3, userArray.size());\n  }\n}\n```", "```java\n  @Test\n  public void testUserJsoup() throws IOException{   \n    String doc = Jsoup.connect(\"http://localhost:8080/user/100\").ignoreContentType(true).get().body().text();    \n    Gson g = new Gson(); \n    User user = g.fromJson(doc, User.class);        \n    assertEquals(\"David\", user.getUsername());\n  }\n```", "```java\n@Autowired\nUserService userSevice;\n@Test\npublic void testUserAdditionJsoup() throws IOException{    \n    String doc = Jsoup.connect(\"http://localhost:8080/user/\") \n        .data(\"userid\", \"103\")\n        .data(\"username\", \"kevin\")\n        .ignoreContentType(true)\n        .post().body().text();    \n    Gson g = new Gson(); \n    Map<String, Object> result = g.fromJson(doc, Map.class);    \n    _log.info(\"{test} result : \"+result);        \n    assertEquals(\"added\", result.get(\"result\"));\n    // user should be deleted as we tested the case already \n    userSevice.deleteUser(103);\n}\n```"]