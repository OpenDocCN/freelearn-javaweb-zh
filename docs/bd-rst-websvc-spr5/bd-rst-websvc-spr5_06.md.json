["```java\n<dependency>\n      <groupId>javax.xml.bind</groupId>\n      <artifactId>jaxb-api</artifactId>\n      <version>2.3.0</version>\n</dependency>\n```", "```java\npublic interface SecurityService {\n  String createToken(String subject, long ttlMillis);    \n // other methods  \n}\n```", "```java\nprivate static final String secretKey= \"4C8kum4LxyKWYLM78sKdXrzbBjDCFyfX\";\n@Override\npublic String createToken(String subject, long ttlMillis) {    \n    if (ttlMillis <= 0) {\n      throw new RuntimeException(\"Expiry time must be greater than Zero :[\"+ttlMillis+\"] \");\n    }    \n    // The JWT signature algorithm we will be using to sign the token\n    SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;   \n    byte[] apiKeySecretBytes = DatatypeConverter.parseBase64Binary(secretKey);\n    Key signingKey = new SecretKeySpec(apiKeySecretBytes, signatureAlgorithm.getJcaName());\n    JwtBuilder builder = Jwts.builder()\n        .setSubject(subject) \n        .signWith(signatureAlgorithm, signingKey);\n    long nowMillis = System.currentTimeMillis();    \n    builder.setExpiration(new Date(nowMillis + ttlMillis)); \n    return builder.compact();\n}\n```", "```java\nprivate static final String secretKey= \"4C8kum4LxyKWYLM78sKdXrzbBjDCFyfX\";\n```", "```java\nJwtBuilder builder = Jwts.builder()\n        .setSubject(subject) \n        .signWith(signatureAlgorithm, signingKey);\nlong nowMillis = System.currentTimeMillis(); \nbuilder.setExpiration(new Date(nowMillis + ttlMillis)); \n```", "```java\n@Autowired\nSecurityService securityService;\n```", "```java\n@Autowired\nSecurityService securityService;\n@ResponseBody\n  @RequestMapping(\"/security/generate/token\")\n  public Map<String, Object> generateToken(@RequestParam(value=\"subject\") String subject){    \n    String token = securityService.createToken(subject, (2 * 1000 * 60));    \n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"result\", token);    \n    return map;\n  }\n```", "```java\nhttp://localhost:8080/security/generate/token?subject=one\n```", "```java\n{\n  result: \"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJvbmUiLCJleHAiOjE1MDk5MzY2ODF9.GknKcywiI-G4-R2bRmBOsjomujP0MxZqdawrB8TO3P4\"\n}\n```", "```java\nString getSubject(String token);\n```", "```java\n  @Override\n  public String getSubject(String token) {     \n    Claims claims = Jwts.parser()              .setSigningKey(DatatypeConverter.parseBase64Binary(secretKey))\n             .parseClaimsJws(token).getBody();    \n    return claims.getSubject();\n  } \n```", "```java\n  @ResponseBody\n  @RequestMapping(\"/security/get/subject\")\n  public Map<String, Object> getSubject(@RequestParam(value=\"token\") String token){    \n    String subject = securityService.getSubject(token);    \n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"result\", subject);    \n    return map;\n  }\n```", "```java\nhttp://localhost:8080/security/get/subject?token=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJvbmUiLCJleHAiOjE1MDk5MzY2ODF9.GknKcywiI-G4-R2bRmBOsjomujP0MxZqdawrB8TO3P4\n```", "```java\n{\n  result: \"one\"\n}\n```"]