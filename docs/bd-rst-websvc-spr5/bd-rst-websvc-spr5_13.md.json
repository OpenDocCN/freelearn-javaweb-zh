["```java\nprivate String password;  \n  /*\n   * usertype:\n   * 1 - general user\n   * 2 - CSR (Customer Service Representative)\n   * 3 - admin \n   */\nprivate Integer usertype;\npublic String getPassword() {\n    return password;\n}\npublic void setPassword(String password) {\n   this.password = password;\n}\npublic void setUsertype(Integer usertype){\n    this.usertype = usertype;\n}  \npublic Integer getUsertype(){\n    return this.usertype;\n}\n```", "```java\nprivate static Integer userCounter = 100;\n```", "```java\npublic User(String username, String password, Integer usertype) {\n    userCounter++;\n    this.userid = userCounter;\n    this.username = username;\n    this.password = password;\n    this.usertype = usertype;\n  }\n```", "```java\n  @Override\n  public void createUser(String username, String password, Integer usertype){\n    User user = new User(username, password, usertype); \n    this.users.add(user);\n  }\n```", "```java\n  @ResponseBody\n  @RequestMapping(value = \"/register/customer\", method = RequestMethod.POST)\n  public Map<String, Object> registerCustomer( \n      @RequestParam(value = \"username\") String username,\n      @RequestParam(value = \"password\") String password\n    ) {   \n    userSevice.createUser(username, password, 1); \n    return Util.getSuccessResult();\n  }\n```", "```java\npackage com.packtpub.util;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\npublic class Util {\n  public static <T> T getUserNotAvailableError(){\n    Map<String, Object> map = new LinkedHashMap<>();    \n    map.put(\"result_code\", 501);\n    map.put(\"result\", \"User Not Available\"); \n    return (T) map;\n  }  \n  public static <T> T getSuccessResult(){\n    Map<String, Object> map = new LinkedHashMap<>();    \n    map.put(\"result_code\", 0);\n    map.put(\"result\", \"success\"); \n    return (T) map;\n  }  \n  public static <T> T getSuccessResult(Object obj){\n    Map<String, Object> map = new LinkedHashMap<>();    \n    map.put(\"result_code\", 0);\n    map.put(\"result\", \"success\");\n    map.put(\"value\", obj);\n    return (T) map;\n  }\n}\n```", "```java\n  @ResponseBody\n  @RequestMapping(value = \"/register/admin\", method = RequestMethod.POST)\n  public Map<String, Object> registerAdmin( \n      @RequestParam(value = \"username\") String username,\n      @RequestParam(value = \"password\") String password\n    ) {\n    Map<String, Object> map = new LinkedHashMap<>();\n    userSevice.createUser(username, password, 3); // 3 - admin (usertype)\n    map.put(\"result\", \"added\");\n    return map;\n  }\n```", "```java\n  @ResponseBody\n  @RequestMapping(value = \"/register/csr\", method = RequestMethod.POST)\n  public Map<String, Object> registerCSR( \n      @RequestParam(value = \"username\") String username,\n      @RequestParam(value = \"password\") String password\n    ) {     \n    userSevice.createUser(username, password, 2);\n    return Util.getSuccessResult();\n  }\n```", "```java\n    String subject = user.getUserid()+\"=\"+user.getUsertype();\n    String token = securityService.createToken(subject, (15 * 1000 * 60)); // 15 mins expiry time\n```", "```java\n  @ResponseBody\n  @RequestMapping(value = \"/login/customer\", method = RequestMethod.POST)\n  public Map<String, Object> loginCustomer( \n      @RequestParam(value = \"username\") String username,\n      @RequestParam(value = \"password\") String password\n    ) {\n    User user = userSevice.getUser(username, password, 1);    \n    if(user == null){\n      return Util.getUserNotAvailableError();\n    }    \n    String subject = user.getUserid()+\"=\"+user.getUsertype();\n    String token = securityService.createToken(subject, (15 * 1000 * 60)); // 15 minutes expiry time    \n    return Util.getSuccessResult(token);\n  }\n```", "```java\n  @ResponseBody\n  @RequestMapping(value = \"/login/admin\", method = RequestMethod.POST)\n  public Map<String, Object> loginAdmin( \n      @RequestParam(value = \"username\") String username,\n      @RequestParam(value = \"password\") String password\n    ) {\n    Map<String, Object> map = new LinkedHashMap<>();   \n    User user = userSevice.getUser(username, password, 3);    \n    if(user == null){ \n      return Util.getUserNotAvailableError();\n    }    \n    String subject = user.getUserid()+\"=\"+user.getUsertype();\n    String token = securityService.createToken(subject, (15 * 1000 * 60)); // 15 mins expiry time    \n    map.put(\"result_code\", 0);\n    map.put(\"result\", \"success\");\n    map.put(\"token\", token);    \n    return map;\n  }\n```", "```java\n  @ResponseBody\n  @RequestMapping(value = \"/login/csr\", method = RequestMethod.POST)\n  public Map<String, Object> loginCSR( \n      @RequestParam(value = \"username\") String username,\n      @RequestParam(value = \"password\") String password\n    ) {    \n    User user = userSevice.getUser(username, password, 2);    \n    if(user == null){\n      return Util.getUserNotAvailableError();\n    }    \n    String subject = user.getUserid()+\"=\"+user.getUsertype();\n    String token = securityService.createToken(subject, (15 * 1000 * 60)); // 15 mins expiry time\n\n    return Util.getSuccessResult(token);\n  }\n```", "```java\npublic class Ticket {\n  private Integer ticketid;  \n  private Integer creatorid;  \n  private Date createdat;  \n  private String content;  \n  private Integer severity;  \n  private Integer status;\n  // getter and setter methods\n  @Override\n  public String toString() {\n    return \"Ticket [ticketid=\" + ticketid + \", creatorid=\" + creatorid\n        + \", createdat=\" + createdat + \", content=\" + content\n        + \", severity=\" + severity + \", status=\" + status + \"]\";\n  }   \n  private static Integer ticketCounter = 300;  \n  public Ticket(Integer creatorid, Date createdat, String content, Integer severity, Integer status){\n    ticketCounter++;\n    this.ticketid = ticketCounter;\n    this.creatorid = creatorid;\n    this.createdat = createdat;\n    this.content = content;\n    this.severity = severity;\n    this.status = status;\n  }\n}\n```", "```java\n  @Override\n  public void addTicket(Integer creatorid, String content, Integer severity, Integer status) {\n    Ticket ticket = new Ticket(creatorid, new Date(), content, severity, status);    \n    tickets.add(ticket);\n  }\nticketid as created by the incrementer in the Ticket class. Once the ticket is created, we add it to the ticket list, which will be used for other operations.\n```", "```java\n  @Override\n  public User getUserByToken(String token){\n    Claims claims = Jwts.parser()              .setSigningKey(DatatypeConverter.parseBase64Binary(SecurityServiceImpl.secretKey))\n             .parseClaimsJws(token).getBody();    \n    if(claims == null || claims.getSubject() == null){\n      return null;\n    }    \n    String subject = claims.getSubject();   \n    if(subject.split(\"=\").length != 2){\n      return null;\n    }    \n    String[] subjectParts = subject.split(\"=\");    \n    Integer usertype = new Integer(subjectParts[1]);\n    Integer userid = new Integer(subjectParts[0]);   \n    return new User(userid, usertype);\n  }\n```", "```java\n  /*\n   * Rule:\n   * Only user can create a ticket\n   */\n  @SuppressWarnings(\"unchecked\")\n  @ResponseBody\n  @UserTokenRequired\n  @RequestMapping(value = \"\", method = RequestMethod.POST)\n  public <T> T addTicket( \n      @RequestParam(value=\"content\") String content, \n      HttpServletRequest request\n      ) {    \n    User user = userSevice.getUserByToken(request.getHeader(\"token\")); \n    ticketSevice.addTicket(user.getUserid(), content, 2, 1);     \n    return Util.getSuccessResult(); \n  }\n```", "```java\npackage com.packtpub.aop;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface UserTokenRequired {\n}\n```", "```java\npackage com.packtpub.aop;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.xml.bind.DatatypeConverter;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\nimport com.packtpub.service.SecurityServiceImpl;\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.Jwts;\n@Aspect\n@Component\npublic class UserTokenRequiredAspect { \n  @Before(\"@annotation(userTokenRequired)\")\n  public void tokenRequiredWithAnnotation(UserTokenRequired userTokenRequired) throws Throwable{    \n    ServletRequestAttributes reqAttributes = (ServletRequestAttributes)RequestContextHolder.currentRequestAttributes();\n    HttpServletRequest request = reqAttributes.getRequest();    \n    // checks for token in request header\n    String tokenInHeader = request.getHeader(\"token\");    \n    if(StringUtils.isEmpty(tokenInHeader)){\n      throw new IllegalArgumentException(\"Empty token\");\n    }     \n    Claims claims = Jwts.parser()              .setSigningKey(DatatypeConverter.parseBase64Binary(SecurityServiceImpl.secretKey))\n             .parseClaimsJws(tokenInHeader).getBody();    \n    if(claims == null || claims.getSubject() == null){\n      throw new IllegalArgumentException(\"Token Error : Claim is null\");\n    }   \n    String subject = claims.getSubject();\n\n    if(subject.split(\"=\").length != 2){\n      throw new IllegalArgumentException(\"User token is not authorized\");\n    } \n  }\n}\n```", "```java\n{\n   \"timestamp\": 1515786810739,\n   \"status\": 500,\n   \"error\": \"Internal Server Error\",\n   \"exception\": \"java.lang.IllegalArgumentException\",\n   \"message\": \"JWT String argument cannot be null or empty.\",\n   \"path\": \"/ticket\"\n}\n```", "```java\n  @ResponseBody\n  @RequestMapping(\"/my/tickets\")\n  public Map<String, Object> getMyTickets(\n      HttpServletRequest request\n      ) {    \n    User user = userSevice.getUserByToken(request.getHeader(\"token\"));    \n    if(user == null){\n      return Util.getUserNotAvailableError();\n    }    \n    return Util.getSuccessResult(ticketSevice.getMyTickets(user.getUserid()));\n  }\n```", "```java\n  @ResponseBody\n  @TokenRequired\n  @RequestMapping(\"/{ticketid}\")\n  public <T> T getTicket(\n    @PathVariable(\"ticketid\") final Integer ticketid, \n    HttpServletRequest request\n    ) {\n\n    return (T) Util.getSuccessResult(ticketSevice.getTicket(ticketid));\n  }\n```", "```java\n  @Override\n  public void updateTicket(Integer ticketid, String content, Integer severity, Integer status) {    \n    Ticket ticket = getTicket(ticketid);    \n    if(ticket == null){\n      throw new RuntimeException(\"Ticket Not Available\");\n    }    \n    ticket.setContent(content);\n    ticket.setSeverity(severity);\n    ticket.setStatus(status); \n  }\n```", "```java\n  @ResponseBody\n  @RequestMapping(value = \"/{ticketid}\", method = RequestMethod.PUT)\n  public <T> T updateTicketByCustomer (\n      @PathVariable(\"ticketid\") final Integer ticketid,      \n      @RequestParam(value=\"content\") String content,      \n      HttpServletRequest request,\n      HttpServletResponse response\n      ) {   \n    User user = userSevice.getUserByToken(request.getHeader(\"token\"));    \n    if(user == null){\n      return getUserNotAvailableError();\n    }    \n    ticketSevice.updateTicket(ticketid, content, 2, 1);    \n    Map<String, String> result = new LinkedHashMap<>();\n    result.put(\"result\", \"updated\");    \n    return (T) result; \n  }\n```", "```java\n@Override\n  public void deleteMyTicket(Integer userid, Integer ticketid) { \n    tickets.removeIf(x -> x.getTicketid().intValue() == ticketid.intValue() && x.getCreatorid().intValue() == userid.intValue());\n  }\n```", "```java\n  @ResponseBody\n  @UserTokenRequired\n  @RequestMapping(value = \"/{ticketid}\", method = RequestMethod.DELETE)\n  public <T> T deleteTicketByUser (\n      @RequestParam(\"ticketid\") final Integer ticketid,      \n      HttpServletRequest request \n      ) {   \n    User user = userSevice.getUserByToken(request.getHeader(\"token\"));    \n    ticketSevice.deleteMyTicket(user.getUserid(), ticketid);    \n    return Util.getSuccessResult(); \n  }\n```", "```java\n  @Override\n  public List<Ticket> getAllTickets() {\n    return tickets;\n  }\n```", "```java\n  @ResponseBody\n  @AdminTokenRequired\n  @RequestMapping(\"/by/admin\")\n  public <T> T getAllTickets(\n    HttpServletRequest request,\n    HttpServletResponse response) {\n\n    return (T) ticketSevice.getAllTickets();\n  }\n```", "```java\npackage com.packtpub.aop;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface AdminTokenRequired {\n}\n```", "```java\npackage com.packtpub.aop;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.xml.bind.DatatypeConverter;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\nimport com.packtpub.service.SecurityServiceImpl;\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.Jwts;\n@Aspect\n@Component\npublic class AdminTokenRequiredAspect { \n  @Before(\"@annotation(adminTokenRequired)\")\n  public void adminTokenRequiredWithAnnotation(AdminTokenRequired adminTokenRequired) throws Throwable{    \n    ServletRequestAttributes reqAttributes = (ServletRequestAttributes)RequestContextHolder.currentRequestAttributes();\n    HttpServletRequest request = reqAttributes.getRequest();    \n    // checks for token in request header\n    String tokenInHeader = request.getHeader(\"token\");  \n    if(StringUtils.isEmpty(tokenInHeader)){\n      throw new IllegalArgumentException(\"Empty token\");\n    }    \n    Claims claims = Jwts.parser()              .setSigningKey(DatatypeConverter.parseBase64Binary(SecurityServiceImpl.secretKey))\n             .parseClaimsJws(tokenInHeader).getBody();    \n    if(claims == null || claims.getSubject() == null){\n      throw new IllegalArgumentException(\"Token Error : Claim is null\");\n    }    \n    String subject = claims.getSubject();   \n    if(subject.split(\"=\").length != 2 || new Integer(subject.split(\"=\")[1]) != 3){\n      throw new IllegalArgumentException(\"User is not authorized\");\n    } \n  }\n}\n```", "```java\n{\n   \"timestamp\": 1515803861286,\n   \"status\": 500,\n   \"error\": \"Internal Server Error\",\n   \"exception\": \"java.lang.RuntimeException\",\n   \"message\": \"User is not authorized\",\n   \"path\": \"/ticket/by/admin\"\n}\n```", "```java\n  @ResponseBody\n  @RequestMapping(value = \"/by/admin\", method = RequestMethod.PUT)\n  public <T> T updateTicketByAdmin (\n      @RequestParam(\"ticketid\") final Integer ticketid,      \n      @RequestParam(value=\"content\") String content,\n      @RequestParam(value=\"severity\") Integer severity,\n      @RequestParam(value=\"status\") Integer status,      \n      HttpServletRequest request,\n      HttpServletResponse response\n      ) {    \n    User user = userSevice.getUserByToken(request.getHeader(\"token\"));    \n    if(user == null){\n      return getUserNotAvailableError();\n    }    \n    ticketSevice.updateTicket(ticketid, content, severity, status);    \n    Map<String, String> result = new LinkedHashMap<>();\n    result.put(\"result\", \"updated\");    \n    return (T) result; \n  }\n```", "```java\n  @Override\n  public void deleteTickets(User user, String ticketids) {  \n    List<String> ticketObjList = Arrays.asList(ticketids.split(\",\"));    \n    List<Integer> intList =\n      ticketObjList.stream()\n      .map(Integer::valueOf)\n      .collect(Collectors.toList());     \n    tickets.removeIf(x -> intList.contains(x.getTicketid()));\n  }\n```", "```java\n  @ResponseBody\n  @AdminTokenRequired\n  @RequestMapping(value = \"/by/admin\", method = RequestMethod.DELETE)\n  public <T> T deleteTicketsByAdmin ( \n      @RequestParam(\"ticketids\") final String ticketids,\n      HttpServletRequest request\n      )  {\n\n    User user = userSevice.getUserByToken(request.getHeader(\"token\"));\n\n    ticketSevice.deleteTickets(user, ticketids);\n\n    return Util.getSuccessResult(); \n  }\n```", "```java\n  @ResponseBody\n  @CSRTokenRequired\n  @RequestMapping(value = \"/by/csr\", method = RequestMethod.PUT)\n  public <T> T updateTicketByCSR (\n      @RequestParam(\"ticketid\") final Integer ticketid,     \n      @RequestParam(value=\"content\") String content,\n      @RequestParam(value=\"severity\") Integer severity,\n      @RequestParam(value=\"status\") Integer status,      \n      HttpServletRequest request\n      ) {    \n    ticketSevice.updateTicket(ticketid, content, severity, status);    \n    return Util.getSuccessResult(); \n  }\n```", "```java\npackage com.packtpub.aop;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface CSRTokenRequired {\n}\n```", "```java\npackage com.packtpub.aop;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.xml.bind.DatatypeConverter;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\nimport com.packtpub.service.SecurityServiceImpl;\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.Jwts;\n@Aspect\n@Component\npublic class CSRTokenRequiredAspect {  \n  @Before(\"@annotation(csrTokenRequired)\")\n  public void adminTokenRequiredWithAnnotation(CSRTokenRequired csrTokenRequired) throws Throwable{    \n    ServletRequestAttributes reqAttributes = (ServletRequestAttributes)RequestContextHolder.currentRequestAttributes();\n    HttpServletRequest request = reqAttributes.getRequest();    \n    // checks for token in request header\n    String tokenInHeader = request.getHeader(\"token\");    \n    if(StringUtils.isEmpty(tokenInHeader)){\n      throw new IllegalArgumentException(\"Empty token\");\n    }     \n    Claims claims = Jwts.parser()              .setSigningKey(DatatypeConverter.parseBase64Binary(SecurityServiceImpl.secretKey))\n             .parseClaimsJws(tokenInHeader).getBody();   \n    if(claims == null || claims.getSubject() == null){\n      throw new IllegalArgumentException(\"Token Error : Claim is null\");\n    }    \n    String subject = claims.getSubject();    \n    if(subject.split(\"=\").length != 2 || new Integer(subject.split(\"=\")[1]) != 2){\n      throw new IllegalArgumentException(\"User is not authorized\");\n    } \n  }\n}\n```", "```java\n  @ResponseBody\n  @CSRTokenRequired\n  @RequestMapping(\"/by/csr\")\n  public <T> T getAllTicketsByCSR(HttpServletRequest request) {  \n    return (T) ticketSevice.getAllTickets();\n  }\n```", "```java\n  @Override\n  public void deleteTickets(User user, String ticketids) {   \n    List<String> ticketObjList = Arrays.asList(ticketids.split(\",\"));   \n    if(user.getUsertype() == 2 && ticketObjList.size() > 3){\n      throw new RuntimeException(\"CSR can't delete more than 3 tickets\");\n    }    \n    List<Integer> intList =\n      ticketObjList.stream()\n      .map(Integer::valueOf)\n      .collect(Collectors.toList())\n        ;     \n    tickets.removeIf(x -> intList.contains(x.getTicketid()));\n  }\n```", "```java\n  @ResponseBody\n  @CSRTokenRequired\n  @RequestMapping(value = \"/by/csr\", method = RequestMethod.DELETE)\n  public <T> T deleteTicketsByCSR (\n      @RequestParam(\"ticketids\") final String ticketids,     \n      HttpServletRequest request,\n      HttpServletResponse response\n      ) {    \n    User user = userSevice.getUserByToken(request.getHeader(\"token\"));    \n    ticketSevice.deleteTickets(user.getUserid(), ticketids);    \n    Map<String, String> result = new LinkedHashMap<>();\n    result.put(\"result\", \"deleted\");    \n    return (T) result; \n  }\n```"]