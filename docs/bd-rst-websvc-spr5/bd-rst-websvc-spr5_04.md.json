["```java\npublic class Server { \n  public static final String HOST = \"localhost\";\n  public static final int PORT = 8081;\n  public static void main(String[] args) throws InterruptedException, IOException{\n    Server server = new Server(); \n    server.startReactorServer(); \n    System.out.println(\"Press ENTER to exit.\");\n    System.in.read();\n  }\n  public void startReactorServer() throws InterruptedException {\n    RouterFunction<ServerResponse> route = routingFunction();\n    HttpHandler httpHandler = toHttpHandler(route);\n    ReactorHttpHandlerAdapter adapter = new ReactorHttpHandlerAdapter(httpHandler);\n    HttpServer server = HttpServer.create(HOST, PORT);\n    server.newHandler(adapter).block();\n  }\n  public RouterFunction<ServerResponse> routingFunction() {\n    // our Endpoints will be coming here\n  }\n} \n```", "```java\nServer server = new Server(); \nserver.startReactorServer(); \n```", "```java\nRouterFunction<ServerResponse> route = routingFunction();\nHttpHandler httpHandler = toHttpHandler(route);\nReactorHttpHandlerAdapter adapter = new ReactorHttpHandlerAdapter(httpHandler);\nHttpServer server = HttpServer.create(HOST, PORT);\nserver.newHandler(adapter).block();\n```", "```java\npublic RouterFunction<ServerResponse> routingFunction() {\n    // our Endpoints will be coming here\n}\n```", "```java\npackage com.packtpub.reactive;\npublic interface UserRepository {\n    // repository functions will be coming here\n}\n```", "```java\npackage com.packtpub.reactive;\n// import statements\npublic class UserHandler {    \n    private final UserRepository userRepository;  \n    public UserHandler(UserRepository userRepository){\n        this.userRepository = userRepository;\n    }\n}\n```", "```java\npackage com.packtpub.reactive;\n// import statements\npublic class UserRepositorySample implements UserRepository {    \n  // initiate Users\n  private final Map<Integer, User> users = new HashMap<>();\n  // fill dummy values for testing\n  public UserRepositorySample() {\n    this.users.put(100, new User(100, \"David\"));\n    this.users.put(101, new User(101, \"John\"));\n    this.users.put(102, new User(102, \"Kevin\"));\n  }\n} \n```", "```java\npublic RouterFunction<ServerResponse> routingFunction() {\n    UserRepository repository = new UserRepositorySample();\n    UserHandler handler = new UserHandler(repository);\n}\n```", "```java\n    return nest (\n        path(\"/user\"),\n        nest(\n          accept(MediaType.ALL),\n          route(GET(\"/\"), null)\n        )    \n    );\n```", "```java\nFlux<User> getAllUsers();\n```", "```java\n// this method will return all users\n@Override\npublic Flux<User> getAllUsers() {\n    return Flux.fromIterable(this.users.values());\n}\n```", "```java\npublic Mono<ServerResponse> getAllUsers(ServerRequest request){\n  Flux<User> users = this.userRepository.getAllUsers();\n  return ServerResponse.ok().contentType(APPLICATION_JSON).body(users, User.class); \n}\n```", "```java\npublic class Server {    \n    // existing code is hidden\n    public RouterFunction<ServerResponse> routingFunction() {\n        UserRepository repository = new UserRepositorySample();\n        UserHandler handler = new UserHandler(repository);\n        return nest (\n            path(\"/user\"),\n            nest(\n              accept(MediaType.ALL),\n              route(GET(\"/\"), handler::getAllUsers)\n        ) \n    );\n}\n```", "```java\nhttp://localhost:8081/user\n```", "```java\n[\n  {\n    userid: 100,\n    username: \"David\"\n  },\n  {\n    userid: 101,\n    username: \"John\"\n  },\n  {\n    userid: 102,\n    username: \"Kevin\"\n  }\n]\n```", "```java\nMono<User> getUser(Integer id);\n```", "```java\n@Override\npublic Mono<User> getUser(Integer id){\n    return Mono.justOrEmpty(this.users.get(id)); \n}\n```", "```java\npublic Mono<ServerResponse> getUser(ServerRequest request){\n    int userId = Integer.valueOf(request.pathVariable(\"id\"));\n    Mono<ServerResponse> notFound = ServerResponse.notFound().build();\n    Mono<User> userMono = this.userRepository.getUser(userId);\n    return userMono\n        .flatMap(user -> ServerResponse.ok().contentType(APPLICATION_JSON).body(fromObject(user)))\n        .switchIfEmpty(notFound); \n}\n```", "```java\npublic RouterFunction<ServerResponse> routingFunction() {\n    UserRepository repository = new UserRepositorySample();\n    UserHandler handler = new UserHandler(repository);    \n    return nest (\n      path(\"/user\"),\n      nest(\n        accept(MediaType.ALL),\n        route(GET(\"/\"), handler::getAllUsers)\n      )\n      .andRoute(GET(\"/{id}\"), handler::getUser)      \n    );\n}\n```", "```java\nhttp://localhost:8081/user/100\n```", "```java\n{\n    userid: 100,\n    username: \"David\"\n}\n```", "```java\nMono<Void> saveUser(Mono<User> userMono);\n```", "```java\n@Override\npublic Mono<Void> saveUser(Mono<User> userMono) {\n    return userMono.doOnNext(user -> { \n      users.put(user.getUserid(), user);\n      System.out.format(\"Saved %s with id %d%n\", user, user.getUserid());\n    }).thenEmpty(Mono.empty());\n}\n```", "```java\npublic Mono<ServerResponse> createUser(ServerRequest request) {\n    Mono<User> user = request.bodyToMono(User.class);\n    return ServerResponse.ok().build(this.userRepository.saveUser(user));\n}\n```", "```java\npublic RouterFunction<ServerResponse> routingFunction() {\n    UserRepository repository = new UserRepositorySample();\n    UserHandler handler = new UserHandler(repository);\n    return nest (\n      path(\"/user\"),\n      nest(\n        accept(MediaType.ALL),\n        route(GET(\"/\"), handler::getAllUsers)\n      )\n      .andRoute(GET(\"/{id}\"), handler::getUser)\n      .andRoute(POST(\"/\").and(contentType(APPLICATION_JSON)), handler::createUser) \n    );\n}\n```", "```java\nhttp://localhost:8081/user\n```", "```java\nMono<Void> updateUser(Mono<User> userMono);\n```", "```java\n@;Override\npublic Mono<Void> updateUser(Mono<User> userMono) {\n    return userMono.doOnNext(user -> { \n      users.put(user.getUserid(), user);\n      System.out.format(\"Saved %s with id %d%n\", user, user.getUserid());\n    }).thenEmpty(Mono.empty());\n}\n```", "```java\npublic Mono<ServerResponse> updateUser(ServerRequest request) {\n    Mono<User> user = request.bodyToMono(User.class);\n    return ServerResponse.ok().build(this.userRepository.saveUser(user));\n}\n```", "```java\npublic RouterFunction<ServerResponse> routingFunction() {\n    UserRepository repository = new UserRepositorySample();\n    UserHandler handler = new UserHandler(repository);\n    return nest (\n      path(\"/user\"),\n      nest(\n        accept(MediaType.ALL),\n        route(GET(\"/\"), handler::getAllUsers)\n      )\n      .andRoute(GET(\"/{id}\"), handler::getUser)\n      .andRoute(POST(\"/\").and(contentType(APPLICATION_JSON)), handler::createUser)\n      .andRoute(PUT(\"/\").and(contentType(APPLICATION_JSON)), handler::updateUser) \n    );\n}\n```", "```java\nMono<Void> deleteUser(Integer id);\n```", "```java\n@Override\npublic Mono<Void> deleteUser(Integer id) {\n    users.remove(id); \n    System.out.println(\"user : \"+users);   \n    return Mono.empty();\n}\n```", "```java\npublic Mono<ServerResponse> deleteUser(ServerRequest request) { \n    int userId = Integer.valueOf(request.pathVariable(\"id\"));\n    return ServerResponse.ok().build(this.userRepository.deleteUser(userId));\n}\n```", "```java\npublic RouterFunction<ServerResponse> routingFunction() {\n    UserRepository repository = new UserRepositorySample();\n    UserHandler handler = new UserHandler(repository);\n    return nest (\n      path(\"/user\"),\n      nest(\n        accept(MediaType.ALL),\n        route(GET(\"/\"), handler::getAllUsers)\n      )\n      .andRoute(GET(\"/{id}\"), handler::getUser)\n      .andRoute(POST(\"/\").and(contentType(APPLICATION_JSON)), handler::createUser)\n      .andRoute(PUT(\"/\").and(contentType(APPLICATION_JSON)), handler::updateUser)\n      .andRoute(DELETE(\"/{id}\"), handler::deleteUser)\n    );\n}\n```"]