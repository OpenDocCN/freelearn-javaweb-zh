["```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project  \n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">  \n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.packtpub.restapp</groupId>\n  <artifactId>ticket-management</artifactId>\n  <version>0.0.1-SNAPSHOT</version>\n  <packaging>jar</packaging>\n  <name>ticket-management</name>\n  <description>Demo project for Spring Boot</description>  \n<properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n</properties>\n<dependencyManagement>\n   <dependencies>\n    <dependency>\n      <groupId>io.projectreactor</groupId>\n      <artifactId>reactor-bom</artifactId>\n      <version>Bismuth-RELEASE</version>\n            <type>pom</type>\n            <scope>import</scope>\n    </dependency>\n        </dependencies>\n  </dependencyManagement>\n  <dependencies>\n      <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-web</artifactId>\n      <version>5.0.1.RELEASE</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter</artifactId>\n      <version>1.5.7.RELEASE</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-tomcat</artifactId>\n      <version>1.5.7.RELEASE</version>\n    </dependency>  \n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-databind</artifactId>\n      <version>2.9.2</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-web</artifactId>\n      <version>5.0.0.RELEASE</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-webmvc</artifactId>\n      <version>5.0.1.RELEASE</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-test</artifactId>\n      <scope>test</scope>\n      <version>1.5.7.RELEASE</version> \n    </dependency>     \n    <dependency>\n      <groupId>org.reactivestreams</groupId>\n      <artifactId>reactive-streams</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>io.projectreactor</groupId>\n      <artifactId>reactor-core</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>io.projectreactor.ipc</groupId>\n      <artifactId>reactor-netty</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.tomcat.embed</groupId>\n      <artifactId>tomcat-embed-core</artifactId>\n      <version>8.5.4</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-context</artifactId>\n      <version>5.0.0.RELEASE</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-webflux</artifactId>\n      <version>5.0.0.RELEASE</version>\n    </dependency>\n  </dependencies>\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n```", "```java\npackage com.packtpub.reactive;\npublic class User {\n  private Integer userid;\n  private String username;  \n  public User(Integer userid, String username){\n    this.userid = userid;\n    this.username = username;\n  }\n  public Integer getUserid() {\n    return userid;\n  }\n  public void setUserid(Integer userid) {\n    this.userid = userid;\n  }\n  public String getUsername() {\n    return username;\n  }\n  public void setUsername(String username) {\n    this.username = username;\n  } \n}\n```", "```java\npackage com.packtpub.reactive;\nimport reactor.core.publisher.Flux;\npublic interface UserRepository {\n  Flux<User> getAllUsers();\n}\n```", "```java\npackage com.packtpub.reactive;\nimport java.util.HashMap;\nimport java.util.Map;\nimport reactor.core.publisher.Flux;\npublic class UserRepositorySample implements UserRepository {  \n  // initiate Users\n  private Map<Integer, User> users = null;  \n  // fill dummy values for testing\n  public UserRepositorySample() {\n    // Java 9 Immutable map used\n    users = Map.of(\n      1, (new User(1, \"David\")),\n      2, (new User(2, \"John\")),\n      3, (new User(3, \"Kevin\"))\n    ); \n  }\n  // this method will return all users\n  @Override\n  public Flux<User> getAllUsers() {\n    return Flux.fromIterable(this.users.values());\n  }\n}\n```", "```java\npackage com.packtpub.reactive;\nimport org.springframework.web.reactive.function.server.ServerRequest;\nimport org.springframework.web.reactive.function.server.ServerResponse;\nimport static org.springframework.http.MediaType.APPLICATION_JSON;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\npublic class UserHandler {\n  private final UserRepository userRepository;  \n  public UserHandler(UserRepository userRepository){\n    this.userRepository = userRepository;\n  }  \n  public Mono<ServerResponse> getAllUsers(ServerRequest request){\n    Flux<User> users = this.userRepository.getAllUsers();\n    return ServerResponse.ok().contentType(APPLICATION_JSON).body(users, User.class); \n  }\n}\n```", "```java\npackage com.packtpub.reactive;\nimport static org.springframework.http.MediaType.APPLICATION_JSON;\nimport static org.springframework.web.reactive.function.server.RequestPredicates.GET;\nimport static org.springframework.web.reactive.function.server.RequestPredicates.POST;\nimport static org.springframework.web.reactive.function.server.RequestPredicates.accept;\nimport static org.springframework.web.reactive.function.server.RequestPredicates.contentType;\nimport static org.springframework.web.reactive.function.server.RequestPredicates.method;\nimport static org.springframework.web.reactive.function.server.RequestPredicates.path;\nimport static org.springframework.web.reactive.function.server.RouterFunctions.nest;\nimport static org.springframework.web.reactive.function.server.RouterFunctions.route;\nimport static org.springframework.web.reactive.function.server.RouterFunctions.toHttpHandler;\nimport java.io.IOException;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.server.reactive.HttpHandler;\nimport org.springframework.http.server.reactive.ReactorHttpHandlerAdapter;\nimport org.springframework.web.reactive.function.server.RouterFunction;\nimport org.springframework.web.reactive.function.server.ServerResponse;\nimport reactor.ipc.netty.http.server.HttpServer;\npublic class Server {\n  public static final String HOST = \"localhost\";\n  public static final int PORT = 8081;\n  public static void main(String[] args) throws InterruptedException, IOException{\n    Server server = new Server(); \n    server.startReactorServer();\n    System.out.println(\"Press ENTER to exit.\");\n    System.in.read();\n  }  \n  public void startReactorServer() throws InterruptedException {\n    RouterFunction<ServerResponse> route = routingFunction();\n    HttpHandler httpHandler = toHttpHandler(route);\n    ReactorHttpHandlerAdapter adapter = new ReactorHttpHandlerAdapter(httpHandler);\n    HttpServer server = HttpServer.create(HOST, PORT);\n    server.newHandler(adapter).block();\n  }\n  public RouterFunction<ServerResponse> routingFunction() {\n    UserRepository repository = new UserRepositorySample();\n    UserHandler handler = new UserHandler(repository);\n    return nest (\n        path(\"/user\"),\n        nest(\n          accept(APPLICATION_JSON),\n          route(GET(\"/{id}\"), handler::getAllUsers)\n          .andRoute(method(HttpMethod.GET), handler::getAllUsers)\n        ).andRoute(POST(\"/\").and(contentType(APPLICATION_JSON)), handler::getAllUsers));\n  }\n}\n```", "```java\nPress ENTER to exit.\n```", "```java\nhttp://localhost:8081/user/\n```", "```java\n[ \n  { \n    \"userid\": 100, \n    \"username\": \"David\" \n  },\n  { \n    \"userid\": 101, \n    \"username\": \"John\" \n  },\n  { \n    \"userid\": 102, \n    \"username\": \"Kevin\" \n  }, \n]\n```"]