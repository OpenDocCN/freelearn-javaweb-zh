["```java\n    import org.slf4j.Logger;\n    import org.slf4j.LoggerFactory;\n      //other code goes here\n      private static final Logger logger = LoggerFactory.getLogger(SearchRestController.class);\n    //other code goes here\n\n    logger.info(\"Looking to load flights...\");\n    for (Flight flight : flightRepository.findByOriginAndDestinationAndFlightDate(\"NYC\", \"SFO\", \"22-JAN-16\")) {\n          logger.info(flight.toString());\n    }\n    ```", "```java\n    <dependency>\n      <groupId>net.logstash.logback</groupId>\n      <artifactId>logstash-logback-encoder</artifactId>\n      <version>4.6</version>\n    </dependency>\n    ```", "```java\n    <logback.version>1.1.6</logback.version>\n    ```", "```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <configuration>\n        <include resource=\"org/springframework/boot/logging/logback/defaults.xml\"/>\n      <include resource=\"org/springframework/boot/logging/logback/console-appender.xml\" />\n        <appender name=\"stash\" class=\"net.logstash.logback.appender.LogstashTcpSocketAppender\">\n            <destination>localhost:4560</destination>\n            <!-- encoder is required -->\n            <encoder class=\"net.logstash.logback.encoder.LogstashEncoder\" />\n        </appender>\n      <root level=\"INFO\">\n        <appender-ref ref=\"CONSOLE\" />\n        <appender-ref ref=\"stash\" />\n      </root>\n    </configuration>\n    ```", "```java\n    input {\n      tcp {\n         port => 4560\n         host => localhost\n      }\n    }\n    output {\n    elasticsearch { hosts => [\"localhost:9200\"] }\n      stdout { codec => rubydebug }\n    }\n    ```", "```java\n    ./bin/logstash -f logstash.conf\n    ./bin/elasticsearch\n    ./bin/kibana\n\n    ```", "```java\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-sleuth</artifactId>\n    </dependency>\n    ```", "```java\n    <property name=\"spring.application.name\" value=\"search-service\"/>\n    <property name=\"CONSOLE_LOG_PATTERN\" value=\"%d{yyyy-MM-dd HH:mm:ss.SSS} [${spring.application.name}] [trace=%X{X-Trace-Id:-},span=%X{X-Span-Id:-}] [%15.15t] %-40.40logger{39}: %m%n\"/>\n    ```", "```java\n      @Bean\n        public AlwaysSampler defaultSampler() {\n          return new AlwaysSampler();\n        }\n    ```", "```java\n      @RequestMapping(\"/hubongw\")\n      String getHub(HttpServletRequest req){\n        logger.info(\"Search Request in API gateway for getting Hub, forwarding to search-service \");\n        String hub = restTemplate.getForObject(\"http://search-service/search/hub\", String.class);\n        logger.info(\"Response for hub received,  Hub \"+ hub);\n        return hub; \n      }\n    ```", "```java\n      @RequestMapping(\"/hub\")\n      String getHub(){\n        logger.info(\"Searching for Hub, received from search-apigateway \");\n        return \"SFO\"; \n      }\n    ```", "```java\n    2016-04-02 17:24:37.624 [search-apigateway] [trace=8a7e278f-7b2b-43e3-a45c-69d3ca66d663,span=8a7e278f-7b2b-43e3-a45c-69d3ca66d663] [io-8095-exec-10] c.b.p.s.a.SearchAPIGatewayController    : Response for hub received,  Hub DXB\n\n    2016-04-02 17:24:37.612 [search-service] [trace=8a7e278f-7b2b-43e3-a45c-69d3ca66d663,span=fd309bba-5b4d-447f-a5e1-7faaab90cfb1] [nio-8090-exec-1] c.b.p.search.component.SearchComponent  : Searching for Hub, received from search-apigateway\n    ```", "```java\n    @Component  \n    class SearchAPIGatewayComponent { \n      @LoadBalanced\n      @Autowired \n      RestTemplate restTemplate;\n\n      @HystrixCommand(fallbackMethod = \"getDefaultHub\")\n      public String getHub(){\n        String hub = restTemplate.getForObject(\"http://search-service/search/hub\", String.class);\n        return hub;\n      }\n      public String getDefaultHub(){\n        return \"Possibily SFO\";\n      }\n    }\n    ```", "```java\n    @RequestMapping(\"/hubongw\") \n    String getHub(){\n      logger.info(\"Search Request in API gateway for getting Hub, forwarding to search-service \");\n      return component.getHub(); \n    }\n    ```", "```java\neureka.instance.hostname: localdomain2\n```", "```java\n    @EnableTurbine\n    @EnableHystrixDashboard\n    @SpringBootApplication\n    public class TurbineServerApplication {\n    ```", "```java\n    spring:\n       application:\n         name : turbineserver\n    turbine:\n       clusterNameExpression: new String('default')\n       appConfig : search-service,search-apigateway\n    server:\n      port: 9090\n    eureka:\n      client:\n        serviceUrl:\n           defaultZone: http://localhost:8761/eureka/\n    ```", "```java\n    turbine:\n      aggregator:\n        clusterConfig: [comma separated clusternames]\n    ```", "```java\n      @HystrixCommand(fallbackMethod = \"searchFallback\")\n      public List<Flight> search(SearchQuery query){\n    ```", "```java\n    Eureka.instance.hostname: localdomain1\n    ```", "```java\n    eureka.instance.hostname: localdomain2\n    ```", "```java\n    java -jar -Dserver.port=8096 -Deureka.instance.hostname=localdomain2 -Dserver.address=localdomain2 target/chapter7.search-apigateway-1.0.jar\n    java -jar -Dserver.port=8095 -Deureka.instance.hostname=localdomain1 -Dserver.address=localdomain1 target/chapter7.search-apigateway-1.0.jar\n    java -jar -Dserver.port=8090 -Deureka.instance.hostname=localdomain1 -Dserver.address=localdomain1 target/chapter7.search-1.0.jar\n\n    ```"]