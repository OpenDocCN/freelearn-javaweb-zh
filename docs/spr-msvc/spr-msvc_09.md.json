["```java\n    sudo apt-get -y install oracle-java8-installer\n\n    ```", "```java\n    sudo apt-get install docker\n\n    ```", "```java\n    sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv E56151BF\n    DISTRO=$(lsb_release -is | tr '[:upper:]' '[:lower:]')\n    CODENAME=$(lsb_release -cs)\n    # Add the repository\n    echo \"deb http://repos.mesosphere.com/${DISTRO} ${CODENAME} main\" | \\\n     sudo tee /etc/apt/sources.list.d/mesosphere.list\n    sudo apt-get -y update\n\n    ```", "```java\n    sudo apt-get -y install mesos marathon\n\n    ```", "```java\n    Open vi /etc/zookeeper/conf/myid and set 1\\. \n\n    ```", "```java\n    # specify all zookeeper servers\n    # The first port is used by followers to connect to the leader\n    # The second one is used for leader election\n    server.1= 172.31.54.69:2888:3888\n    #server.2=zookeeper2:2888:3888\n    #server.3=zookeeper3:2888:3888\n    ```", "```java\n    zk:// 172.31.54.69:2181/mesos \n    ```", "```java\n    vi /etc/mesos-master/quorum\n\n    ```", "```java\n    echo 'docker,mesos' > /etc/mesos-slave/containerizers\n\n    ```", "```java\n    sudo service zookeeper start\n    sudo service mesos-master start\n    sudo service mesos-slave start\n    sudo service marathon start\n\n    ```", "```java\n    sudo service zookeeper stop\n    sudo service mesos-master stop\n    sudo service mesos-slave stop\n    sudo service marathon stop\n\n    ```", "```java\n$sudo service mesos-slave stop\n\n$sudo /usr/sbin/mesos-slave  --master=172.31.54.69:5050 --log_dir=/var/log/mesos --work_dir=/var/lib/mesos --containerizers=mesos,docker --resources=\"ports(*):[8000-9000, 31000-32000]\"\n\n```", "```java\n    I0411 18:11:39.684809 16665 slave.cpp:1030] Forwarding total oversubscribed resources\n\n    ```", "```java\n    @Configuration\n    class EurekaConfig { \n    @Bean\n        public EurekaInstanceConfigBean eurekaInstanceConfigBean() {\n        EurekaInstanceConfigBean config = new EurekaInstanceConfigBean(new InetUtils(new InetUtilsProperties()));\n    AmazonInfo info = AmazonInfo.Builder.newBuilder().autoBuild(\"eureka\");\n            config.setDataCenterInfo(info);\n            info.getMetadata().put(AmazonInfo.MetaDataKey.publicHostname.getName(), info.get(AmazonInfo.MetaDataKey.publicIpv4));\n            config.setHostname(info.get(AmazonInfo.MetaDataKey.localHostname));       \n    config.setNonSecurePortEnabled(true);\n    config.setNonSecurePort(PORT); \n    config.getMetadataMap().put(\"instanceId\",  info.get(AmazonInfo.MetaDataKey.localHostname));\n    return config;\n    }\n    ```", "```java\n    docker build -t search-service:1.0 .\n    docker tag search-service:1.0 rajeshrv/search-service:1.0\n    docker push rajeshrv/search-service:1.0\n\n    docker build -t search-apigateway:1.0 .\n    docker tag search-apigateway:1.0 rajeshrv/search-apigateway:1.0\n    docker push rajeshrv/search-apigateway:1.0\n\n    docker build -t website:1.0 .\n    docker tag website:1.0 rajeshrv/website:1.0\n    docker push rajeshrv/website:1.0\n\n    ```", "```java\n    {\n      \"id\": \"search-service-1.0\",\n      \"cpus\": 0.5,\n      \"mem\": 256.0,\n      \"instances\": 1,\n      \"container\": {\n       \"docker\": {\n        \"type\": \"DOCKER\",\n          \"image\": \"rajeshrv/search-service:1.0\",\n           \"network\": \"BRIDGE\",\n           \"portMappings\": [\n            {  \"containerPort\": 0, \"hostPort\": 8090 }\n          ]\n        }\n      }\n    }\n    ```", "```java\n    \"healthChecks\": [\n        {\n          \"protocol\": \"HTTP\",\n          \"portIndex\": 0,\n          \"path\": \"/admin/health\",\n          \"gracePeriodSeconds\": 100,\n          \"intervalSeconds\": 30,\n          \"maxConsecutiveFailures\": 5\n        }\n      ]\n    ```", "```java\n    curl -X POST http://54.85.107.37:8080/v2/apps -d @search.json -H \"Content-type: application/json\"\n\n    ```"]