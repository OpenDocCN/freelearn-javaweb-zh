["```java\n  <dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-dependencies</artifactId>\n    <version>Brixton.RELEASE</version>\n    <type>pom</type>\n    <scope>import</scope>\n  </dependency>\n```", "```java\n<spring-cloud-aws.version>1.1.0.RELEASE</spring-cloud-aws.version>\n<spring-cloud-bus.version>1.1.0.RELEASE</spring-cloud-bus.version>\n<spring-cloud-cloudfoundry.version>1.0.0.RELEASE</spring-cloud-cloudfoundry.version>\n<spring-cloud-commons.version>1.1.0.RELEASE</spring-cloud-commons.version>\n<spring-cloud-config.version>1.1.0.RELEASE</spring-cloud-config.version>\n<spring-cloud-netflix.version>1.1.0.RELEASE</spring-cloud-netflix.version>\n<spring-cloud-security.version>1.1.0.RELEASE</spring-cloud-security.version>\n<spring-cloud-cluster.version>1.0.0.RELEASE</spring-cloud-cluster.version>\n<spring-cloud-consul.version>1.0.0.RELEASE</spring-cloud-consul.version>\n<spring-cloud-sleuth.version>1.0.0.RELEASE</spring-cloud-sleuth.version>\n<spring-cloud-stream.version>1.0.0.RELEASE</spring-cloud-stream.version>\n<spring-cloud-zookeeper.version>1.0.0.RELEASE </spring-cloud-zookeeper.version>\n```", "```java\n    @PropertySource(\"file:${CONF_DIR}/application.properties\")\n      public class ApplicationConfig {\n    }\n    ```", "```java\n    java -jar myproject.jar --spring.config.location=\n\n    ```", "```java\n    $ cd $HOME\n    $ mkdir config-repo\n    $ cd config-repo\n    $ git init .\n    $ echo message : helloworld > application.properties\n    $ git add -A .\n    $ git commit -m \"Added sample application.properties\"\n\n    ```", "```java\n    application.properties with a message property and value helloworld is also created.\n    ```", "```java\n    server.port=8888\n    spring.cloud.config.server.git.uri: file://${user.home}/config-repo\n    ```", "```java\n    @EnableConfigServer\n    @SpringBootApplication\n    public class ConfigserverApplication {\n    ```", "```java\n    {\"name\":\"application\",\"profiles\":[\"default\"],\"label\":\"master\",\"version\":\"6046fd2ff4fa09d3843767660d963866ffcc7d28\",\"propertySources\":[{\"name\":\"file:///Users/rvlabs /config-repo /application.properties\",\"source\":{\"message\":\"helloworld\"}}]}\n    ```", "```java\napplication-development.properties\napplication-production.properties\n```", "```java\n      <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-config</artifactId>\n      </dependency>\n    ```", "```java\n      <dependencyManagement>\n        <dependencies>\n          <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-dependencies</artifactId>\n            <version>Brixton.RELEASE</version>\n            <type>pom</type>\n            <scope>import</scope>\n          </dependency>\n        </dependencies>\n      </dependencyManagement>\n    ```", "```java\n    spring.application.name=search-service \n    spring.cloud.config.uri=http://localhost:8888\n\n    server.port=8090\n\n    spring.rabbitmq.host=localhost\n    spring.rabbitmq.port=5672\n    spring.rabbitmq.username=guest\n    spring.rabbitmq.password=guest\n    ```", "```java\n    spring.rabbitmq.host=localhost\n    spring.rabbitmq.port=5672\n    spring.rabbitmq.username=guest\n    spring.rabbitmq.password=guest\n    ```", "```java\n    originairports.shutdown=SEA\n    ```", "```java\n    git add \u2013A .\n    git commit \u2013m \"adding new configuration\" \n\n    ```", "```java\n    spring.rabbitmq.host=localhost\n    spring.rabbitmq.port=5672\n    spring.rabbitmq.username=guest\n    spring.rabbitmq.password=guest\n    originairports.shutdown:SEA\n    ```", "```java\n    spring.application.name=search-service\n    server.port=8090\n    spring.cloud.config.uri=http://localhost:8888\n    ```", "```java\n    @RefreshScope\n    ```", "```java\n      @Value(\"${originairports.shutdown}\")\n      private String originAirportShutdownList;\n    ```", "```java\n      @RequestMapping(value=\"/get\", method = RequestMethod.POST)\n      List<Flight> search(@RequestBody SearchQuery query){\n        logger.info(\"Input : \"+ query);\n      if(Arrays.asList(originAirportShutdownList.split(\",\")).contains(query.getOrigin())){\n        logger.info(\"The origin airport is in shutdown state\");\n        return new ArrayList<Flight>();\n      }\n      return searchComponent.search(query);\n      }\n    ```", "```java\n    spring.application.name=test-client\n    server.port=8001\n    spring.cloud.config.uri=http://localhost:8888\n    ```", "```java\n    SearchQuery = new SearchQuery(\"SEA\",\"SFO\",\"22-JAN-16\");\n    ```", "```java\n    The origin airport is in shutdown state\n\n    ```", "```java\n    originairports.shutdown:NYC\n    ```", "```java\n    The origin airport is in shutdown state\n\n    ```", "```java\n    curl \u2013d {} localhost:8090/refresh\n\n    ```", "```java\n    <dependency>\n       <groupId>org.springframework.cloud</groupId>\n       <artifactId>spring-cloud-starter-bus-amqp</artifactId>\n    </dependency>\n    ```", "```java\n    java -jar -Dserver.port=8090  search-1.0.jar \n    java -jar -Dserver.port=8091  search-1.0.jar\n\n    ```", "```java\n    originairports.shutdown:SEA\n    ```", "```java\n    curl \u2013d {} localhost:8090/bus/refresh\n\n    ```", "```java\n    Received remote refresh request. Keys refreshed [originairports.shutdown]\n\n    ```", "```java\n    /bus/refresh?destination=search-service:**\n    ```", "```java\n    private static final String FareURL = \"/fares\";\n\n    @Value(\"${fares-service.url}\")\n    private String fareServiceUrl;\n\n    Fare = restTemplate.getForObject(fareServiceUrl+FareURL +\"/get?flightNumber=\"+record.getFlightNumber()+\"&flightDate=\"+record.getFlightDate(),Fare.class);\n    ```", "```java\n    fares-service.url.\n    ```", "```java\nFare fare = restTemplate.getForObject(FareURL +\"/get?flightNumber=\"+record.getFlightNumber()+\"&flightDate=\"+record.getFlightDate(),Fare.class);\n```", "```java\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-starter-feign</artifactId>\n</dependency>\n```", "```java\n@FeignClient(name=\"fares-proxy\", url=\"localhost:8080/fares\")\npublic interface FareServiceProxy {\n  @RequestMapping(value = \"/get\", method=RequestMethod.GET)\n  Fare getFare(@RequestParam(value=\"flightNumber\") String flightNumber, @RequestParam(value=\"flightDate\") String flightDate);\n}\n```", "```java\nFare = fareServiceProxy.getFare(record.getFlightNumber(), record.getFlightDate());\n```", "```java\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-starter-ribbon</artifactId>\n</dependency>\n```", "```java\nfares-proxy.ribbon.listOfServers=localhost:8080,localhost:8081\n```", "```java\n@FeignClient(name=\"fares-proxy\")\n@RibbonClient(name=\"fares\")\npublic interface FareServiceProxy {\n  @RequestMapping(value = \"fares/get\", method=RequestMethod.GET)\n```", "```java\njava -jar -Dserver.port=8080 fares-1.0.jar\njava -jar -Dserver.port=8081 fares-1.0.jar\n\n```", "```java\nDynamicServerListLoadBalancer:{NFLoadBalancer:name=fares-proxy,current \n\nlist of Servers=[localhost:8080, localhost:8081],Load balancer stats=Zone stats: {unknown=[Zone:unknown;  Instance count:2;  Active connections count: 0;  Circuit breaker tripped count: 0;  Active connections per server: 0.0;]\n}, \n\n```", "```java\n    spring.application.name=eureka-server1\n    server.port:8761\n    spring.cloud.config.uri=http://localhost:8888\n    ```", "```java\n    spring.application.name=eureka-server1\n    eureka.client.serviceUrl.defaultZone:http://localhost:8761/eureka/\n    eureka.client.registerWithEureka:false\n    eureka.client.fetchRegistry:false\n    ```", "```java\n    @EnableEurekaServer\n    @SpringBootApplication\n    public class EurekaserverApplication {\n    ```", "```java\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-eureka</artifactId>\n    </dependency>\n    ```", "```java\n    eureka.client.serviceUrl.defaultZone: http://localhost:8761/eureka/\n    ```", "```java\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-ribbon</artifactId>\n    </dependency>\n    ```", "```java\n    fares-proxy.ribbon.listOfServers=localhost:8080, localhost:8081\n    ```", "```java\n    spring.application.name=test-client\n    eureka.client.serviceUrl.defaultZone: http://localhost:8761/eureka/\n    ```", "```java\n    @Configuration\n    class AppConfiguration {\n        @LoadBalanced\n        @Bean\n        RestTemplate restTemplate() {\n            return new RestTemplate();\n        }\n    }\n    @Autowired\n    RestTemplate searchClient;\n\n    @Autowired\n    RestTemplate bookingClient;\n\n    @Autowired\n    RestTemplate checkInClient;\n    ```", "```java\n    Flight[] flights = searchClient.postForObject(\"http://search-service/search/get\", searchQuery, Flight[].class);\n\n    long bookingId = bookingClient.postForObject(\"http://book-service/booking/create\", booking, long.class);\n\n    long checkinId = checkInClient.postForObject(\"http://checkin-service/checkin/create\", checkIn, long.class);\n    ```", "```java\nThe client URLs point to each other, forming a peer network as shown in the following configuration:\n```", "```java\neureka-server1.properties\neureka.client.serviceUrl.defaultZone:http://localhost:8762/eureka/\neureka.client.registerWithEureka:false\neureka.client.fetchRegistry:false\n\neureka-server2.properties\neureka.client.serviceUrl.defaultZone:http://localhost:8761/eureka/\neureka.client.registerWithEureka:false\neureka.client.fetchRegistry:false\n```", "```java\nspring.application.name=eureka\nspring.cloud.config.uri=http://localhost:8888\n```", "```java\njava -jar \u2013Dserver.port=8761 -Dspring.profiles.active=server1 demo-0.0.1-SNAPSHOT.jar\njava -jar \u2013Dserver.port=8762 -Dspring.profiles.active=server2 demo-0.0.1-SNAPSHOT.jar\n\n```", "```java\n    spring.application.name=search-apigateway\n    zuul.routes.search-apigateway.serviceId=search-service\n    zuul.routes.search-apigateway.path=/api/**\n    eureka.client.serviceUrl.defaultZone:http://localhost:8761/eureka/\n    ```", "```java\n    spring.application.name=search-apigateway\n    server.port=8095\n    spring.cloud.config.uri=http://localhost:8888\n    ```", "```java\n    @EnableZuulProxy\n    @EnableDiscoveryClient\n    @SpringBootApplication\n    public class SearchApiGateway {\n    ```", "```java\n    Flight[] flights = searchClient.postForObject(\"http://search-apigateway/api/search/get\", searchQuery, Flight[].class); \n    ```", "```java\npublic class CustomZuulFilter extends ZuulFilter{\npublic Object run(){}\npublic boolean shouldFilter(){}\npublic int filterOrder(){}\npublic String filterType(){}\n```", "```java\n@Bean\npublic CustomZuulFilter customFilter() {\n    return new CustomZuulFilter();\n}\n```", "```java\n@RestController \nclass SearchAPIGatewayController {\n\n  @RequestMapping(\"/\")\n  String greet(HttpServletRequest req){\n    return \"<H1>Search Gateway Powered By Zuul</H1>\";\n  }\n}\n```", "```java\nFlight[] flights = searchClient.postForObject(\"http://search-apigateway/api/search/get\", searchQuery, Flight[].class); \n```", "```java\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-stream-rabbit</artifactId>\n    </dependency>\n    ```", "```java\n    spring.cloud.stream.bindings.inventoryQ.destination=inventoryQ\n    spring.cloud.stream.bindings.checkInQ.destination=checkInQ\n    ```", "```java\n    spring.cloud.stream.bindings.inventoryQ.destination=inventoryQ\n    ```", "```java\n    spring.cloud.stream.bindings.checkInQ.destination=checkInQ\n    ```", "```java\n    @EnableBinding(BookingSource.class)\n    public class Sender {\n    ```", "```java\n    interface BookingSource {\n        public static String InventoryQ=\"inventoryQ\"; \n        @Output(\"inventoryQ\")\n        public MessageChannel inventoryQ();      \n    }\n    ```", "```java\n    public interface Source {\n      @Output(\"output\")\n      MessageChannel output();\n    }\n    ```", "```java\n      @Output (BookingSource.InventoryQ)\n      @Autowired\n      private MessageChannel;\n    ```", "```java\n    public void send(Object message){\n      messageChannel.\n        send(MessageBuilder.withPayload(message).\n        build());\n    }\n    ```", "```java\n    @EnableBinding(SearchSink.class)\n    public class Receiver {\n    ```", "```java\n    interface SearchSink {\n        public static String INVENTORYQ=\"inventoryQ\"; \n        @Input(\"inventoryQ\")\n        public MessageChannel inventoryQ();\n    }\n    ```", "```java\n    @ServiceActivator(inputChannel = SearchSink.INVENTORYQ)\n    public void accept(Map<String,Object> fare){\n            searchComponent.updateInventory((String)fare.\n            get(\"FLIGHT_NUMBER\"),(String)fare.\n            get(\"FLIGHT_DATE\"),(int)fare.\n            get(\"NEW_INVENTORY\"));\n    }\n    ```", "```java\n    spring.rabbitmq.host=localhost\n    spring.rabbitmq.port=5672\n    spring.rabbitmq.username=guest\n    spring.rabbitmq.password=guest\n    server.port=8090\n    ```", "```java\n    mvn \u2013Dmaven.test.skip=true clean install \n\n    ```", "```java\n    java -jar target/fares-1.0.jar\n    java -jar target/search-1.0.jar\n    java -jar target/checkin-1.0.jar\n    java -jar target/book-1.0.jar\n    java \u2013jar target/fares-apigateway-1.0.jar\n    java \u2013jar target/search-apigateway-1.0.jar\n    java \u2013jar target/checkin-apigateway-1.0.jar\n    java \u2013jar target/book-apigateway-1.0.jar\n    java -jar target/website-1.0.jar\n\n    ```"]