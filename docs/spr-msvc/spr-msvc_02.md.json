["```java\n    <org.springframework-version>4.2.6.RELEASE</org.springframework-version>\n    ```", "```java\n    <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-databind</artifactId>\n        <version>2.6.4</version>\n    </dependency>\n    ```", "```java\n    @RestController\n    public class HomeController {\n      @RequestMapping(\"/\")\n      public Greet sayHello(){\n        return new Greet(\"Hello World!\");\n      }\n    }\n    class Greet { \n      private String message;\n      public Greet(String message) {\n        this.message = message;\n      }\n      //add getter and setter\n    }\n    ```", "```java\n    @Controller\n    @ResponseBody\n    public class HomeController { }\n    ```", "```java\n    INFO : org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'appServlet': initialization completed in 906 ms\n    May 08, 2016 8:22:48 PM org.apache.catalina.startup.Catalina start\n    INFO: Server startup in 2289 ms\n\n    ```", "```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.hsqldb</groupId>\n    <artifactId>hsqldb</artifactId>\n    <scope>runtime</scope>\n</dependency>\n```", "```java\n    $spring \u2013-version\n    Spring CLI v1.3.5.RELEASE\n\n    ```", "```java\n    @RestController\n    class HelloworldController {\n        @RequestMapping(\"/\")\n        String sayHello() {\n            \"Hello World!\"\n        }\n    }\n    ```", "```java\n    $spring run myfirstapp.groovy \n\n    2016-05-09 18:13:55.351  INFO 35861 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization started\n    2016-05-09 18:13:55.375  INFO 35861 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization completed in 24 ms\n\n    ```", "```java\n<parent>\n  <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.3.4.RELEASE</version>\n</parent>\n```", "```java\n<spring-boot.version>1.3.5.BUILD-SNAPSHOT</spring-boot.version>\n<hibernate.version>4.3.11.Final</hibernate.version>\n<jackson.version>2.6.6</jackson.version>\n<jersey.version>2.22.2</jersey.version>\n<logback.version>1.1.7</logback.version>\n<spring.version>4.2.6.RELEASE</spring.version>\n<spring-data-releasetrain.version>Gosling-SR4</spring-data-releasetrain.version>\n<tomcat.version>8.0.33</tomcat.version>\n```", "```java\n<dependencies>\n   <dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n   </dependency>\n\n   <dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-test</artifactId>\n  <scope>test</scope>\n   </dependency>\n</dependencies>\n```", "```java\n<java.version>1.8</java.version>\n```", "```java\n@SpringBootApplication\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n```", "```java\n@Configuration\n@EnableAutoConfiguration\n@ComponentScan\npublic class Application {\n```", "```java\n    @RestController\n    class GreetingController{\n      @RequestMapping(\"/\")\n      Greet greet(){\n        return new Greet(\"Hello World!\");\n      }\n    }\n    class Greet {\n      private String message;\n    public Greet() {}\n\n      public Greet(String message) {\n        this.message = message;\n      }\n    //add getter and setter\n    }\n    ```", "```java\n$ maven install\n\n```", "```java\n$java -jar target/bootrest-0.0.1-SNAPSHOT.jar\n\n```", "```java\ncurl http://localhost:8080\n\n```", "```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = Application.class)\n@WebIntegrationTest\npublic class ApplicationTests {\n  @Test\n  public void testVanillaService() {\n    RestTemplate restTemplate = new RestTemplate();\n    Greet greet = restTemplate.getForObject(\"http://localhost:8080\", Greet.class);\n    Assert.assertEquals(\"Hello World!\", greet.getMessage());\n  }\n}\n```", "```java\n    @RequestMapping(\"/greeting\")\n    @ResponseBody\n    public HttpEntity<Greet> greeting(@RequestParam(value = \"name\", required = false, defaultValue = \"HATEOAS\") String name) {\n           Greet greet = new Greet(\"Hello \" + name);\n           greet.add(linkTo(methodOn(GreetingController.class).greeting(name)).withSelfRel());\n\n           return new ResponseEntity<Greet>(greet, HttpStatus.OK);\n    }\n    ```", "```java\n    greet.add(linkTo(methodOn(GreetingController.class).greeting(name)).withSelfRel());\n    ```", "```java\n    class Greet extends ResourceSupport{\n    ```", "```java\n$java -jar target/bootadvanced-0.0.1-SNAPSHOT.jar --debug\n\n```", "```java\n@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})\n```", "```java\nspring.config.name= # config file name  \nspring.config.location= # location of config file\n```", "```java\n$java -jar target/bootadvanced-0.0.1-SNAPSHOT.jar --spring.config.name=bootrest.properties\n\n```", "```java\n    bootrest.customproperty=hello\n    ```", "```java\n    @Autowired\n    Environment env;\n\n    Greet greet(){\n        logger.info(\"bootrest.customproperty \"+ env.getProperty(\"bootrest.customproperty\"));\n        return new Greet(\"Hello World!\");\n    }\n    ```", "```java\n    org.rvslab.chapter2.GreetingController   : bootrest.customproperty hello\n    ```", "```java\nserver\n  port: 9080\n```", "```java\nspring:\n    profiles: development\nserver:\n      port: 9090\n---\n\nspring:\n    profiles: production\nserver:\n      port: 8080\n```", "```java\nmvn -Dspring.profiles.active=production install\nmvn -Dspring.profiles.active=development install\n\n```", "```java\n@ActiveProfiles(\"test\")\n```", "```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <exclusions>\n        <exclusion>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-tomcat</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-undertow</artifactId>\n</dependency>\n```", "```java\n<dependency>\n  <groupId>org.springframework.boot</groupId> \n  <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n```", "```java\n@EnableGlobalMethodSecurity\n@SpringBootApplication\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n```", "```java\nsecurity.user.name=guest\nsecurity.user.password=guest123\n```", "```java\n  @Test\n  public void testSecureService() {  \n    String plainCreds = \"guest:guest123\";\n    HttpHeaders headers = new HttpHeaders();\n    headers.add(\"Authorization\", \"Basic \" + new String(Base64.encode(plainCreds.getBytes())));\n    HttpEntity<String> request = new HttpEntity<String>(headers);\n    RestTemplate restTemplate = new RestTemplate();\n\n    ResponseEntity<Greet> response = restTemplate.exchange(\"http://localhost:8080\", HttpMethod.GET, request, Greet.class);\n    Assert.assertEquals(\"Hello World!\", response.getBody().getMessage());\n  }\n```", "```java\norg.springframework.web.client.HttpClientErrorException: 401 Unauthorized\n\n```", "```java\n    <dependency>\n      <groupId>org.springframework.security.oauth</groupId>\n      <artifactId>spring-security-oauth2</artifactId>\n      <version>2.0.9.RELEASE</version>\n    </dependency>\n    ```", "```java\n    @EnableResourceServer\n    @EnableAuthorizationServer\n    @SpringBootApplication\n    public class Application {\n    ```", "```java\n    security.user.name=guest\n    security.user.password=guest123\n    security.oauth2.client.clientId: trustedclient\n    security.oauth2.client.clientSecret: trustedclient123\n    security.oauth2.client.authorized-grant-types: authorization_code,refresh_token,password\n    security.oauth2.client.scope: openid\n    ```", "```java\n      @Test\n      public void testOAuthService() {\n            ResourceOwnerPasswordResourceDetails resource = new ResourceOwnerPasswordResourceDetails();\n            resource.setUsername(\"guest\");\n            resource.setPassword(\"guest123\");\n              resource.setAccessTokenUri(\"http://localhost:8080/oauth/token\");\n            resource.setClientId(\"trustedclient\");\n            resource.setClientSecret(\"trustedclient123\");\n            resource.setGrantType(\"password\");\n\n            DefaultOAuth2ClientContext clientContext = new DefaultOAuth2ClientContext();\n            OAuth2RestTemplate restTemplate = new OAuth2RestTemplate(resource, clientContext);\n\n            Greet greet = restTemplate.getForObject(\"http://localhost:8080\", Greet.class);\n\n            Assert.assertEquals(\"Hello World!\", greet.getMessage());\n      }\n    ```", "```java\n@RestController\nclass GreetingController{\n  @CrossOrigin\n  @RequestMapping(\"/\")\n  Greet greet(){\n    return new Greet(\"Hello World!\");\n  }\n}\n```", "```java\n@CrossOrigin(\"http://mytrustedorigin.com\")\n```", "```java\n    $./rabbitmq-server\n\n    ```", "```java\n    spring.rabbitmq.host=localhost\n    spring.rabbitmq.port=5672\n    spring.rabbitmq.username=guest\n    spring.rabbitmq.password=guest\n    ```", "```java\n    @Component \n    class Sender {\n      @Autowired\n      RabbitMessagingTemplate template;\n      @Bean\n      Queue queue() {\n        return new Queue(\"TestQ\", false);\n      }\n      public void send(String message){\n        template.convertAndSend(\"TestQ\", message);\n      }\n    }\n    ```", "```java\n    @Component\n    class Receiver {\n        @RabbitListener(queues = \"TestQ\")\n        public void processMessage(String content) {\n           System.out.println(content);\n        }\n    }\n    ```", "```java\n    @SpringBootApplication\n    public class Application implements CommandLineRunner{\n\n      @Autowired\n      Sender sender;\n\n        public static void main(String[] args) {\n            SpringApplication.run(Application.class, args);\n        }\n\n        @Override\n        public void run(String... args) throws Exception {\n          sender.send(\"Hello Messaging..!!!\");\n        }\n    }\n    ```", "```java\n    Hello Messaging..!!!\n\n    ```", "```java\n    @Entity\n    class Customer {\n      @Id\n      @GeneratedValue(strategy = GenerationType.AUTO)\n      private Long id;\n      private String name;\n      private String email;\n    ```", "```java\n    @RepositoryRestResource\n    interface CustomerRespository extends JpaRepository <Customer,Long>{\n      Optional<Customer> findByName(@Param(\"name\") String name);\n    }\n    ```", "```java\n    @SpringBootApplication\n    public class Application {\n        public static void main(String[] args) {\n            SpringApplication.run(Application.class, args);\n        }\n\n        @Bean\n      CommandLineRunner init(CustomerRespository repo) {\n      return (evt) ->  {\n        repo.save(new Customer(\"Adam\",\"adam@boot.com\"));\n        repo.save(new Customer(\"John\",\"john@boot.com\"));\n      repo.save(new Customer(\"Smith\",\"smith@boot.com\"));\n        repo.save(new Customer(\"Edgar\",\"edgar@boot.com\"));\n        repo.save(new Customer(\"Martin\",\"martin@boot.com\"));\n        repo.save(new Customer(\"Tom\",\"tom@boot.com\"));\n        repo.save(new Customer(\"Sean\",\"sean@boot.com\"));\n      };\n      }\n    }\n    ```", "```java\n    @RestController\n    class CustomerController{\n\n      @Autowired\n      CustomerRegistrar customerRegistrar;\n\n      @RequestMapping( path=\"/register\", method = RequestMethod.POST)\n      Customer register(@RequestBody Customer customer){\n        return customerRegistrar.register(customer);\n      }\n    }\n    ```", "```java\n    @Component \n    class CustomerRegistrar {\n\n      CustomerRespository customerRespository;\n\n      @Autowired\n      CustomerRegistrar(CustomerRespository customerRespository){\n        this.customerRespository = customerRespository;\n      }\n\n      Customer register(Customer customer){\n        Optional<Customer> existingCustomer = customerRespository.findByName(customer.getName());\n        if (existingCustomer.isPresent()){\n          throw new RuntimeException(\"is already exists\");\n        } else {\n          customerRespository.save(customer); \n        }\n        return customer;\n      }\n    }\n    ```", "```java\n    @Component \n    @Lazy\n    class CustomerRegistrar {\n\n      CustomerRespository customerRespository;\n      Sender sender;\n\n      @Autowired\n      CustomerRegistrar(CustomerRespository customerRespository, Sender sender){\n        this.customerRespository = customerRespository;\n        this.sender = sender;\n      }\n\n      Customer register(Customer customer){\n        Optional<Customer> existingCustomer = customerRespository.findByName(customer.getName());\n        if (existingCustomer.isPresent()){\n          throw new RuntimeException(\"is already exists\");\n        } else {\n          customerRespository.save(customer); \n          sender.send(customer.getEmail());\n        } \n        return customer;\n      }\n    }\n    ```", "```java\n    @Component \n    @Lazy\n    class Sender {\n\n      @Autowired\n      RabbitMessagingTemplate template;\n\n      @Bean\n      Queue queue() {\n        return new Queue(\"CustomerQ\", false);\n      }\n\n      public void send(String message){\n        template.convertAndSend(\"CustomerQ\", message);\n      }\n    }\n    ```", "```java\n    spring.rabbitmq.host=localhost\n    spring.rabbitmq.port=5672\n    spring.rabbitmq.username=guest\n    spring.rabbitmq.password=guest\n    ```", "```java\n    @Component\n    class Receiver {  \n      @Autowired\n      Mailer mailer;\n\n      @Bean\n      Queue queue() {\n        return new Queue(\"CustomerQ\", false);\n      }\n\n      @RabbitListener(queues = \"CustomerQ\")\n        public void processMessage(String email) {\n           System.out.println(email);\n           mailer.sendMail(email);\n        }\n    }\n    ```", "```java\n    @Component \n    class Mailer {\n      @Autowired\n      private  JavaMailSender  javaMailService;\n        public void sendMail(String email){\n          SimpleMailMessage mailMessage=new SimpleMailMessage();\n          mailMessage.setTo(email);\n          mailMessage.setSubject(\"Registration\");\n          mailMessage.setText(\"Successfully Registered\");\n          javaMailService.send(mailMessage);\n        }\n    }\n    ```", "```java\n    $ java -jar fakeSMTP-2.0.jar\n\n    ```", "```java\n    spring.rabbitmq.host=localhost\n    spring.rabbitmq.port=5672\n    spring.rabbitmq.username=guest\n    spring.rabbitmq.password=guest\n\n    spring.mail.host=localhost\n    spring.mail.port=2525\n    ```", "```java\n$ ssh -p 2000 user@localhost\n\n```", "```java\nshell.auth.simple.user.password=admin\n```", "```java\ninfo.app.name=Boot actuator\ninfo.app.description= My Greetings Service\ninfo.app.version=1.0.0\n```", "```java\nclass TPSCounter {\n  LongAdder count;\n  int threshold = 2;\n  Calendar expiry = null; \n\n  TPSCounter(){\n    this.count = new LongAdder();\n    this.expiry = Calendar.getInstance();\n    this.expiry.add(Calendar.MINUTE, 1);\n  }\n\n  boolean isExpired(){\n    return Calendar.getInstance().after(expiry);\n  }\n\n  boolean isWeak(){\n    return (count.intValue() > threshold);\n  }\n\n  void increment(){\n     count.increment();\n  }\n}\n```", "```java\n@Component\nclass TPSHealth implements HealthIndicator {\n  TPSCounter counter;\n\n@Override\n    public Health health() {\n        boolean health = counter.isWeak(); // perform some specific health check\n        if (health) {\n            return Health.outOfService().withDetail(\"Too many requests\", \"OutofService\").build();\n        }\n        return Health.up().build();\n    }\n\n    void updateTx(){\n    if(counter == null || counter.isExpired()){\n      counter = new TPSCounter();\n\n    }\n    counter.increment();\n    }\n}\n```", "```java\n  Greet greet(){\n    logger.info(\"Serving Request....!!!\");\n    health.updateTx(); \n    return new Greet(\"Hello World!\");\n  }\n```", "```java\n  @Autowired   \n  CounterService counterService;\n\n  @Autowired\n  GaugeService gaugeService;\n```", "```java\n  this.counterService.increment(\"greet.txnCount\");\n  this.gaugeService.submit(\"greet.customgauge\", 1.0);\n```", "```java\n<dependency>\n    <groupId>io.springfox</groupId>\n    <artifactId>springfox-swagger2</artifactId>\n    <version>2.3.1</version>\n</dependency>  \n<dependency>\n    <groupId>io.springfox</groupId>\n    <artifactId>springfox-swagger-ui</artifactId>\n    <version>2.3.1</version>\n</dependency>\n```", "```java\n@SpringBootApplication\n@EnableSwagger2\npublic class Application {\n```"]