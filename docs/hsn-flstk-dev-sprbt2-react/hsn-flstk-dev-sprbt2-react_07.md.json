["```java\nfunction doAsyncCall(success, failure) {\n    // Do some api call\n    if (SUCCEED)\n        success(resp);\n    else\n        failure(err);\n}\n\nsuccess(response) {\n    // Do something with response\n}\n\nfailure(error) {\n    // Handle error\n}\n\ndoAsyncCall(success, failure);\n```", "```java\ndoAsyncCall()\n.then(response => // Do something with the response);\n```", "```java\ndoAsyncCall()\n.then(response => // Get some result from the response)\n.then(result => // Do something with the result);\n```", "```java\ndoAsyncCall()\n.then(response => // Get some result from the response)\n.then(result => // Do something with result);\n.catch(error => console.error(error))\n```", "```java\ndoAsyncCall = async () => {\n    const response = await fetch('http://someapi.com');\n    const result = await response.json();\n    // Do something with the result\n}\n```", "```java\ndoAsyncCall = async () => {\n  try {\n    const response = await fetch('http://someapi.com');\n    const result = await response.json();\n    // Do something with the result\n  }\n  catch(err) {\n    console.error(err);\n  } \n}\n```", "```java\nfetch('http://someapi.com')\n.then(response => response.json())\n.then(result => console.log(result));\n.catch(error => console.error(error))\n```", "```java\nfetch('http://someapi.com', {method: 'POST'})\n.then(response => response.json())\n.then(result => console.log(result))\n.catch(error => console.error(error));\n```", "```java\nfetch('http://someapi.com', \n {\n  method: 'POST', \n  headers:{'Content-Type': 'application/json'}\n }\n.then(response => response.json())\n.then(result => console.log(result))\n.catch(error => console.error(error));\n```", "```java\nfetch('http://someapi.com', \n {\n  method: 'POST', \n  headers:{'Content-Type': 'application/json'},\n  body: JSON.stringify(data)\n }\n.then(response => response.json())\n.then(result => console.log(result))\n.catch(error => console.error(error));\n```", "```java\naxios.get('http://someapi.com')\n.then(response => console.log(response))\n.catch(error => console.log(error));\n```", "```java\ncreate-react-app weatherapp\n```", "```java\ncd weatherapp\n```", "```java\nnpm start\n```", "```java\nimport React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      </div>\n    );\n  }\n}\n\nexport default App;\n```", "```java\n  constructor(props) {\n    super(props);\n    this.state = {temp: 0, desc: '', icon: '', loading: true}\n  }\n```", "```java\napi.openweathermap.org/data/2.5/weather?q=London&units=Metric&APIkey=YOUR_KEY\n```", "```java\n  componentDidMount() {\n    fetch('http://api.openweathermap.org/data/2.5/weather?\n      q=London&units=Metric\n      &APIkey=c36b03a963176b9a639859e6cf279299')\n    .then(response => response.json()) \n    .then(responseData => {\n      this.setState({ \n         temp: responseData.main.temp,\n         desc: responseData.weather[0].description,\n         icon: responseData.weather[0].icon, \n         loading: false \n       })\n     })\n     .catch(err => console.error(err)); \n  }\n```", "```java\n  render() {\n    const imgSrc =    `http://openweathermap.org/img/w/${this.state.icon}.png`;\n\n    if (this.state.loading) {\n      return <p>Loading</p>;\n    }\n else {\n      return (\n        <div className=\"App\">\n          <p>Temperature: {this.state.temp} \u00b0C</p>\n          <p>Description: {this.state.desc}</p>\n          <img src={imgSrc} alt=\"Weather icon\" />\n        </div>\n      );\n    }\n  }\n```", "```java\nimport React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {temp: 0, desc: '', icon: ''}\n  }\n\n  componentDidMount() {\n    fetch('http://api.openweathermap.org/data/2.5/weather?\n      q=London&units=Metric&APIkey=YOUR_KEY')\n    .then(response => response.json()) \n    .then(responseData => {\n      this.setState({ \n         temp: responseData.main.temp,\n        desc: responseData.weather[0].description,\n        icon: responseData.weather[0].icon \n       }); \n    });\n  }\n\n  render() {\n    const imgSrc = 'http://openweathermap.org/img/w/' + \n    this.state.icon + '.png';\n\n```", "```java\n    return (\n      <div className=\"App\">\n        <p>Temperature: {this.state.temp}</p>\n        <p>Description: {this.state.desc}</p>\n        <img src={imgSrc} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n```", "```java\nimport React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      </div>\n    );\n  }\n}\n\nexport default App;\n```", "```java\nhttps://api.github.com/search/repositories?q=KEYWORD\n```", "```java\n  constructor(props) {\n    super(props);\n    this.state = { keyword: '', data: [] };\n  }\n```", "```java\n  fetchData = () => {\n    // REST API call comes here\n  }\n\n  handleChange = (e) => {\n    this.setState({keyword: e.target.value});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <input type=\"text\" onChange={this.handleChange} />\n        <button onClick={this.fetchData} value={this.state.keyword} >Fetch</button>\n      </div>\n    );\n  }\n```", "```java\n  fetchData = () => {\n    const url = `https://api.github.com/search/repositories?\n       q=${this.state.keyword}`;\n    fetch(url)\n    .then(response => response.json()) \n    .then(responseData => {\n      this.setState({data : responseData.items }); \n    }); \n  } \n```", "```java\n  render() {\n    const tableRows = this.state.data.map((item, index) => \n      <tr key={index}><td>{item.full_name}</td>\n      <td><a href={item.html_url}>{item.html_url}</a></td></tr>); \n\n    return (\n      <div className=\"App\">\n        <input type=\"text\" onChange={this.handleChange} />\n        <button onClick={this.fetchData} value={this.state.keyword} >Fetch</button>\n        <table><tbody>{tableRows}</tbody></table>\n      </div>\n    );\n```", "```java\nimport React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { keyword: '', data: [] };\n  }\n\n  fetchData = () => {\n    const url = `https://api.github.com/search/repositories?\n      q=${this.state.keyword}`;\n    fetch(url)\n    .then(response => response.json()) \n    .then(responseData => {\n      this.setState({data : responseData.items }); \n    }); \n  }\n\n  handleChange = (e) => {\n    this.setState({keyword: e.target.value});\n  }\n\n  render() {\n    const tableRows = this.state.data.map((item, index) => \n      <tr key={index}><td>{item.full_name}</td>\n      <td><a href={item.html_url}>{item.html_url}</a></td></tr>); \n\n    return (\n      <div className=\"App\">\n        <input type=\"text\" onChange={this.handleChange} />\n        <button onClick={this.fetchData} \n        value={this.state.keyword} >Fetch</button>\n        <table><tbody>{tableRows}</tbody></table>\n      </div>\n    );\n  }\n}\n```"]