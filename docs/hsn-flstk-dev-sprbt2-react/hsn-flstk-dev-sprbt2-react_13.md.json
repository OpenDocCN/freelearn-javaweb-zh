["```java\n@Override\n  protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable().cors().and().authorizeRequests()\n    .antMatchers(HttpMethod.POST, \"/login\").permitAll()\n    .anyRequest().authenticated()\n    .and()\n    // Filter for the api/login requests\n    .addFilterBefore(new LoginFilter(\"/login\", authenticationManager()),\n       UsernamePasswordAuthenticationFilter.class)\n    // Filter for other requests to check JWT in header\n    .addFilterBefore(new AuthenticationFilter(),\n       UsernamePasswordAuthenticationFilter.class);\n}\n```", "```java\nimport React, { Component } from 'react';\nimport {SERVER_URL} from '../constants.js';\n\nclass Login extends Component {\n  render() {\n    return (\n      <div>        \n      </div>\n    );\n  }\n}\n\nexport default Login;\n```", "```java\nconstructor(props) {\n  super(props);\n  this.state = {username: '', password: '', \n    isAuthenticated: false};\n}\n```", "```java\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n```", "```java\nrender() {\n  return (\n    <div>\n      <TextField name=\"username\" placeholder=\"Username\" \n      onChange={this.handleChange} /><br/> \n      <TextField type=\"password\" name=\"password\" \n       placeholder=\"Password\" \n      onChange={this.handleChange} /><br/><br/> \n      <Button variant=\"raised\" color=\"primary\" \n       onClick={this.login}>\n        Login\n     </Button>\n    </div>\n  );\n}\n```", "```java\nhandleChange = (event) => {\n  this.setState({[event.target.name] : event.target.value});\n}\n```", "```java\nlogin = () => {\n  const user = {username: this.state.username, password: this.state.password};\n  fetch(SERVER_URL + 'login', {\n    method: 'POST',\n    body: JSON.stringify(user)\n  })\n  .then(res => {\n    const jwtToken = res.headers.get('Authorization');\n    if (jwtToken !== null) {\n      sessionStorage.setItem(\"jwt\", jwtToken);\n      this.setState({isAuthenticated: true});\n    }\n  })\n  .catch(err => console.error(err)) \n}\n```", "```java\nimport Carlist from './Carlist';\n```", "```java\nrender() {\n  if (this.state.isAuthenticated === true) {\n    return (<Carlist />)\n  }\n  else {\n    return (\n      <div>\n        <TextField type=\"text\" name=\"username\" \n         placeholder=\"Username\" \n        onChange={this.handleChange} /><br/> \n        <TextField type=\"password\" name=\"password\" \n         placeholder=\"Password\" \n        onChange={this.handleChange} /><br/><br/> \n        <Button variant=\"raised\" color=\"primary\" \n         onClick={this.login}>\n          Login\n        </Button>\n      </div>\n    );\n  }\n}\n```", "```java\n// App.js\nimport React, { Component } from 'react';\nimport './App.css';\nimport Login from './components/Login';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <AppBar position=\"static\" color=\"default\">\n          <Toolbar>CarList</ Toolbar>\n        </ AppBar>\n        <Login /> \n      </div>\n    );\n  }\n```", "```java\n}\n\nexport default App;\n```", "```java\n// Carlist.js \n// Fetch all cars\nfetchCars = () => {\n  // Read the token from the session storage\n // and include it to Authorization header\n  const token = sessionStorage.getItem(\"jwt\");\n  fetch(SERVER_URL + 'api/cars', \n  {\n    headers: {'Authorization': token}\n  })\n  .then((response) => response.json()) \n  .then((responseData) => { \n    this.setState({ \n      cars: responseData._embedded.cars,\n    }); \n  })\n  .catch(err => console.error(err)); \n}\n```", "```java\n// Delete car\nonDelClick = (link) => {\n  const token = sessionStorage.getItem(\"jwt\");\n  fetch(link, \n    { \n      method: 'DELETE',\n      headers: {'Authorization': token}\n    }\n  )\n  .then(res => {\n    this.setState({open: true, message: 'Car deleted'});\n    this.fetchCars();\n  })\n  .catch(err => {\n    this.setState({open: true, message: 'Error when deleting'});\n    console.error(err)\n  }) \n}\n```", "```java\n// Add new car\naddCar(car) {\n  const token = sessionStorage.getItem(\"jwt\");\n  fetch(SERVER_URL + 'api/cars', \n  { method: 'POST', \n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token\n      },\n      body: JSON.stringify(car)\n  })\n  .then(res => this.fetchCars())\n  .catch(err => console.error(err))\n} \n```", "```java\n// Update car\nupdateCar(car, link) {\n  const token = sessionStorage.getItem(\"jwt\");\n  fetch(link, \n  { method: 'PUT', \n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': token\n    },\n    body: JSON.stringify(car)\n  })\n  .then( res =>\n    this.setState({open: true, message: 'Changes saved'})\n  )\n  .catch( err => \n    this.setState({open: true, message: 'Error when saving'})\n  )\n} \n```", "```java\nimport Snackbar from '@material-ui/core/Snackbar';\n```", "```java\n// Login.js  \nconstructor(props) {\n  super(props);\n  this.state = {username: '', password: '', \n  isAuthenticated: false, open: false};\n}\n```", "```java\nhandleClose = (event) => {\n  this.setState({ open: false });\n}\n```", "```java\n<Snackbar \n  open={this.state.open} onClose={this.handleClose} \n  autoHideDuration={1500} \n  message='Check your username and password' />\n```", "```java\nlogin = () => {\n  const user = {username: this.state.username, \n      password: this.state.password};\n  fetch('http://localhost:8080/login', {\n    method: 'POST',\n    body: JSON.stringify(user)\n  })\n  .then(res => {\n    const jwtToken = res.headers.get('Authorization');\n    if (jwtToken !== null) {\n      sessionStorage.setItem(\"jwt\", jwtToken);\n      this.setState({isAuthenticated: true});\n    }\n    else {\n      this.setState({open: true});\n    }\n  })\n  .catch(err => console.error(err)) \n}\n```", "```java\nlogout = () => {\n    sessionStorage.removeItem(\"jwt\");\n    this.setState({isAuthenticated: false});\n}\n```", "```java\nconst SecuredRoute = ({ component: Component, ...rest, isAuthenticated }) => (\n  <Route {...rest} render={props => (\n    isAuthenticated ? (\n      <Component {...props}/>\n    ) : (\n      <Redirect to={{\n        pathname: '/login',\n        state: { from: props.location }\n      }}/>\n    )\n  )}/>\n)\n```", "```java\n <Switch>\n    <Route path=\"/login\" component={Login} />\n    <Route path=\"/contact\" component={Contact} />\n    <SecuredRoute isAuthenticated={this.state.isAuthenticated} \n      path=\"/shop\" component={Shop} />\n    <Route render={() => <h1>Page not found</h1>} />\n  </Switch>\n```"]