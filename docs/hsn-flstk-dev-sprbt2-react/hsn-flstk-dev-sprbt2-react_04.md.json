["```java\n <dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-starter-security</artifactId>\n </dependency>\n```", "```java\npackage com.packt.cardatabase;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n  @Override\n  protected void configure(HttpSecurity http) throws Exception {\n\n  }\n\n}\n```", "```java\n  @Bean\n  @Override\n  public UserDetailsService userDetailsService() {\n      UserDetails user =\n           User.withDefaultPasswordEncoder()\n              .username(\"user\")\n              .password(\"password\")\n              .roles(\"USER\")\n              .build();\n\n      return new InMemoryUserDetailsManager(user);\n  } \n```", "```java\npackage com.packt.cardatabase.domain;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\n\n@Entity\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(nullable = false, updatable = false)\n    private Long id;\n\n    @Column(nullable = false, unique = true)\n    private String username;\n\n    @Column(nullable = false)\n    private String password;\n\n    @Column(nullable = false)\n    private String role;\n\n    public User() {\n    }\n\n  public User(String username, String password, String role) {\n    super();\n    this.username = username;\n    this.password = password;\n    this.role = role;\n  }\n```", "```java\n  public Long getId() {\n    return id;\n  }\n\n  public void setId(Long id) {\n    this.id = id;\n  }\n\n  public String getUsername() {\n    return username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public String getPassword() {\n    return password;\n  }\n\n  public void setPassword(String password) {\n    this.password = password;\n  }\n\n  public String getRole() {\n    return role;\n  }\n\n  public void setRole(String role) {\n    this.role = role;\n  }\n}\n```", "```java\npackage com.packt.cardatabase.domain;\n\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface UserRepository extends CrudRepository<User, Long> { \n    User findByUsername(String username);\n}\n```", "```java\npackage com.packt.cardatabase.service;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.authority.AuthorityUtils;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\n\nimport com.packt.cardatabase.domain.User;\nimport com.packt.cardatabase.domain.UserRepository;\n\n@Service\npublic class UserDetailServiceImpl implements UserDetailsService {\n  @Autowired\n  private UserRepository repository;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException\n    { \n      User currentUser = repository.findByUsername(username);\n        UserDetails user = new org.springframework.security.core\n            .userdetails.User(username, currentUser.getPassword()\n            , true, true, true, true, \n            AuthorityUtils.createAuthorityList(currentUser.getRole()));\n        return user;\n    }\n\n}\n```", "```java\npackage com.packt.cardatabase;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n\nimport com.packt.cardatabase.service.UserDetailServiceImpl;\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n  @Autowired\n  private UserDetailServiceImpl userDetailsService; \n\n  @Autowired\n  public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(userDetailsService)\n    .passwordEncoder(new BCryptPasswordEncoder());\n  }\n}\n```", "```java\n@Autowired \nprivate UserRepository urepository;\n```", "```java\n  @Bean\n  CommandLineRunner runner() {\n    return args -> {\n      Owner owner1 = new Owner(\"John\" , \"Johnson\");\n      Owner owner2 = new Owner(\"Mary\" , \"Robinson\");\n      orepository.save(owner1);\n      orepository.save(owner2);\n\n      repository.save(new Car(\"Ford\", \"Mustang\", \"Red\", \"ADF-1121\", \n        2017, 59000, owner1));\n      repository.save(new Car(\"Nissan\", \"Leaf\", \"White\", \"SSJ-3002\", \n        2014, 29000, owner2));\n      repository.save(new Car(\"Toyota\", \"Prius\", \"Silver\", \"KKO-0212\", \n        2018, 39000, owner2));\n\n```", "```java\n // username: user password: user\n urepository.save(new User(\"user\",\n      \"$2a$04$1.YhMIgNX/8TkCKGFUONWO1waedKhQ5KrnB30fl0Q01QKqmzLf.Zi\",\n      \"USER\"));\n // username: admin password: admin\n urepository.save(new User(\"admin\",\n      \"$2a$04$KNLUwOWHVQZVpXyMBNc7JOzbLiBjb9Tk9bP7KNcPI12ICuvzXQQKG\", \n      \"ADMIN\"));\n };\n  } \n```", "```java\neyJhbGciOiJIUzI1NiJ9.\neyJzdWIiOiJKb2UifD.\nipevRNuRP6HflG8cFKnmUPtypruRC4fc1DWtoLL62SY\n```", "```java\n<dependency>\n  <groupId>io.jsonwebtoken</groupId>\n  <artifactId>jjwt</artifactId>\n  <version>0.9.0</version>\n</dependency>\n```", "```java\npackage com.packt.cardatabase.service;\n\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.SignatureAlgorithm;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.util.Date;\n\nimport static java.util.Collections.emptyList;\n\npublic class AuthenticationService {\n  static final long EXPIRATIONTIME = 864_000_00; // 1 day in milliseconds\n  static final String SIGNINGKEY = \"SecretKey\";\n  static final String PREFIX = \"Bearer\";\n\n  // Add token to Authorization header\n  static public void addToken(HttpServletResponse res, String username) {\n    String JwtToken = Jwts.builder().setSubject(username)\n        .setExpiration(new Date(System.currentTimeMillis() \n            + EXPIRATIONTIME))\n        .signWith(SignatureAlgorithm.HS512, SIGNINGKEY)\n        .compact();\n    res.addHeader(\"Authorization\", PREFIX + \" \" + JwtToken);\n  res.addHeader(\"Access-Control-Expose-Headers\", \"Authorization\");\n  }\n\n  // Get token from Authorization header\n  static public Authentication getAuthentication(HttpServletRequest request) {\n    String token = request.getHeader(\"Authorization\");\n    if (token != null) {\n      String user = Jwts.parser()\n          .setSigningKey(SIGNINGKEY)\n          .parseClaimsJws(token.replace(PREFIX, \"\"))\n          .getBody()\n          .getSubject();\n\n      if (user != null) \n        return new UsernamePasswordAuthenticationToken(user, null,\n            emptyList());\n    }\n    return null;\n  }\n}\n```", "```java\npackage com.packt.cardatabase.domain;\n\npublic class AccountCredentials {\n  private String username;\n  private String password;\n\n  public String getUsername() {\n    return username;\n  }\n  public void setUsername(String username) {\n    this.username = username;\n  }\n  public String getPassword() {\n    return password;\n  }\n  public void setPassword(String password) {\n    this.password = password;\n  } \n}\n```", "```java\npackage com.packt.cardatabase;\n\nimport java.io.IOException;\nimport java.util.Collections;\n\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;\nimport org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.packt.cardatabase.domain.AccountCredentials;\nimport com.packt.cardatabase.service.AuthenticationService;\n\npublic class LoginFilter extends AbstractAuthenticationProcessingFilter {\n\n  public LoginFilter(String url, AuthenticationManager authManager) {\n    super(new AntPathRequestMatcher(url));\n    setAuthenticationManager(authManager);\n  }\n\n  @Override\n  public Authentication attemptAuthentication(\n  HttpServletRequest req, HttpServletResponse res)\n      throws AuthenticationException, IOException, ServletException {\n  AccountCredentials creds = new ObjectMapper()\n        .readValue(req.getInputStream(), AccountCredentials.class);\n  return getAuthenticationManager().authenticate(\n        new UsernamePasswordAuthenticationToken(\n            creds.getUsername(),\n            creds.getPassword(),\n            Collections.emptyList()\n        )\n    );\n  }\n\n  @Override\n  protected void successfulAuthentication(\n      HttpServletRequest req,\n      HttpServletResponse res, FilterChain chain,\n      Authentication auth) throws IOException, ServletException {\n    AuthenticationService.addToken(res, auth.getName());\n  }\n}\n```", "```java\npackage com.packt.cardatabase;\n\nimport java.io.IOException;\n\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.web.filter.GenericFilterBean;\n\nimport com.packt.cardatabase.service.AuthenticationService;\n\npublic class AuthenticationFilter extends GenericFilterBean {\n  @Override\n  public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException {\n    Authentication authentication = AuthenticationService.getAuthentication((HttpServletRequest)request);\n\n    SecurityContextHolder.getContext().\n        setAuthentication(authentication);\n    filterChain.doFilter(request, response);\n  }\n}\n```", "```java\n  //SecurityConfig.java  \n  @Override\n    protected void configure(HttpSecurity http) throws Exception {\n     http.cors().and().authorizeRequests()\n      .antMatchers(HttpMethod.POST, \"/login\").permitAll()\n          .anyRequest().authenticated()\n          .and()\n          // Filter for the api/login requests\n          .addFilterBefore(new LoginFilter(\"/login\",\n           authenticationManager()),\n                  UsernamePasswordAuthenticationFilter.class)\n          // Filter for other requests to check JWT in header\n          .addFilterBefore(new AuthenticationFilter(),\n                  UsernamePasswordAuthenticationFilter.class);\n    }\n```", "```java\n  // SecurityConfig.java  \n  @Bean\n    CorsConfigurationSource corsConfigurationSource() {\n        UrlBasedCorsConfigurationSource source = \n            new UrlBasedCorsConfigurationSource();\n        CorsConfiguration config = new CorsConfiguration();\n        config.setAllowedOrigins(Arrays.asList(\"*\"));\n        config.setAllowedMethods(Arrays.asList(\"*\"));\n        config.setAllowedHeaders(Arrays.asList(\"*\"));\n        config.setAllowCredentials(true);\n        config.applyPermitDefaultValues();\n\n        source.registerCorsConfiguration(\"/**\", config);\n        return source;\n  } \n\n```", "```java\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-test</artifactId>\n      <scope>test</scope>\n    </dependency>\n```", "```java\n    <dependency>\n        <groupId>com.h2database</groupId>\n        <artifactId>h2</artifactId>\n        <scope>test</scope>\n    </dependency> \n```", "```java\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class MyTestsClass {\n\n  @Test\n  public void testMethod() {\n    ...\n  }\n\n}\n```", "```java\npackage com.packt.cardatabase;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport com.packt.cardatabase.web.CarController;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class CardatabaseApplicationTests {\n  @Autowired\n  private CarController controller;\n\n  @Test\n  public void contextLoads() {\n    assertThat(controller).isNotNull();\n  }\n\n}\n```", "```java\npackage com.packt.cardatabase;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\nimport org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport com.packt.cardatabase.domain.Car;\nimport com.packt.cardatabase.domain.CarRepository;\n\n@RunWith(SpringRunner.class)\n@DataJpaTest\npublic class CarRepositoryTest {\n  @Autowired\n  private TestEntityManager entityManager;\n\n  @Autowired\n  private CarRepository repository;\n\n   // Test cases..\n}\n```", "```java\n  @Test\n  public void saveCar() {\n    Car car = new Car(\"Tesla\", \"Model X\", \"White\", \"ABC-1234\",\n        2017, 86000);\n    entityManager.persistAndFlush(car);\n\n    assertThat(car.getId()).isNotNull();\n  }\n```", "```java\n  @Test\n  public void deleteCars() {\n    entityManager.persistAndFlush(new Car(\"Tesla\", \"Model X\", \"White\",\n        \"ABC-1234\", 2017, 86000));\n    entityManager.persistAndFlush(new Car(\"Mini\", \"Cooper\", \"Yellow\",\n        \"BWS-3007\", 2015, 24500));\n\n    repository.deleteAll();\n    assertThat(repository.findAll()).isEmpty();\n  } \n```", "```java\npackage com.packt.cardatabase;\n\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\nimport static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport org.springframework.test.context.junit4.SpringRunner;\nimport org.springframework.test.web.servlet.MockMvc;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\n@AutoConfigureMockMvc\npublic class CarRestTest {\n  @Autowired\n    private MockMvc mockMvc;\n\n  @Test\n  public void testAuthentication() throws Exception {\n    // Testing authentication with correct credentials\n        this.mockMvc.perform(post(\"/login\")\n          .content(\"{\\\"username\\\":\\\"admin\\\", \\\"password\\\":\\\"admin\\\"}\")).\n          andDo(print()).andExpect(status().isOk());\n\n    // Testing authentication with wrong credentials\n        this.mockMvc.perform(post(\"/login\")\n          .content(\"{\\\"username\\\":\\\"admin\\\", \\\"password\\\":\\\"wrongpwd\\\"}\")).\n          andDo(print()).andExpect(status().is4xxClientError());\n\n  }\n\n}\n```"]