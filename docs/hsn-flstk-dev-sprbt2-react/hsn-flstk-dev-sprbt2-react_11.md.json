["```java\nnpm install @material-ui/core --save\n```", "```java\n// AddCar.js\nimport Button from '@material-ui/core/Button';\n```", "```java\n  render() {\n    return (\n      <div>\n        <SkyLight hideOnOverlayClicked ref=\"addDialog\">\n          <h3>New car</h3>\n          <form>\n            <input type=\"text\" placeholder=\"Brand\" name=\"brand\" \n            onChange={this.handleChange}/><br/> \n            <input type=\"text\" placeholder=\"Model\" name=\"model\" \n            onChange={this.handleChange}/><br/>\n            <input type=\"text\" placeholder=\"Color\" name=\"color\" \n            onChange={this.handleChange}/><br/>\n            <input type=\"text\" placeholder=\"Year\" name=\"year\" \n            onChange={this.handleChange}/><br/>\n            <input type=\"text\" placeholder=\"Price\" name=\"price\" \n            onChange={this.handleChange}/><br/><br/>\n            <Button variant=\"outlined\" color=\"primary\" \n            onClick={this.handleSubmit}>Save</Button> \n            <Button variant=\"outlined\" color=\"secondary\" \n            onClick={this.cancelSubmit}>Cancel</Button> \n          </form> \n        </SkyLight>\n        <div>\n            <Button variant=\"raised\" color=\"primary\" \n            style={{'margin': '10px'}} \n            onClick={() => this.refs.addDialog.show()}>\n            New Car</Button>\n        </div>\n      </div> \n    );\n```", "```java\n// Carlist.js render() method\nconst columns = [{\n  Header: 'Brand',\n  accessor: 'brand',\n  Cell: this.renderEditable\n}, {\n  Header: 'Model',\n  accessor: 'model',\n  Cell: this.renderEditable\n}, {\n  Header: 'Color',\n  accessor: 'color',\n  Cell: this.renderEditable\n}, {\n  Header: 'Year',\n  accessor: 'year',\n  Cell: this.renderEditable\n}, {\n  Header: 'Price \u20ac',\n  accessor: 'price',\n  Cell: this.renderEditable\n}, {\n  id: 'savebutton',\n  sortable: false,\n  filterable: false,\n  width: 100,\n  accessor: '_links.self.href',\n  Cell: ({value, row}) => (<Button size=\"small\" variant=\"flat\" color=\"primary\" \n    onClick={()=>{this.updateCar(row, value)}}>Save</Button>)\n}, {\n  id: 'delbutton',\n  sortable: false,\n  filterable: false,\n  width: 100,\n  accessor: '_links.self.href',\n  Cell: ({value}) => (<Button size=\"small\" variant=\"flat\" color=\"secondary\" \n    onClick={()=>{this.confirmDelete(value)}}>Delete</Button>)\n}]\n```", "```java\nimport Grid from '@material-ui/core/Grid';\n```", "```java\n// Carlist.js render() method\nreturn (\n  <div className=\"App\">\n    <Grid container>\n      <Grid item>\n        <AddCar addCar={this.addCar} fetchCars={this.fetchCars}/>\n      </Grid>\n      <Grid item style={{padding: 20}}>\n         <CSVLink data={this.state.cars} separator=\";\">Export CSV</CSVLink>\n      </Grid>\n    </Grid>\n\n    <ReactTable data={this.state.cars} columns={columns} \n      filterable={true} pageSize={10}/>\n    <ToastContainer autoClose={1500}/> \n  </div>\n);\n```", "```java\nimport TextField from '@material-ui/core/TextField';\n```", "```java\nrender() {\n  return (\n    <div>\n      <SkyLight hideOnOverlayClicked ref=\"addDialog\">\n        <h3>New car</h3>\n        <form>\n          <TextField label=\"Brand\" placeholder=\"Brand\" \n            name=\"brand\" onChange={this.handleChange}/><br/> \n          <TextField label=\"Model\" placeholder=\"Model\" \n            name=\"model\" onChange={this.handleChange}/><br/>\n          <TextField label=\"Color\" placeholder=\"Color\" \n            name=\"color\" onChange={this.handleChange}/><br/>\n          <TextField label=\"Year\" placeholder=\"Year\" \n            name=\"year\" onChange={this.handleChange}/><br/>\n          <TextField label=\"Price\" placeholder=\"Price\" \n            name=\"price\" onChange={this.handleChange}/><br/><br/>\n          <Button variant=\"outlined\" color=\"primary\" \n            onClick={this.handleSubmit}>Save</Button> \n          <Button variant=\"outlined\" color=\"secondary\" \n            onClick={this.cancelSubmit}>Cancel</Button> \n        </form> \n      </SkyLight>\n      <div>\n         <Button variant=\"raised\" color=\"primary\" \n            style={{'margin': '10px'}} \n            onClick={() => this.refs.addDialog.show()}>New Car</Button>\n      </div>\n    </div> \n  );\n```", "```java\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\n```", "```java\n// App.js\nimport React, { Component } from 'react';\nimport './App.css';\nimport Carlist from './components/Carlist';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <AppBar position=\"static\" color=\"default\">\n          <Toolbar>CarList</ Toolbar>\n        </ AppBar>\n        <Carlist /> \n      </div>\n    );\n  }\n}\n\nexport default App;\n```", "```java\nnpm remove react-toastify\n```", "```java\nimport Snackbar from '@material-ui/core/Snackbar';\n```", "```java\nconstructor(props) {\n  super(props);\n  this.state = { cars: [], open: false, message: ''};\n}\n```", "```java\n// Carlist.js render() method's return statement\nreturn (\n  <div className=\"App\">\n    <Grid container>\n      <Grid item>\n        <AddCar addCar={this.addCar} fetchCars={this.fetchCars}/>\n      </Grid>\n      <Grid item style={{padding: 20}}>\n        <CSVLink data={this.state.cars} separator=\";\">Export CSV</CSVLink>\n      </Grid>\n    </Grid>\n\n    <ReactTable data={this.state.cars} columns={columns} \n      filterable={true} pageSize={10}/>\n    <Snackbar \n      style = {{width: 300, color: 'green'}}\n      open={this.state.open} onClose={this.handleClose} \n      autoHideDuration={1500} message={this.state.message} />\n  </div>\n);\n```", "```java\nhandleClose = (event, reason) => {\n  this.setState({ open: false });\n};\n```", "```java\n// Delete car\nonDelClick = (link) => {\n  fetch(link, {method: 'DELETE'})\n  .then(res => {\n    this.setState({open: true, message: 'Car deleted'});\n    this.fetchCars();\n  })\n  .catch(err => {\n    this.setState({open: true, message: 'Error when deleting'});\n    console.error(err)\n  }) \n}\n\n// Update car\nupdateCar(car, link) {\n  fetch(link, \n  { method: 'PUT', \n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(car)\n  })\n  .then( res =>\n    this.setState({open: true, message: 'Changes saved'})\n  )\n  .catch( err => \n    this.setState({open: true, message: 'Error when saving'})\n  )\n}\n\n```"]