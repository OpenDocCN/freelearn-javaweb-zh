["```java\nnpm install component_name --save\n```", "```java\nyarn add component_name\n```", "```java\nnpm install react-tiny-virtual-list --save\n```", "```java\n{\n  \"name\": \"myapp\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"^16.3.2\",\n    \"react-dom\": \"^16.3.2\",\n    \"react-scripts\": \"1.1.4\",\n    \"react-tiny-virtual-list\": \"^2.1.4\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n```", "```java\n# See https://help.github.com/ignore-files/ for more about ignoring files.\n\n# dependencies\n/node_modules\n\n# testing\n/coverage\n\n# production\n/build\n\n# misc\n.DS_Store\n.env.local\n.env.development.local\n.env.test.local\n.env.production.local\n\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n```", "```java\nimport VirtualList from 'react-tiny-virtual-list';\n```", "```java\n npm install react-table --save\n```", "```java\n      import React, { Component } from 'react';\n      import './App.css';\n\n      class App extends Component {\n        constructor(props) {\n          super(props);\n          this.state = { keyword: '', data: [] };\n        }\n\n        fetchData = () => {\n          const url = `https://api.github.com/search/repositories?\n           q=${this.state.keyword}`;\n          fetch(url)\n```", "```java\n          .then(response => response.json()) \n          .then(responseData => {\n            this.setState({data : responseData.items }); \n          }); \n        }\n\n        handleChange = (e) => {\n          this.setState({keyword: e.target.value});\n        }\n\n        render() {\n          return (\n            <div className=\"App\">\n              <input type=\"text\" onChange={this.handleChange} />\n              <button onClick={this.fetchData} value=\n               {this.state.keyword} >Fetch</button>\n            </div>\n          );\n        }\n      }\n\n      export default App;\n```", "```java\n      import ReactTable from \"react-table\";\n      import 'react-table/react-table.css';\n```", "```java\n      <ReactTable\n        data={data}\n        columns={columns}\n      />\n```", "```java\n      const columns = [{\n         Header: 'Name',  // Header of the column  \n         accessor: 'full_name' // Value accessor\n        }, {\n         Header: 'URL',\n         accessor: 'html_url',\n        }, {\n         Header: 'Owner',\n         accessor: 'owner.login',\n      }]\n```", "```java\n      render() {\n        const columns = [{\n          Header: 'Name', // Header of the column\n          accessor: 'full_name' // Value accessor\n        }, {\n          Header: 'URL',\n          accessor: 'html_url',\n        }, {\n          Header: 'Owner',\n          accessor: 'owner.login',\n        }]\n\n        return (\n          <div className=\"App\">\n            <input type=\"text\" onChange={this.handleChange} />\n            <button onClick={this.fetchData} \n             value={this.state.keyword} >Fetch</button>\n            <ReactTable\n              data={this.state.data}\n              columns={columns}\n\n            />\n          </div>\n        );\n      }\n```", "```java\n<ReactTable\n   data={this.state.data}\n   columns={columns}\n   filterable={true}\n   defaultPageSize = {10}\n/>\n```", "```java\nrender() {\n  const columns = [{\n    Header: 'Name', // Header of the column\n    accessor: 'full_name' // Value accessor\n  }, {\n    Header: 'URL',\n    accessor: 'html_url',\n  }, {\n    Header: 'Owner',\n    accessor: 'owner.login',\n  }, {\n    id: 'button',\n    sortable: false,\n    filterable: false,\n    width: 100,\n    accessor: 'full_name',\n```", "```java\n    Cell: ({value}) => (<button className=\"btn btn-default btn-link\" onClick=                            {() => {this.btnClick(value)}}>Press me</button>)\n}]\n```", "```java\n npm install react-skylight --save\n```", "```java\n      constructor(props) {\n        super(props);\n        this.state={ items: [] };\n      }\n\n      addItem = (item) => {\n        this.setState({items: [item, ...this.state.items]});\n      }\n```", "```java\nimport React, { Component } from 'react';\nimport SkyLight from 'react-skylight';\n\nclass AddItem extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  // Create new shopping item and calls addItem function. \n  // Finally close the modal form\n  addItem = () => {\n    const item = {product: this.state.product,\n     amount: this.state.amount};\n    this.props.additem(item);\n    this.addform.hide();\n  }\n\n  handleChange = (e) => {\n    this.setState({[e.target.name]: e.target.value});\n  }\n\n  render() {\n    return (\n      <div>\n        <section>\n          <button onClick={() => this.addform.show()}>Add\n           Item</button>\n        </section>\n        <SkyLight \n          hideOnOverlayClicked \n          ref={ref => this.addform = ref} \n          title=\"Add item\">\n          <input type=\"text\" name=\"product\"\n           onChange={this.handleChange} \n           placeholder=\"product\" /><br/>\n          <input type=\"text\" name=\"amount\"\n           onChange={this.handleChange} \n           placeholder=\"amount\" /><br/>\n          <button onClick={this.addItem}>Add</button>\n        </SkyLight> \n      </div>\n    );\n  }\n}\n\nexport default AddItem;\n```", "```java\n// App.js\nrender() {\n  const listItems = this.state.items.map((item, index) => \n    <li key={index}>{item.product} {item.amount}</li>)\n\n  return (\n    <div className=\"App\">\n      <h2>Shopping list</h2>\n      <AddItem additem={this.addItem}/>\n      <ul>{listItems}</ul>\n    </div>\n  );\n}\n```", "```java\nnpm install @material-ui/core --save\n\nOR with yarn\n\nyarn add @material-ui/core\n```", "```java\n// Import RaisedButton\nimport RaisedButton from '@material-ui/core/Button';\n\n// Use RaisedButton in render() method\nrender() {\n  return (\n    <div>\n      <section>\n        <Button onClick={() => this.addform.show()} \n         variant=\"raised\" color=\"primary\">\n         Add Item</ Button>\n      </section>\n      <SkyLight \n        hideOnOverlayClicked \n        ref={ref => this.addform = ref} \n        title=\"Add item\">\n        <input type=\"text\" name=\"product\" \n         onChange={this.handleChange} \n         placeholder=\"product\" /><br/>\n        <input type=\"text\" name=\"amount\" \n         onChange={this.handleChange} \n         placeholder=\"amount\" /><br/>\n        <Button onClick={this.addItem} \n         variant=\"default\"  >Add</ Button>\n      </SkyLight> \n    </div>\n  );\n}\n```", "```java\n// Import TextField component\nimport TextField from '@material-ui/core/TextField';\n\n// Use TextField in render() method\nrender() {\n  return (\n    <div>\n      <section>\n        <Button onClick={() => this.addform.show()} \n         variant=\"raised\" color=\"primary\">\n         Add Item</ Button>\n      </section>\n      <SkyLight \n        hideOnOverlayClicked \n        ref={ref => this.addform = ref} \n        title=\"Add item\">\n        <TextField type=\"text\" name=\"product\" \n          onChange={this.handleChange} \n          placeholder=\"product\" /><br/>\n        <TextField type=\"text\" name=\"amount\" \n          onChange={this.handleChange} \n          placeholder=\"amount\" /><br/>\n        <Button onClick={this.addItem} \n         variant=\"default\"  >Add</ Button>     \n      </SkyLight> \n    </div>\n  );\n}\n```", "```java\n// Import List, ListItem and ListItemText components\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\n// Use List and ListItem in render() method\nrender() {\n // Use ListItem component here instead of li \n    const listItems = this.state.items.map((item, index) => \n     <ListItem key={index}>\n     <ListItemText primary={item.product} secondary={item.amount} />\n     </ListItem>)\n  return (\n    <div className=\"App\">\n      <h2>Shopping list</h2>\n      <AddItem additem={this.addItem}/>\n      <List>{listItems}</List>\n    </div>\n  );\n}\n```", "```java\nnpm install react-router-dom --save\n```", "```java\n<Route path=\"/contact\" component={Contact} />\n// Route with inline rendering\n<Route path=\"/links\" render={() => <h1>Links</h1>} />\n```", "```java\n<Link to=\"/contact\">Contact</Link>\n```", "```java\nimport React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter, Switch, Route, Link } from 'react-router-dom'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      </div>\n    );\n  }\n}\n\nexport default App;\n```", "```java\n//Contact.js\nimport React, { Component } from 'react';\n\nclass Contact extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Contact.js</h1>\n      </div>\n    );\n  }\n}\n\nexport default Contact;\n\n// Home.js\nimport React, { Component } from 'react';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Home.js</h1>\n      </div>\n    );\n  }\n}\n\nexport default Links;\n```", "```java\nimport React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter, Switch, Route, Link } from 'react-router-dom'\nimport Contact from './Contact';\nimport Home from './Home';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <BrowserRouter>\n          <div>\n            <Link to=\"/\">Home</Link>{' '}\n            <Link to=\"/contact\">Contact</Link>{' '} \n            <Link to=\"/links\">Links</Link>{' '} \n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route path=\"/contact\" component={Contact} />\n              <Route path=\"/links\" render={() => <h1>Links</h1>} />\n              <Route render={() => <h1>Page not found</h1>} />\n            </Switch>\n          </div>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```"]