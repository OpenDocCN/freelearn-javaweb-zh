["```java\nimport React, { Component } from 'react';\n\nclass Carlist extends Component {\n\n  render() {\n    return (\n      <div></div>\n    );\n  }\n}\n\nexport default Carlist;\n```", "```java\nconstructor(props) {\n  super(props);\n  this.state = { cars: []};\n} \n```", "```java\n  componentDidMount() {\n    fetch('http://localhost:8080/api/cars')\n    .then((response) => response.json()) \n    .then((responseData) => { \n      this.setState({ \n        cars: responseData._embedded.cars,\n      }); \n    })\n    .catch(err => console.error(err)); \n  }\n```", "```java\nrender() {\n  const tableRows = this.state.cars.map((car, index) => \n    <tr key={index}>\n      <td>{car.brand}</td>\n      <td>{car.model}</td>\n      <td>{car.color}</td>\n      <td>{car.year}</td>\n      <td>{car.price}</td>\n    </tr>\n  );\n\n  return (\n    <div className=\"App\">\n      <table>\n        <tbody>{tableRows}</tbody>\n      </table>\n    </div>\n  );\n}\n```", "```java\nexport const SERVER_URL = 'http://localhost:8080/'\n```", "```java\n//Carlist.js\n// Import server url (named import)\nimport {SERVER_URL} from '../constants.js'\n\n// Use imported constant in the fetch method\nfetch(SERVER_URL + 'api/cars')\n```", "```java\nimport React, { Component } from 'react';\nimport {SERVER_URL} from '../constants.js'\n\nclass Carlist extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { cars: []};\n  }\n\n  componentDidMount() {\n    fetch(SERVER_URL + 'api/cars')\n    .then((response) => response.json()) \n    .then((responseData) => { \n      this.setState({ \n        cars: responseData._embedded.cars,\n      }); \n    })\n    .catch(err => console.error(err)); \n  }\n\n  render() {\n    const tableRows = this.state.cars.map((car, index) => \n      <tr key={index}><td>{car.brand}</td>\n       <td>{car.model}</td><td>{car.color}</td>\n       <td>{car.year}</td><td>{car.price}</td></tr>);\n\n    return (\n      <div className=\"App\">\n        <table><tbody>{tableRows}</tbody></table>\n      </div>\n    );\n  }\n}\n\nexport default Carlist;\n```", "```java\nnpm install react-table --save\n```", "```java\nimport ReactTable from \"react-table\";\nimport 'react-table/react-table.css';\n```", "```java\n  render() {\n    const columns = [{\n      Header: 'Brand',\n      accessor: 'brand'\n    }, {\n      Header: 'Model',\n      accessor: 'model',\n    }, {\n      Header: 'Color',\n      accessor: 'color',\n    }, {\n      Header: 'Year',\n      accessor: 'year',\n    }, {\n      Header: 'Price \u20ac',\n      accessor: 'price',\n    },]\n\n    return (\n      <div className=\"App\">\n        <ReactTable data={this.state.cars} columns={columns} \n          filterable={true}/>\n      </div>\n    );\n  }\n```", "```java\n  const columns = [{\n    Header: 'Brand',\n    accessor: 'brand'\n  }, {\n    Header: 'Model',\n    accessor: 'model',\n  }, {\n    Header: 'Color',\n    accessor: 'color',\n  }, {\n    Header: 'Year',\n    accessor: 'year',\n  }, {\n    Header: 'Price \u20ac',\n    accessor: 'price',\n  }, {\n    id: 'delbutton',\n    sortable: false,\n    filterable: false,\n    width: 100,\n    accessor: '_links.self.href',\n    Cell: ({value}) => (<button onClick={()=>{this.onDelClick(value)}}>Delete</button>)\n  }]\n```", "```java\ncomponentDidMount() {\n  this.fetchCars();\n}\n\nfetchCars = () => {\n  fetch(SERVER_URL + 'api/cars')\n  .then((response) => response.json()) \n  .then((responseData) => { \n    this.setState({ \n      cars: responseData._embedded.cars,\n    }); \n  })\n  .catch(err => console.error(err)); \n}\n```", "```java\n// Delete car\nonDelClick = (link) => {\n  fetch(link, {method: 'DELETE'})\n  .then(res => this.fetchCars())\n  .catch(err => console.error(err)) \n}\n```", "```java\nnpm install react-toastify --save\n```", "```java\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n```", "```java\nreturn (\n  <div className=\"App\">\n     <ReactTable data={this.state.cars} columns={columns} \n       filterable={true}/>\n     <ToastContainer autoClose={1500} } /> \n   </div>\n);\n```", "```java\n// Delete car\nonDelClick = (link) => {\n  fetch(link, {method: 'DELETE'})\n  .then(res => {\n    toast.success(\"Car deleted\", {\n      position: toast.POSITION.BOTTOM_LEFT\n    });\n    this.fetchCars();\n  })\n  .catch(err => {\n    toast.error(\"Error when deleting\", {\n      position: toast.POSITION.BOTTOM_LEFT\n    });\n    console.error(err)\n  }) \n }\n```", "```java\nnpm install react-confirm-alert --save\n```", "```java\nimport { confirmAlert } from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css' \n```", "```java\nconfirmDelete = (link) => {\n  confirmAlert({\n    message: 'Are you sure to delete?',\n    buttons: [\n      {\n        label: 'Yes',\n        onClick: () => this.onDelClick(link)\n      },\n      {\n        label: 'No',\n      }\n    ]\n  })\n}\n```", "```java\nrender() {\n  const columns = [{\n    Header: 'Brand',\n    accessor: 'brand',\n  }, {\n    Header: 'Model',\n    accessor: 'model',\n  }, {\n    Header: 'Color',\n    accessor: 'color',\n  }, {\n    Header: 'Year',\n    accessor: 'year',\n  }, {\n    Header: 'Price \u20ac',\n    accessor: 'price',\n  }, {\n    id: 'delbutton',\n    sortable: false,\n    filterable: false,\n    width: 100,\n    accessor: '_links.self.href',\n    Cell: ({value}) => (<button onClick=\n      {()=>{this.confirmDelete(value)}}>Delete</button>)\n  }]\n```", "```java\nnpm install react-skylight --save \n```", "```java\nimport React from 'react';\nimport SkyLight from 'react-skylight';\n\nclass AddCar extends React.Component {\n  render() {\n    return (\n      <div>\n      </div> \n    );\n  }\n}\n\nexport default AddCar;\n```", "```java\nconstructor(props) {\n   super(props);\n   this.state = {brand: '', model: '', year: '', color: '', price: ''};\n}\n```", "```java\nhandleChange = (event) => {\n   this.setState(\n     {[event.target.name]: event.target.value}\n   );\n}\n\nrender() {\n    return (\n      <div>\n        <SkyLight hideOnOverlayClicked ref=\"addDialog\">\n          <h3>New car</h3>\n          <form>\n            <input type=\"text\" placeholder=\"Brand\" name=\"brand\" \n              onChange={this.handleChange}/><br/> \n            <input type=\"text\" placeholder=\"Model\" name=\"model\" \n              onChange={this.handleChange}/><br/>\n            <input type=\"text\" placeholder=\"Color\" name=\"color\" \n              onChange={this.handleChange}/><br/>\n            <input type=\"text\" placeholder=\"Year\" name=\"year\" \n              onChange={this.handleChange}/><br/>\n            <input type=\"text\" placeholder=\"Price\" name=\"price\" \n              onChange={this.handleChange}/><br/>\n            <button onClick={this.handleSubmit}>Save</button>\n            <button onClick={this.cancelSubmit}>Cancel</button>     \n          </form> \n        </SkyLight>\n        <div>\n            <button style={{'margin': '10px'}} \n              onClick={() => this.refs.addDialog.show()}>New car</button>\n        </div>\n      </div> \n    );\n```", "```java\nimport AddCar from './AddCar.js';\n```", "```java\n// Add new car\naddCar(car) {\n  fetch(SERVER_URL + 'api/cars', \n    { method: 'POST', \n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(car)\n    })\n  .then(res => this.fetchCars())\n  .catch(err => console.error(err))\n} \n```", "```java\n// Carlist.js \nreturn (\n  <div className=\"App\">\n    <AddCar addCar={this.addCar} fetchCars={this.fetchCars}/>\n    <ReactTable data={this.state.cars} columns={columns} \n      filterable={true} pageSize={10}/>\n    <ToastContainer autoClose={1500}/> \n  </div>\n);\n```", "```java\n// Save car and close modal form\nhandleSubmit = (event) => {\n   event.preventDefault();\n   var newCar = {brand: this.state.brand, model: this.state.model, \n     color: this.state.color, year: this.state.year, \n     price: this.state.price};\n   this.props.addCar(newCar); \n   this.refs.addDialog.hide(); \n}\n\n// Cancel and close modal form\ncancelSubmit = (event) => {\n  event.preventDefault(); \n  this.refs.addDialog.hide(); \n}\n```", "```java\nrenderEditable = (cellInfo) => {\n  return (\n    <div\n      style={{ backgroundColor: \"#fafafa\" }}\n      contentEditable\n      suppressContentEditableWarning\n      onBlur={e => {\n        const data = [...this.state.cars];\n        data[cellInfo.index][cellInfo.column.id] = \n         e.target.innerHTML;\n        this.setState({ cars: data });\n      }}\n      dangerouslySetInnerHTML={{\n        __html: this.state.cars[cellInfo.index][cellInfo.column.id]\n      }} \n    />\n  );\n} \n```", "```java\nconst columns = [{\n  Header: 'Brand',\n  accessor: 'brand',\n  Cell: this.renderEditable\n}, {\n  Header: 'Model',\n  accessor: 'model',\n  Cell: this.renderEditable\n}, {\n  Header: 'Color',\n  accessor: 'color',\n  Cell: this.renderEditable\n}, {\n  Header: 'Year',\n  accessor: 'year',\n  Cell: this.renderEditable\n}, {\n  Header: 'Price \u20ac',\n  accessor: 'price',\n  Cell: this.renderEditable\n}, {\n  id: 'delbutton',\n  sortable: false,\n  filterable: false,\n  width: 100,\n  accessor: '_links.self.href',\n  Cell: ({value}) => (<button onClick={()=>{this.onDelClick(value)}}>Delete</button>)\n}]\n```", "```java\n// Update car\nupdateCar(car, link) {\n  fetch(link, \n  { method: 'PUT', \n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(car)\n  })\n  .then( res =>\n    toast.success(\"Changes saved\", {\n      position: toast.POSITION.BOTTOM_LEFT\n    }) \n  )\n  .catch( err => \n    toast.error(\"Error when saving\", {\n      position: toast.POSITION.BOTTOM_LEFT\n    }) \n  )\n}\n```", "```java\nconst columns = [{\n  Header: 'Brand',\n  accessor: 'brand',\n  Cell: this.renderEditable\n}, {\n  Header: 'Model',\n  accessor: 'model',\n  Cell: this.renderEditable\n}, {\n  Header: 'Color',\n  accessor: 'color',\n  Cell: this.renderEditable\n}, {\n  Header: 'Year',\n  accessor: 'year',\n  Cell: this.renderEditable\n}, {\n  Header: 'Price \u20ac',\n  accessor: 'price',\n  Cell: this.renderEditable\n}, {\n  id: 'savebutton',\n  sortable: false,\n  filterable: false,\n  width: 100,\n  accessor: '_links.self.href',\n  Cell: ({value, row}) => \n    (<button onClick={()=>{this.updateCar(row, value)}}>\n     Save</button>)\n}, {\n  id: 'delbutton',\n  sortable: false,\n  filterable: false,\n  width: 100,\n  accessor: '_links.self.href',\n  Cell: ({value}) => (<button onClick=\n    {()=>{this.onDelClick(value)}}>Delete</button>)\n}]\n```", "```java\nnpm install react-csv --save\n```", "```java\nimport { CSVLink } from 'react-csv';\n```", "```java\n// Carlist.js render() method\nreturn (\n  <div className=\"App\">\n    <CSVLink data={this.state.cars} separator=\";\">Export CSV</CSVLink>\n    <AddCar addCar={this.addCar} fetchCars={this.fetchCars}/>\n    <ReactTable data={this.state.cars} columns={columns} \n       filterable={true} pageSize={10}/>\n    <ToastContainer autoClose={6500}/> \n  </div>\n);\n```"]