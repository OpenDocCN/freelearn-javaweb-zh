["```java\n// Using JavaScript function\nfunction Hello() {\n  return <h1>Hello World</h1>;\n}\n```", "```java\n// Using ES6 class\nclass Hello extends React.Component {\n  render() {\n    return <h1>Hello World</h1>;\n  }\n}\n```", "```java\nclass App extends Component {\n  render() {\n    return (\n      <h1>Hello World!</h1>\n      <h2>From my first React app</h2>\n    );\n  }\n}\n```", "```java\n// Wrap headers in div\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Hello World!</h1>\n        <h2>From my first React app</h2>\n      </div>\n    );\n  }\n}\n\n// Or using fragments\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <h1>Hello World!</h1>\n        <h2>From my first React app</h2>\n      </>\n    );\n  }\n}\n\n```", "```java\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n```", "```java\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1,\n     shrink-to-fit=no\">\n    <meta name=\"theme-color\" content=\"#000000\">\n\n    <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\">\n    <link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n\n    <title>React App</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n```", "```java\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to React</h1>\n        </header>\n        <p className=\"App-intro\">\n          To get started, edit <code>src/App.js</code> and save to reload.\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```", "```java\nimport React from 'react' // Import default value\nimport { Component } from 'react' // Import named value\n```", "```java\nexport default React // Default export\nexport {Component} // Named export\n```", "```java\nconst PI = 3.14159;\n```", "```java\nvar count = 10;\nif(count > 5) {\n  const total = count * 2;\n  console.log(total); // Prints 20 to console\n}\nconsole.log(total); // Error, outside the scope\n```", "```java\nconst myObj = {foo : 3};\nmyObj.foo = 5; // This is ok\n```", "```java\nfunction hello(greeting) {\n    return greeting;\n}\n```", "```java\nconst hello = greeting => { greeting }\n\n// function call\nhello('Hello World'); // returns Hello World\n```", "```java\nconst calcSum = (x, y) => { x + y }\n\n// function call\ncalcSum(2, 3); // returns 5\n```", "```java\n() => { ... }\n```", "```java\nvar person = {firstName: 'John', lastName: 'Johnson'};\nvar greeting = \"Hello \" + ${person.firstName} + \" \" + ${person.lastName};\n```", "```java\nvar person = {firstName: 'John', lastName: 'Johnson'};\nvar greeting = `Hello ${person.firstName} ${person.lastName}`;\n```", "```java\nclass Person {\n    constructor(firstName, lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }  \n}\n```", "```java\nclass Employee extends Person {\n    constructor(firstName, lastName, title, salary) {\n        super(firstName, lastName);\n        this.title= title;\n        this.salary = salary;\n    }  \n}\n```", "```java\nclass Hello extends React.Component {\n  render() {\n    return <h1>Hello World {this.props.user}</h1>;\n  }\n}\n```", "```java\n<Hello count={2+2} />\n```", "```java\n<div style={{height: 20, width: 200}}>\n  Hello\n</div>\n```", "```java\nconst divStyle = {\n  color: 'red',\n  height: 30\n};\n\nconst MyComponent = () => (\n  <div style={divStyle}>Hello</div>\n);\n```", "```java\nimport './App.js';\n\n...\n\n<div className=\"App-header\">\n  This is my app\n</div>\n```", "```java\nclass Hello extends React.Component {\n  render() {\n    return <h1>Hello World {this.props.user}</h1>;\n  }\n}\n```", "```java\n<Hello user=\"John\" />\n```", "```java\nclass Hello extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {user: 'John'}\n  }\n\n  render() {\n    return <h1>Hello World {this.state.user}</h1>;\n  }\n}\n```", "```java\n  constructor(props) {\n    super(props);\n    this.state = {firstName: 'John', lastName: 'Johnson', age: 30}\n  }\n```", "```java\nthis.setState({firstName: 'Jim', age: 31});  // Change state value\n```", "```java\nthis.state.firstName = 'Jim'; // WRONG\n```", "```java\nexport default class MyTitle extends Component {\n  render() {\n    return (\n     <div>\n      <h1>{this.props.text}</h1>\n     </div>\n    );\n };\n};\n\n// The MyTitle component can be then used in other component and text value is passed to props\n<MyTitle text=\"Hello\" />\n// Or you can use other component's state\n<MyTitle text={this.state.username} />\n```", "```java\n// This solution might not work correctly\nincerementCounter = () => {\n this.setState({count: this.state.count + 1});\n}\n\n// The correct way is the following\nincrementCounter = () => {\n  this.setState((prevState) => {\n    return {count: prevState.count + 1}\n  });\n}\n```", "```java\nclass Hello extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {user: 'John'}\n  }\n\n  componentDidMount() {\n    this.setState({user: 'Jim'});\n  }\n\n  render() {\n    return <h1>Hello World {this.state.user}</h1>;\n  }\n}\n```", "```java\nshouldComponentUpdate(nextProps, nextState) {\n  // This function should return a boolean, whether the component should re-render.\n  return true; \n}\n```", "```java\nconst arr = [1, 2, 3, 4];\n\nconst resArr = arr.map(x => x * 2); // resArr = [2, 4, 6, 8]\n```", "```java\nclass App extends React.Component {\n  render() { \n    const data = [1, 2, 3, 4, 5];\n    const rows = data.map((number, index) =>\n     <li key={index}>Listitem {number}</li>\n    );\n\n    return (\n     <div>\n      <ul>{rows}</ul>\n     </div>\n    );\n  }\n}\n```", "```java\nclass App extends Component {\n  render() { \n    const data = [{brand: 'Ford', model: 'Mustang'}, \n    {brand:'VW', model: 'Beetle'}, {brand: 'Tesla', model: 'Model S'}];\n    const tableRows = data.map((item, index) =>\n     <tr key={index}><td>{item.brand}</td><td>{item.model}</td></tr>\n    );\n\n    return (\n     <div>\n      <table><tbody>{tableRows}</tbody></table>\n     </div>\n    );\n  }\n}\n```", "```java\nclass App extends React.Component {\n  // This is called when the button is pressed\n  buttonPressed = () => {\n    alert('Button pressed');\n  }\n\n  render() { \n    return (\n     <div>\n      <button onClick={this.buttonPressed}>Press Me</button>\n     </div>\n    );\n  }\n}\n```", "```java\nclass MyForm extends React.Component {\n  // This is called when the form is submitted\n  handleSubmit(event) {\n    alert('Form submit');\n    event.preventDefault();  // Prevents default behavior\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n```", "```java\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {text: ''};\n  }\n\n  // Save input box value to state when it has been changed\n  inputChanged = (event) => {\n    this.setState({text: event.target.value});\n  }\n\n  handleSubmit = (event) => {\n    alert(`You typed: ${this.state.text}`);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input type=\"text\" onChange={this.inputChanged} \n            value={this.state.text}/>\n        <input type=\"submit\" value=\"Press me\"/>\n      </form>\n    );\n  } \n}\n```", "```java\n inputChanged = (event) => {\n    this.setState({[event.target.name]: event.target.value});\n  }\n```", "```java\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {firstName: '', lastName: '', email: ''};\n  }\n\n  inputChanged = (event) => {\n    this.setState({[event.target.name]: event.target.value});\n  }\n\n  handleSubmit = (event) => {\n    alert(`Hello ${this.state.firstName} ${this.state.lastName}`);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>First name </label>\n        <input type=\"text\" name=\"firstName\" onChange={this.inputChanged} \n            value={this.state.firstName}/><br/>\n        <label>Last name </label>\n        <input type=\"text\" name=\"lastName\" onChange={this.inputChanged} \n            value={this.state.lastName}/><br/>\n        <label>Email </label>\n        <input type=\"email\" name=\"email\" onChange={this.inputChanged} \n            value={this.state.email}/><br/>\n        <input type=\"submit\" value=\"Press me\"/>\n      </form>\n    );\n  } \n}\n```"]