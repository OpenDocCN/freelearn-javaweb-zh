["```java\n    String query = \"SELECT COUNT(*) FROM ACCOUNT\";\n\n    try (Connection conn = dataSource.getConnection();\n        Statement statement = conn.createStatement(); \n        ResultSet rsltSet = statement.executeQuery(query)) \n        {\n        if(rsltSet.next()){ \n int count = rsltSet.getInt(1); System.out.println(\"count : \" + count);\n        }\n      } catch (SQLException e) {\n        // TODO Auto-generated catch block\n            e.printStackTrace();\n      }      \n  }\n```", "```java\njdbcTemplate = new JdbcTemplate(dataSource);\nint count = jdbcTemplate.queryForObject(\"SELECT COUNT(*) FROM CUSTOMER\", Integer.class);\n```", "```java\n <dependency>\n   <groupId>org.springframework</groupId>\n   <artifactId>spring-jdbc</artifactId>\n   <version>${spring.framework.version}</version>\n </dependency>\n```", "```java\n <dependency>\n   <groupId>org.postgresql</groupId>\n   <artifactId>postgresql</artifactId>\n   <version>42.2.1</version>\n </dependency>\n```", "```java\nCREATE TABLE account\n(\n  accountNumber numeric(10,0) NOT NULL, \n  accountName character varying(60) NOT NULL,\n  CONSTRAINT accountNumber_key PRIMARY KEY (accountNumber)\n)\nWITH (\n  OIDS=FALSE\n);\n```", "```java\npackage com.packt.springhighperformance.ch5.bankingapp.model;\n\npublic class Account {\n  private String accountName;\n  private Integer accountNumber;\n\n  public String getAccountName() {\n    return accountName;\n  }\n\n  public void setAccountName(String accountName) {\n    this.accountName = accountName;\n  }\n\n  public Integer getAccountNumber() {\n    return accountNumber;\n  }\n\n  public void setAccountNumber(Integer accountNumber) {\n    this.accountNumber = accountNumber;\n  }\n  @Override\n  public String toString(){\n    return \"{accountNumber=\"+accountNumber+\",accountName\n    =\"+accountName+\"}\";\n  }\n}\n```", "```java\npublic interface AccountDao { \n    public void insertAccountWithJdbcTemplate(Account account);\n    public Account getAccountdetails();    \n}\n```", "```java\n@Configuration\npublic class AppConfig{\n  @Bean\n  public DataSource dataSource() {\n    DriverManagerDataSource dataSource = new DriverManagerDataSource();\n    // PostgreSQL database we are using...\n    dataSource.setDriverClassName(\"org.postgresql.Driver\");\n    dataSource.setUrl(\"jdbc:postgresql://localhost:5432/TestDB\");\n    dataSource.setUsername(\"test\");\n    dataSource.setPassword(\"test\");\n    return dataSource;\n  }\n\n  @Bean\n  public JdbcTemplate jdbcTemplate() {\n    JdbcTemplate jdbcTemplate = new JdbcTemplate();\n    jdbcTemplate.setDataSource(dataSource());\n    return jdbcTemplate;\n  }\n\n  @Bean\n  public AccountDao accountDao() {\n    AccountDaoImpl accountDao = new AccountDaoImpl();\n    accountDao.setJdbcTemplate(jdbcTemplate());\n    return accountDao;\n  }\n\n}\n```", "```java\n@Repository\npublic class AccountDaoImpl implements AccountDao {\n  private static final Logger LOGGER = \n  Logger.getLogger(AccountDaoImpl.class);\n\n  private JdbcTemplate jdbcTemplate;\n\n  public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {\n    this.jdbcTemplate = jdbcTemplate;\n  }\n\n  @Override\n  public void insertAccountWithJdbcTemplate(Account account) {\n    String query = \"INSERT INTO ACCOUNT (accountNumber,accountName) \n    VALUES (?,?)\";\n\n    Object[] inputs = new Object[] { account.getAccountNumber(), \n    account.getAccountName() };\n    jdbcTemplate.update(query, inputs);\n    LOGGER.info(\"Inserted into Account Table Successfully\");\n  }\n\n  @Override\n  public Account getAccountdetails() {\n    String query = \"SELECT accountNumber, accountName FROM ACCOUNT \n    \";\n    Account account = jdbcTemplate.queryForObject(query, new \n    RowMapper<Account>(){\n      public Account mapRow(ResultSet rs, int rowNum)\n          throws SQLException {\n            Account account = new Account();\n            account.setAccountNumber(rs.getInt(\"accountNumber\"));\n            account.setAccountName(rs.getString(\"accountName\")); \n            return account;\n      }});\n    LOGGER.info(\"Account Details : \"+account);\n    return account; \n  }\n}\n```", "```java\npublic class MainApp {\n\n  public static void main(String[] args) throws SQLException {\n    AnnotationConfigApplicationContext applicationContext = new                             \n    AnnotationConfigApplicationContext(\n    AppConfig.class);\n    AccountDao accountDao = \n    applicationContext.getBean(AccountDao.class);\n    Account account = new Account();\n    account.setAccountNumber(101);\n    account.setAccountName(\"abc\");\n    accountDao.insertAccountWithJdbcTemplate(account);\n    accountDao.getAccountdetails();\n    applicationContext.close();\n  }\n}\n```", "```java\nMay 15, 2018 7:34:33 PM org.springframework.context.support.AbstractApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@6d5380c2: startup date [Tue May 15 19:34:33 IST 2018]; root of context hierarchy\nMay 15, 2018 7:34:33 PM org.springframework.jdbc.datasource.DriverManagerDataSource setDriverClassName\nINFO: Loaded JDBC driver: org.postgresql.Driver\n2018-05-15 19:34:34 INFO AccountDaoImpl:36 - Inserted into Account Table Successfully\n2018-05-15 19:34:34 INFO AccountDaoImpl:52 - Account Details : {accountNumber=101,accountName=abc}\nMay 15, 2018 7:34:34 PM org.springframework.context.support.AbstractApplicationContext doClose\nINFO: Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@6d5380c2: startup date [Tue May 15 19:34:33 IST 2018]; root of context hierarchy\n```", "```java\nCREATE TABLE customer\n(\n  customer_ID numeric(10,0) NOT NULL, \n  accountName character varying(60) NOT NULL,\n  accountNumber numeric(10,0) NOT NULL,\n  customer_Image bytea\n);\n```", "```java\nCREATE TABLE customer\n(\n  customer_Id numeric(10,0) NOT NULL, \n  accountName character varying(60) NOT NULL,\n  accountNumber numeric(10,0) NOT NULL\n);\n\nCREATE TABLE customer_Image\n(\n  customer_Image_ID numeric(10,0) NOT NULL, \n  customer_Id numeric(10,0) NOT NULL, \n  customer_Image bytea\n);\n```", "```java\n@Configuration\n@EnableTransactionManagement\npublic class AppConfig {\n    @Bean\n    public DataSource dataSource() {\n        DriverManagerDataSource dataSource = new \n        DriverManagerDataSource(); \n        dataSource.setDriverClassName(\"org.postgresql.Driver\");\n        dataSource.setUrl(\"jdbc:postgresql:\n        //localhost:5432/TestDB\");\n        dataSource.setUsername(\"test\");\n        dataSource.setPassword(\"test\");\n        return dataSource;\n    }\n\n    @Bean\n    public JdbcTemplate jdbcTemplate() {\n        JdbcTemplate jdbcTemplate = new JdbcTemplate();\n        jdbcTemplate.setDataSource(dataSource());\n        return jdbcTemplate;\n    }\n\n    @Bean\n    public AccountDao accountDao(){\n      AccountDaoImpl accountDao = new AccountDaoImpl();\n      accountDao.setJdbcTemplate(jdbcTemplate());\n      return accountDao;\n    }\n\n    @Bean\n    public PlatformTransactionManager transactionManager() {\n        DataSourceTransactionManager transactionManager = new                                             \n        DataSourceTransactionManager();\n        transactionManager.setDataSource(dataSource());\n        return transactionManager;\n    }\n\n}\n```", "```java\n@Repository\npublic class AccountDaoImpl implements AccountDao {\n  private static final Logger LOGGER =             \n  Logger.getLogger(AccountDaoImpl.class);  \n  private JdbcTemplate jdbcTemplate; \n\n  public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {\n    this.jdbcTemplate = jdbcTemplate;\n  }\n\n  @Override\n  @Transactional\n  public void insertAccountWithJdbcTemplate(Account account) {\n    String query = \"INSERT INTO ACCOUNT (accountNumber,accountName) \n    VALUES (?,?)\";    \n    Object[] inputs = new Object[] { account.getAccountNumber(),                                 \n    account.getAccountName() };\n    jdbcTemplate.update(query, inputs);\n    LOGGER.info(\"Inserted into Account Table Successfully\");\n    throw new RuntimeException(\"simulate Error condition\");\n  }\n}\n```", "```java\npublic class MainApp {\n\n  private static final Logger LOGGER = Logger.getLogger(MainApp.class);\n\n  public static void main(String[] args) throws SQLException {\n    AnnotationConfigApplicationContext applicationContext = new \n    AnnotationConfigApplicationContext(\n    AppConfig.class);\n\n    AccountDao accountDao = \n    applicationContext.getBean(AccountDao.class); \n    Account account = new Account();\n    account.setAccountNumber(202);\n    account.setAccountName(\"xyz\");\n    accountDao.insertAccountWithJdbcTemplate(account); \n    applicationContext.close();\n  }\n}\n```", "```java\nINFO: Loaded JDBC driver: org.postgresql.Driver\n2018-04-09 23:24:09 INFO AccountDaoImpl:36 - Inserted into Account Table Successfully\nException in thread \"main\" java.lang.RuntimeException: simulate Error condition at com.packt.springhighperformance.ch5.bankingapp.dao.Impl.AccountDaoImpl.insertAccountWithJdbcTemplate(AccountDaoImpl.java:37)\n```", "```java\n@Autowired\nprivate AccountDao accountDao;\n\n@Transactional(isolation=Isolation.READ_UNCOMMITTED)\npublic void someTransactionalMethod(User user) {\n\n  // Interact with accountDao\n\n} \n```", "```java\nPreparedStatement stmt = null;\nResultSet rs = null;\n\ntry \n{\n  stmt = conn. prepareStatement(\"SELECT a, b, c FROM TABLE\");\n  stmt.setFetchSize(200);\n\n  rs = stmt.executeQuery();\n  while (rs.next()) {\n    ...\n  }\n}\n```", "```java\nJdbcTemplate jdbc = new JdbcTemplate(dataSource);\njdbc.setFetchSize(200);\n```", "```java\n<Resource type=\"javax.sql.DataSource\"\n            name=\"jdbc/TestDB\"\n            factory=\"org.apache.tomcat.jdbc.pool.DataSourceFactory\"\n            driverClassName=\"org.postgresql.Driver\"\n            url=\"jdbc:postgresql://localhost:5432/TestDB\"\n            username=\"test\"\n            password=\"test\"\n/>\n```", "```java\n<Resource type=\"javax.sql.DataSource\"\n            name=\"jdbc/TestDB\"\n            factory=\"org.apache.tomcat.jdbc.pool.DataSourceFactory\"\n            driverClassName=\"org.postgresql.Driver\"\n            url=\"jdbc:postgresql://localhost:5432/TestDB\"\n            username=\"test\"\n            password=\"test\"\n            initialSize=\"10\"\n            maxActive=\"100\"\n            maxIdle=\"50\"\n            minIdle=\"10\"\n            suspectTimeout=\"60\"\n            timeBetweenEvictionRunsMillis=\"30000\"\n            minEvictableIdleTimeMillis=\"60000\"\n            testOnBorrow=\"true\"\n            validationInterval=\"34000\"\n            validationQuery=\"SELECT 1\"\n            removeAbandoned=\"true\"\n            removeAbandonedTimeout=\"60\"\n            logAbandoned=\"true\"\n/>\n```", "```java\nPreparedStatement ps = conn.prepareStatement(\n\"INSERT INTO ACCOUNT VALUES (?, ?)\");\nfor (n = 0; n < 100; n++) {\n    ps.setInt(accountNumber[n]);\n    ps.setString(accountName[n]);\n    ps.executeUpdate();\n}\n```", "```java\nPreparedStatement ps = conn.prepareStatement(\n\"INSERT INTO ACCOUNT VALUES (?, ?)\");\nfor (n = 0; n < 100; n++) {\n    ps.setInt(accountNumber[n]);\n    ps.setString(accountName[n]);\n    ps.addBatch();\n}\nps.executeBatch();\n```"]