["```java\nRABBITMQ_HOME=D:\\Apps\\RabbitMQ Server\\rabbitmq_server-3.6.0\n```", "```java\n<dependency>\n    <groupId>org.springframework.amqp</groupId>\n    <artifactId>spring-rabbit</artifactId>\n    <version>${rabbitmq.version}</version>\n</dependency>\n```", "```java\n@Bean\npublic ConnectionFactory connectionFactory() {\n        CachingConnectionFactory connectionFactory = new \n        CachingConnectionFactory(\"localhost\");\n        connectionFactory.setUsername(\"guest\");\n        connectionFactory.setPassword(\"guest\");\n        return connectionFactory;\n}\n```", "```java\n@Bean\npublic Queue queue() {\n    return new Queue(RABBIT_MESSAGE_QUEUE, true);\n}\n```", "```java\n@Bean\npublic DirectExchange exchange() {\n    return new DirectExchange(RABBIT_MESSAGE_EXCHANGE);\n}\n```", "```java\n@Bean\nBinding exchangeBinding(DirectExchange directExchange, Queue queue) {\n    return BindingBuilder.bind(queue).\n        to(directExchange)\n        .with(ROUTING_KEY);\n}\n```", "```java\n@Bean\npublic RabbitAdmin rabbitAdmin() {\n    RabbitAdmin admin = new RabbitAdmin(connectionFactory());\n    admin.declareQueue(queue());\n    admin.declareExchange(exchange());\n    admin.declareBinding(exchangeBinding(exchange(), queue()));\n    return admin;\n}\n```", "```java\n@Bean\npublic MessageConverter messageConverter() {\n    return new Jackson2JsonMessageConverter();\n}\n```", "```java\n@Bean\npublic RabbitTemplate rabbitTemplate() {\n    RabbitTemplate template = new RabbitTemplate(connectionFactory());\n    template.setRoutingKey(ROUTING_KEY);\n    template.setExchange(RABBIT_MESSAGE_EXCHANGE);\n    template.setMessageConverter(messageConverter());\n    return template;\n}\n```", "```java\n@Bean\npublic SimpleRabbitListenerContainerFactory listenerContainer() {\n    SimpleRabbitListenerContainerFactory factory = new \n    SimpleRabbitListenerContainerFactory();\n    factory.setConnectionFactory(connectionFactory());\n    factory.setMaxConcurrentConsumers(5);\n    return factory;\n}\n```", "```java\n@Configuration\n@ComponentScan(\"com.packt.springhighperformance.ch7.bankingapp\")\n@EnableRabbit\npublic class RabbitMqConfiguration {\n\n  public static final String RABBIT_MESSAGE_QUEUE = \n  \"rabbit.queue.name\";\n  private static final String RABBIT_MESSAGE_EXCHANGE =     \n  \"rabbit.exchange.name\";\n  private static final String ROUTING_KEY = \"messages.key\";\n\n  @Bean\n  public ConnectionFactory connectionFactory() {\n    CachingConnectionFactory connectionFactory = new \n    CachingConnectionFactory(\"127.0.0.1\");\n    connectionFactory.setUsername(\"guest\");\n    connectionFactory.setPassword(\"guest\");\n    return connectionFactory;\n  }\n\n  @Bean\n  public Queue queue() {\n    return new Queue(RABBIT_MESSAGE_QUEUE, true);\n  }\n\n  @Bean\n  public DirectExchange exchange() {\n    return new DirectExchange(RABBIT_MESSAGE_EXCHANGE);\n  }\n\n  @Bean\n  Binding exchangeBinding(DirectExchange directExchange, Queue queue) {\n    return \n    BindingBuilder.bind(queue).to(directExchange).with(ROUTING_KEY);\n  }\n\n  @Bean\n  public RabbitAdmin rabbitAdmin() {\n    RabbitAdmin admin = new RabbitAdmin(connectionFactory());\n    admin.declareQueue(queue());\n    admin.declareExchange(exchange());\n    admin.declareBinding(exchangeBinding(exchange(), queue()));\n    return admin;\n  }\n\n  @Bean\n  public MessageConverter messageConverter() {\n    return new Jackson2JsonMessageConverter();\n  }\n\n  @Bean\n  public RabbitTemplate rabbitTemplate() {\n    RabbitTemplate template = new RabbitTemplate(connectionFactory());\n    template.setRoutingKey(ROUTING_KEY);\n    template.setExchange(RABBIT_MESSAGE_EXCHANGE);\n    template.setMessageConverter(messageConverter());\n    return template;\n  }\n\n  @Bean\n  public SimpleRabbitListenerContainerFactory listenerContainer() {\n    SimpleRabbitListenerContainerFactory factory = new \n    SimpleRabbitListenerContainerFactory();\n    factory.setConnectionFactory(connectionFactory());\n    factory.setMaxConcurrentConsumers(5);\n    return factory;\n  }\n\n}\n```", "```java\n@Service\npublic class Consumer {\n\n  private static final Logger LOGGER = \n  Logger.getLogger(Consumer.class);\n\n  @RabbitListener(containerFactory = \"listenerContainer\",\n  queues = RabbitMqConfiguration.RABBIT_MESSAGE_QUEUE)\n  public void onMessage(Message message) {\n      LOGGER.info(\"Received Message: \" + \n      new String(message.getBody()));\n    }\n}\n```", "```java\npublic class BankAccount {\n\n    private int accountId;\n    private String accountType;\n\n    public BankAccount(int accountId, String accountType) {\n        this.accountId = accountId;\n        this.accountType = accountType;\n    }\n\n    public int getAccountId() {\n        return accountId;\n    }\n\n    public String getAccountType() {\n        return accountType;\n    }\n\n    @Override\n    public String toString() {\n        return \"BankAccount{\" +\n                \"Account Id=\" + accountId +\n                \", Account Type='\" + accountType + '\\'' +\n                '}';\n    }\n}\n```", "```java\npublic class Producer {\n\n  private static final Logger LOGGER = \n  Logger.getLogger(Producer.class);\n\n  @SuppressWarnings(\"resource\")\n  public static void main(String[] args) {\n        ApplicationContext ctx = new \n        AnnotationConfigApplication\n        Context(RabbitMqConfiguration.class);\n        RabbitTemplate rabbitTemplate = \n        ctx.getBean(RabbitTemplate.class);\n        LOGGER.info(\"Sending bank account information....\");\n        rabbitTemplate.convertAndSend(new BankAccount(100, \"Savings \n        Account\"));\n        rabbitTemplate.convertAndSend(new BankAccount(101, \"Current \n        Account\"));\n\n    }\n\n}\n```", "```java\n2018-05-13 19:46:58 INFO Producer:17 - Sending bank account information....\n2018-05-13 19:46:58 INFO Consumer:17 - Received Message: {\"accountId\":100,\"accountType\":\"Savings Account\"}\n2018-05-13 19:46:58 INFO Consumer:17 - Received Message: {\"accountId\":101,\"accountType\":\"Current Account\"}\n```"]