["```java\npublic interface AccountRepository extends CrudRepository<Account, Long> {\n   Account findByAccountId(Long accountId);\n}\n```", "```java\n@Configuration\n@EnableTransactionManagement\n@PropertySource({ \"classpath:persistence-hibernate.properties\" })\n@ComponentScan({ \"com.packt.springhighperformance.ch6.bankingapp\" })\npublic class PersistenceJPAConfig {\n\n  @Autowired\n  private Environment env;\n\n  @Bean\n  public LocalContainerEntityManagerFactoryBean entityManagerFactory() {\n    LocalContainerEntityManagerFactoryBean em = new \n    LocalContainerEntityManagerFactoryBean();\n    em.setDataSource(dataSource());\n    em.setPackagesToScan(new String[] { \n    \"com.packt.springhighperformance\n    .ch6.bankingapp.model\" });\n\n    JpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();\n    em.setJpaVendorAdapter(vendorAdapter);\n    em.setJpaProperties(additionalProperties());\n\n    return em;\n  }\n\n  @Bean\n  public BeanPostProcessor persistenceTranslation() {\n    return new PersistenceExceptionTranslationPostProcessor();\n  }\n\n  @Bean\n  public DataSource dataSource() {\n    DriverManagerDataSource dataSource = new DriverManagerDataSource();\n    dataSource.setDriverClassName(this.env.get\n    Property(\"jdbc.driverClassName\"));\n    dataSource.setUrl(this.env.getProperty(\"jdbc.url\"));\n    dataSource.setUsername(this.env.getProperty(\"jdbc.user\"));\n    dataSource.setPassword(this.env.getProperty(\"jdbc.password\"));\n    return dataSource;\n  }\n\n  @Bean\n  public PlatformTransactionManager \n  transactionManager(EntityManagerFactory emf) {\n      JpaTransactionManager transactionManager = new         \n      JpaTransactionManager();\n      transactionManager.setEntityManagerFactory(emf);\n      return transactionManager;\n  }\n\n  @Bean\n  public PersistenceExceptionTranslationPostProcessor \n    exceptionTranslation() {\n    return new PersistenceExceptionTranslationPostProcessor();\n  }\n\n  private Properties additionalProperties() {\n    Properties properties = new Properties();\n    properties.setProperty(\"hibernate.hbm2ddl.auto\", \n    this.env.getProperty(\"hibernate.hbm2ddl.auto\"));\n    properties.setProperty(\"hibernate.dialect\", \n    this.env.getProperty(\"hibernate.dialect\"));\n    properties.setProperty(\"hibernate.generate_statistics\", \n    this.env.getProperty(\"hibernate.generate_statistics\"));\n    properties.setProperty(\"hibernate.show_sql\", \n    this.env.getProperty(\"hibernate.show_sql\"));\n    properties.setProperty(\"hibernate.cache.use_second_level_cache\", \n    this.env.getProperty(\"hibernate.cache.use_second_level_cache\"));\n    properties.setProperty(\"hibernate.cache.use_query_cache\", \n    this.env.getProperty(\"hibernate.cache.use_query_cache\"));\n    properties.setProperty(\"hibernate.cache.region.factory_class\", \n    this.env.getProperty(\"hibernate.cache.region.factory_class\"));\n\n    return properties;\n  }\n}\n```", "```java\npublic abstract class AbstractJpaDAO<T extends Serializable> {\n\n    private Class<T> clazz;\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n    public final void setClazz(final Class<T> clazzToSet) {\n        this.clazz = clazzToSet;\n    }\n\n    public T findOne(final Integer id) {\n        return entityManager.find(clazz, id);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<T> findAll() {\n        return entityManager.createQuery(\"from \" + \n        clazz.getName()).getResultList();\n    }\n\n    public void create(final T entity) {\n        entityManager.persist(entity);\n    }\n\n    public T update(final T entity) {\n        return entityManager.merge(entity);\n    }\n\n    public void delete(final T entity) {\n        entityManager.remove(entity);\n    }\n\n    public void deleteById(final Long entityId) {\n        final T entity = findOne(entityId);\n        delete(entity);\n    }\n}\n```", "```java\n@Repository\npublic class AccountDAO extends AbstractJpaDAO<Account> implements IAccountDAO {\n\n  public AccountDAO() {\n    super();\n    setClazz(Account.class);\n  }\n}\n```", "```java\n@Bean\n  public BeanPostProcessor persistenceTranslation() {\n    return new PersistenceExceptionTranslationPostProcessor();\n  }\n```", "```java\n@Configuration\n@EnableTransactionManagement\n@PropertySource({ \"classpath:persistence-hibernate.properties\" })\n@ComponentScan({ \"com.packt.springhighperformance.ch6.bankingapp\" })\n @EnableJpaRepositories(basePackages = \"com.packt.springhighperformance.ch6.bankingapp.repository\")\npublic class PersistenceJPAConfig {\n\n}\n```", "```java\nAccount account = this.em.find(Account.class, accountNumber);\nList<Transaction> lAccountTransactions = account.getTransaction();\nfor(Transaction transaction : lAccountTransactions){\n  //.....\n}\n```", "```java\n<filter>\n    <filter-name>OpenEntityManagerInViewFilter</filter-name>\n    <filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class>\n   ....\n</filter>\n...\n<filter-mapping>\n    <filter-name>OpenEntityManagerInViewFilter</filter-name>\n    <url-pattern>/*</url-pattern>\n</filter-mapping>\n```", "```java\n@Id\n@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"accountSequence\")\nprivate Integer id;\n```", "```java\n@Id\n@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"accountSequence\")\n@SequenceGenerator(name = \"accountSequence\", sequenceName = \"account_seq\", initialValue = 100000)\nprivate Long accountId;\n```", "```java\nQuery query = getEntityManager().createQuery(\"SELECT a FROM Account AS a JOIN FETCH a.transactions WHERE a.accountId=:accountId\", Account.class);\nquery.setParameter(\"accountId\", accountId);\nreturn (Account)query.getSingleResult();\n```", "```java\n2018-03-14 22:19:29 DEBUG ConcurrentStatisticsImpl:394 - HHH000117: HQL: SELECT a FROM Account AS a JOIN FETCH a.transactions WHERE a.accountId=:accountId, time: 72ms, rows: 3\nTransactions:::3\n2018-03-14 22:19:29 INFO StatisticalLoggingSessionEventListener:258 - Session Metrics {\n    26342110 nanoseconds spent acquiring 1 JDBC connections;\n    0 nanoseconds spent releasing 0 JDBC connections;\n    520204 nanoseconds spent preparing 1 JDBC statements;\n    4487788 nanoseconds spent executing 1 JDBC statements;\n    0 nanoseconds spent executing 0 JDBC batches;\n    0 nanoseconds spent performing 0 L2C puts;\n    0 nanoseconds spent performing 0 L2C hits;\n    0 nanoseconds spent performing 0 L2C misses;\n    13503978 nanoseconds spent executing 1 flushes (flushing a total of \n    4 entities and 1 collections);\n    56615 nanoseconds spent executing 1 partial-flushes (flushing a \n    total of 0 entities and 0 collections)\n}\n```", "```java\nCriteriaBuilder criteriaBuilder = \n    getEntityManager().getCriteriaBuilder();\n    CriteriaQuery<?> query = \n    criteriaBuilder.createQuery(Account.class);\n    Root root = query.from(Account.class);\n    root.fetch(\"transactions\", JoinType.INNER);\n    query.select(root);\n    query.where(criteriaBuilder.equal(root.get(\"accountId\"), \n    accountId));\n\n    return (Account)this.getEntityManager().createQuery(query)\n   .getSingleResult();\n```", "```java\n@Entity\n@NamedEntityGraph(name=\"graph.transactions\", attributeNodes= @NamedAttributeNode(\"transactions\"))\npublic class Account implements Serializable {\n\n  private static final long serialVersionUID = 1232821417960547743L;\n\n  @Id\n  @GeneratedValue(strategy = GenerationType.AUTO)\n  @Column(name = \"account_id\", updatable = false, nullable = false)\n  private Long accountId;\n  private String name;\n\n  @OneToMany(mappedBy = \"account\", fetch=FetchType.LAZY)\n  private List<Transaction> transactions = new ArrayList<Transaction>\n  ();\n.....\n}\n```", "```java\nEntityGraph<?> entityGraph = getEntityManager().createEntityGraph(\"graph.transactions\");\nQuery query = getEntityManager().createQuery(\"SELECT a FROM Account AS a WHERE a.accountId=:accountId\", Account.class);\n\nquery.setHint(\"javax.persistence.fetchgraph\", entityGraph);\nquery.setParameter(\"accountId\", accountId);\nreturn (Account)query.getSingleResult();\n```", "```java\nEntityGraph<?> entityGraph = getEntityManager().createEntityGraph(Account.class);\nentityGraph.addSubgraph(\"transactions\");\nMap<String, Object> hints = new HashMap<String, Object>();\nhints.put(\"javax.persistence.fetchgraph\", entityGraph);\n\nreturn this.getEntityManager().find(Account.class, accountId, hints);\n```", "```java\nSELECT a FROM Account a WHERE a.accountId= 123456;\n```", "```java\nSELECT a.accountId, a.name FROM Account a WHERE a.accountId = 123456;\n```", "```java\nentityManager.createQuery(\"SELECT new com.packt.springhighperformance.ch6.bankingapp.dto.AccountDto(a.id, a.name) FROM Account a\").getResultList();\n```", "```java\nCriteriaBuilder cb = em.getCriteriaBuilder();\nCriteriaQuery q = cb.createQuery(AccountDTO.class);\nRoot root = q.from(Account.class);\nq.select(cb.construct(AccountDTO.class, root.get(Account_.accountNumber), root.get(Account_.name)));\n\nList authors = em.createQuery(q).getResultList();\n```", "```java\nhibernate.cache.use_second_level_cache=true\nhibernate.cache.region.factory_class=org.hibernate.cache.ehcache.EhCacheRegionFactory\n```", "```java\n@Entity\n@Cacheable\n@org.hibernate.annotations.Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\npublic class Account implements Serializable {\n\n}\n```", "```java\n<ehcache>\n    <cache \n    name=\"com.packt.springhighperformance.ch6.bankingapp.model.Account\"     \n    maxElementsInMemory=\"1000\" timeToIdleSeconds=\"0\"     \n    timeToLiveSeconds=\"10\"/>\n</ehcache>\n```", "```java\nhibernate.cache.use_query_cache=true\n```", "```java\nQuery query = entityManager.createQuery(\"SELECT a FROM Account a WHERE a.accountId=:accountId\", Account.class);\nquery.setParameter(\"accountId\", 7L);\nquery.setHint(QueryHints.HINT_CACHEABLE, true);\nAccount account = (Account)query.getSingleResult();\n```", "```java\n2018-03-17 15:39:07 DEBUG StandardQueryCache:181 - Returning cached query results\n2018-03-17 15:39:07 DEBUG SQL:92 - select account0_.account_id as account_1_0_0_, account0_.name as name2_0_0_ from Account account0_ where account0_.account_id=?\n```", "```java\nentityManager.createNativeQuery(\"UPDATE mails p SET read = 'Y' WHERE user_id=?\").setParameter(0, 123456).executeUpdate();\n```", "```java\nprivate void performBulkUpdateIssue(){\n    Account account = this.entityManager.find(Account.class, 7L);\n\n    entityManager.createNativeQuery(\"UPDATE account a SET name = \n    name \n    || '-updated'\").executeUpdate();\n    _logger.warn(\"Issue with Account Name: \"+account.getName());\n\n    account = this.entityManager.find(Account.class, 7L);\n    _logger.warn(\"Issue with Account Name: \"+account.getName());\n  }\n```", "```java\nprivate void performBulkUpdateResolution(){\n    //make sure you are passing right account id    \n    Account account = this.entityManager.find(Account.class, 7L);\n\n //remove from persistence context\n entityManager.flush();\n entityManager.detach(account);\n    entityManager.createNativeQuery(\"UPDATE account a SET name = \n    name \n    || '-changed'\").executeUpdate();\n    _logger.warn(\"Resolution Account Name: \"+account.getName());\n\n    account = this.entityManager.find(Account.class, 7L);\n    _logger.warn(\"Resolution Account Name: \"+account.getName());\n  }\n```", "```java\nQuery nativeQuery = entityManager.createNativeQuery(\"update Account set name='xyz' where name='abc'\");\n\nnativeQuery.unwrap(org.hibernate.SQLQuery.class).addSynchronizedEntityClass(Account.class);\n\nnativeQuery.executeUpdate();\n```", "```java\n@OneToMany(mappedBy = \"account\", fetch=FetchType.LAZY)\n@OrderBy(\"created DESC\")\nprivate List<Transaction> transactions = new ArrayList<Transaction>();\n```", "```java\n@Entity\npublic class Account {\n\n    @Id\n    @GeneratedValue\n    private Integer id;\n\n @OneToMany(mappedBy = \"account\")\n    private List<Transaction> transactions = new ArrayList<>();\n\n    public void addTransaction(Transaction transaction) {\n transactions.add(transaction);\n transaction.setPost(this);\n }\n\n public void removeTransaction(Transaction transaction) {\n transactions.remove(transaction);\n transaction.setPost(null);\n }\n}\n\n@Entity\npublic class Transaction {\n\n    @Id\n    @GeneratedValue\n    private Integer id;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n @JoinColumn(name = \"account_id\")\n    private Account account;\n}\n\n```"]