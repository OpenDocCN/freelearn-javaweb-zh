["```java\n  <servlet>\n    <servlet-name>spring-mvc</servlet-name>\n    <servlet-class>\n      org.springframework.web.servlet.DispatcherServlet\n    </servlet-class>\n    <init-param>\n      <param-name>contextConfigLocation</param-name>\n      <param-value>/WEB-INF/spring-mvc-context.xml</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n  </servlet>\n\n  <servlet-mapping>\n    <servlet-name>spring-mvc</servlet-name>\n    <url-pattern>/</url-pattern>\n  </servlet-mapping>\n```", "```java\n<beans>\n<!-- Schema definitions are skipped. -->\n<context:component-scan base-            package=\"com.packt.springhighperformance.ch4.controller\" />\n<mvc:annotation-driven />\n</beans>\n```", "```java\n<beans>\n<!-- Schema definitions are skipped. -->\n<context:component-scan base- package=\"com.packt.springhighperformance.ch4.controller\" />\n<mvc:annotation-driven />\n\n<bean\n class=\"org.springframework.web.servlet.view.InternalResourceViewResolv  er\">\n    <property name=\"prefix\">\n      <value>/WEB-INF/views/</value>\n    </property>\n    <property name=\"suffix\">\n      <value>.jsp</value>\n    </property>\n  </bean>\n</beans>\n```", "```java\nimport org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;\n\npublic class SpringMvcWebInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {\n\n  @Override\n  protected Class<?>[] getRootConfigClasses() {\n    return null;\n  }\n\n  @Override\n  protected Class<?>[] getServletConfigClasses() {\n    return new Class[] { SpringMvcWebConfig.class };\n  }\n\n  @Override\n  protected String[] getServletMappings() {\n    return new String[] { \"/\" };\n  }\n}\n```", "```java\n@Configuration\n@EnableWebMvc\n@ComponentScan({ \"com.packt.springhighperformance.ch4.bankingapp.controller\"})\npublic class SpringMvcWebConfig implements WebMvcConfigurer {\n\n  @Bean\n  public InternalResourceViewResolver resolver() {\n    InternalResourceViewResolver resolver = new \n    InternalResourceViewResolver();\n    resolver.setPrefix(\"/WEB-INF/views/\");\n    resolver.setSuffix(\".jsp\");\n    return resolver;\n  }\n\n}\n```", "```java\npackage com.packt.springhighperformance.ch4.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class BankController {\n\n  @RequestMapping(value = \"/home\")\n  public String home() {\n    return \"home\";\n  }\n}\n```", "```java\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<title>Spring MVC</title>\n</head>\n<body>\n  <h2>Welcome to Bank</h2>\n</body>\n</html>\n```", "```java\n@Configuration\n@EnableAsync\npublic class SpringAppAsyncConfig { ... }\n```", "```java\n<task:executor id=\"myappexecutor\" pool-size=\"10\" />\n<task:annotation-driven executor=\"myappexecutor\"/>\n```", "```java\n@Async\npublic void syncCustomerAccounts() {\n    logger.info(\"Customer accounts synced successfully.\");\n}\n```", "```java\n@Service\npublic class BankAsyncService {\n\n  private static final Logger LOGGER = \n  Logger.getLogger(BankAsyncService.class);\n\n  @Async\n    public Future<String> syncCustomerAccount() throws \n    InterruptedException {\n    LOGGER.info(\"Sync Account Processing Started - Thread id: \" + \n    Thread.currentThread().getId());\n\n    Thread.sleep(2000);\n\n    String processInfo = String.format(\"Sync Account Processing \n    Completed - Thread Name= %d, Thread Name= %s\", \n    Thread.currentThread().getId(), \n    Thread.currentThread().getName());\n\n    LOGGER.info(processInfo);\n\n    return new AsyncResult<String>(processInfo);\n    }\n}\n```", "```java\n@Override\npublic void configureAsyncSupport(AsyncSupportConfigurer configurer) {\n    ThreadPoolTaskExecutor t = new ThreadPoolTaskExecutor();\n        t.setCorePoolSize(10);\n        t.setMaxPoolSize(100);\n        t.setThreadNamePrefix(\"BankAccountSync\");\n        t.initialize();\n        configurer.setTaskExecutor(t);\n}\n```", "```java\n@Controller\npublic class BankController {\n\n  private static final Logger LOGGER = Logger.getLogger(BankAsyncService.class);\n\n  @Autowired\n  BankAsyncService syncService;\n\n  @RequestMapping(value = \"/syncacct\")\n  @ResponseBody\n  public Callable<String> syncAccount() {\n    LOGGER.info(\"Entering in controller\");\n\n    Callable<String> asyncTask = new Callable<String>() {\n\n      @Override\n      public String call() throws Exception {\n        Future<String> processSync = syncService.syncCustomerAccount();\n        return processSync.get();\n      }\n    };\n\n    LOGGER.info(\"Leaving from controller\");\n    return asyncTask;\n  }\n}\n```", "```java\nCompletableFuture<String> completableFuture = new CompletableFuture<String>();\n```", "```java\ncompletableFuture.complete(\"Future is completed\")\n```", "```java\n@RequestMapping(value = \"/synccust\")\n  @ResponseBody\n  public CompletableFuture<String> syncCustomerDetails() {\n    LOGGER.info(\"Entering in controller\");\n\n    CompletableFuture<String> completableFuture = new \n    CompletableFuture<>();\n    CompletableFuture.runAsync(new Runnable() {\n\n      @Override\n      public void run() {\n        try {           \n           completableFuture.complete(syncService.syncCustomerAccount()\n           .get());\n        } catch (InterruptedException | ExecutionException e) {\n          completableFuture.completeExceptionally(e);\n        }\n\n      }\n    }); \n      LOGGER.info(\"Leaving from controller\");\n      return completableFuture;\n  }\n```", "```java\n@RequestMapping(value = \"/synccustbal\")\n  @ResponseBody\n  public CompletableFuture<String> syncCustomerBalance() {\n    LOGGER.info(\"Entering in controller\");\n\n    CompletableFuture<String> completableFuture = \n    CompletableFuture.supplyAsync(new Supplier<String>() {\n\n      @Override\n      public String get() {\n        try {\n          return syncService.syncCustomerBalance().get();\n        } catch (InterruptedException | ExecutionException e) {\n          LOGGER.error(e);\n        }\n        return \"No balance found\";\n      }\n    }); \n      LOGGER.info(\"Leaving from controller\");\n      return completableFuture;\n  }\n```", "```java\nCompletableFuture<Void> runAsync(Runnable runnable)\nCompletableFuture<Void> runAsync(Runnable runnable, Executor executor)\nCompletableFuture<U> supplyAsync(Supplier<U> supplier)\nCompletableFuture<U> supplyAsync(Supplier<U> supplier, Executor executor)\n```", "```java\n<!-- spring security -->\n<dependency>\n    <groupId>org.springframework.security</groupId>\n    <artifactId>spring-security-web</artifactId>\n    <version>${spring.framework.version}</version>\n</dependency>\n<dependency>\n    <groupId>org.springframework.security</groupId>\n    <artifactId>spring-security-config</artifactId>\n    <version>${spring.framework.version}</version>\n</dependency>\n```", "```java\n<filter>\n    <filter-name>springSecurityFilterChain</filter-name>\n    <filter-class>\n        org.springframework.web.filter.DelegatingFilterProxy\n    </filter-class>\n</filter>\n<filter-mapping>\n    <filter-name>springSecurityFilterChain</filter-name>\n    <url-pattern>/*</url-pattern>\n</filter-mapping>\n```", "```java\n@EnableWebSecurity\npublic class SpringMvcSecurityConfig extends WebSecurityConfigurerAdapter {\n\n  @Autowired\n  PasswordEncoder passwordEncoder;\n\n  @Override\n  protected void configure(AuthenticationManagerBuilder auth)       \n  throws   \n  Exception {\n    auth\n    .inMemoryAuthentication()\n    .passwordEncoder(passwordEncoder)\n    .withUser(\"user\").password(passwordEncoder.encode(\"user@123\"))\n    .roles(\"USER\")\n    .and()\n    .withUser(\"admin\").password(passwordEncoder.\n    encode(\"admin@123\")        \n    ).roles(\"USER\", \"ADMIN\");\n  }\n\n  @Bean\n  public PasswordEncoder passwordEncoder() {\n      return new BCryptPasswordEncoder();\n  }\n\n  @Override\n  protected void configure(HttpSecurity http) throws Exception {\n     http.authorizeRequests()\n    .antMatchers(\"/login\").permitAll()\n    .antMatchers(\"/admin/**\").hasRole(\"ADMIN\")\n    .antMatchers(\"/**\").hasAnyRole(\"ADMIN\",\"USER\")\n    .and().formLogin()\n    .and().logout().logoutSuccessUrl(\"/login\").permitAll()\n    .and()\n    .csrf().disable();\n  }\n}\n```", "```java\n@Controller\npublic class BankController {\n\n  @GetMapping(\"/\")\n  public ModelAndView home(Principal principal) {\n    ModelAndView model = new ModelAndView();\n    model.addObject(\"title\", \"Welcome to Bank\");\n    model.addObject(\"message\", \"Hi \" + principal.getName());\n    model.setViewName(\"index\");\n    return model;\n  }\n\n  @GetMapping(\"/admin**\")\n  public ModelAndView adminPage() {\n    ModelAndView model = new ModelAndView();\n    model.addObject(\"title\", \"Welcome to Admin Panel\");\n    model.addObject(\"message\", \"This is secured page - Admin \n    Panel\");\n    model.setViewName(\"admin\");\n    return model;\n  }\n\n  @PostMapping(\"/logout\")\n  public String logout(HttpServletRequest request, \n  HttpServletResponse \n  response) {\n    Authentication auth = \n    SecurityContextHolder.getContext().getAuthentication();\n    if (auth != null) {\n      new SecurityContextLogoutHandler().logout(request, response, \n      auth);\n      request.getSession().invalidate();\n    }\n    return \"redirect:/login\";\n  }\n}\n```", "```java\ncurl -sL --connect-timeout 1 -i http://localhost:8080/authentication-cache/secure/login -H \"Authorization: Basic Y3VzdDAwMTpUZXN0QDEyMw==\"\n```", "```java\n21:53:46.302 RDS DEBUG JdbcTemplate - Executing prepared SQL query\n21:53:46.302 RDS DEBUG JdbcTemplate - Executing prepared SQL statement [select username,password,enabled from users where username = ?]\n21:53:46.302 RDS DEBUG DataSourceUtils - Fetching JDBC Connection from DataSource\n21:53:46.302 RDS DEBUG SimpleDriverDataSource - Creating new JDBC Driver Connection to [jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false]\n21:53:46.307 RDS DEBUG DataSourceUtils - Returning JDBC Connection to DataSource\n21:53:46.307 RDS DEBUG JdbcTemplate - Executing prepared SQL query\n21:53:46.307 RDS DEBUG JdbcTemplate - Executing prepared SQL statement [select username,authority from authorities where username = ?]\n21:53:46.307 RDS DEBUG DataSourceUtils - Fetching JDBC Connection from DataSource\n21:53:46.307 RDS DEBUG SimpleDriverDataSource - Creating new JDBC Driver Connection to [jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false]\n21:53:46.307 RDS DEBUG DataSourceUtils - Returning JDBC Connection to DataSource\n```", "```java\n@Configuration\n@EnableCaching\npublic class SpringMvcCacheConfig {\n\n  @Bean\n  public EhCacheFactoryBean ehCacheFactoryBean() {\n    EhCacheFactoryBean ehCacheFactory = new EhCacheFactoryBean();\n    ehCacheFactory.setCacheManager(cacheManagerFactoryBean()\n    .getObject());\n    return ehCacheFactory;\n  }\n\n  @Bean\n  public CacheManager cacheManager() {\n    return new         \n    EhCacheCacheManager(cacheManagerFactoryBean().getObject());\n  }\n\n  @Bean\n  public EhCacheManagerFactoryBean cacheManagerFactoryBean() {\n    EhCacheManagerFactoryBean cacheManager = new \n    EhCacheManagerFactoryBean();\n    return cacheManager;\n  }\n\n  @Bean\n  public UserCache userCache() {\n    EhCacheBasedUserCache userCache = new EhCacheBasedUserCache();\n    userCache.setCache(ehCacheFactoryBean().getObject());\n    return userCache;\n  }\n}\n```", "```java\n@Bean\npublic AuthenticationProvider authenticationProviderBean() {\n     DaoAuthenticationProvider authenticationProvider = new              \n     DaoAuthenticationProvider();\n     authenticationProvider.setPasswordEncoder(passwordEncoder);\n     authenticationProvider.setUserCache(userCache);\n     authenticationProvider.\n     setUserDetailsService(userDetailsService());\n     return authenticationProvider;\n}\n```", "```java\n@Autowired\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws     \n    Exception {\n\n       auth\n         .eraseCredentials(false)\n         //Providing AuthenticationProvider to \n          AuthenticationManagerBuilder.\n         .authenticationProvider(authenticationProviderBean())\n         .jdbcAuthentication()\n         .dataSource(dataSource); \n    }\n```", "```java\n22:46:55.314 RDS DEBUG EhCacheBasedUserCache - Cache hit: false; username: cust001\n22:46:55.447 RDS DEBUG JdbcTemplate - Executing prepared SQL query\n22:46:55.447 RDS DEBUG JdbcTemplate - Executing prepared SQL statement [select username,password,enabled from users where username = ?]\n22:46:55.447 RDS DEBUG DataSourceUtils - Fetching JDBC Connection from DataSource\n22:46:55.447 RDS DEBUG SimpleDriverDataSource - Creating new JDBC Driver Connection to [jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false]\n22:46:55.463 RDS DEBUG DataSourceUtils - Returning JDBC Connection to DataSource\n22:46:55.463 RDS DEBUG JdbcTemplate - Executing prepared SQL query\n22:46:55.463 RDS DEBUG JdbcTemplate - Executing prepared SQL statement [select username,authority from authorities where username = ?]\n22:46:55.463 RDS DEBUG DataSourceUtils - Fetching JDBC Connection from DataSource\n22:46:55.463 RDS DEBUG SimpleDriverDataSource - Creating new JDBC Driver Connection to [jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false]\n22:46:55.479 RDS DEBUG DataSourceUtils - Returning JDBC Connection to DataSource\n22:46:55.603 RDS DEBUG EhCacheBasedUserCache - Cache put: cust001\n22:47:10.118 RDS DEBUG EhCacheBasedUserCache - Cache hit: true; username: cust001\n22:47:12.619 RDS DEBUG EhCacheBasedUserCache - Cache hit: true; username: cust001\n22:47:14.851 RDS DEBUG EhCacheBasedUserCache - Cache hit: true; username: cust001\n```", "```java\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n      http\n        .authorizeRequests()\n        .anyRequest().authenticated()\n        .and()\n        .httpBasic();\n}\n```", "```java\nC:\\>curl -sL --connect-timeout 1 -i http://localhost:8080/fast-api-spring-security/secure/login/ -H \"Authorization: Basic Y3VzdDAwMTpDdXN0QDEyMw==\"\nHTTP/1.1 200 OK\nServer: Apache-Coyote/1.1\nSet-Cookie: JSESSIONID=B85E9773E6C1E71CE0EC1AD11D897529; Path=/fast-api-spring-security; HttpOnly\nX-Content-Type-Options: nosniff\nX-XSS-Protection: 1; mode=block\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\nPragma: no-cache\nExpires: 0\nX-Frame-Options: DENY\nContent-Type: text/plain;charset=ISO-8859-1\nContent-Length: 19\nDate: Tue, 27 Mar 2018 18:07:43 GMT\n\nWelcome to the Bank\n```", "```java\nC:\\>curl -sL --connect-timeout 1 -i http://localhost:8080/fast-api-spring-security/secure/login/ -H \"Authorization: Basic Y3VzdDAwMTpDdXN0QDEyMw==\"\nHTTP/1.1 200 OK\nServer: Apache-Coyote/1.1\nSet-Cookie: JSESSIONID=14FEB3708295324482BE1DD600D015CC; Path=/fast-api-spring-security; HttpOnly\nX-Content-Type-Options: nosniff\nX-XSS-Protection: 1; mode=block\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\nPragma: no-cache\nExpires: 0\nX-Frame-Options: DENY\nContent-Type: text/plain;charset=ISO-8859-1\nContent-Length: 19\nDate: Tue, 27 Mar 2018 18:07:47 GMT\n\nWelcome to the Bank\n```", "```java\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n      http\n      .sessionManagement()\n        .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n        .and()\n        .authorizeRequests()\n        .anyRequest().authenticated()\n        .and()\n        .httpBasic();\n}\n```", "```java\nC:\\>curl -sL --connect-timeout 1 -i http://localhost:8080/fast-api-spring-security/secure/login/ -H \"Authorization: Basic Y3VzdDAwMTpDdXN0QDEyMw==\"\nHTTP/1.1 200 OK\nServer: Apache-Coyote/1.1\nX-Content-Type-Options: nosniff\nX-XSS-Protection: 1; mode=block\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\nPragma: no-cache\nExpires: 0\nX-Frame-Options: DENY\nContent-Type: text/plain;charset=ISO-8859-1\nContent-Length: 19\nDate: Tue, 27 Mar 2018 18:24:32 GMT\n\nWelcome to the Bank\n```", "```java\n-Dcom.sun.management.jmxremote \n-Dcom.sun.management.jmxremote.port={port to access} \n-Dcom.sun.management.jmxremote.authenticate=false \n-Dcom.sun.management.jmxremote.ssl=false\n```", "```java\nset JAVA_OPTS=\"-Dcom.sun.management.jmxremote\n-Dcom.sun.management.jmxremote.port=8990\n-Dcom.sun.management.jmxremote.authenticate=false\n-Dcom.sun.management.jmxremote.ssl=false\"\n```", "```java\n-Dcom.sun.management.jmxremote\n-Dcom.sun.management.jmxremote.port=8990\n-Dcom.sun.management.jmxremote.authenticate=false\n-Dcom.sun.management.jmxremote.ssl=false\n```", "```java\n@Component\n@ManagedResource(objectName = \"com.packt.springhighperformance.ch4.mbeans : name=BankMoneyTransferService\", description = \"Transfers money from one account to another\")\npublic class BankMoneyTransferService {\n\n  private Map<String, Integer> accountMap = new HashMap<String, \n  Integer>();\n   {\n    accountMap.put(\"12345\", 20000);\n    accountMap.put(\"54321\", 10000);\n   };\n\n  @ManagedOperation(description = \"Amount transfer\")\n  @ManagedOperationParameters({\n      @ManagedOperationParameter(name = \"sourceAccount\", description = \n       \"Transfer from account\"),\n      @ManagedOperationParameter(name = \"destinationAccount\",         \n        description = \"Transfer to account\"),\n      @ManagedOperationParameter(name = \"transferAmount\", \n      description = \n        \"Amount to be transfer\") })\n  public void transfer(String sourceAccount, String     \n  destinationAccount, int transferAmount) {\n    if (transferAmount == 0) {\n      throw new IllegalArgumentException(\"Invalid amount\");\n    }\n    int sourceAcctBalance = accountMap.get(sourceAccount);\n    int destinationAcctBalance = accountMap.get(destinationAccount);\n\n    if ((sourceAcctBalance - transferAmount) < 0) {\n      throw new IllegalArgumentException(\"Not enough balance.\");\n    }\n    sourceAcctBalance = sourceAcctBalance - transferAmount;\n    destinationAcctBalance = destinationAcctBalance + transferAmount;\n\n    accountMap.put(sourceAccount, sourceAcctBalance);\n    accountMap.put(destinationAccount, destinationAcctBalance);\n  }\n\n  @ManagedOperation(description = \"Check Balance\")\n  public int checkBalance(String accountNumber) {\n    if (StringUtils.isEmpty(accountNumber)) {\n      throw new IllegalArgumentException(\"Enter account no.\");\n    }\n    if (!accountMap.containsKey(accountNumber)) {\n      throw new IllegalArgumentException(\"Account not found.\");\n    }\n    return accountMap.get(accountNumber);\n  }\n\n}\n```", "```java\n<context:mbean-export/>\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans><!-- Skipped schema definitions -->\n\n  <context:component-scan base-\n   package=\"com.packt.springhighperformance.ch4.mbeans\" /> \n\n<context:mbean-export/>\n\n</beans>\n```", "```java\n@Transactional(readOnly=true)\npublic void performanceTestMethod() {\n    ....\n}\n```", "```java\nentityManager.flush();\nentityManager.clear();\n```"]