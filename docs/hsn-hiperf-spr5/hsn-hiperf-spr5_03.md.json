["```java\npublic class TransferServiceImpl implements TransferService {\n  public void transfer(Account source, Account dest, Double amount) {\n    //permission check\n    if (!hasPermission(user) {\n      throw new AuthorizationException();\n    }\n  }\n}\n\npublic class AccountServiceImpl implements AccountService {\n  public void withdraw(Account userAccount, Double amount) {\n    //Permission check\n    if (!hasPermission(user) {\n      throw new AuthorizationException();\n    }\n}\n```", "```java\n[Modifiers] ReturnType [ClassType]\nMethodName ([Arguments]) [throws ExceptionType]\n```", "```java\n@Pointcut(\"execution(* com.packt.springhighperformance.ch03.bankingapp.service.TransferService.transfer(..))\")\npublic void transfer() {}\n\n@Before(\"transfer()\")\npublic void beforeTransfer(JoinPoint joinPoint){\n  LOGGGER.info(\"validate account balance before transferring amount\");\n}\n```", "```java\n@Pointcut(\"execution(* com.packt.springhighperformance.ch03.bankingapp.service.TransferService.transfer(..))\")\npublic void transfer() {}\n\n@After(\"transfer()\")\npublic void afterTransfer(JoinPoint joinPoint){\n  LOGGGER.info(\"Successfully transferred from source account to dest     \n  account\");\n}\n```", "```java\n@Pointcut(\"execution(* com.packt.springhighperformance.ch03.bankingapp.service.TransferService.transfer(..))\")\npublic void transfer() {}\n\n@AfterReturning(pointcut=\"transfer() and args(source, dest, amount)\", returning=\"isTransferSuccessful\" )\npublic void afterTransferReturns(JoinPoint joinPoint, Account source, Account dest, Double amount, boolean isTransferSuccessful){\n  if(isTransferSuccessful){\n    LOGGGER.info(\"Amount transferred successfully \");\n    //find remaining balance of source account\n  }\n}\n```", "```java\n@Pointcut(\"execution(* com.packt.springhighperformance.ch03.bankingapp.service.TransferService.transfer(..))\")\npublic void transfer() {}\n\n@AfterThrowing(pointcut = \"transfer()\", throwing = \"minimumAmountException\")\npublic void exceptionFromTransfer(JoinPoint joinPoint, MinimumAmountException minimumAmountException) {\n  LOGGGER.info(\"Exception thrown from transfer method: \" +         \n  minimumAmountException.getMessage());\n}\n```", "```java\n@Pointcut(\"execution(* com.packt.springhighperformance.ch03.bankingapp.service.TransferService.transfer(..))\")\npublic void transfer() {}\n\n@Around(\"transfer()\")\npublic boolean aroundTransfer(ProceedingJoinPoint proceedingJoinPoint){\n  LOGGER.info(\"Inside Around advice, before calling transfer method \");\n  boolean isTransferSuccessful = false;\n  try {\n    isTransferSuccessful = (Boolean)proceedingJoinPoint.proceed();\n  } catch (Throwable e) {\n    LOGGER.error(e.getMessage(), e);\n  }\n  LOGGER.info(\"Inside Around advice, after returning from transfer \n  method\");\n  return isTransferSuccessful;\n}\n```", "```java\n@Aspect(\"perthis(com.packt.springhighperformance.ch03.bankingapp.service.TransferService.transfer())\")\npublic class TransferAspect {\n//Add your per instance attributes holding private data\n//Define your advice methods\n}\n```", "```java\npublic class TransferServiceImpl implements TransferService {\n  private static final Logger LOGGER =     \n  Logger.getLogger(TransferServiceImpl.class);\n\n  @Override\n  public boolean transfer(Account source, Account dest, Double amount) {\n    // transfer amount from source account to dest account\n    LOGGER.info(\"Transferring \" + amount + \" from \" + \n    source.getAccountName() + \" \n    to \" +   dest.getAccountName());\n    ((TransferService)\n    (AopContext.currentProxy())).checkBalance(source);\n    return true;\n  }\n\n  @Override\n  public double checkBalance(Account a) {\n    return 0;\n  }\n}\n```", "```java\npublic class TransferInterceptor implements MethodBeforeAdvice{\n\n   private static final Logger LOGGER =  \n   Logger.getLogger(TransferInterceptor.class);\n\n @Override\n public void before(Method arg0, Object[] arg1, Object arg2) throws   \n Throwable {\n    LOGGER.info(\"transfer intercepted\");\n }\n}\n```", "```java\n@Configuration\npublic class ProxyFactoryBeanConfig {\n\n  @Bean\n  public Advisor transferServiceAdvisor() {\n      AspectJExpressionPointcut pointcut = new \n      AspectJExpressionPointcut();\n      pointcut.setExpression(\"execution(* \n      com.packt.springhighperformance.ch03.bankingapp.service\n      .TransferService.checkBalance(..))\");\n      return new DefaultPointcutAdvisor(pointcut, new \n      TransferInterceptor());\n  }\n\n  @Bean\n  public ProxyFactoryBean transferService(){\n    ProxyFactoryBean proxyFactoryBean = new ProxyFactoryBean();\n    proxyFactoryBean.setTarget(new TransferServiceImpl());\n    proxyFactoryBean.addAdvisor(transferServiceAdvisor());\n    proxyFactoryBean.setExposeProxy(true);\n    return proxyFactoryBean;\n  }\n}\n```", "```java\n@EnableAspectJAutoProxy\n@Configuration\npublic class CGLIBProxyAppConfig {\n\n  @Bean\n  @Scope(proxyMode=ScopedProxyMode.TARGET_CLASS)\n  public TransferService transferService(){\n    return new TransferServiceImpl();\n  }\n}\n```", "```java\n@Configuration\n@EnableAspectJAutoProxy\npublic class JDKProxyAppConfig {\n\n @Bean\n @Scope(proxyMode=ScopedProxyMode.INTERFACES)\n public TransferService transferService(){\n return new TransferServiceImpl();\n }\n}\n```", "```java\npublic class TestSpringProxyOverhead {\n  private static final Logger LOGGER = \n  Logger.getLogger(TestSpringProxyOverhead.class);\n\n  @Test\n  public void checkProxyPerformance() {\n    int countofObjects = 3000;\n    TransferServiceImpl[] unproxiedClasses = new \n    TransferServiceImpl[countofObjects];\n    for (int i = 0; i < countofObjects; i++) {\n      unproxiedClasses[i] = new TransferServiceImpl();\n    }\n\n    TransferService[] cglibProxyClasses = new     \n    TransferService[countofObjects];\n    TransferService transferService = null;\n    for (int i = 0; i < countofObjects; i++) {\n      transferService = new \n      AnnotationConfigApplicationContext(CGLIBProxyAppConfig.class)\n      .getBean(TransferService.class);\n      cglibProxyClasses[i] = transferService;\n    }\n\n    TransferService[] jdkProxyClasses = new \n    TransferService[countofObjects];\n    for (int i = 0; i < countofObjects; i++) {\n      transferService = new \n      AnnotationConfigApplicationContext(JDKProxyAppConfig.class)\n      .getBean(TransferService.class);\n      jdkProxyClasses[i] = transferService;\n    }\n\n    long timeTookForUnproxiedObjects = \n    invokeTargetObjects(countofObjects, \n    unproxiedClasses);\n    displayResults(\"Unproxied\", timeTookForUnproxiedObjects);\n\n    long timeTookForJdkProxiedObjects = \n    invokeTargetObjects(countofObjects, \n    jdkProxyClasses);\n    displayResults(\"Proxy\", timeTookForJdkProxiedObjects);\n\n    long timeTookForCglibProxiedObjects = \n    invokeTargetObjects(countofObjects, \n    cglibProxyClasses);\n    displayResults(\"cglib\", timeTookForCglibProxiedObjects);\n\n  }\n\n  private void displayResults(String label, long timeTook) {\n  LOGGER.info(label + \": \" + timeTook + \"(ns) \" + (timeTook / 1000000) \n  + \"(ms)\");\n  }\n\n  private long invokeTargetObjects(int countofObjects, \n  TransferService[] classes) {\n    long start = System.nanoTime();\n    Account source = new Account(123456, \"Account1\");\n    Account dest = new Account(987654, \"Account2\");\n    for (int i = 0; i < countofObjects; i++) {\n      classes[i].transfer(source, dest, 100);\n    }\n    long end = System.nanoTime();\n    long execution = end - start;\n    return execution;\n  }\n}\n```", "```java\n2018-02-06 22:05:01 INFO TestSpringProxyOverhead:52 - Unproxied: 155897(ns) 0(ms)\n2018-02-06 22:05:01 INFO TestSpringProxyOverhead:52 - Proxy: 23215161(ns) 23(ms)\n2018-02-06 22:05:01 INFO TestSpringProxyOverhead:52 - cglib: 30276077(ns) 30(ms)\n```", "```java\n@Cacheable(\"accounts\")\npublic Account findAccountById(int accountId){\n```", "```java\n@Cacheable(\"accounts\" key=\"#accountId\")\npublic Account findAccountById(int accountId){\n\n@CachePut(\"accounts\" key=\"#account.accountId\")\npublic Account createAccount(Account account){\n```", "```java\n@Bean\npublic CacheManager cacheManager() {\n  CacheManager cacheManager = new SimpleCacheManager();\n  cacheManager.setCaches(Arrays.asList(new     \n  ConcurrentMapCache(\"accounts\"));\n  return cacheManager;\n}\n```", "```java\npublic class TransferServiceImpl implements TransferService {\n\n  private static final Logger LOGGER = \n  LogManager.getLogger(TransferServiceImpl.class);\n\n  @Override\n  public boolean transfer(Account source, Account dest, int amount) {\n    // transfer amount from source account to dest account\n    LOGGER.info(\"Transferring \" + amount + \" from \" + \n    source.getAccountName() + \" \n    to \" + dest.getAccountName());\n    try {\n      Thread.sleep(5000);\n    } catch (InterruptedException e) {\n      LOGGER.error(e);\n    }\n    return true;\n  }\n}\n```", "```java\n@Aspect \npublic class TransferMonitoringAspect {\n\n    @Pointcut(\"execution(*          \n    com.packt.springhighperformance.ch03.bankingapp.service\n    .TransferService.transfer(..))\")\n    public void transfer() { }\n}\n```", "```java\npublic class PerformanceMonitorAdvisor extends DefaultPointcutAdvisor {\n\n private static final long serialVersionUID = -3049371771366224728L;\n\n public PerformanceMonitorAdvisor(PerformanceMonitorInterceptor \n performanceMonitorInterceptor) {\n AspectJExpressionPointcut pointcut = new AspectJExpressionPointcut();\n pointcut.setExpression(\n \"com.packt.springhighperformance.ch03.bankingapp.aspect.TransferMonito  ringAspect.transfer()\");\n this.setPointcut(pointcut);\n this.setAdvice(performanceMonitorInterceptor);\n }\n}\n```", "```java\n@EnableAspectJAutoProxy\n@Configuration\npublic class PerformanceInterceptorAppConfig {\n  @Bean\n  public TransferService transferService() {\n    return new TransferServiceImpl();\n  }\n\n  @Bean\n  public PerformanceMonitorInterceptor performanceMonitorInterceptor() {\n    return new PerformanceMonitorInterceptor(true);\n  }\n\n  @Bean\n  public TransferMonitoringAspect transferAspect() {\n    return new TransferMonitoringAspect();\n  }\n\n  @Bean\n  public PerformanceMonitorAdvisor performanceMonitorAdvisor() {\n    return new \n    PerformanceMonitorAdvisor(performanceMonitorInterceptor());\n  }\n}\n```", "```java\n2018-02-07 22:14:53 TRACE TransferServiceImpl:222 - StopWatch 'com.packt.springhighperformance.ch03.bankingapp.service.TransferService.transfer': running time (millis) = 5000\n```", "```java\npublic class CustomPerformanceMonitorInterceptor extends AbstractMonitoringInterceptor {\n\n    private static final long serialVersionUID = -4060921270422590121L;\n    public CustomPerformanceMonitorInterceptor() {\n    }\n\n    public CustomPerformanceMonitorInterceptor(boolean \n    useDynamicLogger) {\n            setUseDynamicLogger(useDynamicLogger);\n    }\n\n    @Override\n    protected Object invokeUnderTrace(MethodInvocation invocation, Log \n    log) \n      throws Throwable {\n        String name = createInvocationTraceName(invocation);\n        long start = System.currentTimeMillis();\n        log.info(\"Method \" + name + \" execution started at:\" + new \n        Date());\n        try {\n            return invocation.proceed();\n        }\n        finally {\n            long end = System.currentTimeMillis();\n            long time = end - start;\n            log.info(\"Method \"+name+\" execution lasted:\"+time+\" ms\");\n            log.info(\"Method \"+name+\" execution ended at:\"+new Date());\n\n            if (time > 5){\n                log.warn(\"Method execution took longer than 5 ms!\");\n            } \n        }\n    }\n}\n```", "```java\n2018-02-07 22:23:44 INFO TransferServiceImpl:32 - Method com.packt.springhighperformance.ch03.bankingapp.service.TransferService.transfer execution lasted:5001 ms\n2018-02-07 22:23:44 INFO TransferServiceImpl:33 - Method com.packt.springhighperformance.ch03.bankingapp.service.TransferService.transfer execution ended at:Wed Feb 07 22:23:44 EST 2018\n2018-02-07 22:23:44 WARN TransferServiceImpl:36 - Method execution took longer than 5 ms!\n```", "```java\npublic aspect TransferAspect {\n    pointcut callTransfer(Account acc1, Account acc2, int amount) : \n     call(public * TransferService.transfer(..));\n\n    boolean around(Account acc1, Account acc2, int amount) : \n      callTransfer(acc1, acc2,amount) {\n        if (acc1.balance < amount) {\n            return false;\n        }\n        return proceed(acc1, acc2,amount);\n    }\n}\n```", "```java\n<plugin>\n    <groupId>org.codehaus.mojo</groupId>\n    <artifactId>aspectj-maven-plugin</artifactId>\n    <version>1.11</version>\n    <configuration>\n        <complianceLevel>1.8</complianceLevel>\n        <source>1.8</source>\n        <target>1.8</target>\n        <showWeaveInfo>true</showWeaveInfo>\n        <verbose>true</verbose>\n        <Xlint>ignore</Xlint>\n        <encoding>UTF-8 </encoding>\n    </configuration>\n    <executions>\n        <execution>\n            <goals>\n                <!-- use this goal to weave all your main classes -->\n                <goal>compile</goal>\n                <!-- use this goal to weave all your test classes -->\n                <goal>test-compile</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```", "```java\n<configuration>\n    <weaveDependencies>\n        <weaveDependency> \n            <groupId>org.agroup</groupId>\n            <artifactId>to-weave</artifactId>\n        </weaveDependency>\n        <weaveDependency>\n            <groupId>org.anothergroup</groupId>\n            <artifactId>gen</artifactId>\n        </weaveDependency>\n    </weaveDependencies>\n</configuration>\n```", "```java\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-surefire-plugin</artifactId>\n    <version>2.20.1</version>\n    <configuration>\n        <argLine>\n            -javaagent:\"${settings.localRepository}\"/org/aspectj/\n            aspectjweaver/${aspectj.version}/\n            aspectjweaver-${aspectj.version}.jar\n        </argLine>\n        <useSystemClassLoader>true</useSystemClassLoader>\n        <forkMode>always</forkMode>\n    </configuration>\n</plugin>\n```", "```java\n<aspectj>\n    <aspects>\n        <aspect name=\"com.packt.springhighperformance.ch3.bankingapp.\n        aspectj.TransferAspect\"/>\n        <weaver options=\"-verbose -showWeaveInfo\">\n            <include         \n            within=\"com.packt.springhighperformance.ch3.bankingapp\n            .service.impl.TransferServiceImpl\"/>\n        </weaver>\n    </aspects>\n</aspectj>\n```", "```java\n<!DOCTYPE aspectj PUBLIC \"-//AspectJ//DTD//EN\" \"http://www.eclipse.org/aspectj/dtd/aspectj.dtd\">\n<aspectj>\n    <weaver>\n        <!-- only weave classes in our application-specific packages --\n        >\n        <include within=\"com.packt.springhighperformance.ch3.bankingapp\n        .service.impl.TransferServiceImpl\"/>\n        <include within=\"com.packt.springhighperformance.ch3.bankingapp\n        .aspects.TransferServiceAspect\"/>\n    </weaver>\n    <aspects>\n        <!-- weave in just this aspect -->\n        <aspect name=\"com.packt.springhighperformance.ch3.bankingapp\n        .aspects.TransferServiceAspect\"/>\n    </aspects>\n</aspectj>\n```", "```java\n@Pointcut(\"execution(public * *(..))\")\nprivate void anyPublicMethod() {}\n\n@Pointcut(\"within(com.packt.springhighperformance.ch3.bankingapp.TransferService..*)\")\nprivate void transfer() {}\n\n@Pointcut(\"anyPublicMethod() && transfer()\")\nprivate void transferOperation() {}\n\n```", "```java\n@Aspect\npublic class MethodProfilingAspect {\n\n  @Around(\"execution(* \n  com.packt.springhighperformance.ch3.bankingapp.*.*(..))\")\n  public Object log(ProceedingJoinPoint joinPoint){\n    System.out.println(\"Before \n    Around\"+joinPoint.getTarget().getClass().getName());\n    Object retVal = null;\n    try {\n       retVal = joinPoint.proceed();\n    } catch (Throwable e) {\n      e.printStackTrace();\n    }\n    System.out.println(\"After \n    Around\"+joinPoint.getTarget().getClass().getName());\n    return retVal;\n  }\n```", "```java\n@Aspect\npublic class ValidatingAspect {\n\n @Autowired\n private ValidateService validateService;\n\n @Before(\"execution(*   \n com.packt.springhighperformance.ch3.bankingapp.TransferService.tran\n sfe  r(..))\")\n public void validate(JoinPoint jp){\n validateService.validateAccountNumber();\n }\n}\n```", "```java\n@Component\npublic class ValidateDefault{\n\n  @Autowired\n  private ValidateService validateService;\n  public void validate(JoinPoint jp){\n        validateService.validateAccountNumber();\n    }\n}\n```", "```java\n@Aspect\npublic class ValidatingAspect {\n\n @Autowired\n private ValidateDefault validateDefault;\n\n @Before(\"execution(* com.packt.springhighperformance.ch3.bankingapp.TransferService.transfer(..))\")\n public void validate(JoinPoint jp){\n\n```", "```java\n validateDefault.validate(jp);\n }\n}\n```"]