["```java\npublic class ThreadExample {\n  public static void main(String[] args) {\n    Thread t = new Thread(new MyThread());\n    t.start();\n  }\n}\nclass MyThread implements Runnable {\n  private static final Logger LOGGER =     \n  Logger.getLogger(MyThread.class);\n  public void run() {\n    //perform some task\n    LOGGER.info(\"Hello from thread...\");\n  }\n}\n```", "```java\nRunnable runnable = () -> LOGGER.info(\"Hello from thread...\");\nThread t = new Thread(runnable);\n```", "```java\npublic class ThreadExample1 {\n  public static void main(String[] args) {\n    MyThread t = new MyThread1();\n    t.start();\n  }\n\n}\nclass MyThread1 extends Thread {\n  private static final Logger LOGGER = \n  Logger.getLogger(MyThread1.class);\n  public void run() {\n    LOGGER.info(\"Hello from thread...\");\n  }\n}\n```", "```java\npublic class ExecutorExample {\n    private static final Logger LOGGER = \n    Logger.getLogger(ExecutorExample.class);\n\n    public static void main(String[] args) {\n        ExecutorService pool = Executors.newSingleThreadExecutor();\n\n            Runnable task = new Runnable() {\n            public void run() {\n                LOGGER.info(Thread.currentThread().getName());\n            }\n        }; \n\n        pool.execute(task); \n        pool.shutdown();\n    }\n}\n```", "```java\npool-1-thread-1\n```", "```java\npublic class ThreadFactoryExample implements ThreadFactory {\n  private static final Logger LOGGER =   \n  Logger.getLogger(ThreadFactoryExample.class);\n\n  public static void main(String[] args) {\n    ThreadFactoryExample factory = new ThreadFactoryExample();\n\n    Runnable task = new Runnable() {\n      public void run() {\n        LOGGER.info(Thread.currentThread().getName());\n      }\n    };\n    for (int i = 0; i < 5; i++) {\n      Thread t = factory.newThread(task);\n      t.start();\n    }\n  }\n\n  @Override\n  public Thread newThread(Runnable r) {\n    Thread t = new Thread(r);\n    return t;\n  }\n}\n```", "```java\nThread-0\nThread-1\n```", "```java\npublic class ThreadPoolExample {\n  private static final Logger LOGGER = \n  Logger.getLogger(ThreadPoolExample.class);\n  public static void main(String[] args) {\n    ExecutorService executor = Executors.newFixedThreadPool(3);\n\n    for (int i = 1; i <= 6; i++) {\n      Runnable task = new Task(\" \" + i);\n      executor.execute(task);\n    }\n    executor.shutdown();\n    while (!executor.isTerminated()) {\n    }\n    LOGGER.info(\"All threads finished\");\n  }\n}\n```", "```java\npublic class Task implements Runnable {\n  private static final Logger LOGGER = Logger.getLogger(Task.class);\n  private String taskNumber;\n\n  public Task(String taskNumber) {\n    this.taskNumber = taskNumber;\n  }\n\n  @Override\n  public void run() {\n    LOGGER.info(Thread.currentThread().getName() + \", Execute Task = \" \n    + taskNumber);\n    taskProcess();\n    LOGGER.info(Thread.currentThread().getName() + \", End\");\n  }\n\n  private void taskProcess() {\n    try {\n      Thread.sleep(2000);\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n  }\n}\n```", "```java\npool-1-thread-1, Execute Task = 1\npool-1-thread-2, Execute Task = 2\npool-1-thread-3, Execute Task = 3\npool-1-thread-1, End\npool-1-thread-1, Execute Task = 4\npool-1-thread-3, End\npool-1-thread-2, End\npool-1-thread-2, Execute Task = 5\npool-1-thread-3, Execute Task = 6\npool-1-thread-1, End\npool-1-thread-2, End\npool-1-thread-3, End\nAll threads finished\n```", "```java\n@Configuration\npublic class AppConfig {\n  @Bean\n  AsyncTask myBean() {\n    return new AsyncTask();\n  }\n  @Bean\n  AsyncTaskExecutor taskExecutor() {\n    SimpleAsyncTaskExecutor t = new SimpleAsyncTaskExecutor();\n    return t;\n  }\n}\n```", "```java\npublic class AsyncTask {\n  @Autowired\n  private AsyncTaskExecutor executor;\n  public void runTasks() throws Exception {\n    for (int i = 1; i <= 5; i++) {\n      Runnable task = new Task(\" \" + i);\n      executor.execute(task);\n    }\n  }\n}\n```", "```java\npublic class TaskExecutorExample {\n  public static void main(String[] args) throws Exception {\n    ApplicationContext context = new \n    AnnotationConfigApplicationContext(AppConfig.class);\n    AsyncTask bean = context.getBean(AsyncTask.class);\n    bean.runTasks();\n  }\n}\n```", "```java\nSimpleAsyncTaskExecutor-1, Execute Task = 1\nSimpleAsyncTaskExecutor-4, Execute Task = 4\nSimpleAsyncTaskExecutor-3, Execute Task = 3\nSimpleAsyncTaskExecutor-2, Execute Task = 2\nSimpleAsyncTaskExecutor-5, Execute Task = 5\nSimpleAsyncTaskExecutor-2, End\nSimpleAsyncTaskExecutor-1, End\nSimpleAsyncTaskExecutor-4, End\nSimpleAsyncTaskExecutor-3, End\nSimpleAsyncTaskExecutor-5, End\n```", "```java\n@Configuration\n@EnableScheduling\npublic class SpringSchedulingExample {\n    private static final Logger LOGGER =                                                     \n    Logger.getLogger(SpringSchedulingExample.class);\n    @Scheduled(fixedDelay = 2000)\n    public void scheduledTask() {\n        LOGGER.info(\"Execute task \" + new Date());\n    }\n\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new \n        AnnotationConfigApplicationContext(\n        SpringSchedulingExample.class);\n        String scheduledAnnotationProcessor =         \n        \"org.springframework.context.annotation.\n        internalScheduledAnnotationProcessor\";\n        LOGGER.info(\"ContainsBean : \" + scheduledAnnotationProcessor + \n        \": \" + context.containsBean(scheduledAnnotationProcessor));\n        try {\n            Thread.sleep(12000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            context.close();\n        }\n    }\n} \n```", "```java\n@Scheduled(fixedRate = 2000)\n@Scheduled(cron = \"*/2 * * * * SAT,SUN,MON\")\n```", "```java\nExecute task Thu May 10 20:18:04 IST 2018\nContainsBean : org.springframework.context.annotation.internalScheduledAnnotationProcessor: true\nExecute task Thu May 10 20:18:06 IST 2018\nExecute task Thu May 10 20:18:08 IST 2018\nExecute task Thu May 10 20:18:10 IST 2018\nExecute task Thu May 10 20:18:12 IST 2018\nExecute task Thu May 10 20:18:14 IST 2018\n```", "```java\n@Configuration\n@EnableAsync\npublic class AppConfig {\n  @Bean\n  public AsyncTask asyncTask() {\n    return new AsyncTask();\n  }\n}\n```", "```java\npublic class AsyncTask {\n  private static final Logger LOGGER = \n  Logger.getLogger(AsyncTask.class);\n  @Async\n  public void doAsyncTask() {\n    try {\n      LOGGER.info(\"Running Async task thread : \" + \n      Thread.currentThread().getName());\n    } catch (Exception e) {\n    }\n  }\n}\n```", "```java\n@Async\n  public Future<String> doAsyncTaskWithReturnType() {\n    try \n    {\n      return new AsyncResult<String>(\"Running Async task thread : \" + \n      Thread.currentThread().getName());\n    } \n    catch (Exception e) { \n    }\n    return null;\n  }\n```", "```java\npublic class asyncExample {\n  private static final Logger LOGGER = \n  Logger.getLogger(asyncExample.class);\n  public static void main(String[] args) throws InterruptedException {\n    AnnotationConfigApplicationContext ctx = new \n    AnnotationConfigApplicationContext();\n    ctx.register(AppConfig.class);\n    ctx.refresh();\n    AsyncTask task = ctx.getBean(AsyncTask.class);\n    LOGGER.info(\"calling async method from thread : \" + \n    Thread.currentThread().getName());\n    task.doAsyncTask();\n    LOGGER.info(\"Continue doing something else. \");\n    Thread.sleep(1000);\n  }\n}\n```", "```java\ncalling async method from thread : main\nContinue doing something else. \nRunning Async Task thread : SimpleAsyncTaskExecutor-1\n```", "```java\nCompletableFuture<String> completableFuture = new CompletableFuture<String>();\n```", "```java\npublic abstract class TransactionSynchronizationManager {\n  private static final Log logger =         \n  LogFactory.getLog(TransactionSynchronizationManager.class);\n  private static final ThreadLocal<Map<Object, Object>> resources = new  \n  NamedThreadLocal(\"Transactional resources\");\n  private static final ThreadLocal<Set<TransactionSynchronization>> \n  synchronizations = new NamedThreadLocal(\"Transaction \n  synchronizations\");\n  private static final ThreadLocal<String> currentTransactionName = new \n  NamedThreadLocal(\"Current transaction name\");\n  private static final ThreadLocal<Boolean> currentTransactionReadOnly \n  = new NamedThreadLocal(\"Current transaction read-only status\");\n  private static final ThreadLocal<Integer> \n  currentTransactionIsolationLevel = new NamedThreadLocal(\"Current \n  transaction isolation level\");\n  private static final ThreadLocal<Boolean> actualTransactionActive = \n  new NamedThreadLocal(\"Actual transaction active\");\n}\n```"]